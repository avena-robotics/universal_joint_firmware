
universal_joint_2.2_MC547_RI70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b588  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800b760  0800b760  0001b760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b0  0800b8b0  00020de4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8b0  0800b8b0  0001b8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8b8  0800b8b8  00020de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8b8  0800b8b8  0001b8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8bc  0800b8bc  0001b8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000de4  20000000  0800b8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000de4  0800c6a4  00020de4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  0800c6a4  00021580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020de4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00048f40  00000000  00000000  00020e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0006ebd1  00000000  00000000  00069d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009505  00000000  00000000  000d8925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002078  00000000  00000000  000e1e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00105567  00000000  00000000  000e3ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005a00  00000000  00000000  001e9410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000296e4  00000000  00000000  001eee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cc95  00000000  00000000  002184f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  00245189  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006588  00000000  00000000  0024525c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000de4 	.word	0x20000de4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b748 	.word	0x0800b748

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000de8 	.word	0x20000de8
 8000214:	0800b748 	.word	0x0800b748

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96e 	b.w	8000d98 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	4604      	mov	r4, r0
 8000adc:	468c      	mov	ip, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8083 	bne.w	8000bea <__udivmoddi4+0x116>
 8000ae4:	428a      	cmp	r2, r1
 8000ae6:	4617      	mov	r7, r2
 8000ae8:	d947      	bls.n	8000b7a <__udivmoddi4+0xa6>
 8000aea:	fab2 f282 	clz	r2, r2
 8000aee:	b142      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000af0:	f1c2 0020 	rsb	r0, r2, #32
 8000af4:	fa24 f000 	lsr.w	r0, r4, r0
 8000af8:	4091      	lsls	r1, r2
 8000afa:	4097      	lsls	r7, r2
 8000afc:	ea40 0c01 	orr.w	ip, r0, r1
 8000b00:	4094      	lsls	r4, r2
 8000b02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b06:	0c23      	lsrs	r3, r4, #16
 8000b08:	fbbc f6f8 	udiv	r6, ip, r8
 8000b0c:	fa1f fe87 	uxth.w	lr, r7
 8000b10:	fb08 c116 	mls	r1, r8, r6, ip
 8000b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b18:	fb06 f10e 	mul.w	r1, r6, lr
 8000b1c:	4299      	cmp	r1, r3
 8000b1e:	d909      	bls.n	8000b34 <__udivmoddi4+0x60>
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b26:	f080 8119 	bcs.w	8000d5c <__udivmoddi4+0x288>
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	f240 8116 	bls.w	8000d5c <__udivmoddi4+0x288>
 8000b30:	3e02      	subs	r6, #2
 8000b32:	443b      	add	r3, r7
 8000b34:	1a5b      	subs	r3, r3, r1
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b48:	45a6      	cmp	lr, r4
 8000b4a:	d909      	bls.n	8000b60 <__udivmoddi4+0x8c>
 8000b4c:	193c      	adds	r4, r7, r4
 8000b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b52:	f080 8105 	bcs.w	8000d60 <__udivmoddi4+0x28c>
 8000b56:	45a6      	cmp	lr, r4
 8000b58:	f240 8102 	bls.w	8000d60 <__udivmoddi4+0x28c>
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	443c      	add	r4, r7
 8000b60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b64:	eba4 040e 	sub.w	r4, r4, lr
 8000b68:	2600      	movs	r6, #0
 8000b6a:	b11d      	cbz	r5, 8000b74 <__udivmoddi4+0xa0>
 8000b6c:	40d4      	lsrs	r4, r2
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e9c5 4300 	strd	r4, r3, [r5]
 8000b74:	4631      	mov	r1, r6
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	b902      	cbnz	r2, 8000b7e <__udivmoddi4+0xaa>
 8000b7c:	deff      	udf	#255	; 0xff
 8000b7e:	fab2 f282 	clz	r2, r2
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	d150      	bne.n	8000c28 <__udivmoddi4+0x154>
 8000b86:	1bcb      	subs	r3, r1, r7
 8000b88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8c:	fa1f f887 	uxth.w	r8, r7
 8000b90:	2601      	movs	r6, #1
 8000b92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b96:	0c21      	lsrs	r1, r4, #16
 8000b98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0xe4>
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0xe2>
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	f200 80e9 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	1ac9      	subs	r1, r1, r3
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc8:	fb08 f800 	mul.w	r8, r8, r0
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x10c>
 8000bd0:	193c      	adds	r4, r7, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x10a>
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	f200 80d9 	bhi.w	8000d90 <__udivmoddi4+0x2bc>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 0408 	sub.w	r4, r4, r8
 8000be4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be8:	e7bf      	b.n	8000b6a <__udivmoddi4+0x96>
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0x12e>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	f000 80b1 	beq.w	8000d56 <__udivmoddi4+0x282>
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f683 	clz	r6, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d14a      	bne.n	8000ca0 <__udivmoddi4+0x1cc>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0x140>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80b8 	bhi.w	8000d84 <__udivmoddi4+0x2b0>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0103 	sbc.w	r1, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	468c      	mov	ip, r1
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d0a8      	beq.n	8000b74 <__udivmoddi4+0xa0>
 8000c22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0xa0>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c30:	4097      	lsls	r7, r2
 8000c32:	fa01 f002 	lsl.w	r0, r1, r2
 8000c36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3a:	40d9      	lsrs	r1, r3
 8000c3c:	4330      	orrs	r0, r6
 8000c3e:	0c03      	lsrs	r3, r0, #16
 8000c40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb06 f108 	mul.w	r1, r6, r8
 8000c54:	4299      	cmp	r1, r3
 8000c56:	fa04 f402 	lsl.w	r4, r4, r2
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x19c>
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c62:	f080 808d 	bcs.w	8000d80 <__udivmoddi4+0x2ac>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 808a 	bls.w	8000d80 <__udivmoddi4+0x2ac>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	443b      	add	r3, r7
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b281      	uxth	r1, r0
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c80:	fb00 f308 	mul.w	r3, r0, r8
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x1c4>
 8000c88:	1879      	adds	r1, r7, r1
 8000c8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c8e:	d273      	bcs.n	8000d78 <__udivmoddi4+0x2a4>
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d971      	bls.n	8000d78 <__udivmoddi4+0x2a4>
 8000c94:	3802      	subs	r0, #2
 8000c96:	4439      	add	r1, r7
 8000c98:	1acb      	subs	r3, r1, r3
 8000c9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c9e:	e778      	b.n	8000b92 <__udivmoddi4+0xbe>
 8000ca0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ca4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cac:	431c      	orrs	r4, r3
 8000cae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cbe:	431f      	orrs	r7, r3
 8000cc0:	0c3b      	lsrs	r3, r7, #16
 8000cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc6:	fa1f f884 	uxth.w	r8, r4
 8000cca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000cd6:	458a      	cmp	sl, r1
 8000cd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x220>
 8000ce2:	1861      	adds	r1, r4, r1
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	d248      	bcs.n	8000d7c <__udivmoddi4+0x2a8>
 8000cea:	458a      	cmp	sl, r1
 8000cec:	d946      	bls.n	8000d7c <__udivmoddi4+0x2a8>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4421      	add	r1, r4
 8000cf4:	eba1 010a 	sub.w	r1, r1, sl
 8000cf8:	b2bf      	uxth	r7, r7
 8000cfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d06:	fb00 f808 	mul.w	r8, r0, r8
 8000d0a:	45b8      	cmp	r8, r7
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0x24a>
 8000d0e:	19e7      	adds	r7, r4, r7
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d22e      	bcs.n	8000d74 <__udivmoddi4+0x2a0>
 8000d16:	45b8      	cmp	r8, r7
 8000d18:	d92c      	bls.n	8000d74 <__udivmoddi4+0x2a0>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4427      	add	r7, r4
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	eba7 0708 	sub.w	r7, r7, r8
 8000d26:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2a:	454f      	cmp	r7, r9
 8000d2c:	46c6      	mov	lr, r8
 8000d2e:	4649      	mov	r1, r9
 8000d30:	d31a      	bcc.n	8000d68 <__udivmoddi4+0x294>
 8000d32:	d017      	beq.n	8000d64 <__udivmoddi4+0x290>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x27a>
 8000d36:	ebb3 020e 	subs.w	r2, r3, lr
 8000d3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d42:	40f2      	lsrs	r2, r6
 8000d44:	ea4c 0202 	orr.w	r2, ip, r2
 8000d48:	40f7      	lsrs	r7, r6
 8000d4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	462e      	mov	r6, r5
 8000d58:	4628      	mov	r0, r5
 8000d5a:	e70b      	b.n	8000b74 <__udivmoddi4+0xa0>
 8000d5c:	4606      	mov	r6, r0
 8000d5e:	e6e9      	b.n	8000b34 <__udivmoddi4+0x60>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e6fd      	b.n	8000b60 <__udivmoddi4+0x8c>
 8000d64:	4543      	cmp	r3, r8
 8000d66:	d2e5      	bcs.n	8000d34 <__udivmoddi4+0x260>
 8000d68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d70:	3801      	subs	r0, #1
 8000d72:	e7df      	b.n	8000d34 <__udivmoddi4+0x260>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7d2      	b.n	8000d1e <__udivmoddi4+0x24a>
 8000d78:	4660      	mov	r0, ip
 8000d7a:	e78d      	b.n	8000c98 <__udivmoddi4+0x1c4>
 8000d7c:	4681      	mov	r9, r0
 8000d7e:	e7b9      	b.n	8000cf4 <__udivmoddi4+0x220>
 8000d80:	4666      	mov	r6, ip
 8000d82:	e775      	b.n	8000c70 <__udivmoddi4+0x19c>
 8000d84:	4630      	mov	r0, r6
 8000d86:	e74a      	b.n	8000c1e <__udivmoddi4+0x14a>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	4439      	add	r1, r7
 8000d8e:	e713      	b.n	8000bb8 <__udivmoddi4+0xe4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	e724      	b.n	8000be0 <__udivmoddi4+0x10c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da2:	490e      	ldr	r1, [pc, #56]	; (8000ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <LoopForever+0xe>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <LoopForever+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dc6:	f004 fbe9 	bl	800559c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f00a fc91 	bl	800b6f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f001 fcff 	bl	80027d0 <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   r0, =_estack
 8000dd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	20000de4 	.word	0x20000de4
  ldr r2, =_sidata
 8000de0:	0800b8c0 	.word	0x0800b8c0
  ldr r2, =_sbss
 8000de4:	20000de4 	.word	0x20000de4
  ldr r4, =_ebss
 8000de8:	20001580 	.word	0x20001580

08000dec <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <BusFault_Handler>
	...

08000df0 <get_sector_number_from_calibration>:
// l - poczatek, r - koniec, x - szukane, arr - lista
// l - lewy sektor, r - prawy sektor, x - ma730, o - offset
#pragma GCC push_options
#pragma GCC optimize ("O0")
int16_t get_sector_number_from_calibration(uint16_t left_index, uint16_t right_index, uint16_t ma730_value, uint16_t offset)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	4603      	mov	r3, r0
 8000e04:	80bb      	strh	r3, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	807b      	strh	r3, [r7, #2]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	803b      	strh	r3, [r7, #0]
    if (right_index >= left_index) {
 8000e0e:	88ba      	ldrh	r2, [r7, #4]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d364      	bcc.n	8000ee0 <get_sector_number_from_calibration+0xf0>
    	int16_t mid = left_index + (right_index - left_index) / 2; // srodek
 8000e16:	88ba      	ldrh	r2, [r7, #4]
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	0fda      	lsrs	r2, r3, #31
 8000e1e:	4413      	add	r3, r2
 8000e20:	105b      	asrs	r3, r3, #1
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4413      	add	r3, r2
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	817b      	strh	r3, [r7, #10]

    	uint32_t mid_left_value  = g_joint_configuration.calibration_table_1[mid];    // wartosc lewego brzegu sektora
 8000e2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e30:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <get_sector_number_from_calibration+0xfc>)
 8000e32:	330c      	adds	r3, #12
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	88db      	ldrh	r3, [r3, #6]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    	uint32_t mid_right_value = g_joint_configuration.calibration_table_2[mid];    // wartosc prawego brzegu sektora
 8000e3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e42:	4a2a      	ldr	r2, [pc, #168]	; (8000eec <get_sector_number_from_calibration+0xfc>)
 8000e44:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	88db      	ldrh	r3, [r3, #6]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	613b      	str	r3, [r7, #16]
    	uint32_t searched_value  = ma730_value; // wartosc szukana
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	60fb      	str	r3, [r7, #12]

    	// Przesuniecie wartosci o offset, by funkcja byla w całej długości ciągła
    	if (mid_left_value <= offset)
 8000e56:	883b      	ldrh	r3, [r7, #0]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d803      	bhi.n	8000e66 <get_sector_number_from_calibration+0x76>
    	{
    		mid_left_value += 16384;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e64:	617b      	str	r3, [r7, #20]
    	}

    	if (mid_right_value <= offset)
 8000e66:	883b      	ldrh	r3, [r7, #0]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d803      	bhi.n	8000e76 <get_sector_number_from_calibration+0x86>
    	{
    		mid_right_value += 16384;
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e74:	613b      	str	r3, [r7, #16]
    	}

    	if (searched_value <= offset)
 8000e76:	883b      	ldrh	r3, [r7, #0]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d803      	bhi.n	8000e86 <get_sector_number_from_calibration+0x96>
    	{
    		searched_value += 16384;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e84:	60fb      	str	r3, [r7, #12]
    	}

        // If the element is present at the middle
        // itself
		if (searched_value >= mid_left_value && searched_value <= mid_right_value ) // czy jest w sektorze srodkowym - jezeli tak, to koniec
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d306      	bcc.n	8000e9c <get_sector_number_from_calibration+0xac>
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d802      	bhi.n	8000e9c <get_sector_number_from_calibration+0xac>
		{
			return mid; // dobry sektor
 8000e96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e9a:	e023      	b.n	8000ee4 <get_sector_number_from_calibration+0xf4>
		}

    	if (left_index == right_index) {
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d102      	bne.n	8000eaa <get_sector_number_from_calibration+0xba>
    		return -1;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	e01c      	b.n	8000ee4 <get_sector_number_from_calibration+0xf4>
    	}

        // If element is smaller than mid, then
        // it can only be present in left subarray
        if (mid_left_value > searched_value) // element jest mniejszsy niz srodkowy
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d90c      	bls.n	8000ecc <get_sector_number_from_calibration+0xdc>
        {
			uint16_t index = get_sector_number_from_calibration(left_index, mid - 1, ma730_value, offset); // szukaj z lewej strony
 8000eb2:	897b      	ldrh	r3, [r7, #10]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	883b      	ldrh	r3, [r7, #0]
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	88f8      	ldrh	r0, [r7, #6]
 8000ebe:	f7ff ff97 	bl	8000df0 <get_sector_number_from_calibration>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	813b      	strh	r3, [r7, #8]
			return index;
 8000ec6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000eca:	e00b      	b.n	8000ee4 <get_sector_number_from_calibration+0xf4>
        }

        // Else the element can only be present
        // in right subarray
        return get_sector_number_from_calibration(mid + 1, right_index, ma730_value, offset);  // szukaj z prawej strony
 8000ecc:	897b      	ldrh	r3, [r7, #10]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b298      	uxth	r0, r3
 8000ed2:	883b      	ldrh	r3, [r7, #0]
 8000ed4:	887a      	ldrh	r2, [r7, #2]
 8000ed6:	88b9      	ldrh	r1, [r7, #4]
 8000ed8:	f7ff ff8a 	bl	8000df0 <get_sector_number_from_calibration>
 8000edc:	4603      	mov	r3, r0
 8000ede:	e001      	b.n	8000ee4 <get_sector_number_from_calibration+0xf4>
    }

    // We reach here when element is not
    // present in array
    return -1; // element poza sektorami
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	20000000 	.word	0x20000000

08000ef0 <motor_start>:
#pragma GCC pop_options

void motor_start(Motor_Mode_t mode, int16_t goal)
{
 8000ef0:	b508      	push	{r3, lr}
	g_motor_command.goal = goal;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <motor_start+0x40>)
 8000ef4:	8019      	strh	r1, [r3, #0]
//	g_motor_command.last_goal = goal;
	g_motor_command.mode = mode;
 8000ef6:	7298      	strb	r0, [r3, #10]

	switch (mode)
 8000ef8:	b120      	cbz	r0, 8000f04 <motor_start+0x14>
 8000efa:	2801      	cmp	r0, #1
 8000efc:	d00d      	beq.n	8000f1a <motor_start+0x2a>
			break;
		}

		default:
		{
			g_motor_command.goal = 0;
 8000efe:	2200      	movs	r2, #0
 8000f00:	801a      	strh	r2, [r3, #0]
			return;
		}
	}

	MC_StartMotor1();
}
 8000f02:	bd08      	pop	{r3, pc}
			g_motor_command.state = MOTOR_STARTED_IN_TORQUE_MODE;
 8000f04:	2201      	movs	r2, #1
 8000f06:	72da      	strb	r2, [r3, #11]
			MC_ProgramTorqueRampMotor1(g_motor_command.goal, 0);
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	b218      	sxth	r0, r3
 8000f0e:	f001 ffdf 	bl	8002ed0 <MC_ProgramTorqueRampMotor1>
}
 8000f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MC_StartMotor1();
 8000f16:	f001 bfc7 	b.w	8002ea8 <MC_StartMotor1>
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	72da      	strb	r2, [r3, #11]
			MC_ProgramSpeedRampMotor1(g_motor_command.goal, 0);
 8000f1e:	8818      	ldrh	r0, [r3, #0]
 8000f20:	2100      	movs	r1, #0
 8000f22:	b200      	sxth	r0, r0
 8000f24:	f001 ffcc 	bl	8002ec0 <MC_ProgramSpeedRampMotor1>
}
 8000f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MC_StartMotor1();
 8000f2c:	f001 bfbc 	b.w	8002ea8 <MC_StartMotor1>
 8000f30:	20000e8c 	.word	0x20000e8c

08000f34 <FSM_Set_State>:
}

bool FSM_Set_State(FSM_State_t new_state) // FIXME running transition should block changing state to new one - add flagg transition is running
{

	switch (new_state)
 8000f34:	2864      	cmp	r0, #100	; 0x64
 8000f36:	d028      	beq.n	8000f8a <FSM_Set_State+0x56>
 8000f38:	d814      	bhi.n	8000f64 <FSM_Set_State+0x30>
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	d02d      	beq.n	8000f9a <FSM_Set_State+0x66>
 8000f3e:	2803      	cmp	r0, #3
 8000f40:	d105      	bne.n	8000f4e <FSM_Set_State+0x1a>
}


FSM_State_t FSM_Get_State(void)
{
	return g_fsm_status.state;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <FSM_Set_State+0x8c>)
 8000f44:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_READY_TO_OPERATE)
 8000f46:	2a02      	cmp	r2, #2
 8000f48:	d011      	beq.n	8000f6e <FSM_Set_State+0x3a>
	return false;
 8000f4a:	2000      	movs	r0, #0
}
 8000f4c:	4770      	bx	lr
	switch (new_state)
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	d1fb      	bne.n	8000f4a <FSM_Set_State+0x16>
	return g_fsm_status.state;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <FSM_Set_State+0x8c>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_START)
 8000f56:	b362      	cbz	r2, 8000fb2 <FSM_Set_State+0x7e>
	return g_fsm_status.state;
 8000f58:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_FAULT)
 8000f5a:	2aff      	cmp	r2, #255	; 0xff
 8000f5c:	d1f5      	bne.n	8000f4a <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 8000f5e:	220f      	movs	r2, #15
 8000f60:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_FAULT_TO_INIT);
 8000f62:	4770      	bx	lr
	switch (new_state)
 8000f64:	28fe      	cmp	r0, #254	; 0xfe
 8000f66:	d006      	beq.n	8000f76 <FSM_Set_State+0x42>
 8000f68:	28ff      	cmp	r0, #255	; 0xff
 8000f6a:	d0ea      	beq.n	8000f42 <FSM_Set_State+0xe>
 8000f6c:	e7ed      	b.n	8000f4a <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 8000f6e:	220c      	movs	r2, #12
 8000f70:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_READY_TO_OPERATE_TO_OPERATION_ENABLE);
 8000f72:	2001      	movs	r0, #1
 8000f74:	4770      	bx	lr
	return g_fsm_status.state;
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <FSM_Set_State+0x8c>)
 8000f78:	7813      	ldrb	r3, [r2, #0]
			if (FSM_Get_State() != FSM_START)
 8000f7a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0e4      	beq.n	8000f4c <FSM_Set_State+0x18>
	g_fsm_status.state = new_transition;
 8000f82:	230e      	movs	r3, #14
 8000f84:	7013      	strb	r3, [r2, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_FAULT_REACTION_ACTIVE_TO_FAULT);
 8000f86:	2001      	movs	r0, #1
 8000f88:	4770      	bx	lr
	return g_fsm_status.state;
 8000f8a:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <FSM_Set_State+0x8c>)
 8000f8c:	7813      	ldrb	r3, [r2, #0]
			if (FSM_Get_State() == FSM_INIT)
 8000f8e:	2b01      	cmp	r3, #1
	return g_fsm_status.state;
 8000f90:	b2d8      	uxtb	r0, r3
			if (FSM_Get_State() == FSM_INIT)
 8000f92:	d1da      	bne.n	8000f4a <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 8000f94:	236e      	movs	r3, #110	; 0x6e
 8000f96:	7013      	strb	r3, [r2, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_INIT_TO_CALIBRATION_PHASE_0);
 8000f98:	4770      	bx	lr
	return g_fsm_status.state;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <FSM_Set_State+0x8c>)
 8000f9c:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_INIT)
 8000f9e:	2a01      	cmp	r2, #1
	return g_fsm_status.state;
 8000fa0:	b2d0      	uxtb	r0, r2
			if (FSM_Get_State() == FSM_INIT)
 8000fa2:	d009      	beq.n	8000fb8 <FSM_Set_State+0x84>
	return g_fsm_status.state;
 8000fa4:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_OPERATION_ENABLE)
 8000fa6:	2a03      	cmp	r2, #3
 8000fa8:	d1cf      	bne.n	8000f4a <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 8000faa:	220d      	movs	r2, #13
 8000fac:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_OPERATION_ENABLE_TO_READY_TO_OPERATE);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	4770      	bx	lr
	g_fsm_status.state = new_transition;
 8000fb2:	220a      	movs	r2, #10
 8000fb4:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_START_TO_INIT);
 8000fb6:	4770      	bx	lr
	g_fsm_status.state = new_transition;
 8000fb8:	220b      	movs	r2, #11
 8000fba:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_INIT_TO_READY_TO_OPERATE);
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000e68 	.word	0x20000e68
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <HAL_FDCAN_RxFifo0Callback>:
//#else

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8000fc8:	07ca      	lsls	r2, r1, #31
 8000fca:	d400      	bmi.n	8000fce <HAL_FDCAN_RxFifo0Callback+0x6>
 8000fcc:	4770      	bx	lr
{
 8000fce:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	{

		// RETRIEVE CAN MESSAGE -------------------------------------------------------------------------
		HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &g_can_rx_header, g_can_rx_data);
 8000fd2:	4e75      	ldr	r6, [pc, #468]	; (80011a8 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8000fd4:	4d75      	ldr	r5, [pc, #468]	; (80011ac <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8000fd6:	4632      	mov	r2, r6
 8000fd8:	462b      	mov	r3, r5
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	4604      	mov	r4, r0
 8000fde:	f005 fdcb 	bl	8006b78 <HAL_FDCAN_GetRxMessage>
		g_can_rx_counter++;
 8000fe2:	4973      	ldr	r1, [pc, #460]	; (80011b0 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
//		HAL_TIM_Base_Stop(&htim6);
//		TIM6->CNT = 0;
//		HAL_TIM_Base_Start_IT(&htim6);

		// UPDATE JOINT INFO ----------------------------------------------------------------------------
		if (g_can_rx_header.Identifier == 0x0AA)
 8000fe4:	6832      	ldr	r2, [r6, #0]
		g_can_rx_counter++;
 8000fe6:	880b      	ldrh	r3, [r1, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b29b      	uxth	r3, r3
		if (g_can_rx_header.Identifier == 0x0AA)
 8000fec:	2aaa      	cmp	r2, #170	; 0xaa
		g_can_rx_counter++;
 8000fee:	800b      	strh	r3, [r1, #0]
		if (g_can_rx_header.Identifier == 0x0AA)
 8000ff0:	d001      	beq.n	8000ff6 <HAL_FDCAN_RxFifo0Callback+0x2e>
			{
				g_can_tx_counter++;
			}
		}
	}
}
 8000ff2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
			goal  = g_can_rx_data[g_node_status.can_node_id * 3] << 8;
 8000ff6:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80011c4 <HAL_FDCAN_RxFifo0Callback+0x1fc>
			g_motor_command.goal_joint_torque_in_nm = ((float) goal * 256.0) / (float) INT16_MAX; // convert from int16 to float
 8000ffa:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80011c8 <HAL_FDCAN_RxFifo0Callback+0x200>
			goal  = g_can_rx_data[g_node_status.can_node_id * 3] << 8;
 8000ffe:	f899 3001 	ldrb.w	r3, [r9, #1]
			goal += g_can_rx_data[g_node_status.can_node_id * 3 + 1];
 8001002:	f899 2001 	ldrb.w	r2, [r9, #1]
	return g_fsm_status.state;
 8001006:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80011cc <HAL_FDCAN_RxFifo0Callback+0x204>
			goal += g_can_rx_data[g_node_status.can_node_id * 3 + 1];
 800100a:	2603      	movs	r6, #3
 800100c:	fb06 5202 	mla	r2, r6, r2, r5
			goal  = g_can_rx_data[g_node_status.can_node_id * 3] << 8;
 8001010:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			goal += g_can_rx_data[g_node_status.can_node_id * 3 + 1];
 8001014:	7850      	ldrb	r0, [r2, #1]
			goal  = g_can_rx_data[g_node_status.can_node_id * 3] << 8;
 8001016:	5ceb      	ldrb	r3, [r5, r3]
			goal += g_can_rx_data[g_node_status.can_node_id * 3 + 1];
 8001018:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			g_motor_command.goal_joint_torque_in_nm = ((float) goal * 256.0) / (float) INT16_MAX; // convert from int16 to float
 800101c:	b200      	sxth	r0, r0
 800101e:	ee07 0a90 	vmov	s15, r0
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	ee17 0a90 	vmov	r0, s15
 800102a:	f7ff fa59 	bl	80004e0 <__aeabi_f2d>
 800102e:	a356      	add	r3, pc, #344	; (adr r3, 8001188 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff faac 	bl	8000590 <__aeabi_dmul>
 8001038:	f7ff fce4 	bl	8000a04 <__aeabi_d2f>
 800103c:	f8c8 0006 	str.w	r0, [r8, #6]
			uint8_t temp_new_fsm_state   = g_can_rx_data[g_node_status.can_node_id * 3 + 2];
 8001040:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001044:	fb06 5603 	mla	r6, r6, r3, r5
	return g_fsm_status.state;
 8001048:	f89a 3000 	ldrb.w	r3, [sl]
			uint8_t temp_new_fsm_state   = g_can_rx_data[g_node_status.can_node_id * 3 + 2];
 800104c:	78b0      	ldrb	r0, [r6, #2]
			if (FSM_Get_State() != temp_new_fsm_state) {
 800104e:	4298      	cmp	r0, r3
 8001050:	d001      	beq.n	8001056 <HAL_FDCAN_RxFifo0Callback+0x8e>
				FSM_Set_State(temp_new_fsm_state);
 8001052:	f7ff ff6f 	bl	8000f34 <FSM_Set_State>
			int16_t l_current_torque = (g_motor_status.current_joint_torque_in_nm / 256.0) * (float) INT16_MAX;
 8001056:	4e57      	ldr	r6, [pc, #348]	; (80011b4 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 8001058:	f8d6 0036 	ldr.w	r0, [r6, #54]	; 0x36
 800105c:	f7ff fa40 	bl	80004e0 <__aeabi_f2d>
 8001060:	a34b      	add	r3, pc, #300	; (adr r3, 8001190 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff fa93 	bl	8000590 <__aeabi_dmul>
 800106a:	f7ff fca3 	bl	80009b4 <__aeabi_d2iz>
			if (g_motor_command.goal < 0)
 800106e:	f8b8 3000 	ldrh.w	r3, [r8]
			switch (g_motor_status.encoder_position_state)
 8001072:	7872      	ldrb	r2, [r6, #1]
			if (g_motor_command.goal < 0)
 8001074:	041b      	lsls	r3, r3, #16
			int16_t l_current_torque = (g_motor_status.current_joint_torque_in_nm / 256.0) * (float) INT16_MAX;
 8001076:	fa0f f980 	sxth.w	r9, r0
				l_current_torque = -l_current_torque;
 800107a:	bf44      	itt	mi
 800107c:	f1c9 0900 	rsbmi	r9, r9, #0
 8001080:	fa0f f989 	sxthmi.w	r9, r9
			switch (g_motor_status.encoder_position_state)
 8001084:	2a01      	cmp	r2, #1
 8001086:	b2d3      	uxtb	r3, r2
 8001088:	d057      	beq.n	800113a <HAL_FDCAN_RxFifo0Callback+0x172>
 800108a:	2b02      	cmp	r3, #2
 800108c:	d06f      	beq.n	800116e <HAL_FDCAN_RxFifo0Callback+0x1a6>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d060      	beq.n	8001154 <HAL_FDCAN_RxFifo0Callback+0x18c>
			int32_t l_joint_position_in_s16degree = (int16_t) (g_motor_status.current_joint_position_in_rad * (65535.0 / M_TWOPI));
 8001092:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			g_can_tx_data[0] 	= l_joint_position_in_s16degree >> 8;
 8001094:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80011d0 <HAL_FDCAN_RxFifo0Callback+0x208>
			int32_t l_joint_position_in_s16degree = (int16_t) (g_motor_status.current_joint_position_in_rad * (65535.0 / M_TWOPI));
 8001098:	f7ff fa22 	bl	80004e0 <__aeabi_f2d>
 800109c:	a33e      	add	r3, pc, #248	; (adr r3, 8001198 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fa75 	bl	8000590 <__aeabi_dmul>
 80010a6:	f7ff fc85 	bl	80009b4 <__aeabi_d2iz>
			int16_t speed = g_motor_status.current_joint_speed_in_rads * (float) INT16_MAX / M_TWOPI;
 80010aa:	ed96 7a0b 	vldr	s14, [r6, #44]	; 0x2c
 80010ae:	eddf 7a42 	vldr	s15, [pc, #264]	; 80011b8 <HAL_FDCAN_RxFifo0Callback+0x1f0>
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
			g_can_tx_data[0] 	= l_joint_position_in_s16degree >> 8;
 80010b6:	ba40      	rev16	r0, r0
 80010b8:	f8a8 0000 	strh.w	r0, [r8]
			int16_t speed = g_motor_status.current_joint_speed_in_rads * (float) INT16_MAX / M_TWOPI;
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa0e 	bl	80004e0 <__aeabi_f2d>
 80010c4:	a336      	add	r3, pc, #216	; (adr r3, 80011a0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fa61 	bl	8000590 <__aeabi_dmul>
 80010ce:	f7ff fc71 	bl	80009b4 <__aeabi_d2iz>
			g_can_tx_data[4] 	= l_current_torque >> 8;
 80010d2:	fa99 f999 	rev16.w	r9, r9
			g_can_tx_data[2] 	= speed >> 8;
 80010d6:	ba43      	rev16	r3, r0
			g_can_tx_data[6] 	= g_motor_status.current_temperature;
 80010d8:	f896 b03a 	ldrb.w	fp, [r6, #58]	; 0x3a
			if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &g_can_tx_header, g_can_tx_data) == HAL_OK)
 80010dc:	4937      	ldr	r1, [pc, #220]	; (80011bc <HAL_FDCAN_RxFifo0Callback+0x1f4>)
	return g_fsm_status.state;
 80010de:	f89a e000 	ldrb.w	lr, [sl]
			g_can_tx_data[8] 	= g_motor_status.mc_current_faults_motor;
 80010e2:	f8b6 c045 	ldrh.w	ip, [r6, #69]	; 0x45
			if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &g_can_tx_header, g_can_tx_data) == HAL_OK)
 80010e6:	4620      	mov	r0, r4
 80010e8:	4642      	mov	r2, r8
			g_can_tx_data[9] 	= g_motor_status.mc_occured_faults_motor;
 80010ea:	f8b6 4047 	ldrh.w	r4, [r6, #71]	; 0x47
			g_can_tx_data[10]	= g_motor_status.errors;
 80010ee:	f896 a042 	ldrb.w	sl, [r6, #66]	; 0x42
			g_can_tx_data[2] 	= speed >> 8;
 80010f2:	f8a8 3002 	strh.w	r3, [r8, #2]
			g_can_tx_data[11]	= g_motor_status.warnings;
 80010f6:	f896 6043 	ldrb.w	r6, [r6, #67]	; 0x43
			g_can_tx_data[4] 	= l_current_torque >> 8;
 80010fa:	f8a8 9004 	strh.w	r9, [r8, #4]
			g_can_tx_data[6] 	= g_motor_status.current_temperature;
 80010fe:	2300      	movs	r3, #0
 8001100:	e9c5 3300 	strd	r3, r3, [r5]
 8001104:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8001108:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800110c:	f888 b006 	strb.w	fp, [r8, #6]
			g_can_tx_data[7] 	= FSM_Get_State();
 8001110:	f888 e007 	strb.w	lr, [r8, #7]
			g_can_tx_data[8] 	= g_motor_status.mc_current_faults_motor;
 8001114:	f888 c008 	strb.w	ip, [r8, #8]
			g_can_tx_data[9] 	= g_motor_status.mc_occured_faults_motor;
 8001118:	f888 4009 	strb.w	r4, [r8, #9]
			g_can_tx_data[10]	= g_motor_status.errors;
 800111c:	f888 a00a 	strb.w	sl, [r8, #10]
			g_can_tx_data[11]	= g_motor_status.warnings;
 8001120:	f888 600b 	strb.w	r6, [r8, #11]
			if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &g_can_tx_header, g_can_tx_data) == HAL_OK)
 8001124:	f005 fcc0 	bl	8006aa8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001128:	2800      	cmp	r0, #0
 800112a:	f47f af62 	bne.w	8000ff2 <HAL_FDCAN_RxFifo0Callback+0x2a>
				g_can_tx_counter++;
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001130:	8813      	ldrh	r3, [r2, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b29b      	uxth	r3, r3
 8001136:	8013      	strh	r3, [r2, #0]
}
 8001138:	e75b      	b.n	8000ff2 <HAL_FDCAN_RxFifo0Callback+0x2a>
				g_motor_status.warnings = g_motor_status.warnings | JOINT_POSITION_NOT_ACCURATE;
 800113a:	f896 3043 	ldrb.w	r3, [r6, #67]	; 0x43
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
				g_motor_status.errors   = g_motor_status.errors   & (0xFF ^ JOINT_POSITION_ENCODER_FAILED);
 8001146:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 800114a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800114e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
				break;
 8001152:	e79e      	b.n	8001092 <HAL_FDCAN_RxFifo0Callback+0xca>
				g_motor_status.warnings = g_motor_status.warnings & (0xFF ^ JOINT_POSITION_NOT_ACCURATE);
 8001154:	f896 3043 	ldrb.w	r3, [r6, #67]	; 0x43
 8001158:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800115c:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
				g_motor_status.errors   = g_motor_status.errors | JOINT_POSITION_ENCODER_FAILED;
 8001160:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
				break;
 800116c:	e791      	b.n	8001092 <HAL_FDCAN_RxFifo0Callback+0xca>
				g_motor_status.warnings = g_motor_status.warnings & (0xFF ^ JOINT_POSITION_NOT_ACCURATE);
 800116e:	f896 3043 	ldrb.w	r3, [r6, #67]	; 0x43
 8001172:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001176:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
				g_motor_status.errors   = g_motor_status.errors   & (0xFF ^ JOINT_POSITION_ENCODER_FAILED);
 800117a:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 800117e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001182:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
				break;
 8001186:	e784      	b.n	8001092 <HAL_FDCAN_RxFifo0Callback+0xca>
 8001188:	00400080 	.word	0x00400080
 800118c:	3f800020 	.word	0x3f800020
 8001190:	00000000 	.word	0x00000000
 8001194:	405fffc0 	.word	0x405fffc0
 8001198:	0e995ab9 	.word	0x0e995ab9
 800119c:	40c45f1c 	.word	0x40c45f1c
 80011a0:	6dc9c883 	.word	0x6dc9c883
 80011a4:	3fc45f30 	.word	0x3fc45f30
 80011a8:	20001364 	.word	0x20001364
 80011ac:	20000e28 	.word	0x20000e28
 80011b0:	20000e26 	.word	0x20000e26
 80011b4:	20000e98 	.word	0x20000e98
 80011b8:	46fffe00 	.word	0x46fffe00
 80011bc:	200012b0 	.word	0x200012b0
 80011c0:	20000e40 	.word	0x20000e40
 80011c4:	20000f48 	.word	0x20000f48
 80011c8:	20000e8c 	.word	0x20000e8c
 80011cc:	20000e68 	.word	0x20000e68
 80011d0:	20000824 	.word	0x20000824

080011d4 <MA730_ReadRegister>:
//#endif

void MA730_ReadRegister(uint8_t reg_number) {
 80011d4:	b570      	push	{r4, r5, r6, lr}
	uint16_t send_data      = 0b010 << 13 | (reg_number & (0b00011111)) << 8 ;
 80011d6:	0203      	lsls	r3, r0, #8
void MA730_ReadRegister(uint8_t reg_number) {
 80011d8:	b084      	sub	sp, #16
	uint16_t send_data      = 0b010 << 13 | (reg_number & (0b00011111)) << 8 ;
 80011da:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00

	uint16_t angle_value    = 0;
 80011de:	2200      	movs	r2, #0
	uint16_t send_data      = 0b010 << 13 | (reg_number & (0b00011111)) << 8 ;
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	uint16_t angle_value    = 0;
 80011e4:	f8ad 200c 	strh.w	r2, [sp, #12]
	uint16_t register_value = 0;
 80011e8:	f8ad 200e 	strh.w	r2, [sp, #14]
void MA730_ReadRegister(uint8_t reg_number) {
 80011ec:	4605      	mov	r5, r0
	uint16_t send_data      = 0b010 << 13 | (reg_number & (0b00011111)) << 8 ;
 80011ee:	f8ad 300a 	strh.w	r3, [sp, #10]
	uint16_t register_value = 0;
 80011f2:	2218      	movs	r2, #24

	for (uint16_t i = 0; i < 24; i++) NOP;  // wait about 150ns
 80011f4:	bf00      	nop
 80011f6:	3a01      	subs	r2, #1
 80011f8:	b292      	uxth	r2, r2
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d1fa      	bne.n	80011f4 <MA730_ReadRegister+0x20>

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80011fe:	4850      	ldr	r0, [pc, #320]	; (8001340 <MA730_ReadRegister+0x16c>)
 8001200:	2104      	movs	r1, #4
 8001202:	f006 f92d 	bl	8007460 <HAL_GPIO_WritePin>
 8001206:	2382      	movs	r3, #130	; 0x82

	for (uint16_t i = 0; i < 130; i++) NOP;  // wait about 80ns
 8001208:	bf00      	nop
 800120a:	3b01      	subs	r3, #1
 800120c:	b29b      	uxth	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1fa      	bne.n	8001208 <MA730_ReadRegister+0x34>

	// SEND READ REGISTER COMMAND - RECEIVE READ ANGLE RESULT
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &angle_value, 1, 1);
 8001212:	2401      	movs	r4, #1
 8001214:	4623      	mov	r3, r4
 8001216:	f10d 010a 	add.w	r1, sp, #10
 800121a:	9400      	str	r4, [sp, #0]
 800121c:	aa03      	add	r2, sp, #12
 800121e:	4849      	ldr	r0, [pc, #292]	; (8001344 <MA730_ReadRegister+0x170>)
 8001220:	f007 f82e 	bl	8008280 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 8001224:	4622      	mov	r2, r4
 8001226:	4846      	ldr	r0, [pc, #280]	; (8001340 <MA730_ReadRegister+0x16c>)
 8001228:	2104      	movs	r1, #4
 800122a:	f006 f919 	bl	8007460 <HAL_GPIO_WritePin>
 800122e:	2478      	movs	r4, #120	; 0x78

	for (uint16_t i = 0; i < 120; i++) NOP;  // wait about 750ns
 8001230:	bf00      	nop
 8001232:	3c01      	subs	r4, #1
 8001234:	b2a4      	uxth	r4, r4
 8001236:	2c00      	cmp	r4, #0
 8001238:	d1fa      	bne.n	8001230 <MA730_ReadRegister+0x5c>

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 800123a:	4841      	ldr	r0, [pc, #260]	; (8001340 <MA730_ReadRegister+0x16c>)
 800123c:	4622      	mov	r2, r4
 800123e:	2104      	movs	r1, #4
 8001240:	f006 f90e 	bl	8007460 <HAL_GPIO_WritePin>

	for (uint16_t i = 0; i < 13; i++) NOP;  // wait about 80ns
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	bf00      	nop

	send_data      = 0x0000;

	// SEND READ ANGLE COMMAND - RECEIVE READ REGISTER RESULT
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &register_value, 1, 1);
 800125e:	2601      	movs	r6, #1
 8001260:	4633      	mov	r3, r6
 8001262:	f10d 010a 	add.w	r1, sp, #10
 8001266:	f10d 020e 	add.w	r2, sp, #14
 800126a:	4836      	ldr	r0, [pc, #216]	; (8001344 <MA730_ReadRegister+0x170>)
 800126c:	9600      	str	r6, [sp, #0]
	send_data      = 0x0000;
 800126e:	f8ad 400a 	strh.w	r4, [sp, #10]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &register_value, 1, 1);
 8001272:	f007 f805 	bl	8008280 <HAL_SPI_TransmitReceive>

//	g_MA730_read_buffer = register_value >> 8;

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 8001276:	4832      	ldr	r0, [pc, #200]	; (8001340 <MA730_ReadRegister+0x16c>)
 8001278:	4632      	mov	r2, r6
 800127a:	2104      	movs	r1, #4
 800127c:	f006 f8f0 	bl	8007460 <HAL_GPIO_WritePin>
 8001280:	2378      	movs	r3, #120	; 0x78

	for (uint16_t i = 0; i < 120; i++) NOP;  // wait about 750ns
 8001282:	bf00      	nop
 8001284:	3b01      	subs	r3, #1
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1fa      	bne.n	8001282 <MA730_ReadRegister+0xae>

	g_ma730.angle = (angle_value >> 2) & 0b0011111111111111;

	register_value = register_value >> 8;
 800128c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	g_ma730.angle = (angle_value >> 2) & 0b0011111111111111;
 8001290:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001294:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <MA730_ReadRegister+0x174>)
 8001296:	0889      	lsrs	r1, r1, #2
	register_value = register_value >> 8;
 8001298:	0a1b      	lsrs	r3, r3, #8
	g_ma730.angle = (angle_value >> 2) & 0b0011111111111111;
 800129a:	8011      	strh	r1, [r2, #0]
	register_value = register_value >> 8;
 800129c:	f8ad 300e 	strh.w	r3, [sp, #14]
	switch (reg_number)
 80012a0:	2d1b      	cmp	r5, #27
 80012a2:	d811      	bhi.n	80012c8 <MA730_ReadRegister+0xf4>
 80012a4:	e8df f005 	tbb	[pc, r5]
 80012a8:	322f2c0e 	.word	0x322f2c0e
 80012ac:	10423f39 	.word	0x10423f39
 80012b0:	10104810 	.word	0x10104810
 80012b4:	10101010 	.word	0x10101010
 80012b8:	10101010 	.word	0x10101010
 80012bc:	10101010 	.word	0x10101010
 80012c0:	26101010 	.word	0x26101010
	{
		case 0x00:
		{
			g_ma730.z0 = (uint8_t) register_value;
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	7093      	strb	r3, [r2, #2]
//		g_motor_status.ma730_is_running = true;
//		g_motor_status.previous_ma730_value = g_motor_status.current_ma730_value;
//		g_motor_status.current_ma730_value = (g_MA730_read_buffer >> 2) & 0b0011111111111111;
//	}

	if (g_ma730.mgl || g_ma730.mgh) // not proper magnetic field strentgh
 80012c8:	7b93      	ldrb	r3, [r2, #14]
 80012ca:	b90b      	cbnz	r3, 80012d0 <MA730_ReadRegister+0xfc>
 80012cc:	7b53      	ldrb	r3, [r2, #13]
 80012ce:	b143      	cbz	r3, 80012e2 <MA730_ReadRegister+0x10e>
	{
		g_motor_status.warnings |= JOINT_MA730_NOT_PROPER_MAGNETOC_FIELD;
 80012d0:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MA730_ReadRegister+0x178>)
 80012d2:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
	{
		g_motor_status.warnings = g_motor_status.warnings & (0xFF ^ JOINT_MA730_NOT_PROPER_MAGNETOC_FIELD);

	}

}
 80012de:	b004      	add	sp, #16
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
		g_motor_status.warnings = g_motor_status.warnings & (0xFF ^ JOINT_MA730_NOT_PROPER_MAGNETOC_FIELD);
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <MA730_ReadRegister+0x178>)
 80012e4:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80012e8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80012ec:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
}
 80012f0:	b004      	add	sp, #16
 80012f2:	bd70      	pop	{r4, r5, r6, pc}
			g_ma730.mgl = ((uint8_t) register_value & 0b01000000) >> 6;
 80012f4:	f3c3 1180 	ubfx	r1, r3, #6, #1
			g_ma730.mgh = ((uint8_t) register_value & 0b10000000) >> 7;
 80012f8:	09db      	lsrs	r3, r3, #7
			g_ma730.mgl = ((uint8_t) register_value & 0b01000000) >> 6;
 80012fa:	7391      	strb	r1, [r2, #14]
			g_ma730.mgh = ((uint8_t) register_value & 0b10000000) >> 7;
 80012fc:	7353      	strb	r3, [r2, #13]
			break;
 80012fe:	e7e3      	b.n	80012c8 <MA730_ReadRegister+0xf4>
			g_ma730.z1 = (uint8_t) register_value;
 8001300:	b2db      	uxtb	r3, r3
 8001302:	70d3      	strb	r3, [r2, #3]
			break;
 8001304:	e7e0      	b.n	80012c8 <MA730_ReadRegister+0xf4>
			g_ma730.bct = (uint8_t) register_value;
 8001306:	b2db      	uxtb	r3, r3
 8001308:	7113      	strb	r3, [r2, #4]
			break;
 800130a:	e7dd      	b.n	80012c8 <MA730_ReadRegister+0xf4>
			g_ma730.ety = ((uint8_t) register_value & 0b00000010) >> 1;
 800130c:	f3c3 0140 	ubfx	r1, r3, #1, #1
			g_ma730.etx = ((uint8_t) register_value & 0b00000001);
 8001310:	f003 0301 	and.w	r3, r3, #1
			g_ma730.ety = ((uint8_t) register_value & 0b00000010) >> 1;
 8001314:	7151      	strb	r1, [r2, #5]
			g_ma730.etx = ((uint8_t) register_value & 0b00000001);
 8001316:	7193      	strb	r3, [r2, #6]
			break;
 8001318:	e7d6      	b.n	80012c8 <MA730_ReadRegister+0xf4>
			g_ma730.ppt0 = ((uint8_t) register_value & 0b11000000) >> 6;
 800131a:	0999      	lsrs	r1, r3, #6
			g_ma730.ilip = ((uint8_t) register_value & 0b00111100) >> 2;
 800131c:	f3c3 0383 	ubfx	r3, r3, #2, #4
			g_ma730.ppt0 = ((uint8_t) register_value & 0b11000000) >> 6;
 8001320:	71d1      	strb	r1, [r2, #7]
			g_ma730.ilip = ((uint8_t) register_value & 0b00111100) >> 2;
 8001322:	7253      	strb	r3, [r2, #9]
			break;
 8001324:	e7d0      	b.n	80012c8 <MA730_ReadRegister+0xf4>
			g_ma730.ppt1 = (uint8_t) register_value;
 8001326:	b2db      	uxtb	r3, r3
 8001328:	7213      	strb	r3, [r2, #8]
			break;
 800132a:	e7cd      	b.n	80012c8 <MA730_ReadRegister+0xf4>
			g_ma730.mglt = ((uint8_t) register_value & 0b11100000) >> 5;
 800132c:	0959      	lsrs	r1, r3, #5
			g_ma730.mght = ((uint8_t) register_value & 0b00011100) >> 2;
 800132e:	f3c3 0382 	ubfx	r3, r3, #2, #3
			g_ma730.mglt = ((uint8_t) register_value & 0b11100000) >> 5;
 8001332:	7291      	strb	r1, [r2, #10]
			g_ma730.mght = ((uint8_t) register_value & 0b00011100) >> 2;
 8001334:	72d3      	strb	r3, [r2, #11]
			break;
 8001336:	e7c7      	b.n	80012c8 <MA730_ReadRegister+0xf4>
			g_ma730.rd = (uint8_t) register_value >> 7;
 8001338:	09db      	lsrs	r3, r3, #7
 800133a:	7313      	strb	r3, [r2, #12]
			break;
 800133c:	e7c4      	b.n	80012c8 <MA730_ReadRegister+0xf4>
 800133e:	bf00      	nop
 8001340:	48000400 	.word	0x48000400
 8001344:	20000f84 	.word	0x20000f84
 8001348:	20000e6c 	.word	0x20000e6c
 800134c:	20000e98 	.word	0x20000e98

08001350 <MA730_WriteRegister>:

	g_ma730.angle = (angle_value >> 2) & 0b0011111111111111;

}

void MA730_WriteRegister(uint8_t reg_number, uint8_t reg_value) {
 8001350:	b530      	push	{r4, r5, lr}
	uint16_t send_data      = 0b100 << 13 | (reg_number & (0b00011111)) << 8 | reg_value;
 8001352:	0200      	lsls	r0, r0, #8
 8001354:	f400 53f8 	and.w	r3, r0, #7936	; 0x1f00
 8001358:	430b      	orrs	r3, r1
void MA730_WriteRegister(uint8_t reg_number, uint8_t reg_value) {
 800135a:	b085      	sub	sp, #20
	uint16_t send_data      = 0b100 << 13 | (reg_number & (0b00011111)) << 8 | reg_value;
 800135c:	ea6f 4343 	mvn.w	r3, r3, lsl #17

	uint16_t angle_value    = 0;
 8001360:	2200      	movs	r2, #0
	uint16_t send_data      = 0b100 << 13 | (reg_number & (0b00011111)) << 8 | reg_value;
 8001362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
	uint16_t angle_value    = 0;
 8001366:	f8ad 200c 	strh.w	r2, [sp, #12]
	uint16_t register_value = 0;
 800136a:	f8ad 200e 	strh.w	r2, [sp, #14]
	uint16_t send_data      = 0b100 << 13 | (reg_number & (0b00011111)) << 8 | reg_value;
 800136e:	f8ad 300a 	strh.w	r3, [sp, #10]
	uint16_t register_value = 0;
 8001372:	2218      	movs	r2, #24

	for (uint16_t i = 0; i < 24; i++) NOP;  // wait about 150ns
 8001374:	bf00      	nop
 8001376:	3a01      	subs	r2, #1
 8001378:	b292      	uxth	r2, r2
 800137a:	2a00      	cmp	r2, #0
 800137c:	d1fa      	bne.n	8001374 <MA730_WriteRegister+0x24>

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 800137e:	4822      	ldr	r0, [pc, #136]	; (8001408 <MA730_WriteRegister+0xb8>)
 8001380:	2104      	movs	r1, #4
 8001382:	f006 f86d 	bl	8007460 <HAL_GPIO_WritePin>
 8001386:	2482      	movs	r4, #130	; 0x82

	for (uint16_t i = 0; i < 130; i++) NOP;  // wait about 80ns
 8001388:	bf00      	nop
 800138a:	3c01      	subs	r4, #1
 800138c:	b2a4      	uxth	r4, r4
 800138e:	2c00      	cmp	r4, #0
 8001390:	d1fa      	bne.n	8001388 <MA730_WriteRegister+0x38>

	// SEND READ REGISTER COMMAND - RECEIVE READ ANGLE RESULT
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &angle_value, 1, 1);
 8001392:	2501      	movs	r5, #1
 8001394:	462b      	mov	r3, r5
 8001396:	f10d 010a 	add.w	r1, sp, #10
 800139a:	aa03      	add	r2, sp, #12
 800139c:	9500      	str	r5, [sp, #0]
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <MA730_WriteRegister+0xbc>)
 80013a0:	f006 ff6e 	bl	8008280 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 80013a4:	462a      	mov	r2, r5
 80013a6:	2104      	movs	r1, #4
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <MA730_WriteRegister+0xb8>)
 80013aa:	f006 f859 	bl	8007460 <HAL_GPIO_WritePin>

	HAL_Delay(20); // Wait 20 ms after write command
 80013ae:	2014      	movs	r0, #20
 80013b0:	f004 f946 	bl	8005640 <HAL_Delay>

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80013b4:	4814      	ldr	r0, [pc, #80]	; (8001408 <MA730_WriteRegister+0xb8>)
 80013b6:	4622      	mov	r2, r4
 80013b8:	2104      	movs	r1, #4
 80013ba:	f006 f851 	bl	8007460 <HAL_GPIO_WritePin>

	for (uint16_t i = 0; i < 13; i++) NOP;  // wait about 80ns
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop

	send_data      = 0x0000;

	// SEND READ ANGLE COMMAND - RECEIVE READ REGISTER RESULT
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &register_value, 1, 1);
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MA730_WriteRegister+0xbc>)
 80013da:	9500      	str	r5, [sp, #0]
 80013dc:	462b      	mov	r3, r5
 80013de:	f10d 010a 	add.w	r1, sp, #10
 80013e2:	f10d 020e 	add.w	r2, sp, #14
	send_data      = 0x0000;
 80013e6:	f8ad 400a 	strh.w	r4, [sp, #10]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &register_value, 1, 1);
 80013ea:	f006 ff49 	bl	8008280 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MA730_WriteRegister+0xb8>)
 80013f0:	462a      	mov	r2, r5
 80013f2:	2104      	movs	r1, #4
 80013f4:	f006 f834 	bl	8007460 <HAL_GPIO_WritePin>
 80013f8:	2378      	movs	r3, #120	; 0x78

	for (uint16_t i = 0; i < 120; i++) NOP;  // wait about 750ns
 80013fa:	bf00      	nop
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1fa      	bne.n	80013fa <MA730_WriteRegister+0xaa>

}
 8001404:	b005      	add	sp, #20
 8001406:	bd30      	pop	{r4, r5, pc}
 8001408:	48000400 	.word	0x48000400
 800140c:	20000f84 	.word	0x20000f84

08001410 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001412:	e7fe      	b.n	8001412 <Error_Handler+0x2>

08001414 <SystemClock_Config>:
{
 8001414:	e92d 4330 	stmdb	sp!, {r4, r5, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001418:	2100      	movs	r1, #0
{
 800141a:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	2238      	movs	r2, #56	; 0x38
 8001420:	a806      	add	r0, sp, #24
 8001422:	f00a f989 	bl	800b738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001426:	4621      	mov	r1, r4
 8001428:	2244      	movs	r2, #68	; 0x44
 800142a:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	e9cd 4400 	strd	r4, r4, [sp]
 8001430:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001434:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001436:	f00a f97f 	bl	800b738 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800143a:	4620      	mov	r0, r4
 800143c:	f006 f816 	bl	800746c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001440:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001444:	f04f 0801 	mov.w	r8, #1
 8001448:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144c:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 800144e:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001450:	2208      	movs	r2, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	e9cd 8906 	strd	r8, r9, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001458:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800145c:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001460:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f006 f887 	bl	8007578 <HAL_RCC_OscConfig>
 800146a:	b108      	cbz	r0, 8001470 <SystemClock_Config+0x5c>
 800146c:	b672      	cpsid	i
  while (1)
 800146e:	e7fe      	b.n	800146e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001470:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001472:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	2200      	movs	r2, #0
 8001478:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	240f      	movs	r4, #15
 800147e:	2503      	movs	r5, #3
 8001480:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001484:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001488:	f006 faf0 	bl	8007a6c <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	b108      	cbz	r0, 8001494 <SystemClock_Config+0x80>
 8001490:	b672      	cpsid	i
  while (1)
 8001492:	e7fe      	b.n	8001492 <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001494:	f249 0402 	movw	r4, #36866	; 0x9002
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001498:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800149c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a2:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80014a4:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80014a6:	9121      	str	r1, [sp, #132]	; 0x84
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80014a8:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014aa:	f006 fc13 	bl	8007cd4 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	b108      	cbz	r0, 80014b4 <SystemClock_Config+0xa0>
 80014b0:	b672      	cpsid	i
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <SystemClock_Config+0x9e>
}
 80014b4:	b027      	add	sp, #156	; 0x9c
 80014b6:	e8bd 8330 	ldmia.w	sp!, {r4, r5, r8, r9, pc}
 80014ba:	bf00      	nop

080014bc <R3_2_GetPhaseCurrents>:
{
 80014bc:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80014be:	6f43      	ldr	r3, [r0, #116]	; 0x74
  Sector = ( uint8_t )pHandle->_Super.Sector;
 80014c0:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80014c4:	689d      	ldr	r5, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80014c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80014ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80014cc:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80014ce:	6812      	ldr	r2, [r2, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80014d0:	6836      	ldr	r6, [r6, #0]
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80014d2:	686b      	ldr	r3, [r5, #4]
 80014d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80014d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014dc:	606b      	str	r3, [r5, #4]
  switch ( Sector )
 80014de:	2c05      	cmp	r4, #5
 80014e0:	f200 80a1 	bhi.w	8001626 <R3_2_GetPhaseCurrents+0x16a>
 80014e4:	e8df f004 	tbb	[pc, r4]
 80014e8:	031f1f39 	.word	0x031f1f39
 80014ec:	3903      	.short	0x3903
		Aux = (int32_t) (ADCDataReg1) - (int32_t) (pHandle->PhaseAOffset);
 80014ee:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <R3_2_GetPhaseCurrents+0x178>)
		Aux = (int32_t) (ADCDataReg1) - (int32_t) (pHandle->PhaseAOffset);
 80014f2:	1b14      	subs	r4, r2, r4
      if ( Aux < -INT16_MAX )
 80014f4:	429c      	cmp	r4, r3
 80014f6:	da56      	bge.n	80015a6 <R3_2_GetPhaseCurrents+0xea>
        Iab->a = INT16_MAX;
 80014f8:	800b      	strh	r3, [r1, #0]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseBOffset );
 80014fa:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 80014fc:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <R3_2_GetPhaseCurrents+0x178>)
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseBOffset );
 80014fe:	1ab2      	subs	r2, r6, r2
      if ( Aux < -INT16_MAX )
 8001500:	429a      	cmp	r2, r3
 8001502:	da56      	bge.n	80015b2 <R3_2_GetPhaseCurrents+0xf6>
        Iab->b = -INT16_MAX;
 8001504:	f9b1 5000 	ldrsh.w	r5, [r1]
 8001508:	804b      	strh	r3, [r1, #2]
 800150a:	469c      	mov	ip, r3
 800150c:	f248 0201 	movw	r2, #32769	; 0x8001
 8001510:	b2ab      	uxth	r3, r5
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8001512:	4413      	add	r3, r2
 8001514:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 8001516:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800151a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800151e:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ib = Iab->b;
 8001520:	f8a0 c04a 	strh.w	ip, [r0, #74]	; 0x4a
}
 8001524:	4770      	bx	lr
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseAOffset );
 8001526:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <R3_2_GetPhaseCurrents+0x178>)
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseAOffset );
 800152a:	1b14      	subs	r4, r2, r4
      if ( Aux < -INT16_MAX )
 800152c:	429c      	cmp	r4, r3
 800152e:	db34      	blt.n	800159a <R3_2_GetPhaseCurrents+0xde>
      else  if ( Aux > INT16_MAX )
 8001530:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001534:	db6f      	blt.n	8001616 <R3_2_GetPhaseCurrents+0x15a>
        Iab->a = INT16_MAX;
 8001536:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800153a:	4613      	mov	r3, r2
 800153c:	800a      	strh	r2, [r1, #0]
 800153e:	4614      	mov	r4, r2
 8001540:	4615      	mov	r5, r2
      Aux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( ADCDataReg2 ); /* -Ic */
 8001542:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001544:	1b92      	subs	r2, r2, r6
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8001546:	1b14      	subs	r4, r2, r4
      if ( Aux > INT16_MAX )
 8001548:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800154c:	db44      	blt.n	80015d8 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 800154e:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8001552:	4622      	mov	r2, r4
 8001554:	804c      	strh	r4, [r1, #2]
 8001556:	46a4      	mov	ip, r4
 8001558:	e7db      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseBOffset );
 800155a:	6e03      	ldr	r3, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 800155c:	4d35      	ldr	r5, [pc, #212]	; (8001634 <R3_2_GetPhaseCurrents+0x178>)
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseBOffset );
 800155e:	1ad4      	subs	r4, r2, r3
      if ( Aux < -INT16_MAX )
 8001560:	42ac      	cmp	r4, r5
 8001562:	db14      	blt.n	800158e <R3_2_GetPhaseCurrents+0xd2>
      else  if ( Aux > INT16_MAX )
 8001564:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001568:	db46      	blt.n	80015f8 <R3_2_GetPhaseCurrents+0x13c>
        Iab->b = INT16_MAX;
 800156a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800156e:	461a      	mov	r2, r3
 8001570:	804b      	strh	r3, [r1, #2]
 8001572:	461c      	mov	r4, r3
 8001574:	469c      	mov	ip, r3
      Aux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( ADCDataReg2 ); /* Ic reversed */
 8001576:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001578:	1b9b      	subs	r3, r3, r6
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800157a:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 800157c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001580:	db23      	blt.n	80015ca <R3_2_GetPhaseCurrents+0x10e>
        Iab->a = INT16_MAX;
 8001582:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8001586:	4623      	mov	r3, r4
 8001588:	800c      	strh	r4, [r1, #0]
 800158a:	4625      	mov	r5, r4
 800158c:	e7c1      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 800158e:	462c      	mov	r4, r5
 8001590:	804d      	strh	r5, [r1, #2]
 8001592:	46ac      	mov	ip, r5
 8001594:	f248 0201 	movw	r2, #32769	; 0x8001
 8001598:	e7ed      	b.n	8001576 <R3_2_GetPhaseCurrents+0xba>
        Iab->a = -INT16_MAX;
 800159a:	461c      	mov	r4, r3
 800159c:	800b      	strh	r3, [r1, #0]
 800159e:	461d      	mov	r5, r3
 80015a0:	f248 0301 	movw	r3, #32769	; 0x8001
 80015a4:	e7cd      	b.n	8001542 <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 80015a6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80015aa:	db1d      	blt.n	80015e8 <R3_2_GetPhaseCurrents+0x12c>
        Iab->a = INT16_MAX;
 80015ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80015b0:	e7a2      	b.n	80014f8 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 80015b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80015b6:	db25      	blt.n	8001604 <R3_2_GetPhaseCurrents+0x148>
        Iab->b = INT16_MAX;
 80015b8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80015bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80015c0:	804b      	strh	r3, [r1, #2]
 80015c2:	461a      	mov	r2, r3
 80015c4:	469c      	mov	ip, r3
 80015c6:	b2ab      	uxth	r3, r5
 80015c8:	e7a3      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 80015ca:	4d1a      	ldr	r5, [pc, #104]	; (8001634 <R3_2_GetPhaseCurrents+0x178>)
 80015cc:	42ac      	cmp	r4, r5
 80015ce:	da26      	bge.n	800161e <R3_2_GetPhaseCurrents+0x162>
        Iab->a = -INT16_MAX;
 80015d0:	800d      	strh	r5, [r1, #0]
 80015d2:	f248 0301 	movw	r3, #32769	; 0x8001
 80015d6:	e79c      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 80015d8:	4a16      	ldr	r2, [pc, #88]	; (8001634 <R3_2_GetPhaseCurrents+0x178>)
 80015da:	4294      	cmp	r4, r2
 80015dc:	da06      	bge.n	80015ec <R3_2_GetPhaseCurrents+0x130>
        Iab->b = -INT16_MAX;
 80015de:	804a      	strh	r2, [r1, #2]
 80015e0:	4694      	mov	ip, r2
 80015e2:	f248 0201 	movw	r2, #32769	; 0x8001
 80015e6:	e794      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 80015e8:	800c      	strh	r4, [r1, #0]
 80015ea:	e786      	b.n	80014fa <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 80015ec:	fa0f fc84 	sxth.w	ip, r4
 80015f0:	f8a1 c002 	strh.w	ip, [r1, #2]
 80015f4:	b2a2      	uxth	r2, r4
 80015f6:	e78c      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 80015f8:	fa0f fc84 	sxth.w	ip, r4
 80015fc:	f8a1 c002 	strh.w	ip, [r1, #2]
 8001600:	b2a2      	uxth	r2, r4
 8001602:	e7b8      	b.n	8001576 <R3_2_GetPhaseCurrents+0xba>
        Iab->b = ( int16_t )Aux;
 8001604:	f9b1 5000 	ldrsh.w	r5, [r1]
 8001608:	fa0f fc82 	sxth.w	ip, r2
 800160c:	b2ab      	uxth	r3, r5
 800160e:	f8a1 c002 	strh.w	ip, [r1, #2]
 8001612:	b292      	uxth	r2, r2
 8001614:	e77d      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8001616:	b225      	sxth	r5, r4
 8001618:	800d      	strh	r5, [r1, #0]
 800161a:	b2a3      	uxth	r3, r4
 800161c:	e791      	b.n	8001542 <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 800161e:	b225      	sxth	r5, r4
 8001620:	800d      	strh	r5, [r1, #0]
 8001622:	b2a3      	uxth	r3, r4
 8001624:	e775      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
 8001626:	f9b1 5000 	ldrsh.w	r5, [r1]
 800162a:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 800162e:	880b      	ldrh	r3, [r1, #0]
 8001630:	884a      	ldrh	r2, [r1, #2]
 8001632:	e76e      	b.n	8001512 <R3_2_GetPhaseCurrents+0x56>
 8001634:	ffff8001 	.word	0xffff8001

08001638 <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == TIM6) // 10 000 Hz
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xc>)
 800163a:	6802      	ldr	r2, [r0, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d003      	beq.n	8001648 <HAL_TIM_PeriodElapsedCallback+0x10>
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40001000 	.word	0x40001000
{
 8001648:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
			g_counter_10000hz++;
 800164c:	4ac4      	ldr	r2, [pc, #784]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x328>)
			g_motor_status.previous_electric_position = g_motor_status.current_electric_position; // store old position
 800164e:	4cc5      	ldr	r4, [pc, #788]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x32c>)
			g_counter_10000hz++;
 8001650:	6813      	ldr	r3, [r2, #0]
			g_motor_status.current_electric_position = ENCODER_M1._Super.hElAngle;
 8001652:	f8df a34c 	ldr.w	sl, [pc, #844]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x368>
			g_counter_10000hz++;
 8001656:	3301      	adds	r3, #1
{
 8001658:	ed2d 8b04 	vpush	{d8-d9}
			g_counter_10000hz++;
 800165c:	6013      	str	r3, [r2, #0]
			g_motor_status.previous_electric_position = g_motor_status.current_electric_position; // store old position
 800165e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			g_motor_status.current_electric_position = ENCODER_M1._Super.hElAngle;
 8001660:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
			g_motor_status.previous_electric_position = g_motor_status.current_electric_position; // store old position
 8001664:	84e2      	strh	r2, [r4, #38]	; 0x26
			g_motor_status.current_electric_position = ENCODER_M1._Super.hElAngle;
 8001666:	84a3      	strh	r3, [r4, #36]	; 0x24
			if (g_motor_status.previous_electric_position > 28000 && g_motor_status.current_electric_position < - 28000)
 8001668:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800166a:	f646 5260 	movw	r2, #28000	; 0x6d60
 800166e:	b21b      	sxth	r3, r3
 8001670:	4293      	cmp	r3, r2
{
 8001672:	b088      	sub	sp, #32
			if (g_motor_status.previous_electric_position > 28000 && g_motor_status.current_electric_position < - 28000)
 8001674:	dd07      	ble.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8001676:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8001678:	4abb      	ldr	r2, [pc, #748]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800167a:	b21b      	sxth	r3, r3
 800167c:	4293      	cmp	r3, r2
 800167e:	da02      	bge.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x4e>
				g_motor_status.current_electric_rotation++;
 8001680:	6a23      	ldr	r3, [r4, #32]
 8001682:	3301      	adds	r3, #1
 8001684:	6223      	str	r3, [r4, #32]
			if (g_motor_status.current_electric_position > 28000  && g_motor_status.previous_electric_position < - 28000)
 8001686:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8001688:	f646 5260 	movw	r2, #28000	; 0x6d60
 800168c:	b21b      	sxth	r3, r3
 800168e:	4293      	cmp	r3, r2
 8001690:	dd07      	ble.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001692:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001694:	4ab4      	ldr	r2, [pc, #720]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001696:	b21b      	sxth	r3, r3
 8001698:	4293      	cmp	r3, r2
 800169a:	da02      	bge.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
				g_motor_status.current_electric_rotation--;
 800169c:	6a23      	ldr	r3, [r4, #32]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6223      	str	r3, [r4, #32]
			g_motor_status.previous_mechanical_position = g_motor_status.current_mechanical_position; // store old position
 80016a2:	69a3      	ldr	r3, [r4, #24]
			g_motor_status.current_mechanical_position = ENCODER_M1.PreviousCapture; // 0 ... 14336 - 1 mechanical motor rotation
 80016a4:	f8ba 2072 	ldrh.w	r2, [sl, #114]	; 0x72
			g_motor_status.previous_mechanical_position = g_motor_status.current_mechanical_position; // store old position
 80016a8:	61e3      	str	r3, [r4, #28]
			if (g_motor_status.previous_mechanical_position > ENCODER_M1.PulseNumber - ENCODER_M1.PulseNumber / 4 && g_motor_status.current_mechanical_position  < ENCODER_M1.PulseNumber / 4)
 80016aa:	f8ba 306e 	ldrh.w	r3, [sl, #110]	; 0x6e
			g_motor_status.current_mechanical_position = ENCODER_M1.PreviousCapture; // 0 ... 14336 - 1 mechanical motor rotation
 80016ae:	61a2      	str	r2, [r4, #24]
			if (g_motor_status.previous_mechanical_position > ENCODER_M1.PulseNumber - ENCODER_M1.PulseNumber / 4 && g_motor_status.current_mechanical_position  < ENCODER_M1.PulseNumber / 4)
 80016b0:	69e1      	ldr	r1, [r4, #28]
 80016b2:	eba3 0293 	sub.w	r2, r3, r3, lsr #2
 80016b6:	4291      	cmp	r1, r2
 80016b8:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80016bc:	dd05      	ble.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x92>
 80016be:	69a1      	ldr	r1, [r4, #24]
 80016c0:	428b      	cmp	r3, r1
 80016c2:	dd02      	ble.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x92>
				g_motor_status.current_mechanical_rotation++;
 80016c4:	6961      	ldr	r1, [r4, #20]
 80016c6:	3101      	adds	r1, #1
 80016c8:	6161      	str	r1, [r4, #20]
			if (g_motor_status.current_mechanical_position  > ENCODER_M1.PulseNumber - ENCODER_M1.PulseNumber / 4 && g_motor_status.previous_mechanical_position < ENCODER_M1.PulseNumber / 4)
 80016ca:	69a1      	ldr	r1, [r4, #24]
 80016cc:	428a      	cmp	r2, r1
 80016ce:	da05      	bge.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa4>
 80016d0:	69e2      	ldr	r2, [r4, #28]
 80016d2:	4293      	cmp	r3, r2
 80016d4:	dd02      	ble.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa4>
				g_motor_status.current_mechanical_rotation--;
 80016d6:	6963      	ldr	r3, [r4, #20]
 80016d8:	3b01      	subs	r3, #1
 80016da:	6163      	str	r3, [r4, #20]
			g_motor_status.current_encoder_speed = ENCODER_M1._Super.hAvrMecSpeedUnit;
 80016dc:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 80016e0:	81e3      	strh	r3, [r4, #14]
			g_motor_status.current_encoder_speed_in_rads = g_motor_status.current_encoder_speed * 6 * M_TWOPI / 60;
 80016e2:	89e0      	ldrh	r0, [r4, #14]
			if (g_motor_status.current_joint_position_in_rad < -1 * g_joint_configuration.joint_working_area_in_rad && g_joint_configuration.working_area_constrain)
 80016e4:	4da1      	ldr	r5, [pc, #644]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x334>)
			g_motor_status.current_encoder_speed_in_rads = g_motor_status.current_encoder_speed * 6 * M_TWOPI / 60;
 80016e6:	b200      	sxth	r0, r0
 80016e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80016ec:	0040      	lsls	r0, r0, #1
 80016ee:	f7fe fee5 	bl	80004bc <__aeabi_i2d>
 80016f2:	a393      	add	r3, pc, #588	; (adr r3, 8001940 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff4a 	bl	8000590 <__aeabi_dmul>
 80016fc:	f7ff f982 	bl	8000a04 <__aeabi_d2f>
 8001700:	6120      	str	r0, [r4, #16]
			g_motor_status.current_joint_speed_in_rads = g_motor_status.current_encoder_speed_in_rads / 120.0;
 8001702:	6920      	ldr	r0, [r4, #16]
 8001704:	f7fe feec 	bl	80004e0 <__aeabi_f2d>
 8001708:	a38f      	add	r3, pc, #572	; (adr r3, 8001948 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff3f 	bl	8000590 <__aeabi_dmul>
 8001712:	f7ff f977 	bl	8000a04 <__aeabi_d2f>
 8001716:	62e0      	str	r0, [r4, #44]	; 0x2c
			g_motor_status._current_torque_data[g_motor_status._current_torque_index++] = MC_GetPhaseCurrentAmplitudeMotor1();
 8001718:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	b2de      	uxtb	r6, r3
 8001722:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
 8001726:	f001 fbdb 	bl	8002ee0 <MC_GetPhaseCurrentAmplitudeMotor1>
 800172a:	f106 0324 	add.w	r3, r6, #36	; 0x24
 800172e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001732:	f8a3 0001 	strh.w	r0, [r3, #1]
			g_motor_status._current_torque_index %= CURRENT_TORQUE_DATA_SIZE;
 8001736:	f894 20ad 	ldrb.w	r2, [r4, #173]	; 0xad
 800173a:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	fba3 1302 	umull	r1, r3, r3, r2
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	2132      	movs	r1, #50	; 0x32
 8001746:	fb01 2313 	mls	r3, r1, r3, r2
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
			if (g_motor_status.current_joint_position_in_rad < -1 * g_joint_configuration.joint_working_area_in_rad && g_joint_configuration.working_area_constrain)
 8001750:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8001754:	f8d5 3016 	ldr.w	r3, [r5, #22]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef1 7a67 	vneg.f32	s15, s15
 8001760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	f140 81e2 	bpl.w	8001b30 <HAL_TIM_PeriodElapsedCallback+0x4f8>
 800176c:	79ab      	ldrb	r3, [r5, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 81de 	beq.w	8001b30 <HAL_TIM_PeriodElapsedCallback+0x4f8>
				g_motor_status.current_joint_position = POSITION_UNDER_WORKING_AREA;
 8001774:	23ff      	movs	r3, #255	; 0xff
 8001776:	7023      	strb	r3, [r4, #0]
				g_motor_status.warnings = g_motor_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 8001778:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
			if (g_motor_status.encoder_position_state != POSITION_ACCURATE)
 8001784:	7863      	ldrb	r3, [r4, #1]
 8001786:	2b02      	cmp	r3, #2
				g_motor_status.warnings = g_motor_status.warnings | JOINT_POSITION_NOT_ACCURATE;
 8001788:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800178c:	bf14      	ite	ne
 800178e:	f043 0301 	orrne.w	r3, r3, #1
				g_motor_status.warnings = g_motor_status.warnings & (0xFF ^ JOINT_POSITION_NOT_ACCURATE);
 8001792:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
 8001796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
			if (g_joint_configuration.ma730_exists)
 800179a:	796b      	ldrb	r3, [r5, #5]
 800179c:	b31b      	cbz	r3, 80017e6 <HAL_TIM_PeriodElapsedCallback+0x1ae>
				if (g_counter_1hz > 1) // wait 1 sec to analyse data
 800179e:	4b75      	ldr	r3, [pc, #468]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d91f      	bls.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x1ae>
	uint16_t send_data      = 0x0000 ;
 80017a6:	2200      	movs	r2, #0
					g_motor_status.ma730_is_running = true;
 80017a8:	2601      	movs	r6, #1
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80017aa:	4873      	ldr	r0, [pc, #460]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x340>)
	uint16_t send_data      = 0x0000 ;
 80017ac:	f8ad 200c 	strh.w	r2, [sp, #12]
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80017b0:	2104      	movs	r1, #4
	uint16_t angle_value    = 0;
 80017b2:	f8ad 2010 	strh.w	r2, [sp, #16]
					g_motor_status.ma730_is_running = true;
 80017b6:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80017ba:	f005 fe51 	bl	8007460 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &angle_value, 1, 1);
 80017be:	4633      	mov	r3, r6
 80017c0:	aa04      	add	r2, sp, #16
 80017c2:	a903      	add	r1, sp, #12
 80017c4:	486d      	ldr	r0, [pc, #436]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017c6:	9600      	str	r6, [sp, #0]
 80017c8:	f006 fd5a 	bl	8008280 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 80017cc:	4632      	mov	r2, r6
 80017ce:	486a      	ldr	r0, [pc, #424]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017d0:	2104      	movs	r1, #4
 80017d2:	f005 fe45 	bl	8007460 <HAL_GPIO_WritePin>
	g_ma730.angle = (angle_value >> 2) & 0b0011111111111111;
 80017d6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80017da:	4a69      	ldr	r2, [pc, #420]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	8013      	strh	r3, [r2, #0]
					g_motor_status.current_ma730_value = g_ma730.angle;
 80017e0:	8813      	ldrh	r3, [r2, #0]
 80017e2:	f8a4 303f 	strh.w	r3, [r4, #63]	; 0x3f
		if (g_timer_counter % 10 == 0)
 80017e6:	4e67      	ldr	r6, [pc, #412]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017e8:	8833      	ldrh	r3, [r6, #0]
 80017ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80017ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80017f2:	eb02 2202 	add.w	r2, r2, r2, lsl #8
 80017f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80017fa:	f3c2 014e 	ubfx	r1, r2, #1, #15
 80017fe:	ea41 32c2 	orr.w	r2, r1, r2, lsl #15
 8001802:	b292      	uxth	r2, r2
 8001804:	f641 1199 	movw	r1, #6553	; 0x1999
 8001808:	428a      	cmp	r2, r1
 800180a:	f200 82b0 	bhi.w	8001d6e <HAL_TIM_PeriodElapsedCallback+0x736>
			g_counter_1000hz++;
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x350>)
			g_motor_status.current_encoder_position = g_motor_status.current_mechanical_rotation * ENCODER_M1.PulseNumber + g_motor_status.current_mechanical_position;
 8001810:	f8ba 906e 	ldrh.w	r9, [sl, #110]	; 0x6e
			g_counter_1000hz++;
 8001814:	6813      	ldr	r3, [r2, #0]
			g_motor_command.goal_motor_torque_in_nm = g_motor_command.goal_joint_torque_in_nm / g_joint_configuration.gear_ratio;
 8001816:	f8df b18c 	ldr.w	fp, [pc, #396]	; 80019a4 <HAL_TIM_PeriodElapsedCallback+0x36c>
			g_counter_1000hz++;
 800181a:	3301      	adds	r3, #1
 800181c:	6013      	str	r3, [r2, #0]
			g_motor_status.current_encoder_position = g_motor_status.current_mechanical_rotation * ENCODER_M1.PulseNumber + g_motor_status.current_mechanical_position;
 800181e:	6963      	ldr	r3, [r4, #20]
 8001820:	69a2      	ldr	r2, [r4, #24]
 8001822:	fb09 2303 	mla	r3, r9, r3, r2
 8001826:	f8c4 3006 	str.w	r3, [r4, #6]
			g_motor_status.current_encoder_position_in_rad = M_TWOPI * (float) g_motor_status.current_encoder_position / ENCODER_M1.PulseNumber;
 800182a:	f8d4 0006 	ldr.w	r0, [r4, #6]
 800182e:	ee07 0a90 	vmov	s15, r0
 8001832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001836:	ee17 0a90 	vmov	r0, s15
 800183a:	f7fe fe51 	bl	80004e0 <__aeabi_f2d>
 800183e:	a344      	add	r3, pc, #272	; (adr r3, 8001950 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fea4 	bl	8000590 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	4648      	mov	r0, r9
 800184c:	4690      	mov	r8, r2
 800184e:	4689      	mov	r9, r1
 8001850:	f7fe fe34 	bl	80004bc <__aeabi_i2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4640      	mov	r0, r8
 800185a:	4649      	mov	r1, r9
 800185c:	f7fe ffc2 	bl	80007e4 <__aeabi_ddiv>
 8001860:	f7ff f8d0 	bl	8000a04 <__aeabi_d2f>
 8001864:	f8c4 000a 	str.w	r0, [r4, #10]
			g_motor_status.current_joint_position_in_rad = g_motor_status.current_encoder_position_in_rad / g_joint_configuration.gear_ratio + g_motor_status.current_encoder_position_offset_in_rad;
 8001868:	f8d4 000a 	ldr.w	r0, [r4, #10]
 800186c:	892b      	ldrh	r3, [r5, #8]
			g_motor_status.current_voltage 			= (float) RealBusVoltageSensorParamsM1.aBuffer[RealBusVoltageSensorParamsM1.index] / 1225; // FIXME sprawdzic jak to jest interpretowane
 800186e:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x354>)
			g_motor_status.current_joint_position_in_rad = g_motor_status.current_encoder_position_in_rad / g_joint_configuration.gear_ratio + g_motor_status.current_encoder_position_offset_in_rad;
 8001870:	f8d4 1002 	ldr.w	r1, [r4, #2]
			g_motor_status.current_voltage 			= (float) RealBusVoltageSensorParamsM1.aBuffer[RealBusVoltageSensorParamsM1.index] / 1225; // FIXME sprawdzic jak to jest interpretowane
 8001874:	f892 c025 	ldrb.w	ip, [r2, #37]	; 0x25
 8001878:	6a12      	ldr	r2, [r2, #32]
 800187a:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8001990 <HAL_TIM_PeriodElapsedCallback+0x358>
 800187e:	f832 201c 	ldrh.w	r2, [r2, ip, lsl #1]
			g_motor_status.current_joint_position_in_rad = g_motor_status.current_encoder_position_in_rad / g_joint_configuration.gear_ratio + g_motor_status.current_encoder_position_offset_in_rad;
 8001882:	b29b      	uxth	r3, r3
 8001884:	ee07 3a10 	vmov	s14, r3
 8001888:	ee06 0a90 	vmov	s13, r0
 800188c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			g_motor_status.current_voltage 			= (float) RealBusVoltageSensorParamsM1.aBuffer[RealBusVoltageSensorParamsM1.index] / 1225; // FIXME sprawdzic jak to jest interpretowane
 8001890:	ee07 2a90 	vmov	s15, r2
			g_motor_status.current_joint_position_in_rad = g_motor_status.current_encoder_position_in_rad / g_joint_configuration.gear_ratio + g_motor_status.current_encoder_position_offset_in_rad;
 8001894:	eec6 6a87 	vdiv.f32	s13, s13, s14
			if (g_max_voltage < g_motor_status.current_voltage) {
 8001898:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x35c>)
			g_motor_status.current_voltage 			= (float) RealBusVoltageSensorParamsM1.aBuffer[RealBusVoltageSensorParamsM1.index] / 1225; // FIXME sprawdzic jak to jest interpretowane
 800189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
			g_motor_status.current_joint_position_in_rad = g_motor_status.current_encoder_position_in_rad / g_joint_configuration.gear_ratio + g_motor_status.current_encoder_position_offset_in_rad;
 800189e:	ee07 1a10 	vmov	s14, r1
			g_motor_status.current_voltage 			= (float) RealBusVoltageSensorParamsM1.aBuffer[RealBusVoltageSensorParamsM1.index] / 1225; // FIXME sprawdzic jak to jest interpretowane
 80018a2:	ee67 7a86 	vmul.f32	s15, s15, s12
			g_motor_status.current_joint_position_in_rad = g_motor_status.current_encoder_position_in_rad / g_joint_configuration.gear_ratio + g_motor_status.current_encoder_position_offset_in_rad;
 80018a6:	ee36 7a87 	vadd.f32	s14, s13, s14
			g_motor_status.current_voltage 			= (float) RealBusVoltageSensorParamsM1.aBuffer[RealBusVoltageSensorParamsM1.index] / 1225; // FIXME sprawdzic jak to jest interpretowane
 80018aa:	ee17 3a90 	vmov	r3, s15
			g_motor_status.current_joint_position_in_rad = g_motor_status.current_encoder_position_in_rad / g_joint_configuration.gear_ratio + g_motor_status.current_encoder_position_offset_in_rad;
 80018ae:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
			g_motor_status.current_voltage 			= (float) RealBusVoltageSensorParamsM1.aBuffer[RealBusVoltageSensorParamsM1.index] / 1225; // FIXME sprawdzic jak to jest interpretowane
 80018b2:	f8c4 303b 	str.w	r3, [r4, #59]	; 0x3b
			if (g_max_voltage < g_motor_status.current_voltage) {
 80018b6:	f8d4 303b 	ldr.w	r3, [r4, #59]	; 0x3b
 80018ba:	edd2 6a00 	vldr	s13, [r2]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				g_max_voltage = g_motor_status.current_voltage;
 80018ca:	bfc4      	itt	gt
 80018cc:	f8d4 303b 	ldrgt.w	r3, [r4, #59]	; 0x3b
 80018d0:	6013      	strgt	r3, [r2, #0]
			g_motor_status.stm_state_motor 			= MC_GetSTMStateMotor1();
 80018d2:	f001 fb1d 	bl	8002f10 <MC_GetSTMStateMotor1>
 80018d6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
			g_motor_status.mc_current_faults_motor 	= MC_GetCurrentFaultsMotor1();
 80018da:	f001 fb13 	bl	8002f04 <MC_GetCurrentFaultsMotor1>
 80018de:	f8a4 0045 	strh.w	r0, [r4, #69]	; 0x45
			g_motor_status.mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 80018e2:	f001 fb09 	bl	8002ef8 <MC_GetOccurredFaultsMotor1>
 80018e6:	4603      	mov	r3, r0
			g_motor_status.current_temperature 		= (uint8_t) NTC_GetAvTemp_C(&TempSensorParamsM1);
 80018e8:	482b      	ldr	r0, [pc, #172]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x360>)
			g_motor_status.mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 80018ea:	f8a4 3047 	strh.w	r3, [r4, #71]	; 0x47
			g_motor_status.current_temperature 		= (uint8_t) NTC_GetAvTemp_C(&TempSensorParamsM1);
 80018ee:	f008 fabb 	bl	8009e68 <NTC_GetAvTemp_C>
 80018f2:	b2c0      	uxtb	r0, r0
 80018f4:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
			g_motor_command.goal_motor_torque_in_nm = g_motor_command.goal_joint_torque_in_nm / g_joint_configuration.gear_ratio;
 80018f8:	f8db 2006 	ldr.w	r2, [fp, #6]
 80018fc:	892b      	ldrh	r3, [r5, #8]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	ee07 2a10 	vmov	s14, r2
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001910:	ee17 3a90 	vmov	r3, s15
 8001914:	f8cb 3002 	str.w	r3, [fp, #2]
			g_motor_command.goal					= (((float) g_motor_command.goal_motor_torque_in_nm) * 32768.0) / (33.0 * KT);
 8001918:	f8db 0002 	ldr.w	r0, [fp, #2]
 800191c:	f7fe fde0 	bl	80004e0 <__aeabi_f2d>
 8001920:	a30d      	add	r3, pc, #52	; (adr r3, 8001958 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fe33 	bl	8000590 <__aeabi_dmul>
 800192a:	f7ff f843 	bl	80009b4 <__aeabi_d2iz>
			float temp_torque = 0;
 800192e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800199c <HAL_TIM_PeriodElapsedCallback+0x364>
			g_motor_command.goal					= (((float) g_motor_command.goal_motor_torque_in_nm) * 32768.0) / (33.0 * KT);
 8001932:	b200      	sxth	r0, r0
 8001934:	f8ab 0000 	strh.w	r0, [fp]
			for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	e037      	b.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x374>
 800193c:	f3af 8000 	nop.w
 8001940:	f37bebd5 	.word	0xf37bebd5
 8001944:	3fbacee9 	.word	0x3fbacee9
 8001948:	11111111 	.word	0x11111111
 800194c:	3f811111 	.word	0x3f811111
 8001950:	54442d18 	.word	0x54442d18
 8001954:	401921fb 	.word	0x401921fb
 8001958:	9aa1dbc6 	.word	0x9aa1dbc6
 800195c:	40c158d4 	.word	0x40c158d4
 8001960:	20000e48 	.word	0x20000e48
 8001964:	20000e98 	.word	0x20000e98
 8001968:	ffff92a0 	.word	0xffff92a0
 800196c:	20000000 	.word	0x20000000
 8001970:	51eb851f 	.word	0x51eb851f
 8001974:	20000e58 	.word	0x20000e58
 8001978:	48000400 	.word	0x48000400
 800197c:	20000f84 	.word	0x20000f84
 8001980:	20000e6c 	.word	0x20000e6c
 8001984:	20000f4c 	.word	0x20000f4c
 8001988:	20000e4c 	.word	0x20000e4c
 800198c:	20000bb8 	.word	0x20000bb8
 8001990:	3a55febf 	.word	0x3a55febf
 8001994:	20000e84 	.word	0x20000e84
 8001998:	20000c14 	.word	0x20000c14
 800199c:	00000000 	.word	0x00000000
 80019a0:	200008f4 	.word	0x200008f4
 80019a4:	20000e8c 	.word	0x20000e8c
 80019a8:	3ca3d70a 	.word	0x3ca3d70a
				temp_torque += (float) g_motor_status._current_torque_data[i];
 80019ac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80019b0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
			for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80019b4:	3301      	adds	r3, #1
				temp_torque += (float) g_motor_status._current_torque_data[i];
 80019b6:	f9b2 2001 	ldrsh.w	r2, [r2, #1]
 80019ba:	ee07 2a90 	vmov	s15, r2
 80019be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80019c2:	2b32      	cmp	r3, #50	; 0x32
				temp_torque += (float) g_motor_status._current_torque_data[i];
 80019c4:	ee37 7a27 	vadd.f32	s14, s14, s15
			for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80019c8:	d1f0      	bne.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x374>
			g_motor_status.current_motor_torque 		= (int16_t) (temp_torque / CURRENT_TORQUE_DATA_SIZE);
 80019ca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80019a8 <HAL_TIM_PeriodElapsedCallback+0x370>
 80019ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80019d6:	ee17 3a10 	vmov	r3, s14
 80019da:	b21b      	sxth	r3, r3
 80019dc:	8623      	strh	r3, [r4, #48]	; 0x30
			g_motor_status.current_motor_torque_in_nm	= (((float) g_motor_status.current_motor_torque) / 32768.0) * 33.0 * KT;
 80019de:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80019e0:	b200      	sxth	r0, r0
 80019e2:	ee07 0a90 	vmov	s15, r0
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	ee17 0a90 	vmov	r0, s15
 80019ee:	f7fe fd77 	bl	80004e0 <__aeabi_f2d>
 80019f2:	f20f 4348 	addw	r3, pc, #1096	; 0x448
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fdc9 	bl	8000590 <__aeabi_dmul>
 80019fe:	f7ff f801 	bl	8000a04 <__aeabi_d2f>
 8001a02:	f8c4 0032 	str.w	r0, [r4, #50]	; 0x32
			g_motor_status.current_joint_torque_in_nm	= g_motor_status.current_motor_torque_in_nm * g_joint_configuration.gear_ratio;
 8001a06:	f8d4 2032 	ldr.w	r2, [r4, #50]	; 0x32
 8001a0a:	892b      	ldrh	r3, [r5, #8]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	ee07 2a10 	vmov	s14, r2
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a1e:	ee17 3a90 	vmov	r3, s15
 8001a22:	f8c4 3036 	str.w	r3, [r4, #54]	; 0x36
			if (g_motor_status.ma730_is_running == true && g_joint_configuration.calibration_state == JOINT_CALIBRATED)
 8001a26:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001a2a:	b12b      	cbz	r3, 8001a38 <HAL_TIM_PeriodElapsedCallback+0x400>
 8001a2c:	79eb      	ldrb	r3, [r5, #7]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	fa5f f883 	uxtb.w	r8, r3
 8001a34:	f000 84ca 	beq.w	80023cc <HAL_TIM_PeriodElapsedCallback+0xd94>
	return g_fsm_status.state;
 8001a38:	f8df 8408 	ldr.w	r8, [pc, #1032]	; 8001e44 <HAL_TIM_PeriodElapsedCallback+0x80c>
 8001a3c:	f898 2000 	ldrb.w	r2, [r8]
			switch (FSM_Get_State()) {
 8001a40:	2a6e      	cmp	r2, #110	; 0x6e
	return g_fsm_status.state;
 8001a42:	b2d3      	uxtb	r3, r2
			switch (FSM_Get_State()) {
 8001a44:	f200 81d8 	bhi.w	8001df8 <HAL_TIM_PeriodElapsedCallback+0x7c0>
 8001a48:	2b6e      	cmp	r3, #110	; 0x6e
 8001a4a:	f200 8178 	bhi.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
 8001a4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a52:	008e      	.short	0x008e
 8001a54:	02bf0176 	.word	0x02bf0176
 8001a58:	01760294 	.word	0x01760294
 8001a5c:	01760176 	.word	0x01760176
 8001a60:	01760176 	.word	0x01760176
 8001a64:	02d60176 	.word	0x02d60176
 8001a68:	02da02d2 	.word	0x02da02d2
 8001a6c:	025e0277 	.word	0x025e0277
 8001a70:	0176024f 	.word	0x0176024f
 8001a74:	01760176 	.word	0x01760176
 8001a78:	01760176 	.word	0x01760176
 8001a7c:	01760176 	.word	0x01760176
 8001a80:	01760176 	.word	0x01760176
 8001a84:	01760176 	.word	0x01760176
 8001a88:	01760176 	.word	0x01760176
 8001a8c:	01760176 	.word	0x01760176
 8001a90:	01760176 	.word	0x01760176
 8001a94:	01760176 	.word	0x01760176
 8001a98:	01760176 	.word	0x01760176
 8001a9c:	01760176 	.word	0x01760176
 8001aa0:	01760176 	.word	0x01760176
 8001aa4:	01760176 	.word	0x01760176
 8001aa8:	01760176 	.word	0x01760176
 8001aac:	01760176 	.word	0x01760176
 8001ab0:	01760176 	.word	0x01760176
 8001ab4:	01760176 	.word	0x01760176
 8001ab8:	01760176 	.word	0x01760176
 8001abc:	01760176 	.word	0x01760176
 8001ac0:	01760176 	.word	0x01760176
 8001ac4:	01760176 	.word	0x01760176
 8001ac8:	01760176 	.word	0x01760176
 8001acc:	01760176 	.word	0x01760176
 8001ad0:	01760176 	.word	0x01760176
 8001ad4:	01760176 	.word	0x01760176
 8001ad8:	01760176 	.word	0x01760176
 8001adc:	01760176 	.word	0x01760176
 8001ae0:	01760176 	.word	0x01760176
 8001ae4:	01760176 	.word	0x01760176
 8001ae8:	01760176 	.word	0x01760176
 8001aec:	01760176 	.word	0x01760176
 8001af0:	01760176 	.word	0x01760176
 8001af4:	01760176 	.word	0x01760176
 8001af8:	01760176 	.word	0x01760176
 8001afc:	01760176 	.word	0x01760176
 8001b00:	01760176 	.word	0x01760176
 8001b04:	01760176 	.word	0x01760176
 8001b08:	01760176 	.word	0x01760176
 8001b0c:	01760176 	.word	0x01760176
 8001b10:	01760176 	.word	0x01760176
 8001b14:	01760176 	.word	0x01760176
 8001b18:	01ff0176 	.word	0x01ff0176
 8001b1c:	0478022e 	.word	0x0478022e
 8001b20:	03350439 	.word	0x03350439
 8001b24:	03b702de 	.word	0x03b702de
 8001b28:	01760176 	.word	0x01760176
 8001b2c:	02900176 	.word	0x02900176
			else if(g_motor_status.current_joint_position_in_rad > g_joint_configuration.joint_working_area_in_rad && g_joint_configuration.working_area_constrain)
 8001b30:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8001b34:	f8d5 3016 	ldr.w	r3, [r5, #22]
 8001b38:	ee07 3a10 	vmov	s14, r3
 8001b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	dd0a      	ble.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x524>
 8001b46:	79ab      	ldrb	r3, [r5, #6]
 8001b48:	b143      	cbz	r3, 8001b5c <HAL_TIM_PeriodElapsedCallback+0x524>
				g_motor_status.current_joint_position = POSITION_OVER_WORKING_AREA;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	7023      	strb	r3, [r4, #0]
				g_motor_status.warnings = g_motor_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 8001b4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b5a:	e613      	b.n	8001784 <HAL_TIM_PeriodElapsedCallback+0x14c>
				g_motor_status.current_joint_position = POSITION_IN_WORKING_AREA;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	7023      	strb	r3, [r4, #0]
				g_motor_status.warnings = g_motor_status.warnings & (0xFF ^ JOINT_OUTSIDE_WORKING_AREA);
 8001b60:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b64:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b6c:	e60a      	b.n	8001784 <HAL_TIM_PeriodElapsedCallback+0x14c>
					HAL_TIM_Base_Stop_IT(&htim6); // Enable 10 kHz timer
 8001b6e:	48a6      	ldr	r0, [pc, #664]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
					g_node_status.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001b70:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 8001e48 <HAL_TIM_PeriodElapsedCallback+0x810>
					HAL_TIM_Base_Stop_IT(&htim6); // Enable 10 kHz timer
 8001b74:	f006 ff34 	bl	80089e0 <HAL_TIM_Base_Stop_IT>
					g_joint_configuration.dip1 = (HAL_GPIO_ReadPin(GPIOC, DIP1_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7c:	48a3      	ldr	r0, [pc, #652]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001b7e:	f005 fc69 	bl	8007454 <HAL_GPIO_ReadPin>
 8001b82:	1e02      	subs	r2, r0, #0
 8001b84:	bf18      	it	ne
 8001b86:	2201      	movne	r2, #1
					g_joint_configuration.dip2 = (HAL_GPIO_ReadPin(GPIOC, DIP2_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8c:	489f      	ldr	r0, [pc, #636]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
					g_joint_configuration.dip1 = (HAL_GPIO_ReadPin(GPIOC, DIP1_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b8e:	702a      	strb	r2, [r5, #0]
					g_joint_configuration.dip2 = (HAL_GPIO_ReadPin(GPIOC, DIP2_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b90:	f005 fc60 	bl	8007454 <HAL_GPIO_ReadPin>
 8001b94:	1e02      	subs	r2, r0, #0
 8001b96:	bf18      	it	ne
 8001b98:	2201      	movne	r2, #1
					g_joint_configuration.dip3 = (HAL_GPIO_ReadPin(GPIOB, DIP3_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	489c      	ldr	r0, [pc, #624]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
					g_joint_configuration.dip2 = (HAL_GPIO_ReadPin(GPIOC, DIP2_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b9e:	706a      	strb	r2, [r5, #1]
					g_joint_configuration.dip3 = (HAL_GPIO_ReadPin(GPIOB, DIP3_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001ba0:	f005 fc58 	bl	8007454 <HAL_GPIO_ReadPin>
 8001ba4:	1e02      	subs	r2, r0, #0
 8001ba6:	bf18      	it	ne
 8001ba8:	2201      	movne	r2, #1
					g_joint_configuration.dip4 = (HAL_GPIO_ReadPin(GPIOB, DIP4_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001baa:	2110      	movs	r1, #16
 8001bac:	4898      	ldr	r0, [pc, #608]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
					g_joint_configuration.dip3 = (HAL_GPIO_ReadPin(GPIOB, DIP3_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001bae:	70aa      	strb	r2, [r5, #2]
					g_joint_configuration.dip4 = (HAL_GPIO_ReadPin(GPIOB, DIP4_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001bb0:	f005 fc50 	bl	8007454 <HAL_GPIO_ReadPin>
 8001bb4:	3800      	subs	r0, #0
 8001bb6:	bf18      	it	ne
 8001bb8:	2001      	movne	r0, #1
 8001bba:	70e8      	strb	r0, [r5, #3]
					g_node_status.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001bbc:	f895 e001 	ldrb.w	lr, [r5, #1]
 8001bc0:	78aa      	ldrb	r2, [r5, #2]
 8001bc2:	78e9      	ldrb	r1, [r5, #3]
					g_can_filter_config.FilterType = FDCAN_FILTER_DUAL;
 8001bc4:	4b93      	ldr	r3, [pc, #588]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
					g_can_tx_header.Identifier = (g_node_status.can_node_id + _can_start_address) * 16;
 8001bc6:	f8df c284 	ldr.w	ip, [pc, #644]	; 8001e4c <HAL_TIM_PeriodElapsedCallback+0x814>
					HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 10, 0);
 8001bca:	4893      	ldr	r0, [pc, #588]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
					g_node_status.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
 8001bd2:	430a      	orrs	r2, r1
					g_joint_configuration.working_area_constrain = true;
 8001bd4:	f04f 0b01 	mov.w	fp, #1
					g_node_status.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f88a 2001 	strb.w	r2, [sl, #1]
					g_joint_configuration.working_area_constrain = true;
 8001bde:	f885 b006 	strb.w	fp, [r5, #6]
					g_can_filter_config.FilterID1 = g_node_status.can_node_id + _can_start_address;
 8001be2:	f89a 1001 	ldrb.w	r1, [sl, #1]
					g_can_tx_header.Identifier = (g_node_status.can_node_id + _can_start_address) * 16;
 8001be6:	f89a 2001 	ldrb.w	r2, [sl, #1]
					g_can_filter_config.FilterType = FDCAN_FILTER_DUAL;
 8001bea:	f8c3 b008 	str.w	fp, [r3, #8]
					g_can_filter_config.FilterID1 = g_node_status.can_node_id + _can_start_address;
 8001bee:	310a      	adds	r1, #10
 8001bf0:	6119      	str	r1, [r3, #16]
					g_can_tx_header.Identifier = (g_node_status.can_node_id + _can_start_address) * 16;
 8001bf2:	320a      	adds	r2, #10
					g_can_filter_config.FilterID2 = 0x0AA ;
 8001bf4:	21aa      	movs	r1, #170	; 0xaa
 8001bf6:	6159      	str	r1, [r3, #20]
					g_can_tx_header.Identifier = (g_node_status.can_node_id + _can_start_address) * 16;
 8001bf8:	0112      	lsls	r2, r2, #4
					g_can_tx_header.DataLength = FDCAN_DLC_BYTES_12;
 8001bfa:	f44f 2110 	mov.w	r1, #589824	; 0x90000
					g_can_tx_header.Identifier = (g_node_status.can_node_id + _can_start_address) * 16;
 8001bfe:	f8cc 2000 	str.w	r2, [ip]
					g_can_tx_header.DataLength = FDCAN_DLC_BYTES_12;
 8001c02:	f8cc 100c 	str.w	r1, [ip, #12]
					g_can_filter_config.IdType = FDCAN_STANDARD_ID;
 8001c06:	f04f 0900 	mov.w	r9, #0
					g_can_tx_header.BitRateSwitch = FDCAN_BRS_ON;
 8001c0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
					g_can_tx_header.FDFormat = FDCAN_FD_CAN;
 8001c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
					g_can_tx_header.BitRateSwitch = FDCAN_BRS_ON;
 8001c12:	f8cc 2014 	str.w	r2, [ip, #20]
					g_can_tx_header.FDFormat = FDCAN_FD_CAN;
 8001c16:	f8cc 1018 	str.w	r1, [ip, #24]
					HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 10, 0);
 8001c1a:	464a      	mov	r2, r9
 8001c1c:	210a      	movs	r1, #10
					g_can_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8001c1e:	e9cc 9901 	strd	r9, r9, [ip, #4]
					g_can_tx_header.MessageMarker = 0;
 8001c22:	e9cc 9907 	strd	r9, r9, [ip, #28]
					g_can_tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001c26:	f8cc 9010 	str.w	r9, [ip, #16]
					g_can_filter_config.FilterIndex = 0;
 8001c2a:	e9c3 9900 	strd	r9, r9, [r3]
					g_can_filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001c2e:	f8c3 b00c 	str.w	fp, [r3, #12]
					HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 10, 0);
 8001c32:	f004 feed 	bl	8006a10 <HAL_FDCAN_ConfigTxDelayCompensation>
					HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 8001c36:	4878      	ldr	r0, [pc, #480]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001c38:	f004 fefa 	bl	8006a30 <HAL_FDCAN_EnableTxDelayCompensation>
					HAL_FDCAN_ConfigFilter(&hfdcan1, &g_can_filter_config); //Initialize CAN Filter
 8001c3c:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001c3e:	4876      	ldr	r0, [pc, #472]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001c40:	4619      	mov	r1, r3
 8001c42:	f004 fe93 	bl	800696c <HAL_FDCAN_ConfigFilter>
					HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3, 3, FDCAN_FILTER_REMOTE, FDCAN_REJECT_REMOTE);
 8001c46:	2203      	movs	r2, #3
 8001c48:	464b      	mov	r3, r9
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4872      	ldr	r0, [pc, #456]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001c4e:	f8cd b000 	str.w	fp, [sp]
 8001c52:	f004 febd 	bl	80069d0 <HAL_FDCAN_ConfigGlobalFilter>
					HAL_FDCAN_Start(&hfdcan1); //Initialize CAN Bus
 8001c56:	4870      	ldr	r0, [pc, #448]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001c58:	f004 ff0e 	bl	8006a78 <HAL_FDCAN_Start>
					HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);// Initialize CAN Bus Rx Interrupt
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	4659      	mov	r1, fp
 8001c60:	486d      	ldr	r0, [pc, #436]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001c62:	f005 f807 	bl	8006c74 <HAL_FDCAN_ActivateNotification>
					HAL_FDCAN_EnableISOMode(&hfdcan1);
 8001c66:	486c      	ldr	r0, [pc, #432]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8001c68:	f004 fef4 	bl	8006a54 <HAL_FDCAN_EnableISOMode>
					Flash_Read_Data (g_flash_address_configuration, (uint32_t *) g_calibration_config, 8);
 8001c6c:	4a6b      	ldr	r2, [pc, #428]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001c6e:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
					Flash_Read_Data (g_flash_address_configuration, (uint32_t *) g_calibration_config, 8);
 8001c70:	6812      	ldr	r2, [r2, #0]
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001c72:	6811      	ldr	r1, [r2, #0]
 8001c74:	6019      	str	r1, [r3, #0]
 8001c76:	6851      	ldr	r1, [r2, #4]
 8001c78:	6059      	str	r1, [r3, #4]
 8001c7a:	6891      	ldr	r1, [r2, #8]
 8001c7c:	6099      	str	r1, [r3, #8]
 8001c7e:	68d1      	ldr	r1, [r2, #12]
 8001c80:	60d9      	str	r1, [r3, #12]
 8001c82:	6911      	ldr	r1, [r2, #16]
 8001c84:	6119      	str	r1, [r3, #16]
 8001c86:	6951      	ldr	r1, [r2, #20]
 8001c88:	6159      	str	r1, [r3, #20]
 8001c8a:	6991      	ldr	r1, [r2, #24]
 8001c8c:	6199      	str	r1, [r3, #24]
 8001c8e:	69d1      	ldr	r1, [r2, #28]
 8001c90:	61d9      	str	r1, [r3, #28]
					g_joint_configuration.calibration_table_size 			= g_calibration_config[8]; // FIXME !!!!
 8001c92:	8a19      	ldrh	r1, [r3, #16]
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001c94:	6a10      	ldr	r0, [r2, #32]
					g_joint_configuration.calibration_table_size 			= g_calibration_config[8]; // FIXME !!!!
 8001c96:	83a9      	strh	r1, [r5, #28]
					if (g_joint_configuration.calibration_table_size > 0 && g_joint_configuration.calibration_table_size < 65535) {
 8001c98:	8baa      	ldrh	r2, [r5, #28]
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001c9a:	6218      	str	r0, [r3, #32]
					if (g_joint_configuration.calibration_table_size > 0 && g_joint_configuration.calibration_table_size < 65535) {
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d03c      	beq.n	8001d1c <HAL_TIM_PeriodElapsedCallback+0x6e4>
 8001ca2:	8baa      	ldrh	r2, [r5, #28]
 8001ca4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	4282      	cmp	r2, r0
 8001cac:	d036      	beq.n	8001d1c <HAL_TIM_PeriodElapsedCallback+0x6e4>
						g_joint_configuration.pole_pairs 						= g_calibration_config[0];
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	816a      	strh	r2, [r5, #10]
						g_joint_configuration.gear_ratio 						= g_calibration_config[1];
 8001cb2:	8858      	ldrh	r0, [r3, #2]
						g_joint_configuration.calibration_sector_size 			= g_calibration_config[4];
 8001cb4:	891a      	ldrh	r2, [r3, #8]
						g_joint_configuration.gear_ratio 						= g_calibration_config[1];
 8001cb6:	8128      	strh	r0, [r5, #8]
						g_joint_configuration.reachable_electrical_rotations	= g_calibration_config[5];
 8001cb8:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
						g_joint_configuration.calibration_sector_size 			= g_calibration_config[4];
 8001cbc:	836a      	strh	r2, [r5, #26]
						g_joint_configuration.zero_electric_position 			= (uint8_t) g_calibration_config[12];
 8001cbe:	7e18      	ldrb	r0, [r3, #24]
						g_joint_configuration.zero_electric_rotation 			= g_calibration_config[13];
 8001cc0:	8b5a      	ldrh	r2, [r3, #26]
							Flash_Read_Data (g_flash_address_calibration_table + i * 8, (uint32_t *) g_data, 1);
 8001cc2:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
						g_joint_configuration.reachable_electrical_rotations	= g_calibration_config[5];
 8001cc4:	f8a5 c00e 	strh.w	ip, [r5, #14]
						g_joint_configuration.number_of_sectors 				= g_calibration_config[8];
 8001cc8:	8229      	strh	r1, [r5, #16]
						g_joint_configuration.zero_electric_position 			= (uint8_t) g_calibration_config[12];
 8001cca:	8268      	strh	r0, [r5, #18]
						g_joint_configuration.zero_electric_rotation 			= g_calibration_config[13];
 8001ccc:	82aa      	strh	r2, [r5, #20]
						for (int i = 0; i <= g_joint_configuration.calibration_table_size; i++) {
 8001cce:	8baa      	ldrh	r2, [r5, #28]
 8001cd0:	4955      	ldr	r1, [pc, #340]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
							Flash_Read_Data (g_flash_address_calibration_table + i * 8, (uint32_t *) g_data, 1);
 8001cd2:	681a      	ldr	r2, [r3, #0]
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	600b      	str	r3, [r1, #0]
							g_joint_configuration.calibration_table_1[i]	= g_data[0] >> 16;
 8001cd8:	f109 0c0c 	add.w	ip, r9, #12
							g_joint_configuration.calibration_table_2[i] 	= g_data[0];
 8001cdc:	f509 7003 	add.w	r0, r9, #524	; 0x20c
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001ce0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001ce4:	f8c1 e004 	str.w	lr, [r1, #4]
							g_joint_configuration.calibration_table_1[i]	= g_data[0] >> 16;
 8001ce8:	eb05 0c4c 	add.w	ip, r5, ip, lsl #1
							g_joint_configuration.calibration_table_2[i] 	= g_data[0];
 8001cec:	eb05 0040 	add.w	r0, r5, r0, lsl #1
							g_joint_configuration.calibration_table_1[i]	= g_data[0] >> 16;
 8001cf0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
							g_joint_configuration.calibration_table_2[i] 	= g_data[0];
 8001cf4:	b29b      	uxth	r3, r3
							g_joint_configuration.calibration_table_1[i]	= g_data[0] >> 16;
 8001cf6:	f8ac e006 	strh.w	lr, [ip, #6]
							g_joint_configuration.calibration_table_2[i] 	= g_data[0];
 8001cfa:	80c3      	strh	r3, [r0, #6]
						for (int i = 0; i <= g_joint_configuration.calibration_table_size; i++) {
 8001cfc:	8bab      	ldrh	r3, [r5, #28]
 8001cfe:	f109 0901 	add.w	r9, r9, #1
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	454b      	cmp	r3, r9
 8001d06:	f102 0208 	add.w	r2, r2, #8
 8001d0a:	dae3      	bge.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x69c>
						g_joint_configuration.maximum_electrical_rotations = g_joint_configuration.gear_ratio * g_joint_configuration.pole_pairs;
 8001d0c:	892b      	ldrh	r3, [r5, #8]
 8001d0e:	896a      	ldrh	r2, [r5, #10]
 8001d10:	fb13 f302 	smulbb	r3, r3, r2
 8001d14:	b29b      	uxth	r3, r3
						g_joint_configuration.calibration_state = JOINT_CALIBRATED;
 8001d16:	2201      	movs	r2, #1
						g_joint_configuration.maximum_electrical_rotations = g_joint_configuration.gear_ratio * g_joint_configuration.pole_pairs;
 8001d18:	81ab      	strh	r3, [r5, #12]
						g_joint_configuration.calibration_state = JOINT_CALIBRATED;
 8001d1a:	71ea      	strb	r2, [r5, #7]
					g_joint_configuration.joint_working_area_in_rad = M_PI * 165.0 / 180.0;
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001d1e:	f8c5 3016 	str.w	r3, [r5, #22]
					g_node_status.security = SECURITY_DISABLED;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f88a 3003 	strb.w	r3, [sl, #3]
					g_node_status.node_type = JOINT_TYPE;
 8001d28:	2202      	movs	r2, #2
					g_node_status.hartbeat = HEARTBEAT_DISABLED;
 8001d2a:	f88a 3002 	strb.w	r3, [sl, #2]
	g_fsm_status.state = new_transition;
 8001d2e:	230a      	movs	r3, #10
					g_node_status.node_type = JOINT_TYPE;
 8001d30:	f88a 2000 	strb.w	r2, [sl]
					HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer
 8001d34:	4834      	ldr	r0, [pc, #208]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
	g_fsm_status.state = new_transition;
 8001d36:	f888 3000 	strb.w	r3, [r8]
					HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer
 8001d3a:	f006 fe17 	bl	800896c <HAL_TIM_Base_Start_IT>
			if (g_motor_status.mc_current_faults_motor > 0 || g_motor_status.mc_occured_faults_motor > 0) {
 8001d3e:	f8b4 3045 	ldrh.w	r3, [r4, #69]	; 0x45
 8001d42:	b923      	cbnz	r3, 8001d4e <HAL_TIM_PeriodElapsedCallback+0x716>
 8001d44:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8329 	beq.w	80023a0 <HAL_TIM_PeriodElapsedCallback+0xd68>
				g_motor_status.errors =  g_motor_status.errors | JOINT_MC_FAILED;
 8001d4e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001d52:	f043 0302 	orr.w	r3, r3, #2
 8001d56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	return g_fsm_status.state;
 8001d5a:	f898 3000 	ldrb.w	r3, [r8]
				if (FSM_Get_State() != FSM_FAULT)
 8001d5e:	2bff      	cmp	r3, #255	; 0xff
 8001d60:	d004      	beq.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x734>
	return g_fsm_status.state;
 8001d62:	f898 3000 	ldrb.w	r3, [r8]
			if (FSM_Get_State() != FSM_START)
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8322 	bne.w	80023b0 <HAL_TIM_PeriodElapsedCallback+0xd78>
	return true;
 8001d6c:	8833      	ldrh	r3, [r6, #0]
		if (g_timer_counter % 100 == 0)
 8001d6e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001d72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001d76:	eba2 2282 	sub.w	r2, r2, r2, lsl #10
 8001d7a:	f3c2 018d 	ubfx	r1, r2, #2, #14
 8001d7e:	ea41 3282 	orr.w	r2, r1, r2, lsl #14
 8001d82:	b292      	uxth	r2, r2
 8001d84:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8001d88:	d203      	bcs.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x75a>
			g_counter_100hz++;
 8001d8a:	4929      	ldr	r1, [pc, #164]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001d8c:	680a      	ldr	r2, [r1, #0]
 8001d8e:	3201      	adds	r2, #1
 8001d90:	600a      	str	r2, [r1, #0]
 8001d92:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8001d96:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
 8001d9a:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
 8001d9e:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 8001da2:	f3c2 01cc 	ubfx	r1, r2, #3, #13
 8001da6:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
		if (g_timer_counter % 1000 == 0)
 8001daa:	b292      	uxth	r2, r2
 8001dac:	2a41      	cmp	r2, #65	; 0x41
 8001dae:	d803      	bhi.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x780>
			g_counter_10hz++;
 8001db0:	4920      	ldr	r1, [pc, #128]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001db2:	680a      	ldr	r2, [r1, #0]
 8001db4:	3201      	adds	r2, #1
 8001db6:	600a      	str	r2, [r1, #0]
 8001db8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001dbc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001dc0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001dc4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001dc8:	f3c2 110b 	ubfx	r1, r2, #4, #12
 8001dcc:	ea41 3202 	orr.w	r2, r1, r2, lsl #12
		if (g_timer_counter % 10000 == 0)
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	2a06      	cmp	r2, #6
 8001dd4:	d803      	bhi.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x7a6>
			g_counter_1hz++;
 8001dd6:	4918      	ldr	r1, [pc, #96]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001dd8:	680a      	ldr	r2, [r1, #0]
 8001dda:	3201      	adds	r2, #1
 8001ddc:	600a      	str	r2, [r1, #0]
		g_timer_counter++;
 8001dde:	3301      	adds	r3, #1
 8001de0:	b29b      	uxth	r3, r3
		if (g_timer_counter >= 10000) {
 8001de2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001de6:	4293      	cmp	r3, r2
			g_timer_counter = 0;
 8001de8:	bf88      	it	hi
 8001dea:	2300      	movhi	r3, #0
 8001dec:	8033      	strh	r3, [r6, #0]
}
 8001dee:	b008      	add	sp, #32
 8001df0:	ecbd 8b04 	vpop	{d8-d9}
 8001df4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
			switch (FSM_Get_State()) {
 8001df8:	2bfe      	cmp	r3, #254	; 0xfe
 8001dfa:	d1a0      	bne.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_fsm_status.state = new_transition;
 8001dfc:	230e      	movs	r3, #14
 8001dfe:	f888 3000 	strb.w	r3, [r8]
	return true;
 8001e02:	e79c      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
 8001e04:	f3af 8000 	nop.w
 8001e08:	20001218 	.word	0x20001218
 8001e0c:	48000800 	.word	0x48000800
 8001e10:	48000400 	.word	0x48000400
 8001e14:	20001104 	.word	0x20001104
 8001e18:	200011b4 	.word	0x200011b4
 8001e1c:	20000838 	.word	0x20000838
 8001e20:	20000e00 	.word	0x20000e00
 8001e24:	20000834 	.word	0x20000834
 8001e28:	20000e60 	.word	0x20000e60
 8001e2c:	40384e88 	.word	0x40384e88
 8001e30:	20000e50 	.word	0x20000e50
 8001e34:	20000e54 	.word	0x20000e54
 8001e38:	20000e58 	.word	0x20000e58
 8001e3c:	26000000 	.word	0x26000000
 8001e40:	3f1d83e4 	.word	0x3f1d83e4
 8001e44:	20000e68 	.word	0x20000e68
 8001e48:	20000f48 	.word	0x20000f48
 8001e4c:	200012b0 	.word	0x200012b0
					g_joint_configuration.calibration_state = JOINT_NOT_CALIBRATED;
 8001e50:	2300      	movs	r3, #0
					g_joint_configuration.calibration_sector_size = SECTOR_SIZE;
 8001e52:	2005      	movs	r0, #5
					g_joint_configuration.pole_pairs = POLE_PAIRS;
 8001e54:	210e      	movs	r1, #14
					g_joint_configuration.gear_ratio = GEAR_RATIO;
 8001e56:	2279      	movs	r2, #121	; 0x79
					g_joint_configuration.calibration_state = JOINT_NOT_CALIBRATED;
 8001e58:	71eb      	strb	r3, [r5, #7]
					g_joint_configuration.calibration_sector_size = SECTOR_SIZE;
 8001e5a:	8368      	strh	r0, [r5, #26]
					g_joint_configuration.pole_pairs = POLE_PAIRS;
 8001e5c:	8169      	strh	r1, [r5, #10]
					g_joint_configuration.gear_ratio = GEAR_RATIO;
 8001e5e:	812a      	strh	r2, [r5, #8]
					g_joint_configuration.maximum_electrical_rotations = g_joint_configuration.gear_ratio * g_joint_configuration.pole_pairs;
 8001e60:	892a      	ldrh	r2, [r5, #8]
 8001e62:	8969      	ldrh	r1, [r5, #10]
 8001e64:	fb12 f201 	smulbb	r2, r2, r1
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	81aa      	strh	r2, [r5, #12]
					g_joint_configuration.calibration_table_size = (uint16_t) (g_joint_configuration.maximum_electrical_rotations / g_joint_configuration.calibration_sector_size);
 8001e6c:	89aa      	ldrh	r2, [r5, #12]
 8001e6e:	8b69      	ldrh	r1, [r5, #26]
 8001e70:	b292      	uxth	r2, r2
 8001e72:	b289      	uxth	r1, r1
 8001e74:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e78:	83aa      	strh	r2, [r5, #28]
					g_joint_configuration.reachable_electrical_rotations = 0;
 8001e7a:	81eb      	strh	r3, [r5, #14]
					g_joint_configuration.number_of_sectors = 0;
 8001e7c:	822b      	strh	r3, [r5, #16]
					g_joint_configuration.zero_electric_position = 0;
 8001e7e:	826b      	strh	r3, [r5, #18]
					g_joint_configuration.zero_electric_rotation = 0;
 8001e80:	82ab      	strh	r3, [r5, #20]
					for (int i = 0; i < g_joint_configuration.calibration_table_size; i++)
 8001e82:	8baa      	ldrh	r2, [r5, #28]
 8001e84:	b292      	uxth	r2, r2
						g_joint_configuration.calibration_table_1[i] = 0;
 8001e86:	4618      	mov	r0, r3
					for (int i = 0; i < g_joint_configuration.calibration_table_size; i++)
 8001e88:	b172      	cbz	r2, 8001ea8 <HAL_TIM_PeriodElapsedCallback+0x870>
						g_joint_configuration.calibration_table_1[i] = 0;
 8001e8a:	f103 010c 	add.w	r1, r3, #12
						g_joint_configuration.calibration_table_2[i] = 0;
 8001e8e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8001e92:	eb05 0242 	add.w	r2, r5, r2, lsl #1
						g_joint_configuration.calibration_table_1[i] = 0;
 8001e96:	eb05 0141 	add.w	r1, r5, r1, lsl #1
					for (int i = 0; i < g_joint_configuration.calibration_table_size; i++)
 8001e9a:	3301      	adds	r3, #1
						g_joint_configuration.calibration_table_1[i] = 0;
 8001e9c:	80c8      	strh	r0, [r1, #6]
						g_joint_configuration.calibration_table_2[i] = 0;
 8001e9e:	80d0      	strh	r0, [r2, #6]
					for (int i = 0; i < g_joint_configuration.calibration_table_size; i++)
 8001ea0:	8baa      	ldrh	r2, [r5, #28]
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dcf0      	bgt.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x852>
					g_fsm_status.state = FSM_CALIBRATION_PHASE_1;
 8001ea8:	2365      	movs	r3, #101	; 0x65
 8001eaa:	f888 3000 	strb.w	r3, [r8]
	if (g_motor_status.current_motor_torque > g_calibration_torque_limit && g_motor_status.stm_state_motor == RUN) return true;
 8001eae:	4bba      	ldr	r3, [pc, #744]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8001eb0:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b212      	sxth	r2, r2
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dd04      	ble.n	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x88e>
 8001ebc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	f000 836f 	beq.w	80025a4 <HAL_TIM_PeriodElapsedCallback+0xf6c>
						motor_start(SPEED, -1 * g_calibration_speed);
 8001ec6:	4bb5      	ldr	r3, [pc, #724]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	425b      	negs	r3, r3
 8001ecc:	b21b      	sxth	r3, r3
	g_motor_command.mode = mode;
 8001ece:	2101      	movs	r1, #1
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 8001ed0:	2202      	movs	r2, #2
	g_motor_command.goal = goal;
 8001ed2:	f8ab 3000 	strh.w	r3, [fp]
	g_motor_command.mode = mode;
 8001ed6:	f88b 100a 	strb.w	r1, [fp, #10]
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 8001eda:	f88b 200b 	strb.w	r2, [fp, #11]
			MC_ProgramSpeedRampMotor1(g_motor_command.goal, 0);
 8001ede:	f8bb 0000 	ldrh.w	r0, [fp]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	b200      	sxth	r0, r0
 8001ee6:	f000 ffeb 	bl	8002ec0 <MC_ProgramSpeedRampMotor1>
	MC_StartMotor1();
 8001eea:	f000 ffdd 	bl	8002ea8 <MC_StartMotor1>
 8001eee:	e726      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
					MC_AcknowledgeFaultMotor1();
 8001ef0:	f000 fffc 	bl	8002eec <MC_AcknowledgeFaultMotor1>
					g_motor_status.mc_occured_faults_motor = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8001efa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	g_fsm_status.state = new_state;
 8001efe:	2201      	movs	r2, #1
					g_motor_status.mc_occured_faults_motor = 0;
 8001f00:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8001f04:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	g_fsm_status.state = new_state;
 8001f08:	f888 2000 	strb.w	r2, [r8]
	return true;
 8001f0c:	e717      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_motor_command.state = MOTOR_STOPPED;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f88b 300b 	strb.w	r3, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f14:	461a      	mov	r2, r3
	g_motor_command.goal = 0;
 8001f16:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8001f20:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f24:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 8001f26:	7858      	ldrb	r0, [r3, #1]
 8001f28:	7059      	strb	r1, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f2a:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 8001f2c:	7898      	ldrb	r0, [r3, #2]
 8001f2e:	7099      	strb	r1, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f30:	d1f4      	bne.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0x8e4>
	g_motor_status.current_motor_torque = 0;
 8001f32:	8621      	strh	r1, [r4, #48]	; 0x30
	MC_StopMotor1();
 8001f34:	f000 ffbe 	bl	8002eb4 <MC_StopMotor1>
	g_fsm_status.state = new_state;
 8001f38:	23ff      	movs	r3, #255	; 0xff
 8001f3a:	f888 3000 	strb.w	r3, [r8]
	return true;
 8001f3e:	e6fe      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_motor_command.state = MOTOR_STOPPED;
 8001f40:	2300      	movs	r3, #0
	g_fsm_status.state = new_state;
 8001f42:	2102      	movs	r1, #2
 8001f44:	f888 1000 	strb.w	r1, [r8]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f48:	461a      	mov	r2, r3
	g_motor_command.state = MOTOR_STOPPED;
 8001f4a:	f88b 300b 	strb.w	r3, [fp, #11]
		g_motor_status._current_torque_data[i] = 0;
 8001f4e:	4619      	mov	r1, r3
	g_motor_command.goal = 0;
 8001f50:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 8001f54:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8001f58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f5c:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 8001f5e:	7858      	ldrb	r0, [r3, #1]
 8001f60:	7059      	strb	r1, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f62:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 8001f64:	7898      	ldrb	r0, [r3, #2]
 8001f66:	7099      	strb	r1, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001f68:	d1f4      	bne.n	8001f54 <HAL_TIM_PeriodElapsedCallback+0x91c>
	g_motor_status.current_motor_torque = 0;
 8001f6a:	8621      	strh	r1, [r4, #48]	; 0x30
	MC_StopMotor1();
 8001f6c:	f000 ffa2 	bl	8002eb4 <MC_StopMotor1>
}
 8001f70:	e6e5      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_fsm_status.state = new_state;
 8001f72:	2364      	movs	r3, #100	; 0x64
 8001f74:	f888 3000 	strb.w	r3, [r8]
	return true;
 8001f78:	e6e1      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
					g_motor_command.mode = TORQUE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f88b 300a 	strb.w	r3, [fp, #10]
					if (g_joint_configuration.working_area_constrain)
 8001f80:	79aa      	ldrb	r2, [r5, #6]
 8001f82:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	f000 832b 	beq.w	80025e2 <HAL_TIM_PeriodElapsedCallback+0xfaa>
						switch (g_motor_status.current_joint_position)
 8001f8c:	7822      	ldrb	r2, [r4, #0]
 8001f8e:	b251      	sxtb	r1, r2
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	f000 8326 	beq.w	80025e2 <HAL_TIM_PeriodElapsedCallback+0xfaa>
 8001f96:	2901      	cmp	r1, #1
 8001f98:	f000 83dc 	beq.w	8002754 <HAL_TIM_PeriodElapsedCallback+0x111c>
 8001f9c:	3101      	adds	r1, #1
 8001f9e:	f47f aece 	bne.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
								if (g_motor_command.goal < 0)
 8001fa2:	f8bb 2000 	ldrh.w	r2, [fp]
 8001fa6:	0412      	lsls	r2, r2, #16
 8001fa8:	f140 8409 	bpl.w	80027be <HAL_TIM_PeriodElapsedCallback+0x1186>
	g_motor_command.state = MOTOR_STOPPED;
 8001fac:	f88b 300b 	strb.w	r3, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001fb0:	461a      	mov	r2, r3
	g_motor_command.goal = 0;
 8001fb2:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8001fbc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001fc0:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 8001fc2:	7858      	ldrb	r0, [r3, #1]
 8001fc4:	7059      	strb	r1, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001fc6:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 8001fc8:	7898      	ldrb	r0, [r3, #2]
 8001fca:	7099      	strb	r1, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001fcc:	d1f4      	bne.n	8001fb8 <HAL_TIM_PeriodElapsedCallback+0x980>
 8001fce:	e7cc      	b.n	8001f6a <HAL_TIM_PeriodElapsedCallback+0x932>
	g_motor_command.state = MOTOR_STOPPED;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f88b 300b 	strb.w	r3, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001fd6:	461a      	mov	r2, r3
	g_motor_command.goal = 0;
 8001fd8:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8001fe2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001fe6:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 8001fe8:	7858      	ldrb	r0, [r3, #1]
 8001fea:	7059      	strb	r1, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001fec:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 8001fee:	7898      	ldrb	r0, [r3, #2]
 8001ff0:	7099      	strb	r1, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001ff2:	d1f4      	bne.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x9a6>
 8001ff4:	e7b9      	b.n	8001f6a <HAL_TIM_PeriodElapsedCallback+0x932>
	g_fsm_status.state = new_state;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	f888 3000 	strb.w	r3, [r8]
	return true;
 8001ffc:	e69f      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_fsm_status.state = new_state;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f888 3000 	strb.w	r3, [r8]
	return true;
 8002004:	e69b      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_fsm_status.state = new_state;
 8002006:	2303      	movs	r3, #3
 8002008:	f888 3000 	strb.w	r3, [r8]
	return true;
 800200c:	e697      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
					if (motor_in_position(g_center_encoder_position))
 800200e:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8002010:	681a      	ldr	r2, [r3, #0]
	if (abs(g_motor_status.current_encoder_position - position) < CALIBRATION_ZERO_POSITION_OFFSET) return true;
 8002012:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	bfb8      	it	lt
 800201c:	425b      	neglt	r3, r3
 800201e:	2b09      	cmp	r3, #9
 8002020:	f340 82f2 	ble.w	8002608 <HAL_TIM_PeriodElapsedCallback+0xfd0>
						motor_start(SPEED, g_calibration_speed);
 8002024:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8002026:	881b      	ldrh	r3, [r3, #0]
	g_motor_command.mode = mode;
 8002028:	2101      	movs	r1, #1
						motor_start(SPEED, g_calibration_speed);
 800202a:	b21b      	sxth	r3, r3
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 800202c:	2202      	movs	r2, #2
	g_motor_command.goal = goal;
 800202e:	f8ab 3000 	strh.w	r3, [fp]
	g_motor_command.mode = mode;
 8002032:	f88b 100a 	strb.w	r1, [fp, #10]
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 8002036:	f88b 200b 	strb.w	r2, [fp, #11]
			MC_ProgramSpeedRampMotor1(g_motor_command.goal, 0);
 800203a:	f8bb 0000 	ldrh.w	r0, [fp]
 800203e:	2100      	movs	r1, #0
 8002040:	b200      	sxth	r0, r0
 8002042:	f000 ff3d 	bl	8002ec0 <MC_ProgramSpeedRampMotor1>
	MC_StartMotor1();
 8002046:	f000 ff2f 	bl	8002ea8 <MC_StartMotor1>
	if (g_motor_status.current_motor_torque > g_calibration_torque_limit && g_motor_status.stm_state_motor == RUN) return true;
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 800204c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b212      	sxth	r2, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	429a      	cmp	r2, r3
 8002056:	f77f ae72 	ble.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
 800205a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800205e:	2b06      	cmp	r3, #6
 8002060:	f47f ae6d 	bne.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_motor_command.goal = goal;
 8002064:	2500      	movs	r5, #0
	g_motor_command.mode = mode;
 8002066:	2201      	movs	r2, #1
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 8002068:	2302      	movs	r3, #2
	g_motor_command.goal = goal;
 800206a:	f8ab 5000 	strh.w	r5, [fp]
	g_motor_command.mode = mode;
 800206e:	f88b 200a 	strb.w	r2, [fp, #10]
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 8002072:	f88b 300b 	strb.w	r3, [fp, #11]
			MC_ProgramSpeedRampMotor1(g_motor_command.goal, 0);
 8002076:	f8bb 0000 	ldrh.w	r0, [fp]
 800207a:	4629      	mov	r1, r5
 800207c:	b200      	sxth	r0, r0
 800207e:	f000 ff1f 	bl	8002ec0 <MC_ProgramSpeedRampMotor1>
	MC_StartMotor1();
 8002082:	f000 ff11 	bl	8002ea8 <MC_StartMotor1>
	g_motor_command.state = MOTOR_STOPPED;
 8002086:	f88b 500b 	strb.w	r5, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 800208a:	462a      	mov	r2, r5
		g_motor_status._current_torque_data[i] = 0;
 800208c:	4628      	mov	r0, r5
	g_motor_command.goal = 0;
 800208e:	f8ab 5000 	strh.w	r5, [fp]
		g_motor_status._current_torque_data[i] = 0;
 8002092:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8002096:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 800209a:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 800209c:	7859      	ldrb	r1, [r3, #1]
 800209e:	7058      	strb	r0, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80020a0:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 80020a2:	7899      	ldrb	r1, [r3, #2]
 80020a4:	7098      	strb	r0, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80020a6:	d1f4      	bne.n	8002092 <HAL_TIM_PeriodElapsedCallback+0xa5a>
	g_motor_status.current_motor_torque = 0;
 80020a8:	8620      	strh	r0, [r4, #48]	; 0x30
	MC_StopMotor1();
 80020aa:	f000 ff03 	bl	8002eb4 <MC_StopMotor1>
						g_calibration_state = MISSED_CENTER_POSITION;
 80020ae:	4a3d      	ldr	r2, [pc, #244]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 80020b0:	2164      	movs	r1, #100	; 0x64
	g_fsm_status.state = new_state;
 80020b2:	23fe      	movs	r3, #254	; 0xfe
						g_calibration_state = MISSED_CENTER_POSITION;
 80020b4:	7011      	strb	r1, [r2, #0]
	g_fsm_status.state = new_state;
 80020b6:	f888 3000 	strb.w	r3, [r8]
	return true;
 80020ba:	e640      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
					if (!check_calibration_data_cw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size) ||
 80020bc:	483a      	ldr	r0, [pc, #232]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xb70>)
	g_calibration_data_1_errors = 0;
 80020be:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 80021b4 <HAL_TIM_PeriodElapsedCallback+0xb7c>
					if (!check_calibration_data_cw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size) ||
 80020c2:	8801      	ldrh	r1, [r0, #0]
 80020c4:	8b6a      	ldrh	r2, [r5, #26]
	g_calibration_data_1_errors = 0;
 80020c6:	2300      	movs	r3, #0
					if (!check_calibration_data_cw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size) ||
 80020c8:	b209      	sxth	r1, r1
 80020ca:	b292      	uxth	r2, r2
 80020cc:	fb91 f1f2 	sdiv	r1, r1, r2
	for (int i = 0; i < size; i++) {
 80020d0:	4299      	cmp	r1, r3
	g_calibration_data_1_errors = 0;
 80020d2:	f8ac 3000 	strh.w	r3, [ip]
	for (int i = 0; i < size; i++) {
 80020d6:	dd0f      	ble.n	80020f8 <HAL_TIM_PeriodElapsedCallback+0xac0>
		if (g_joint_configuration.calibration_table_1[i] == 0) g_calibration_data_1_errors++;
 80020d8:	f103 020c 	add.w	r2, r3, #12
 80020dc:	eb05 0242 	add.w	r2, r5, r2, lsl #1
	for (int i = 0; i < size; i++) {
 80020e0:	3301      	adds	r3, #1
		if (g_joint_configuration.calibration_table_1[i] == 0) g_calibration_data_1_errors++;
 80020e2:	88d2      	ldrh	r2, [r2, #6]
 80020e4:	b292      	uxth	r2, r2
 80020e6:	b92a      	cbnz	r2, 80020f4 <HAL_TIM_PeriodElapsedCallback+0xabc>
 80020e8:	f8bc 2000 	ldrh.w	r2, [ip]
 80020ec:	3201      	adds	r2, #1
 80020ee:	b292      	uxth	r2, r2
 80020f0:	f8ac 2000 	strh.w	r2, [ip]
	for (int i = 0; i < size; i++) {
 80020f4:	4299      	cmp	r1, r3
 80020f6:	d1ef      	bne.n	80020d8 <HAL_TIM_PeriodElapsedCallback+0xaa0>
	if (g_calibration_data_1_errors > 0) return false;
 80020f8:	f8bc 3000 	ldrh.w	r3, [ip]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8248 	bne.w	8002594 <HAL_TIM_PeriodElapsedCallback+0xf5c>
						!check_calibration_data_ccw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size))
 8002104:	8801      	ldrh	r1, [r0, #0]
 8002106:	8b6a      	ldrh	r2, [r5, #26]
	g_calibration_data_2_errors = 0;
 8002108:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 80021b8 <HAL_TIM_PeriodElapsedCallback+0xb80>
						!check_calibration_data_ccw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size))
 800210c:	b209      	sxth	r1, r1
 800210e:	b292      	uxth	r2, r2
 8002110:	fb91 f1f2 	sdiv	r1, r1, r2
	for (int i = 0; i < size; i++) {
 8002114:	2900      	cmp	r1, #0
	g_calibration_data_2_errors = 0;
 8002116:	f8ac 3000 	strh.w	r3, [ip]
	for (int i = 0; i < size; i++) {
 800211a:	dd0f      	ble.n	800213c <HAL_TIM_PeriodElapsedCallback+0xb04>
		if (g_joint_configuration.calibration_table_2[i] == 0) g_calibration_data_2_errors++;
 800211c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8002120:	eb05 0242 	add.w	r2, r5, r2, lsl #1
	for (int i = 0; i < size; i++) {
 8002124:	3301      	adds	r3, #1
		if (g_joint_configuration.calibration_table_2[i] == 0) g_calibration_data_2_errors++;
 8002126:	88d2      	ldrh	r2, [r2, #6]
 8002128:	b292      	uxth	r2, r2
 800212a:	b92a      	cbnz	r2, 8002138 <HAL_TIM_PeriodElapsedCallback+0xb00>
 800212c:	f8bc 2000 	ldrh.w	r2, [ip]
 8002130:	3201      	adds	r2, #1
 8002132:	b292      	uxth	r2, r2
 8002134:	f8ac 2000 	strh.w	r2, [ip]
	for (int i = 0; i < size; i++) {
 8002138:	4299      	cmp	r1, r3
 800213a:	d1ef      	bne.n	800211c <HAL_TIM_PeriodElapsedCallback+0xae4>
	if (g_calibration_data_2_errors > 0) return false;
 800213c:	f8bc 3000 	ldrh.w	r3, [ip]
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8226 	bne.w	8002594 <HAL_TIM_PeriodElapsedCallback+0xf5c>
						g_max_electric_rotation_ccw = g_motor_status.current_electric_rotation; // Should be 0 right now
 8002148:	6a23      	ldr	r3, [r4, #32]
 800214a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80021bc <HAL_TIM_PeriodElapsedCallback+0xb84>
						g_center_encoder_position = (g_max_encoder_position - g_min_encoder_position + 1) / 2 + g_min_encoder_position;
 800214e:	4917      	ldr	r1, [pc, #92]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xb78>)
						g_max_electric_rotation_ccw = g_motor_status.current_electric_rotation; // Should be 0 right now
 8002152:	b21b      	sxth	r3, r3
 8002154:	f8ac 3000 	strh.w	r3, [ip]
						g_center_encoder_position = (g_max_encoder_position - g_min_encoder_position + 1) / 2 + g_min_encoder_position;
 8002158:	680b      	ldr	r3, [r1, #0]
 800215a:	f8d2 c000 	ldr.w	ip, [r2]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	490f      	ldr	r1, [pc, #60]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8002162:	eba3 030c 	sub.w	r3, r3, ip
 8002166:	3301      	adds	r3, #1
 8002168:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800216c:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8002170:	600b      	str	r3, [r1, #0]
						g_joint_configuration.number_of_sectors = (uint16_t) (g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size);
 8002172:	8803      	ldrh	r3, [r0, #0]
 8002174:	8b6a      	ldrh	r2, [r5, #26]
						g_calibration_state = CALIBRATION_OK;
 8002176:	490b      	ldr	r1, [pc, #44]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
						g_joint_configuration.number_of_sectors = (uint16_t) (g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size);
 8002178:	b292      	uxth	r2, r2
 800217a:	b21b      	sxth	r3, r3
 800217c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002180:	b29b      	uxth	r3, r3
 8002182:	822b      	strh	r3, [r5, #16]
						g_joint_configuration.reachable_electrical_rotations = g_max_electric_rotation_cw;
 8002184:	8803      	ldrh	r3, [r0, #0]
						g_fsm_status.state = FSM_CALIBRATION_PHASE_5;
 8002186:	2269      	movs	r2, #105	; 0x69
						g_calibration_state = CALIBRATION_OK;
 8002188:	20ff      	movs	r0, #255	; 0xff
						g_joint_configuration.reachable_electrical_rotations = g_max_electric_rotation_cw;
 800218a:	b29b      	uxth	r3, r3
 800218c:	81eb      	strh	r3, [r5, #14]
						g_calibration_state = CALIBRATION_OK;
 800218e:	7008      	strb	r0, [r1, #0]
						g_fsm_status.state = FSM_CALIBRATION_PHASE_5;
 8002190:	f888 2000 	strb.w	r2, [r8]
 8002194:	e5d3      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
 8002196:	bf00      	nop
 8002198:	20000820 	.word	0x20000820
 800219c:	2000081e 	.word	0x2000081e
 80021a0:	20000e44 	.word	0x20000e44
 80021a4:	20000e24 	.word	0x20000e24
 80021a8:	20000e7e 	.word	0x20000e7e
 80021ac:	20000e80 	.word	0x20000e80
 80021b0:	20000e88 	.word	0x20000e88
 80021b4:	20000e20 	.word	0x20000e20
 80021b8:	20000e22 	.word	0x20000e22
 80021bc:	20000e7c 	.word	0x20000e7c
					EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 80021c0:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80023c4 <HAL_TIM_PeriodElapsedCallback+0xd8c>
					HAL_TIM_Base_Stop_IT(&htim6); // Disable 10 kHz timer
 80021c4:	487c      	ldr	r0, [pc, #496]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0xd80>)
 80021c6:	f006 fc0b 	bl	80089e0 <HAL_TIM_Base_Stop_IT>
					HAL_FLASH_Unlock();
 80021ca:	f004 ff4f 	bl	800706c <HAL_FLASH_Unlock>
					EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 80021ce:	f8d9 3000 	ldr.w	r3, [r9]
					EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
 80021d2:	2000      	movs	r0, #0
					EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 80021d4:	f3c3 23cf 	ubfx	r3, r3, #11, #16
					EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
 80021d8:	2101      	movs	r1, #1
 80021da:	e9cd 0104 	strd	r0, r1, [sp, #16]
					EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 80021de:	9306      	str	r3, [sp, #24]
					if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80021e0:	a903      	add	r1, sp, #12
					EraseInitStruct.NbPages 	= 2; // 1 - 2kB
 80021e2:	2302      	movs	r3, #2
					if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80021e4:	a804      	add	r0, sp, #16
					EraseInitStruct.NbPages 	= 2; // 1 - 2kB
 80021e6:	9307      	str	r3, [sp, #28]
					if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80021e8:	f004 ff90 	bl	800710c <HAL_FLASHEx_Erase>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	f040 82ad 	bne.w	800274c <HAL_TIM_PeriodElapsedCallback+0x1114>
					data = (g_joint_configuration.gear_ratio << 16) | g_joint_configuration.pole_pairs;
 80021f2:	892b      	ldrh	r3, [r5, #8]
 80021f4:	896a      	ldrh	r2, [r5, #10]
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration, data) != HAL_OK)
 80021f6:	f8d9 1000 	ldr.w	r1, [r9]
					data = (g_joint_configuration.gear_ratio << 16) | g_joint_configuration.pole_pairs;
 80021fa:	b292      	uxth	r2, r2
 80021fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration, data) != HAL_OK)
 8002200:	17d3      	asrs	r3, r2, #31
 8002202:	2000      	movs	r0, #0
 8002204:	f004 fe84 	bl	8006f10 <HAL_FLASH_Program>
 8002208:	2800      	cmp	r0, #0
 800220a:	f040 8283 	bne.w	8002714 <HAL_TIM_PeriodElapsedCallback+0x10dc>
					data = (g_joint_configuration.reachable_electrical_rotations << 16) | g_joint_configuration.calibration_sector_size;
 800220e:	89eb      	ldrh	r3, [r5, #14]
 8002210:	8b6a      	ldrh	r2, [r5, #26]
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 8, data) != HAL_OK)
 8002212:	f8d9 1000 	ldr.w	r1, [r9]
					data = (g_joint_configuration.reachable_electrical_rotations << 16) | g_joint_configuration.calibration_sector_size;
 8002216:	b292      	uxth	r2, r2
 8002218:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 8, data) != HAL_OK)
 800221c:	17d3      	asrs	r3, r2, #31
 800221e:	3108      	adds	r1, #8
 8002220:	2000      	movs	r0, #0
 8002222:	f004 fe75 	bl	8006f10 <HAL_FLASH_Program>
 8002226:	2800      	cmp	r0, #0
 8002228:	f040 8270 	bne.w	800270c <HAL_TIM_PeriodElapsedCallback+0x10d4>
					data = (g_joint_configuration.calibration_sector_size << 16) | g_joint_configuration.number_of_sectors;
 800222c:	8b6b      	ldrh	r3, [r5, #26]
 800222e:	8a2a      	ldrh	r2, [r5, #16]
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 16, data) != HAL_OK)
 8002230:	f8d9 1000 	ldr.w	r1, [r9]
					data = (g_joint_configuration.calibration_sector_size << 16) | g_joint_configuration.number_of_sectors;
 8002234:	b292      	uxth	r2, r2
 8002236:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 16, data) != HAL_OK)
 800223a:	17d3      	asrs	r3, r2, #31
 800223c:	3110      	adds	r1, #16
 800223e:	2000      	movs	r0, #0
 8002240:	f004 fe66 	bl	8006f10 <HAL_FLASH_Program>
 8002244:	2800      	cmp	r0, #0
 8002246:	f040 825d 	bne.w	8002704 <HAL_TIM_PeriodElapsedCallback+0x10cc>
					data = (g_joint_configuration.zero_electric_rotation << 16) | (* temp) ;
 800224a:	8aab      	ldrh	r3, [r5, #20]
 800224c:	8a6a      	ldrh	r2, [r5, #18]
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 24, data) != HAL_OK)
 800224e:	f8d9 1000 	ldr.w	r1, [r9]
					data = (g_joint_configuration.zero_electric_rotation << 16) | (* temp) ;
 8002252:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 24, data) != HAL_OK)
 8002256:	3118      	adds	r1, #24
 8002258:	17d3      	asrs	r3, r2, #31
 800225a:	2000      	movs	r0, #0
 800225c:	f004 fe58 	bl	8006f10 <HAL_FLASH_Program>
 8002260:	2800      	cmp	r0, #0
 8002262:	f040 821d 	bne.w	80026a0 <HAL_TIM_PeriodElapsedCallback+0x1068>
					for(int i = 0; i < g_joint_configuration.number_of_sectors; i++ )
 8002266:	8a2b      	ldrh	r3, [r5, #16]
 8002268:	b29b      	uxth	r3, r3
 800226a:	b30b      	cbz	r3, 80022b0 <HAL_TIM_PeriodElapsedCallback+0xc78>
 800226c:	f8df a158 	ldr.w	sl, [pc, #344]	; 80023c8 <HAL_TIM_PeriodElapsedCallback+0xd90>
 8002270:	f04f 0900 	mov.w	r9, #0
						data = g_joint_configuration.calibration_table_1[i] << 16 | g_joint_configuration.calibration_table_2[i];
 8002274:	f109 020c 	add.w	r2, r9, #12
 8002278:	f509 7303 	add.w	r3, r9, #524	; 0x20c
 800227c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002280:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002284:	88d0      	ldrh	r0, [r2, #6]
 8002286:	88da      	ldrh	r2, [r3, #6]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_calibration_table + i * 8, data) != HAL_OK)
 8002288:	f8da 1000 	ldr.w	r1, [sl]
						data = g_joint_configuration.calibration_table_1[i] << 16 | g_joint_configuration.calibration_table_2[i];
 800228c:	b292      	uxth	r2, r2
 800228e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_calibration_table + i * 8, data) != HAL_OK)
 8002292:	17d3      	asrs	r3, r2, #31
 8002294:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8002298:	2000      	movs	r0, #0
 800229a:	f004 fe39 	bl	8006f10 <HAL_FLASH_Program>
 800229e:	2800      	cmp	r0, #0
 80022a0:	f040 8129 	bne.w	80024f6 <HAL_TIM_PeriodElapsedCallback+0xebe>
					for(int i = 0; i < g_joint_configuration.number_of_sectors; i++ )
 80022a4:	8a2b      	ldrh	r3, [r5, #16]
 80022a6:	f109 0901 	add.w	r9, r9, #1
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	454b      	cmp	r3, r9
 80022ae:	dce1      	bgt.n	8002274 <HAL_TIM_PeriodElapsedCallback+0xc3c>
					HAL_FLASH_Lock();
 80022b0:	f004 fef0 	bl	8007094 <HAL_FLASH_Lock>
					g_joint_configuration.calibration_state = JOINT_CALIBRATED;
 80022b4:	2301      	movs	r3, #1
 80022b6:	71eb      	strb	r3, [r5, #7]
					HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer
 80022b8:	483f      	ldr	r0, [pc, #252]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0xd80>)
	g_fsm_status.state = new_state;
 80022ba:	f888 3000 	strb.w	r3, [r8]
					HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer
 80022be:	f006 fb55 	bl	800896c <HAL_TIM_Base_Start_IT>
					break;
 80022c2:	e53c      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
					if (g_motor_status.current_electric_rotation % g_joint_configuration.calibration_sector_size == (g_joint_configuration.calibration_sector_size - 1) &&
 80022c4:	6a20      	ldr	r0, [r4, #32]
 80022c6:	8b6a      	ldrh	r2, [r5, #26]
 80022c8:	8b6b      	ldrh	r3, [r5, #26]
 80022ca:	b292      	uxth	r2, r2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	fb90 f1f2 	sdiv	r1, r0, r2
 80022d4:	fb02 0211 	mls	r2, r2, r1, r0
 80022d8:	429a      	cmp	r2, r3
 80022da:	f000 81c6 	beq.w	800266a <HAL_TIM_PeriodElapsedCallback+0x1032>
	if (g_motor_status.current_motor_torque > g_calibration_torque_limit && g_motor_status.stm_state_motor == RUN) return true;
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xd84>)
 80022e0:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b212      	sxth	r2, r2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f77f adec 	ble.w	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x88e>
 80022ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	f47f ade7 	bne.w	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x88e>
	g_motor_command.state = MOTOR_STOPPED;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f88b 300b 	strb.w	r3, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80022fe:	461a      	mov	r2, r3
	g_motor_command.goal = 0;
 8002300:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 8002304:	4619      	mov	r1, r3
 8002306:	f102 0324 	add.w	r3, r2, #36	; 0x24
 800230a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 800230e:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 8002310:	7858      	ldrb	r0, [r3, #1]
 8002312:	7059      	strb	r1, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8002314:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 8002316:	7898      	ldrb	r0, [r3, #2]
 8002318:	7099      	strb	r1, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 800231a:	d1f4      	bne.n	8002306 <HAL_TIM_PeriodElapsedCallback+0xcce>
	g_motor_status.current_motor_torque = 0;
 800231c:	8621      	strh	r1, [r4, #48]	; 0x30
	MC_StopMotor1();
 800231e:	f000 fdc9 	bl	8002eb4 <MC_StopMotor1>
						g_joint_configuration.calibration_table_1[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_motor_status.current_ma730_value;
 8002322:	6a23      	ldr	r3, [r4, #32]
 8002324:	8b69      	ldrh	r1, [r5, #26]
 8002326:	f8b4 203f 	ldrh.w	r2, [r4, #63]	; 0x3f
 800232a:	b289      	uxth	r1, r1
 800232c:	fb93 f3f1 	sdiv	r3, r3, r1
 8002330:	330c      	adds	r3, #12
 8002332:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8002336:	4613      	mov	r3, r2
						g_fsm_status.state = FSM_CALIBRATION_PHASE_4;
 8002338:	2268      	movs	r2, #104	; 0x68
						g_joint_configuration.calibration_table_1[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_motor_status.current_ma730_value;
 800233a:	80eb      	strh	r3, [r5, #6]
						g_fsm_status.state = FSM_CALIBRATION_PHASE_4;
 800233c:	f888 2000 	strb.w	r2, [r8]
 8002340:	e4fd      	b.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
					if (g_motor_status.current_electric_rotation % g_joint_configuration.calibration_sector_size == (0) &&
 8002342:	6a21      	ldr	r1, [r4, #32]
 8002344:	8b6b      	ldrh	r3, [r5, #26]
 8002346:	b29b      	uxth	r3, r3
 8002348:	fb91 f2f3 	sdiv	r2, r1, r3
 800234c:	fb03 1312 	mls	r3, r3, r2, r1
 8002350:	b9ab      	cbnz	r3, 800237e <HAL_TIM_PeriodElapsedCallback+0xd46>
							g_joint_configuration.calibration_table_1[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] == 0)
 8002352:	6a23      	ldr	r3, [r4, #32]
 8002354:	8b6a      	ldrh	r2, [r5, #26]
 8002356:	b292      	uxth	r2, r2
 8002358:	fb93 f3f2 	sdiv	r3, r3, r2
 800235c:	330c      	adds	r3, #12
 800235e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	b29b      	uxth	r3, r3
					if (g_motor_status.current_electric_rotation % g_joint_configuration.calibration_sector_size == (0) &&
 8002366:	b953      	cbnz	r3, 800237e <HAL_TIM_PeriodElapsedCallback+0xd46>
						g_joint_configuration.calibration_table_1[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_motor_status.current_ma730_value;
 8002368:	6a23      	ldr	r3, [r4, #32]
 800236a:	8b69      	ldrh	r1, [r5, #26]
 800236c:	f8b4 203f 	ldrh.w	r2, [r4, #63]	; 0x3f
 8002370:	b289      	uxth	r1, r1
 8002372:	fb93 f3f1 	sdiv	r3, r3, r1
 8002376:	330c      	adds	r3, #12
 8002378:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800237c:	80da      	strh	r2, [r3, #6]
	if (g_motor_status.current_motor_torque > g_calibration_torque_limit && g_motor_status.stm_state_motor == RUN) return true;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8002380:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b212      	sxth	r2, r2
 8002386:	b29b      	uxth	r3, r3
 8002388:	429a      	cmp	r2, r3
 800238a:	dd04      	ble.n	8002396 <HAL_TIM_PeriodElapsedCallback+0xd5e>
 800238c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002390:	2b06      	cmp	r3, #6
 8002392:	f000 8189 	beq.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x1070>
						motor_start(SPEED, g_calibration_speed);
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8002398:	881b      	ldrh	r3, [r3, #0]
	g_motor_command.mode = mode;
 800239a:	2101      	movs	r1, #1
						motor_start(SPEED, g_calibration_speed);
 800239c:	b21b      	sxth	r3, r3
	g_motor_command.goal = goal;
 800239e:	e597      	b.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x898>
				g_motor_status.errors = g_motor_status.errors & (0xFF ^ JOINT_MC_FAILED);
 80023a0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80023a4:	8833      	ldrh	r3, [r6, #0]
 80023a6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80023aa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80023ae:	e4de      	b.n	8001d6e <HAL_TIM_PeriodElapsedCallback+0x736>
	g_fsm_status.state = new_transition;
 80023b0:	230e      	movs	r3, #14
 80023b2:	f888 3000 	strb.w	r3, [r8]
 80023b6:	e4d9      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x734>
 80023b8:	20001218 	.word	0x20001218
 80023bc:	20000820 	.word	0x20000820
 80023c0:	2000081e 	.word	0x2000081e
 80023c4:	20000838 	.word	0x20000838
 80023c8:	20000834 	.word	0x20000834
				switch (g_motor_status.encoder_position_state)
 80023cc:	7863      	ldrb	r3, [r4, #1]
 80023ce:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 809a 	beq.w	800250c <HAL_TIM_PeriodElapsedCallback+0xed4>
 80023d8:	2801      	cmp	r0, #1
 80023da:	f47f ab2d 	bne.w	8001a38 <HAL_TIM_PeriodElapsedCallback+0x400>
						g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_motor_status.current_ma730_value, g_joint_configuration.calibration_table_1[0]);
 80023de:	8a29      	ldrh	r1, [r5, #16]
 80023e0:	f8b4 203f 	ldrh.w	r2, [r4, #63]	; 0x3f
 80023e4:	8beb      	ldrh	r3, [r5, #30]
 80023e6:	3901      	subs	r1, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	b289      	uxth	r1, r1
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fcff 	bl	8000df0 <get_sector_number_from_calibration>
						if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 80023f2:	4acd      	ldr	r2, [pc, #820]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x10f0>)
						g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_motor_status.current_ma730_value, g_joint_configuration.calibration_table_1[0]);
 80023f4:	4bcd      	ldr	r3, [pc, #820]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x10f4>)
						if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 80023f6:	f9b2 8000 	ldrsh.w	r8, [r2]
						g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_motor_status.current_ma730_value, g_joint_configuration.calibration_table_1[0]);
 80023fa:	8018      	strh	r0, [r3, #0]
						if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 80023fc:	4540      	cmp	r0, r8
						g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_motor_status.current_ma730_value, g_joint_configuration.calibration_table_1[0]);
 80023fe:	4681      	mov	r9, r0
						if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 8002400:	f000 80c3 	beq.w	800258a <HAL_TIM_PeriodElapsedCallback+0xf52>
 8002404:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002408:	f000 80bf 	beq.w	800258a <HAL_TIM_PeriodElapsedCallback+0xf52>
 800240c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002410:	f43f ab12 	beq.w	8001a38 <HAL_TIM_PeriodElapsedCallback+0x400>
							float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 8002414:	896b      	ldrh	r3, [r5, #10]
 8002416:	8928      	ldrh	r0, [r5, #8]
 8002418:	b29b      	uxth	r3, r3
 800241a:	b280      	uxth	r0, r0
 800241c:	fb00 f003 	mul.w	r0, r0, r3
 8002420:	f7fe f84c 	bl	80004bc <__aeabi_i2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	a1bd      	add	r1, pc, #756	; (adr r1, 8002720 <HAL_TIM_PeriodElapsedCallback+0x10e8>)
 800242a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800242e:	f7fe f9d9 	bl	80007e4 <__aeabi_ddiv>
 8002432:	f7fe fae7 	bl	8000a04 <__aeabi_d2f>
							if (g_current_sector_number - g_previous_sector_number > 0)
 8002436:	eba9 0808 	sub.w	r8, r9, r8
 800243a:	f1b8 0f00 	cmp.w	r8, #0
							float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 800243e:	ee08 0a10 	vmov	s16, r0
							if (g_current_sector_number - g_previous_sector_number > 0)
 8002442:	f340 81b4 	ble.w	80027ae <HAL_TIM_PeriodElapsedCallback+0x1176>
								l_current_electric_rotation = (g_current_sector_number) * g_joint_configuration.calibration_sector_size;
 8002446:	8b6b      	ldrh	r3, [r5, #26]
 8002448:	fb19 f303 	smulbb	r3, r9, r3
 800244c:	b299      	uxth	r1, r3
							int32_t l_diff_electric_position = g_joint_configuration.zero_electric_position - g_motor_status.current_electric_position;
 800244e:	8a6a      	ldrh	r2, [r5, #18]
 8002450:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
							g_motor_status.current_electric_rotation = l_current_electric_rotation;
 8002452:	6221      	str	r1, [r4, #32]
							float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 8002454:	8aab      	ldrh	r3, [r5, #20]
							float l_encoder_offset_to_current_in_rad = -1 * ((float) g_motor_status.current_encoder_position / (ENCODER_M1.PulseNumber / g_joint_configuration.pole_pairs)) * electric_rotation_width;
 8002456:	f8d4 c006 	ldr.w	ip, [r4, #6]
 800245a:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
							float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 800245e:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8002730 <HAL_TIM_PeriodElapsedCallback+0x10f8>
							float l_encoder_offset_to_current_in_rad = -1 * ((float) g_motor_status.current_encoder_position / (ENCODER_M1.PulseNumber / g_joint_configuration.pole_pairs)) * electric_rotation_width;
 8002462:	fa1f fe8e 	uxth.w	lr, lr
 8002466:	ee07 ca10 	vmov	s14, ip
 800246a:	f8ba c06e 	ldrh.w	ip, [sl, #110]	; 0x6e
 800246e:	fbbc fcfe 	udiv	ip, ip, lr
 8002472:	ee07 ca90 	vmov	s15, ip
 8002476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							int32_t l_diff_electric_position = g_joint_configuration.zero_electric_position - g_motor_status.current_electric_position;
 800247e:	b200      	sxth	r0, r0
 8002480:	b212      	sxth	r2, r2
							float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 8002482:	b29b      	uxth	r3, r3
							int32_t l_diff_electric_position = g_joint_configuration.zero_electric_position - g_motor_status.current_electric_position;
 8002484:	1a12      	subs	r2, r2, r0
							float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 8002486:	1a5b      	subs	r3, r3, r1
							float l_encoder_offset_to_current_in_rad = -1 * ((float) g_motor_status.current_encoder_position / (ENCODER_M1.PulseNumber / g_joint_configuration.pole_pairs)) * electric_rotation_width;
 8002488:	eec7 8a27 	vdiv.f32	s17, s14, s15
							float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	ee07 2a10 	vmov	s14, r2
 8002494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
							g_motor_status.current_encoder_position_offset_in_rad = l_electric_offset_to_zero_in_rad + l_encoder_offset_to_current_in_rad;
 800249c:	eef1 8a68 	vneg.f32	s17, s17
							float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 80024a0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80024a4:	ee17 0a90 	vmov	r0, s15
 80024a8:	f7fe f81a 	bl	80004e0 <__aeabi_f2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	2000      	movs	r0, #0
 80024b2:	49a0      	ldr	r1, [pc, #640]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x10fc>)
 80024b4:	f7fd feb4 	bl	8000220 <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	ee18 0a10 	vmov	r0, s16
 80024c0:	ec43 2b19 	vmov	d9, r2, r3
 80024c4:	f7fe f80c 	bl	80004e0 <__aeabi_f2d>
 80024c8:	460b      	mov	r3, r1
 80024ca:	4602      	mov	r2, r0
 80024cc:	ec51 0b19 	vmov	r0, r1, d9
 80024d0:	f7fe f85e 	bl	8000590 <__aeabi_dmul>
 80024d4:	f7fe fa96 	bl	8000a04 <__aeabi_d2f>
							g_motor_status.current_encoder_position_offset_in_rad = l_electric_offset_to_zero_in_rad + l_encoder_offset_to_current_in_rad;
 80024d8:	ee07 0a90 	vmov	s15, r0
 80024dc:	eee8 7a88 	vfma.f32	s15, s17, s16
							g_motor_status.encoder_position_state = POSITION_ACCURATE;
 80024e0:	2302      	movs	r3, #2
							g_motor_status.current_encoder_position_offset_in_rad = l_electric_offset_to_zero_in_rad + l_encoder_offset_to_current_in_rad;
 80024e2:	ee17 0a90 	vmov	r0, s15
 80024e6:	f8c4 0002 	str.w	r0, [r4, #2]
							g_motor_status.encoder_position_state = POSITION_ACCURATE;
 80024ea:	7063      	strb	r3, [r4, #1]
							g_previous_sector_number = g_current_sector_number;
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x10f0>)
 80024ee:	f8a3 9000 	strh.w	r9, [r3]
 80024f2:	f7ff baa1 	b.w	8001a38 <HAL_TIM_PeriodElapsedCallback+0x400>
							error = HAL_FLASH_GetError ();
 80024f6:	f004 fdd9 	bl	80070ac <HAL_FLASH_GetError>
 80024fa:	9002      	str	r0, [sp, #8]
					for(int i = 0; i < g_joint_configuration.number_of_sectors; i++ )
 80024fc:	8a2b      	ldrh	r3, [r5, #16]
 80024fe:	f109 0901 	add.w	r9, r9, #1
 8002502:	b29b      	uxth	r3, r3
 8002504:	4599      	cmp	r9, r3
 8002506:	f6ff aeb5 	blt.w	8002274 <HAL_TIM_PeriodElapsedCallback+0xc3c>
 800250a:	e6d1      	b.n	80022b0 <HAL_TIM_PeriodElapsedCallback+0xc78>
						g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_motor_status.current_ma730_value, g_joint_configuration.calibration_table_1[0]);
 800250c:	8a29      	ldrh	r1, [r5, #16]
 800250e:	f8b4 203f 	ldrh.w	r2, [r4, #63]	; 0x3f
 8002512:	8beb      	ldrh	r3, [r5, #30]
 8002514:	3901      	subs	r1, #1
 8002516:	b289      	uxth	r1, r1
 8002518:	b29b      	uxth	r3, r3
 800251a:	f7fe fc69 	bl	8000df0 <get_sector_number_from_calibration>
 800251e:	4b83      	ldr	r3, [pc, #524]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x10f4>)
						if (g_current_sector_number != -1)
 8002520:	1c41      	adds	r1, r0, #1
						g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_motor_status.current_ma730_value, g_joint_configuration.calibration_table_1[0]);
 8002522:	8018      	strh	r0, [r3, #0]
						if (g_current_sector_number != -1)
 8002524:	f43f aa88 	beq.w	8001a38 <HAL_TIM_PeriodElapsedCallback+0x400>
							float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 8002528:	896a      	ldrh	r2, [r5, #10]
 800252a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
							g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 800252e:	f8b5 901a 	ldrh.w	r9, [r5, #26]
 8002532:	4981      	ldr	r1, [pc, #516]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x1100>)
							g_motor_status.current_encoder_position_offset_in_rad = -1 * (g_joint_configuration.zero_electric_rotation - g_current_estimated_electric_rotation) * electric_rotation_width;
 8002534:	8aab      	ldrh	r3, [r5, #20]
							g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 8002536:	fb10 f909 	smulbb	r9, r0, r9
							float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 800253a:	b292      	uxth	r2, r2
 800253c:	fa1f f08c 	uxth.w	r0, ip
							g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 8002540:	fa0f f989 	sxth.w	r9, r9
							float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 8002544:	fb00 f002 	mul.w	r0, r0, r2
							g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 8002548:	f8a1 9000 	strh.w	r9, [r1]
							g_motor_status.current_encoder_position_offset_in_rad = -1 * (g_joint_configuration.zero_electric_rotation - g_current_estimated_electric_rotation) * electric_rotation_width;
 800254c:	fa1f fa83 	uxth.w	sl, r3
							float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 8002550:	f7fd ffb4 	bl	80004bc <__aeabi_i2d>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	a171      	add	r1, pc, #452	; (adr r1, 8002720 <HAL_TIM_PeriodElapsedCallback+0x10e8>)
 800255a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800255e:	f7fe f941 	bl	80007e4 <__aeabi_ddiv>
 8002562:	f7fe fa4f 	bl	8000a04 <__aeabi_d2f>
							g_motor_status.current_encoder_position_offset_in_rad = -1 * (g_joint_configuration.zero_electric_rotation - g_current_estimated_electric_rotation) * electric_rotation_width;
 8002566:	eba9 090a 	sub.w	r9, r9, sl
 800256a:	ee07 9a90 	vmov	s15, r9
 800256e:	ee07 0a10 	vmov	s14, r0
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	ee17 0a90 	vmov	r0, s15
 800257e:	f8c4 0002 	str.w	r0, [r4, #2]
							g_motor_status.encoder_position_state = POSITION_APROXIMATED;
 8002582:	f884 8001 	strb.w	r8, [r4, #1]
 8002586:	f7ff ba57 	b.w	8001a38 <HAL_TIM_PeriodElapsedCallback+0x400>
						if (g_current_sector_number != -1)
 800258a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800258e:	d1ad      	bne.n	80024ec <HAL_TIM_PeriodElapsedCallback+0xeb4>
 8002590:	f7ff ba52 	b.w	8001a38 <HAL_TIM_PeriodElapsedCallback+0x400>
						g_calibration_state = CALIBRATION_TABLE_CONTAINS_ZEROES;
 8002594:	4b69      	ldr	r3, [pc, #420]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x1104>)
						g_fsm_status.state = FSM_CALIBRATION_PHASE_2;
 8002596:	2166      	movs	r1, #102	; 0x66
						g_calibration_state = CALIBRATION_TABLE_CONTAINS_ZEROES;
 8002598:	2204      	movs	r2, #4
						g_fsm_status.state = FSM_CALIBRATION_PHASE_2;
 800259a:	f888 1000 	strb.w	r1, [r8]
						g_calibration_state = CALIBRATION_TABLE_CONTAINS_ZEROES;
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	f7ff bbcd 	b.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_motor_command.state = MOTOR_STOPPED;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f88b 300b 	strb.w	r3, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80025aa:	461a      	mov	r2, r3
	g_motor_command.goal = 0;
 80025ac:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 80025b0:	461d      	mov	r5, r3
 80025b2:	f102 0324 	add.w	r3, r2, #36	; 0x24
 80025b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80025ba:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 80025bc:	7859      	ldrb	r1, [r3, #1]
 80025be:	705d      	strb	r5, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80025c0:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 80025c2:	7899      	ldrb	r1, [r3, #2]
 80025c4:	709d      	strb	r5, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80025c6:	d1f4      	bne.n	80025b2 <HAL_TIM_PeriodElapsedCallback+0xf7a>
	g_motor_status.current_motor_torque = 0;
 80025c8:	8625      	strh	r5, [r4, #48]	; 0x30
	MC_StopMotor1();
 80025ca:	f000 fc73 	bl	8002eb4 <MC_StopMotor1>
						g_motor_status.current_electric_rotation = 0; // zeroing electric rotation counter
 80025ce:	6225      	str	r5, [r4, #32]
						g_min_encoder_position = g_motor_status.current_encoder_position; // encoder value
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x1108>)
 80025d2:	f8d4 2006 	ldr.w	r2, [r4, #6]
 80025d6:	601a      	str	r2, [r3, #0]
						g_fsm_status.state = FSM_CALIBRATION_PHASE_2;
 80025d8:	2366      	movs	r3, #102	; 0x66
 80025da:	f888 3000 	strb.w	r3, [r8]
 80025de:	f7ff bbae 	b.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
						motor_start(g_motor_command.mode, g_motor_command.goal);
 80025e2:	f89b 300a 	ldrb.w	r3, [fp, #10]
 80025e6:	f8bb 2000 	ldrh.w	r2, [fp]
	g_motor_command.goal = goal;
 80025ea:	f8ab 2000 	strh.w	r2, [fp]
						motor_start(g_motor_command.mode, g_motor_command.goal);
 80025ee:	b2db      	uxtb	r3, r3
	g_motor_command.mode = mode;
 80025f0:	f88b 300a 	strb.w	r3, [fp, #10]
	switch (mode)
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80cf 	beq.w	8002798 <HAL_TIM_PeriodElapsedCallback+0x1160>
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	f000 80c2 	beq.w	8002784 <HAL_TIM_PeriodElapsedCallback+0x114c>
			g_motor_command.goal = 0;
 8002600:	f8ab 1000 	strh.w	r1, [fp]
			return;
 8002604:	f7ff bb9b 	b.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
	g_motor_command.goal = goal;
 8002608:	f04f 0900 	mov.w	r9, #0
	g_motor_command.mode = mode;
 800260c:	2201      	movs	r2, #1
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 800260e:	2302      	movs	r3, #2
						g_fsm_status.state = FSM_CALIBRATION_PHASE_6;
 8002610:	216a      	movs	r1, #106	; 0x6a
 8002612:	f888 1000 	strb.w	r1, [r8]
	g_motor_command.goal = goal;
 8002616:	f8ab 9000 	strh.w	r9, [fp]
	g_motor_command.mode = mode;
 800261a:	f88b 200a 	strb.w	r2, [fp, #10]
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 800261e:	f88b 300b 	strb.w	r3, [fp, #11]
			MC_ProgramSpeedRampMotor1(g_motor_command.goal, 0);
 8002622:	f8bb 0000 	ldrh.w	r0, [fp]
 8002626:	4649      	mov	r1, r9
 8002628:	b200      	sxth	r0, r0
 800262a:	f000 fc49 	bl	8002ec0 <MC_ProgramSpeedRampMotor1>
	MC_StartMotor1();
 800262e:	f000 fc3b 	bl	8002ea8 <MC_StartMotor1>
	g_motor_command.state = MOTOR_STOPPED;
 8002632:	f88b 900b 	strb.w	r9, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8002636:	464a      	mov	r2, r9
		g_motor_status._current_torque_data[i] = 0;
 8002638:	4648      	mov	r0, r9
	g_motor_command.goal = 0;
 800263a:	f8ab 9000 	strh.w	r9, [fp]
		g_motor_status._current_torque_data[i] = 0;
 800263e:	f102 0324 	add.w	r3, r2, #36	; 0x24
 8002642:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8002646:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 8002648:	7859      	ldrb	r1, [r3, #1]
 800264a:	7058      	strb	r0, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 800264c:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 800264e:	7899      	ldrb	r1, [r3, #2]
 8002650:	7098      	strb	r0, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8002652:	d1f4      	bne.n	800263e <HAL_TIM_PeriodElapsedCallback+0x1006>
	g_motor_status.current_motor_torque = 0;
 8002654:	8620      	strh	r0, [r4, #48]	; 0x30
	MC_StopMotor1();
 8002656:	f000 fc2d 	bl	8002eb4 <MC_StopMotor1>
						g_joint_configuration.zero_electric_rotation = g_motor_status.current_electric_rotation;
 800265a:	6a23      	ldr	r3, [r4, #32]
 800265c:	b29b      	uxth	r3, r3
 800265e:	82ab      	strh	r3, [r5, #20]
						g_joint_configuration.zero_electric_position = (uint16_t) (g_motor_status.current_electric_position);
 8002660:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8002662:	826b      	strh	r3, [r5, #18]
						g_joint_configuration.zero_electric_position = (int16_t) (g_motor_status.current_electric_position);
 8002664:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8002666:	826b      	strh	r3, [r5, #18]
 8002668:	e4ef      	b.n	800204a <HAL_TIM_PeriodElapsedCallback+0xa12>
							g_joint_configuration.calibration_table_2[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] == 0)
 800266a:	6a23      	ldr	r3, [r4, #32]
 800266c:	8b6a      	ldrh	r2, [r5, #26]
 800266e:	b292      	uxth	r2, r2
 8002670:	fb93 f3f2 	sdiv	r3, r3, r2
 8002674:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002678:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800267c:	88db      	ldrh	r3, [r3, #6]
 800267e:	b29b      	uxth	r3, r3
					if (g_motor_status.current_electric_rotation % g_joint_configuration.calibration_sector_size == (g_joint_configuration.calibration_sector_size - 1) &&
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f ae2c 	bne.w	80022de <HAL_TIM_PeriodElapsedCallback+0xca6>
						g_joint_configuration.calibration_table_2[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_motor_status.current_ma730_value;
 8002686:	6a23      	ldr	r3, [r4, #32]
 8002688:	8b69      	ldrh	r1, [r5, #26]
 800268a:	f8b4 203f 	ldrh.w	r2, [r4, #63]	; 0x3f
 800268e:	b289      	uxth	r1, r1
 8002690:	fb93 f3f1 	sdiv	r3, r3, r1
 8002694:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002698:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800269c:	80da      	strh	r2, [r3, #6]
 800269e:	e61e      	b.n	80022de <HAL_TIM_PeriodElapsedCallback+0xca6>
						error = HAL_FLASH_GetError ();
 80026a0:	f004 fd04 	bl	80070ac <HAL_FLASH_GetError>
 80026a4:	9002      	str	r0, [sp, #8]
 80026a6:	e5de      	b.n	8002266 <HAL_TIM_PeriodElapsedCallback+0xc2e>
	g_motor_command.state = MOTOR_STOPPED;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f88b 300b 	strb.w	r3, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80026ae:	461a      	mov	r2, r3
	g_motor_command.goal = 0;
 80026b0:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 80026b4:	4619      	mov	r1, r3
 80026b6:	f102 0324 	add.w	r3, r2, #36	; 0x24
 80026ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80026be:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 80026c0:	7858      	ldrb	r0, [r3, #1]
 80026c2:	7059      	strb	r1, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80026c4:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 80026c6:	7898      	ldrb	r0, [r3, #2]
 80026c8:	7099      	strb	r1, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 80026ca:	d1f4      	bne.n	80026b6 <HAL_TIM_PeriodElapsedCallback+0x107e>
	g_motor_status.current_motor_torque = 0;
 80026cc:	8621      	strh	r1, [r4, #48]	; 0x30
	MC_StopMotor1();
 80026ce:	f000 fbf1 	bl	8002eb4 <MC_StopMotor1>
						g_joint_configuration.calibration_table_2[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_motor_status.current_ma730_value;
 80026d2:	6a23      	ldr	r3, [r4, #32]
 80026d4:	8b69      	ldrh	r1, [r5, #26]
 80026d6:	f8b4 203f 	ldrh.w	r2, [r4, #63]	; 0x3f
 80026da:	b289      	uxth	r1, r1
 80026dc:	fb93 f3f1 	sdiv	r3, r3, r1
 80026e0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80026e4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
						g_max_electric_rotation_cw 	= g_motor_status.current_electric_rotation; // max electric rotation counter
 80026e8:	4916      	ldr	r1, [pc, #88]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x110c>)
						g_joint_configuration.calibration_table_2[g_motor_status.current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_motor_status.current_ma730_value;
 80026ea:	80ea      	strh	r2, [r5, #6]
						g_max_electric_rotation_cw 	= g_motor_status.current_electric_rotation; // max electric rotation counter
 80026ec:	6a23      	ldr	r3, [r4, #32]
						g_max_encoder_position = g_motor_status.current_encoder_position; // max encoder value
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x1110>)
						g_max_electric_rotation_cw 	= g_motor_status.current_electric_rotation; // max electric rotation counter
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	800b      	strh	r3, [r1, #0]
						g_max_encoder_position = g_motor_status.current_encoder_position; // max encoder value
 80026f4:	f8d4 3006 	ldr.w	r3, [r4, #6]
 80026f8:	6013      	str	r3, [r2, #0]
						g_fsm_status.state = FSM_CALIBRATION_PHASE_3;
 80026fa:	2367      	movs	r3, #103	; 0x67
 80026fc:	f888 3000 	strb.w	r3, [r8]
 8002700:	f7ff bb1d 	b.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>
						error = HAL_FLASH_GetError ();
 8002704:	f004 fcd2 	bl	80070ac <HAL_FLASH_GetError>
 8002708:	9002      	str	r0, [sp, #8]
 800270a:	e59e      	b.n	800224a <HAL_TIM_PeriodElapsedCallback+0xc12>
						error = HAL_FLASH_GetError ();
 800270c:	f004 fcce 	bl	80070ac <HAL_FLASH_GetError>
 8002710:	9002      	str	r0, [sp, #8]
 8002712:	e58b      	b.n	800222c <HAL_TIM_PeriodElapsedCallback+0xbf4>
						error = HAL_FLASH_GetError ();
 8002714:	f004 fcca 	bl	80070ac <HAL_FLASH_GetError>
 8002718:	9002      	str	r0, [sp, #8]
 800271a:	e578      	b.n	800220e <HAL_TIM_PeriodElapsedCallback+0xbd6>
 800271c:	f3af 8000 	nop.w
 8002720:	54442d18 	.word	0x54442d18
 8002724:	401921fb 	.word	0x401921fb
 8002728:	2000083c 	.word	0x2000083c
 800272c:	20000832 	.word	0x20000832
 8002730:	37800000 	.word	0x37800000
 8002734:	3ff00000 	.word	0x3ff00000
 8002738:	20000830 	.word	0x20000830
 800273c:	20000e24 	.word	0x20000e24
 8002740:	20000e88 	.word	0x20000e88
 8002744:	20000e7e 	.word	0x20000e7e
 8002748:	20000e80 	.word	0x20000e80
						error = HAL_FLASH_GetError ();
 800274c:	f004 fcae 	bl	80070ac <HAL_FLASH_GetError>
 8002750:	9002      	str	r0, [sp, #8]
 8002752:	e54e      	b.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0xbba>
								if (g_motor_command.goal > 0)
 8002754:	f8bb 2000 	ldrh.w	r2, [fp]
 8002758:	b212      	sxth	r2, r2
 800275a:	2a00      	cmp	r2, #0
 800275c:	dd2f      	ble.n	80027be <HAL_TIM_PeriodElapsedCallback+0x1186>
	g_motor_command.state = MOTOR_STOPPED;
 800275e:	f88b 300b 	strb.w	r3, [fp, #11]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8002762:	461a      	mov	r2, r3
	g_motor_command.goal = 0;
 8002764:	f8ab 3000 	strh.w	r3, [fp]
		g_motor_status._current_torque_data[i] = 0;
 8002768:	4619      	mov	r1, r3
 800276a:	f102 0324 	add.w	r3, r2, #36	; 0x24
 800276e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8002772:	3201      	adds	r2, #1
		g_motor_status._current_torque_data[i] = 0;
 8002774:	7858      	ldrb	r0, [r3, #1]
 8002776:	7059      	strb	r1, [r3, #1]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8002778:	2a32      	cmp	r2, #50	; 0x32
		g_motor_status._current_torque_data[i] = 0;
 800277a:	7898      	ldrb	r0, [r3, #2]
 800277c:	7099      	strb	r1, [r3, #2]
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 800277e:	d1f4      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0x1132>
 8002780:	f7ff bbf3 	b.w	8001f6a <HAL_TIM_PeriodElapsedCallback+0x932>
			g_motor_command.state = MOTOR_STARTED_IN_SPEED_MODE;
 8002784:	2302      	movs	r3, #2
 8002786:	f88b 300b 	strb.w	r3, [fp, #11]
			MC_ProgramSpeedRampMotor1(g_motor_command.goal, 0);
 800278a:	f8bb 0000 	ldrh.w	r0, [fp]
 800278e:	b200      	sxth	r0, r0
 8002790:	f000 fb96 	bl	8002ec0 <MC_ProgramSpeedRampMotor1>
			break;
 8002794:	f7ff bba9 	b.w	8001eea <HAL_TIM_PeriodElapsedCallback+0x8b2>
			g_motor_command.state = MOTOR_STARTED_IN_TORQUE_MODE;
 8002798:	2201      	movs	r2, #1
 800279a:	f88b 200b 	strb.w	r2, [fp, #11]
			MC_ProgramTorqueRampMotor1(g_motor_command.goal, 0);
 800279e:	f8bb 0000 	ldrh.w	r0, [fp]
 80027a2:	4619      	mov	r1, r3
 80027a4:	b200      	sxth	r0, r0
 80027a6:	f000 fb93 	bl	8002ed0 <MC_ProgramTorqueRampMotor1>
			break;
 80027aa:	f7ff bb9e 	b.w	8001eea <HAL_TIM_PeriodElapsedCallback+0x8b2>
								l_current_electric_rotation = (g_current_sector_number + 1) * g_joint_configuration.calibration_sector_size - 1;
 80027ae:	8b6a      	ldrh	r2, [r5, #26]
 80027b0:	f109 0301 	add.w	r3, r9, #1
 80027b4:	fb13 f302 	smulbb	r3, r3, r2
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b299      	uxth	r1, r3
 80027bc:	e647      	b.n	800244e <HAL_TIM_PeriodElapsedCallback+0xe16>
									motor_start(g_motor_command.mode, g_motor_command.goal);
 80027be:	f89b 000a 	ldrb.w	r0, [fp, #10]
 80027c2:	f8bb 1000 	ldrh.w	r1, [fp]
 80027c6:	b209      	sxth	r1, r1
 80027c8:	f7fe fb92 	bl	8000ef0 <motor_start>
 80027cc:	f7ff bab7 	b.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x706>

080027d0 <main>:
{
 80027d0:	e92d 4800 	stmdb	sp!, {fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	2400      	movs	r4, #0
{
 80027d6:	b0a8      	sub	sp, #160	; 0xa0
  HAL_Init();
 80027d8:	f002 ff10 	bl	80055fc <HAL_Init>
  SystemClock_Config();
 80027dc:	f7fe fe1a 	bl	8001414 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80027e4:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e8:	4abd      	ldr	r2, [pc, #756]	; (8002ae0 <main+0x310>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	941c      	str	r4, [sp, #112]	; 0x70
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ec:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, MA730_CS_Pin|SEC_OUT_Pin, GPIO_PIN_RESET);
 80027ee:	48bd      	ldr	r0, [pc, #756]	; (8002ae4 <main+0x314>)
  hadc1.Instance = ADC1;
 80027f0:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8002b10 <main+0x340>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f4:	f041 0104 	orr.w	r1, r1, #4
 80027f8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80027fa:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80027fc:	f001 0104 	and.w	r1, r1, #4
 8002800:	9102      	str	r1, [sp, #8]
 8002802:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002804:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002806:	f041 0120 	orr.w	r1, r1, #32
 800280a:	64d1      	str	r1, [r2, #76]	; 0x4c
 800280c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800280e:	f001 0120 	and.w	r1, r1, #32
 8002812:	9103      	str	r1, [sp, #12]
 8002814:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002818:	f041 0101 	orr.w	r1, r1, #1
 800281c:	64d1      	str	r1, [r2, #76]	; 0x4c
 800281e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002820:	f001 0101 	and.w	r1, r1, #1
 8002824:	9104      	str	r1, [sp, #16]
 8002826:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800282a:	f041 0102 	orr.w	r1, r1, #2
 800282e:	64d1      	str	r1, [r2, #76]	; 0x4c
 8002830:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002832:	f002 0202 	and.w	r2, r2, #2
 8002836:	9205      	str	r2, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, MA730_CS_Pin|SEC_OUT_Pin, GPIO_PIN_RESET);
 8002838:	f44f 7101 	mov.w	r1, #516	; 0x204
 800283c:	4622      	mov	r2, r4
  GPIO_InitStruct.Pin = DIP2_Pin|DIP1_Pin|SEC_IN_Pin;
 800283e:	f44f 4860 	mov.w	r8, #57344	; 0xe000
 8002842:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	9d05      	ldr	r5, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, MA730_CS_Pin|SEC_OUT_Pin, GPIO_PIN_RESET);
 8002848:	f004 fe0a 	bl	8007460 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	48a6      	ldr	r0, [pc, #664]	; (8002ae8 <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = DIP2_Pin|DIP1_Pin|SEC_IN_Pin;
 8002852:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002856:	f004 fd09 	bl	800726c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MA730_CS_Pin|SEC_OUT_Pin;
 800285a:	f04f 0800 	mov.w	r8, #0
 800285e:	2301      	movs	r3, #1
 8002860:	f44f 7201 	mov.w	r2, #516	; 0x204
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	489f      	ldr	r0, [pc, #636]	; (8002ae4 <main+0x314>)
 8002866:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = MA730_CS_Pin|SEC_OUT_Pin;
 8002868:	f04f 0900 	mov.w	r9, #0
 800286c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002870:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f004 fcfa 	bl	800726c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIP4_Pin|DIP3_Pin;
 8002878:	f04f 0830 	mov.w	r8, #48	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	4899      	ldr	r0, [pc, #612]	; (8002ae4 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = DIP4_Pin|DIP3_Pin;
 8002882:	f04f 0900 	mov.w	r9, #0
 8002886:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	f004 fcef 	bl	800726c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800288e:	4621      	mov	r1, r4
 8002890:	223c      	movs	r2, #60	; 0x3c
 8002892:	a818      	add	r0, sp, #96	; 0x60
  ADC_MultiModeTypeDef multimode = {0};
 8002894:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8002898:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800289a:	f008 ff4d 	bl	800b738 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800289e:	2220      	movs	r2, #32
 80028a0:	4621      	mov	r1, r4
 80028a2:	a810      	add	r0, sp, #64	; 0x40
 80028a4:	f008 ff48 	bl	800b738 <memset>
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028a8:	2601      	movs	r6, #1
  hadc1.Instance = ADC1;
 80028aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80028ae:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028b2:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80028b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028ba:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028bc:	f8aa 401c 	strh.w	r4, [sl, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028c0:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028c4:	f8ca 4008 	str.w	r4, [sl, #8]
  hadc1.Init.GainCompensation = 0;
 80028c8:	f8ca 4010 	str.w	r4, [sl, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028cc:	f88a 4024 	strb.w	r4, [sl, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028d0:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028d4:	f8ca 403c 	str.w	r4, [sl, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80028d8:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
  hadc1.Instance = ADC1;
 80028dc:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80028e0:	f8ca 3004 	str.w	r3, [sl, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80028e4:	f8ca 900c 	str.w	r9, [sl, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028e8:	f8ca 6014 	str.w	r6, [sl, #20]
  hadc1.Init.NbrOfConversion = 1;
 80028ec:	f8ca 6020 	str.w	r6, [sl, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028f0:	f8ca 8018 	str.w	r8, [sl, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028f4:	f002 feb6 	bl	8005664 <HAL_ADC_Init>
 80028f8:	b108      	cbz	r0, 80028fe <main+0x12e>
 80028fa:	b672      	cpsid	i
  while (1)
 80028fc:	e7fe      	b.n	80028fc <main+0x12c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028fe:	4602      	mov	r2, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002900:	a90a      	add	r1, sp, #40	; 0x28
 8002902:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002904:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002906:	f003 fd21 	bl	800634c <HAL_ADCEx_MultiModeConfigChannel>
 800290a:	4602      	mov	r2, r0
 800290c:	b108      	cbz	r0, 8002912 <main+0x142>
 800290e:	b672      	cpsid	i
  while (1)
 8002910:	e7fe      	b.n	8002910 <main+0x140>
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002912:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002916:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800291a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800291e:	4a73      	ldr	r2, [pc, #460]	; (8002aec <main+0x31c>)
 8002920:	2309      	movs	r3, #9
 8002922:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002926:	2201      	movs	r2, #1
 8002928:	237f      	movs	r3, #127	; 0x7f
 800292a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 800292e:	2404      	movs	r4, #4
 8002930:	2500      	movs	r5, #0
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002932:	f04f 0b02 	mov.w	fp, #2
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800293a:	a918      	add	r1, sp, #96	; 0x60
 800293c:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800293e:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002942:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002946:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800294a:	f003 f9fb 	bl	8005d44 <HAL_ADCEx_InjectedConfigChannel>
 800294e:	b108      	cbz	r0, 8002954 <main+0x184>
 8002950:	b672      	cpsid	i
  while (1)
 8002952:	e7fe      	b.n	8002952 <main+0x182>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8002954:	4a66      	ldr	r2, [pc, #408]	; (8002af0 <main+0x320>)
 8002956:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800295a:	a918      	add	r1, sp, #96	; 0x60
 800295c:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800295e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002962:	f003 f9ef 	bl	8005d44 <HAL_ADCEx_InjectedConfigChannel>
 8002966:	b108      	cbz	r0, 800296c <main+0x19c>
 8002968:	b672      	cpsid	i
  while (1)
 800296a:	e7fe      	b.n	800296a <main+0x19a>
  sConfig.Channel = ADC_CHANNEL_1;
 800296c:	4a61      	ldr	r2, [pc, #388]	; (8002af4 <main+0x324>)
 800296e:	2306      	movs	r3, #6
 8002970:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002974:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_1;
 8002976:	2204      	movs	r2, #4
 8002978:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800297a:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_1;
 800297c:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8002980:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002984:	f002 ff74 	bl	8005870 <HAL_ADC_ConfigChannel>
 8002988:	4601      	mov	r1, r0
 800298a:	b108      	cbz	r0, 8002990 <main+0x1c0>
 800298c:	b672      	cpsid	i
  while (1)
 800298e:	e7fe      	b.n	800298e <main+0x1be>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002990:	223c      	movs	r2, #60	; 0x3c
 8002992:	9001      	str	r0, [sp, #4]
 8002994:	a818      	add	r0, sp, #96	; 0x60
  hadc2.Instance = ADC2;
 8002996:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8002b14 <main+0x344>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800299a:	f008 fecd 	bl	800b738 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800299e:	9901      	ldr	r1, [sp, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	a810      	add	r0, sp, #64	; 0x40
 80029a4:	f008 fec8 	bl	800b738 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80029a8:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80029aa:	4a53      	ldr	r2, [pc, #332]	; (8002af8 <main+0x328>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80029ac:	f8aa 101c 	strh.w	r1, [sl, #28]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80029b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029b4:	4650      	mov	r0, sl
  hadc2.Instance = ADC2;
 80029b6:	f8ca 2000 	str.w	r2, [sl]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80029ba:	e9ca 1902 	strd	r1, r9, [sl, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80029be:	e9ca 1604 	strd	r1, r6, [sl, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029c2:	e9ca 110b 	strd	r1, r1, [sl, #44]	; 0x2c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80029c6:	f8ca 3004 	str.w	r3, [sl, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029ca:	f8ca 8018 	str.w	r8, [sl, #24]
  hadc2.Init.NbrOfConversion = 1;
 80029ce:	f8ca 6020 	str.w	r6, [sl, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80029d2:	f88a 1024 	strb.w	r1, [sl, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80029d6:	f88a 1038 	strb.w	r1, [sl, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029da:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80029de:	f88a 1040 	strb.w	r1, [sl, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029e2:	f002 fe3f 	bl	8005664 <HAL_ADC_Init>
 80029e6:	4602      	mov	r2, r0
 80029e8:	b108      	cbz	r0, 80029ee <main+0x21e>
 80029ea:	b672      	cpsid	i
  while (1)
 80029ec:	e7fe      	b.n	80029ec <main+0x21c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80029ee:	f04f 0801 	mov.w	r8, #1
 80029f2:	f04f 097f 	mov.w	r9, #127	; 0x7f
 80029f6:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 80029fa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8002af0 <main+0x320>
  sConfigInjected.InjectedNbrOfConversion = 2;
 80029fe:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8002a02:	f04f 0909 	mov.w	r9, #9
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002a06:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8002a0a:	f04f 0c80 	mov.w	ip, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002a0e:	a918      	add	r1, sp, #96	; 0x60
 8002a10:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8002a12:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002a16:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8002a1a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002a1e:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002a22:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002a26:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002a2a:	f003 f98b 	bl	8005d44 <HAL_ADCEx_InjectedConfigChannel>
 8002a2e:	b108      	cbz	r0, 8002a34 <main+0x264>
 8002a30:	b672      	cpsid	i
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <main+0x262>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8002a34:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8002b18 <main+0x348>
 8002a38:	f240 190f 	movw	r9, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002a3c:	a918      	add	r1, sp, #96	; 0x60
 8002a3e:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8002a40:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002a44:	f003 f97e 	bl	8005d44 <HAL_ADCEx_InjectedConfigChannel>
 8002a48:	b108      	cbz	r0, 8002a4e <main+0x27e>
 8002a4a:	b672      	cpsid	i
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <main+0x27c>
  sConfig.Channel = ADC_CHANNEL_13;
 8002a4e:	2204      	movs	r2, #4
 8002a50:	237f      	movs	r3, #127	; 0x7f
 8002a52:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8002a56:	4a29      	ldr	r2, [pc, #164]	; (8002afc <main+0x32c>)
 8002a58:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a5a:	4650      	mov	r0, sl
 8002a5c:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_13;
 8002a5e:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8002a62:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a66:	f002 ff03 	bl	8005870 <HAL_ADC_ConfigChannel>
 8002a6a:	b108      	cbz	r0, 8002a70 <main+0x2a0>
 8002a6c:	b672      	cpsid	i
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <main+0x29e>
  hcordic.Instance = CORDIC;
 8002a70:	4823      	ldr	r0, [pc, #140]	; (8002b00 <main+0x330>)
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <main+0x334>)
 8002a74:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8002a76:	f003 fccf 	bl	8006418 <HAL_CORDIC_Init>
 8002a7a:	b108      	cbz	r0, 8002a80 <main+0x2b0>
 8002a7c:	b672      	cpsid	i
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <main+0x2ae>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a80:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8002a82:	4d21      	ldr	r5, [pc, #132]	; (8002b08 <main+0x338>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a84:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a86:	4621      	mov	r1, r4
 8002a88:	2234      	movs	r2, #52	; 0x34
 8002a8a:	a818      	add	r0, sp, #96	; 0x60
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a8c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002a90:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a94:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8002a98:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8002a9c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa0:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002aa4:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa6:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aa8:	f008 fe46 	bl	800b738 <memset>
  htim1.Instance = TIM1;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <main+0x33c>)
 8002aae:	602b      	str	r3, [r5, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002ab0:	2020      	movs	r0, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8002ab2:	f640 51d5 	movw	r1, #3541	; 0xdd5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8002aba:	2307      	movs	r3, #7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002abc:	60a8      	str	r0, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002abe:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002ac0:	e9c5 1203 	strd	r1, r2, [r5, #12]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8002ac4:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8002ac8:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002aca:	f005 fecb 	bl	8008864 <HAL_TIM_Base_Init>
 8002ace:	b108      	cbz	r0, 8002ad4 <main+0x304>
 8002ad0:	b672      	cpsid	i
  while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <main+0x302>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f005 ff9d 	bl	8008a14 <HAL_TIM_PWM_Init>
 8002ada:	b1f8      	cbz	r0, 8002b1c <main+0x34c>
 8002adc:	b672      	cpsid	i
  while (1)
 8002ade:	e7fe      	b.n	8002ade <main+0x30e>
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48000800 	.word	0x48000800
 8002aec:	08600004 	.word	0x08600004
 8002af0:	3ac04000 	.word	0x3ac04000
 8002af4:	04300002 	.word	0x04300002
 8002af8:	50000100 	.word	0x50000100
 8002afc:	36902000 	.word	0x36902000
 8002b00:	2000118c 	.word	0x2000118c
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	20001264 	.word	0x20001264
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	20001120 	.word	0x20001120
 8002b14:	20001034 	.word	0x20001034
 8002b18:	0c900008 	.word	0x0c900008
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002b1c:	2206      	movs	r2, #6
 8002b1e:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002b20:	a90a      	add	r1, sp, #40	; 0x28
 8002b22:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002b24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002b28:	f006 f8aa 	bl	8008c80 <HAL_TIM_SlaveConfigSynchro>
 8002b2c:	b108      	cbz	r0, 8002b32 <main+0x362>
 8002b2e:	b672      	cpsid	i
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <main+0x360>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002b32:	2270      	movs	r2, #112	; 0x70
 8002b34:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b36:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b38:	a906      	add	r1, sp, #24
 8002b3a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002b3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b40:	f006 fb5c 	bl	80091fc <HAL_TIMEx_MasterConfigSynchronization>
 8002b44:	4602      	mov	r2, r0
 8002b46:	b108      	cbz	r0, 8002b4c <main+0x37c>
 8002b48:	b672      	cpsid	i
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <main+0x37a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b4c:	2060      	movs	r0, #96	; 0x60
 8002b4e:	2100      	movs	r1, #0
 8002b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002b54:	f04f 0800 	mov.w	r8, #0
 8002b58:	f04f 0900 	mov.w	r9, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b60:	a910      	add	r1, sp, #64	; 0x40
 8002b62:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b64:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8002b68:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002b6c:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b6e:	f006 fa4b 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8002b72:	b108      	cbz	r0, 8002b78 <main+0x3a8>
 8002b74:	b672      	cpsid	i
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <main+0x3a6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b78:	2204      	movs	r2, #4
 8002b7a:	a910      	add	r1, sp, #64	; 0x40
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f006 fa43 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8002b82:	b108      	cbz	r0, 8002b88 <main+0x3b8>
 8002b84:	b672      	cpsid	i
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <main+0x3b6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b88:	2208      	movs	r2, #8
 8002b8a:	a910      	add	r1, sp, #64	; 0x40
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f006 fa3b 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8002b92:	b108      	cbz	r0, 8002b98 <main+0x3c8>
 8002b94:	b672      	cpsid	i
  while (1)
 8002b96:	e7fe      	b.n	8002b96 <main+0x3c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002b98:	2370      	movs	r3, #112	; 0x70
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b9a:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b9c:	220c      	movs	r2, #12
 8002b9e:	a910      	add	r1, sp, #64	; 0x40
 8002ba0:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002ba2:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ba4:	f006 fa30 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8002ba8:	b108      	cbz	r0, 8002bae <main+0x3de>
 8002baa:	b672      	cpsid	i
  while (1)
 8002bac:	e7fe      	b.n	8002bac <main+0x3dc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bbe:	2384      	movs	r3, #132	; 0x84
 8002bc0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bc4:	9024      	str	r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bcc:	a918      	add	r1, sp, #96	; 0x60
 8002bce:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002bd0:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8002bd4:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8002bd8:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8002bdc:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002be0:	f006 fb54 	bl	800928c <HAL_TIMEx_ConfigBreakDeadTime>
 8002be4:	4604      	mov	r4, r0
 8002be6:	b108      	cbz	r0, 8002bec <main+0x41c>
 8002be8:	b672      	cpsid	i
  while (1)
 8002bea:	e7fe      	b.n	8002bea <main+0x41a>
  HAL_TIM_MspPostInit(&htim1);
 8002bec:	4628      	mov	r0, r5
 8002bee:	f001 ff87 	bl	8004b00 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8002bf2:	48a1      	ldr	r0, [pc, #644]	; (8002e78 <main+0x6a8>)
 8002bf4:	4aa1      	ldr	r2, [pc, #644]	; (8002e7c <main+0x6ac>)
 8002bf6:	6002      	str	r2, [r0, #0]
  htim4.Init.Period = M1_PULSE_NBR;
 8002bf8:	f243 73ff 	movw	r3, #14335	; 0x37ff
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bfc:	2203      	movs	r2, #3
  htim4.Init.Period = M1_PULSE_NBR;
 8002bfe:	60c3      	str	r3, [r0, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002c06:	2201      	movs	r2, #1
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002c0e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c12:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c16:	e9c0 4401 	strd	r4, r4, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1a:	9410      	str	r4, [sp, #64]	; 0x40
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1c:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1e:	6184      	str	r4, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c20:	220c      	movs	r2, #12
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8002c22:	240c      	movs	r4, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c24:	2300      	movs	r3, #0
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c26:	a918      	add	r1, sp, #96	; 0x60
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c28:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8002c2c:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c2e:	f005 ff75 	bl	8008b1c <HAL_TIM_Encoder_Init>
 8002c32:	b108      	cbz	r0, 8002c38 <main+0x468>
 8002c34:	b672      	cpsid	i
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <main+0x466>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c38:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c3a:	488f      	ldr	r0, [pc, #572]	; (8002e78 <main+0x6a8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c3e:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c40:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c42:	f006 fadb 	bl	80091fc <HAL_TIMEx_MasterConfigSynchronization>
 8002c46:	4603      	mov	r3, r0
 8002c48:	b108      	cbz	r0, 8002c4e <main+0x47e>
 8002c4a:	b672      	cpsid	i
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <main+0x47c>
  huart2.Instance = USART2;
 8002c4e:	4c8c      	ldr	r4, [pc, #560]	; (8002e80 <main+0x6b0>)
 8002c50:	498c      	ldr	r1, [pc, #560]	; (8002e84 <main+0x6b4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c52:	60a0      	str	r0, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8002c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c58:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c5a:	250c      	movs	r5, #12
  huart2.Init.BaudRate = 115200;
 8002c5c:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c60:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c64:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c68:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c6c:	62a3      	str	r3, [r4, #40]	; 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c6e:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c70:	f006 fc24 	bl	80094bc <HAL_UART_Init>
 8002c74:	4601      	mov	r1, r0
 8002c76:	b108      	cbz	r0, 8002c7c <main+0x4ac>
 8002c78:	b672      	cpsid	i
  while (1)
 8002c7a:	e7fe      	b.n	8002c7a <main+0x4aa>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f006 fdf3 	bl	8009868 <HAL_UARTEx_SetTxFifoThreshold>
 8002c82:	4601      	mov	r1, r0
 8002c84:	b108      	cbz	r0, 8002c8a <main+0x4ba>
 8002c86:	b672      	cpsid	i
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <main+0x4b8>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f006 fe2a 	bl	80098e4 <HAL_UARTEx_SetRxFifoThreshold>
 8002c90:	b108      	cbz	r0, 8002c96 <main+0x4c6>
 8002c92:	b672      	cpsid	i
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <main+0x4c4>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c96:	4620      	mov	r0, r4
 8002c98:	f006 fdc8 	bl	800982c <HAL_UARTEx_DisableFifoMode>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	b108      	cbz	r0, 8002ca4 <main+0x4d4>
 8002ca0:	b672      	cpsid	i
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <main+0x4d2>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ca4:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <main+0x6b8>)
  hfdcan1.Instance = FDCAN1;
 8002ca6:	4e79      	ldr	r6, [pc, #484]	; (8002e8c <main+0x6bc>)
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002caa:	f042 0204 	orr.w	r2, r2, #4
 8002cae:	649a      	str	r2, [r3, #72]	; 0x48
 8002cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cb2:	f002 0204 	and.w	r2, r2, #4
 8002cb6:	920a      	str	r2, [sp, #40]	; 0x28
 8002cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	649a      	str	r2, [r3, #72]	; 0x48
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc4:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ccc:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cce:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cd2:	f003 fbcf 	bl	8006474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cd6:	200b      	movs	r0, #11
 8002cd8:	f003 fc04 	bl	80064e4 <HAL_NVIC_EnableIRQ>
  hfdcan1.Instance = FDCAN1;
 8002cdc:	486c      	ldr	r0, [pc, #432]	; (8002e90 <main+0x6c0>)
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002cde:	f240 1201 	movw	r2, #257	; 0x101
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8002ce2:	f04f 0802 	mov.w	r8, #2
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002ce6:	f44f 7140 	mov.w	r1, #768	; 0x300
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8002cea:	61c5      	str	r5, [r0, #28]
  hfdcan1.Init.DataTimeSeg1 = 12;
 8002cec:	62c5      	str	r5, [r0, #44]	; 0x2c
  hfdcan1.Init.NominalPrescaler = 5;
 8002cee:	f04f 0905 	mov.w	r9, #5
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8002cf2:	2501      	movs	r5, #1
  hfdcan1.Instance = FDCAN1;
 8002cf4:	6006      	str	r6, [r0, #0]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002cf6:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8002cf8:	2604      	movs	r6, #4
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002cfa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8002cfe:	e9c0 9805 	strd	r9, r8, [r0, #20]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002d02:	60c4      	str	r4, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002d04:	7484      	strb	r4, [r0, #18]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002d06:	6081      	str	r1, [r0, #8]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8002d08:	6045      	str	r5, [r0, #4]
  hfdcan1.Init.DataPrescaler = 1;
 8002d0a:	6245      	str	r5, [r0, #36]	; 0x24
  hfdcan1.Init.StdFiltersNbr = 1;
 8002d0c:	6345      	str	r5, [r0, #52]	; 0x34
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8002d0e:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8002d12:	6206      	str	r6, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 4;
 8002d14:	6306      	str	r6, [r0, #48]	; 0x30
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002d16:	f003 fd39 	bl	800678c <HAL_FDCAN_Init>
 8002d1a:	b108      	cbz	r0, 8002d20 <main+0x550>
 8002d1c:	b672      	cpsid	i
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <main+0x54e>
  hspi2.Instance = SPI2;
 8002d20:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <main+0x6c4>)
 8002d22:	4c5d      	ldr	r4, [pc, #372]	; (8002e98 <main+0x6c8>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d24:	6098      	str	r0, [r3, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d26:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d2a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d2e:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d32:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d36:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d38:	6318      	str	r0, [r3, #48]	; 0x30
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d3a:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d3e:	6059      	str	r1, [r3, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CRCPolynomial = 7;
 8002d42:	2107      	movs	r1, #7
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d44:	2208      	movs	r2, #8
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d46:	6198      	str	r0, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d48:	f04f 0a18 	mov.w	sl, #24
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d4c:	4618      	mov	r0, r3
  hspi2.Instance = SPI2;
 8002d4e:	601c      	str	r4, [r3, #0]
  hspi2.Init.CRCPolynomial = 7;
 8002d50:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d54:	f8c3 a01c 	str.w	sl, [r3, #28]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d58:	f005 fa0c 	bl	8008174 <HAL_SPI_Init>
 8002d5c:	b108      	cbz	r0, 8002d62 <main+0x592>
 8002d5e:	b672      	cpsid	i
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <main+0x590>
  htim6.Instance = TIM6;
 8002d62:	f8df b140 	ldr.w	fp, [pc, #320]	; 8002ea4 <main+0x6d4>
 8002d66:	4a4d      	ldr	r2, [pc, #308]	; (8002e9c <main+0x6cc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d68:	9018      	str	r0, [sp, #96]	; 0x60
  htim6.Init.Period = 16999;
 8002d6a:	f244 2367 	movw	r3, #16999	; 0x4267
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d72:	e9cb 0001 	strd	r0, r0, [fp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d76:	f8cb 0018 	str.w	r0, [fp, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d7a:	4658      	mov	r0, fp
  htim6.Init.Period = 16999;
 8002d7c:	f8cb 300c 	str.w	r3, [fp, #12]
  htim6.Instance = TIM6;
 8002d80:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d84:	f005 fd6e 	bl	8008864 <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	b108      	cbz	r0, 8002d90 <main+0x5c0>
 8002d8c:	b672      	cpsid	i
  while (1)
 8002d8e:	e7fe      	b.n	8002d8e <main+0x5be>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d90:	a918      	add	r1, sp, #96	; 0x60
 8002d92:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d94:	9318      	str	r3, [sp, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d96:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d98:	f006 fa30 	bl	80091fc <HAL_TIMEx_MasterConfigSynchronization>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	b108      	cbz	r0, 8002da4 <main+0x5d4>
 8002da0:	b672      	cpsid	i
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <main+0x5d2>
  MX_MotorControl_Init();
 8002da4:	f001 fa90 	bl	80042c8 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8002da8:	462a      	mov	r2, r5
 8002daa:	4631      	mov	r1, r6
 8002dac:	4650      	mov	r0, sl
 8002dae:	f003 fb61 	bl	8006474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002db2:	4650      	mov	r0, sl
 8002db4:	f003 fb96 	bl	80064e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002db8:	4622      	mov	r2, r4
 8002dba:	4621      	mov	r1, r4
 8002dbc:	2019      	movs	r0, #25
 8002dbe:	f003 fb59 	bl	8006474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002dc2:	2019      	movs	r0, #25
 8002dc4:	f003 fb8e 	bl	80064e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002dc8:	4622      	mov	r2, r4
 8002dca:	4641      	mov	r1, r8
 8002dcc:	2012      	movs	r0, #18
 8002dce:	f003 fb51 	bl	8006474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002dd2:	2012      	movs	r0, #18
 8002dd4:	f003 fb86 	bl	80064e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002dd8:	4622      	mov	r2, r4
 8002dda:	2103      	movs	r1, #3
 8002ddc:	201e      	movs	r0, #30
 8002dde:	f003 fb49 	bl	8006474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002de2:	201e      	movs	r0, #30
 8002de4:	f003 fb7e 	bl	80064e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8002de8:	462a      	mov	r2, r5
 8002dea:	2103      	movs	r1, #3
 8002dec:	2026      	movs	r0, #38	; 0x26
 8002dee:	f003 fb41 	bl	8006474 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002df2:	2026      	movs	r0, #38	; 0x26
 8002df4:	f003 fb76 	bl	80064e4 <HAL_NVIC_EnableIRQ>
	MA730_WriteRegister(0, 0b00000000);
 8002df8:	4621      	mov	r1, r4
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7fe faa8 	bl	8001350 <MA730_WriteRegister>
	MA730_WriteRegister(1, 0b00000000);
 8002e00:	4621      	mov	r1, r4
 8002e02:	4628      	mov	r0, r5
 8002e04:	f7fe faa4 	bl	8001350 <MA730_WriteRegister>
	MA730_WriteRegister(2, 0b00000000);
 8002e08:	4621      	mov	r1, r4
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	f7fe faa0 	bl	8001350 <MA730_WriteRegister>
	MA730_WriteRegister(3, 0b00000000);
 8002e10:	4621      	mov	r1, r4
 8002e12:	2003      	movs	r0, #3
 8002e14:	f7fe fa9c 	bl	8001350 <MA730_WriteRegister>
	MA730_WriteRegister(4, 0b11000000);
 8002e18:	21c0      	movs	r1, #192	; 0xc0
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	f7fe fa98 	bl	8001350 <MA730_WriteRegister>
	MA730_WriteRegister(5, 0b11111111);
 8002e20:	21ff      	movs	r1, #255	; 0xff
 8002e22:	4648      	mov	r0, r9
 8002e24:	f7fe fa94 	bl	8001350 <MA730_WriteRegister>
	MA730_WriteRegister(6, 0b00011100);
 8002e28:	211c      	movs	r1, #28
 8002e2a:	2006      	movs	r0, #6
 8002e2c:	f7fe fa90 	bl	8001350 <MA730_WriteRegister>
	MA730_WriteRegister(9, 0b00000000);
 8002e30:	4621      	mov	r1, r4
 8002e32:	2009      	movs	r0, #9
 8002e34:	f7fe fa8c 	bl	8001350 <MA730_WriteRegister>
	MA730_ReadRegister(0);
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7fe f9cb 	bl	80011d4 <MA730_ReadRegister>
	MA730_ReadRegister(1);
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f7fe f9c8 	bl	80011d4 <MA730_ReadRegister>
	MA730_ReadRegister(2);
 8002e44:	4640      	mov	r0, r8
 8002e46:	f7fe f9c5 	bl	80011d4 <MA730_ReadRegister>
	MA730_ReadRegister(3);
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	f7fe f9c2 	bl	80011d4 <MA730_ReadRegister>
	MA730_ReadRegister(4);
 8002e50:	4630      	mov	r0, r6
 8002e52:	f7fe f9bf 	bl	80011d4 <MA730_ReadRegister>
	MA730_ReadRegister(5);
 8002e56:	4648      	mov	r0, r9
 8002e58:	f7fe f9bc 	bl	80011d4 <MA730_ReadRegister>
	MA730_ReadRegister(6);
 8002e5c:	2006      	movs	r0, #6
 8002e5e:	f7fe f9b9 	bl	80011d4 <MA730_ReadRegister>
	MA730_ReadRegister(9);
 8002e62:	2009      	movs	r0, #9
 8002e64:	f7fe f9b6 	bl	80011d4 <MA730_ReadRegister>
	HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer // Stop to check MA730
 8002e68:	4658      	mov	r0, fp
 8002e6a:	f005 fd7f 	bl	800896c <HAL_TIM_Base_Start_IT>
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <main+0x6d0>)
	g_counter_main++;
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	6013      	str	r3, [r2, #0]
  while (1)
 8002e76:	e7fb      	b.n	8002e70 <main+0x6a0>
 8002e78:	20000fe8 	.word	0x20000fe8
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	200012d4 	.word	0x200012d4
 8002e84:	40004400 	.word	0x40004400
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40006400 	.word	0x40006400
 8002e90:	200011b4 	.word	0x200011b4
 8002e94:	20000f84 	.word	0x20000f84
 8002e98:	40003800 	.word	0x40003800
 8002e9c:	40001000 	.word	0x40001000
 8002ea0:	20000e5c 	.word	0x20000e5c
 8002ea4:	20001218 	.word	0x20001218

08002ea8 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8002ea8:	4b01      	ldr	r3, [pc, #4]	; (8002eb0 <MC_StartMotor1+0x8>)
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	f000 b864 	b.w	8002f78 <MCI_StartMotor>
 8002eb0:	20001470 	.word	0x20001470

08002eb4 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8002eb4:	4b01      	ldr	r3, [pc, #4]	; (8002ebc <MC_StopMotor1+0x8>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	f000 b868 	b.w	8002f8c <MCI_StopMotor>
 8002ebc:	20001470 	.word	0x20001470

08002ec0 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <MC_ProgramSpeedRampMotor1+0xc>)
{
 8002ec2:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8002ec4:	4601      	mov	r1, r0
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	f000 b836 	b.w	8002f38 <MCI_ExecSpeedRamp>
 8002ecc:	20001470 	.word	0x20001470

08002ed0 <MC_ProgramTorqueRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8002ed0:	4b02      	ldr	r3, [pc, #8]	; (8002edc <MC_ProgramTorqueRampMotor1+0xc>)
{
 8002ed2:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	f000 b83a 	b.w	8002f50 <MCI_ExecTorqueRamp>
 8002edc:	20001470 	.word	0x20001470

08002ee0 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8002ee0:	4b01      	ldr	r3, [pc, #4]	; (8002ee8 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	f000 b91c 	b.w	8003120 <MCI_GetPhaseCurrentAmplitude>
 8002ee8:	20001470 	.word	0x20001470

08002eec <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8002eec:	4b01      	ldr	r3, [pc, #4]	; (8002ef4 <MC_AcknowledgeFaultMotor1+0x8>)
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	f000 b850 	b.w	8002f94 <MCI_FaultAcknowledged>
 8002ef4:	20001470 	.word	0x20001470

08002ef8 <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 8002ef8:	4b01      	ldr	r3, [pc, #4]	; (8002f00 <MC_GetOccurredFaultsMotor1+0x8>)
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	f000 b892 	b.w	8003024 <MCI_GetOccurredFaults>
 8002f00:	20001470 	.word	0x20001470

08002f04 <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 8002f04:	4b01      	ldr	r3, [pc, #4]	; (8002f0c <MC_GetCurrentFaultsMotor1+0x8>)
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	f000 b892 	b.w	8003030 <MCI_GetCurrentFaults>
 8002f0c:	20001470 	.word	0x20001470

08002f10 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8002f10:	4b01      	ldr	r3, [pc, #4]	; (8002f18 <MC_GetSTMStateMotor1+0x8>)
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	f000 b882 	b.w	800301c <MCI_GetSTMState>
 8002f18:	20001470 	.word	0x20001470

08002f1c <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8002f1c:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8002f1e:	2400      	movs	r4, #0
 8002f20:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8002f22:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8002f24:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8002f26:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8002f28:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8002f2a:	e9c0 1200 	strd	r1, r2, [r0]
}
 8002f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8002f32:	6083      	str	r3, [r0, #8]
}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8002f38:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f3a:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8002f3e:	2401      	movs	r4, #1
 8002f40:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8002f42:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8002f44:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8002f48:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f4a:	8303      	strh	r3, [r0, #24]
}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8002f50:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f52:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8002f54:	2402      	movs	r4, #2
 8002f56:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8002f58:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8002f5e:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f60:	8303      	strh	r3, [r0, #24]
}
 8002f62:	4770      	bx	lr

08002f64 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8002f64:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002f66:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f68:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8002f6a:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002f6e:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f70:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002f72:	b002      	add	sp, #8
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8002f78:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8002f7a:	2103      	movs	r1, #3
{
 8002f7c:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8002f7e:	6800      	ldr	r0, [r0, #0]
 8002f80:	f008 f99c 	bl	800b2bc <STM_NextState>

  if ( RetVal == true )
 8002f84:	b108      	cbz	r0, 8002f8a <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f86:	2301      	movs	r3, #1
 8002f88:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8002f8a:	bd10      	pop	{r4, pc}

08002f8c <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8002f8c:	6800      	ldr	r0, [r0, #0]
 8002f8e:	2107      	movs	r1, #7
 8002f90:	f008 b994 	b.w	800b2bc <STM_NextState>

08002f94 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8002f94:	6800      	ldr	r0, [r0, #0]
 8002f96:	f008 ba07 	b.w	800b3a8 <STM_FaultAcknowledged>
 8002f9a:	bf00      	nop

08002f9c <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8002f9c:	6800      	ldr	r0, [r0, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	f008 b98c 	b.w	800b2bc <STM_NextState>

08002fa4 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8002fa4:	b178      	cbz	r0, 8002fc6 <MCI_ExecBufferedCommands+0x22>
{
 8002fa6:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002fa8:	7e03      	ldrb	r3, [r0, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	4604      	mov	r4, r0
 8002fae:	d000      	beq.n	8002fb2 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8002fb0:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8002fb2:	7b01      	ldrb	r1, [r0, #12]
 8002fb4:	2902      	cmp	r1, #2
 8002fb6:	d020      	beq.n	8002ffa <MCI_ExecBufferedCommands+0x56>
 8002fb8:	2903      	cmp	r1, #3
 8002fba:	d005      	beq.n	8002fc8 <MCI_ExecBufferedCommands+0x24>
 8002fbc:	2901      	cmp	r1, #1
 8002fbe:	d00c      	beq.n	8002fda <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	7623      	strb	r3, [r4, #24]
}
 8002fc4:	bd10      	pop	{r4, pc}
 8002fc6:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002fc8:	6882      	ldr	r2, [r0, #8]
 8002fca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002fce:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8002fd2:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	7623      	strb	r3, [r4, #24]
}
 8002fd8:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002fda:	6883      	ldr	r3, [r0, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8002fe2:	6840      	ldr	r0, [r0, #4]
 8002fe4:	f008 f8a4 	bl	800b130 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8002fe8:	8ae2      	ldrh	r2, [r4, #22]
 8002fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fee:	6860      	ldr	r0, [r4, #4]
 8002ff0:	f008 f8a2 	bl	800b138 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d0e3      	beq.n	8002fc0 <MCI_ExecBufferedCommands+0x1c>
 8002ff8:	e7ec      	b.n	8002fd4 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002ffa:	6883      	ldr	r3, [r0, #8]
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8003002:	6840      	ldr	r0, [r0, #4]
 8003004:	f008 f894 	bl	800b130 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8003008:	8ae2      	ldrh	r2, [r4, #22]
 800300a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800300e:	6860      	ldr	r0, [r4, #4]
 8003010:	f008 f892 	bl	800b138 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8003014:	2800      	cmp	r0, #0
 8003016:	d0d3      	beq.n	8002fc0 <MCI_ExecBufferedCommands+0x1c>
 8003018:	e7dc      	b.n	8002fd4 <MCI_ExecBufferedCommands+0x30>
 800301a:	bf00      	nop

0800301c <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 800301c:	6800      	ldr	r0, [r0, #0]
 800301e:	f008 b9c1 	b.w	800b3a4 <STM_GetState>
 8003022:	bf00      	nop

08003024 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8003024:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 8003026:	6800      	ldr	r0, [r0, #0]
 8003028:	f008 f9ca 	bl	800b3c0 <STM_GetFaultState>
}
 800302c:	b280      	uxth	r0, r0
 800302e:	bd08      	pop	{r3, pc}

08003030 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8003030:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8003032:	6800      	ldr	r0, [r0, #0]
 8003034:	f008 f9c4 	bl	800b3c0 <STM_GetFaultState>
}
 8003038:	0c00      	lsrs	r0, r0, #16
 800303a:	bd08      	pop	{r3, pc}

0800303c <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 800303c:	7e40      	ldrb	r0, [r0, #25]
 800303e:	4770      	bx	lr

08003040 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8003040:	7b03      	ldrb	r3, [r0, #12]
 8003042:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8003044:	bf0c      	ite	eq
 8003046:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 800304a:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8003050:	6840      	ldr	r0, [r0, #4]
 8003052:	f008 b8b9 	b.w	800b1c8 <STC_StopRamp>
 8003056:	bf00      	nop

08003058 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8003058:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800305a:	6840      	ldr	r0, [r0, #4]
 800305c:	f008 f84e 	bl	800b0fc <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8003060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8003064:	f007 bff6 	b.w	800b054 <SPD_GetAvrgMecSpeedUnit>

08003068 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8003068:	6840      	ldr	r0, [r0, #4]
 800306a:	f008 b851 	b.w	800b110 <STC_GetMecSpeedRefUnit>
 800306e:	bf00      	nop

08003070 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8003070:	6882      	ldr	r2, [r0, #8]
 8003072:	6810      	ldr	r0, [r2, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	b282      	uxth	r2, r0
 8003078:	f362 030f 	bfi	r3, r2, #0, #16
 800307c:	0c00      	lsrs	r0, r0, #16
 800307e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8003082:	b082      	sub	sp, #8
}
 8003084:	4618      	mov	r0, r3
 8003086:	b002      	add	sp, #8
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 800308c:	6882      	ldr	r2, [r0, #8]
 800308e:	6850      	ldr	r0, [r2, #4]
 8003090:	2300      	movs	r3, #0
 8003092:	b282      	uxth	r2, r0
 8003094:	f362 030f 	bfi	r3, r2, #0, #16
 8003098:	0c00      	lsrs	r0, r0, #16
 800309a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800309e:	b082      	sub	sp, #8
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	b002      	add	sp, #8
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop

080030a8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80030a8:	6882      	ldr	r2, [r0, #8]
 80030aa:	68d0      	ldr	r0, [r2, #12]
 80030ac:	2300      	movs	r3, #0
 80030ae:	b282      	uxth	r2, r0
 80030b0:	f362 030f 	bfi	r3, r2, #0, #16
 80030b4:	0c00      	lsrs	r0, r0, #16
 80030b6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80030ba:	b082      	sub	sp, #8
}
 80030bc:	4618      	mov	r0, r3
 80030be:	b002      	add	sp, #8
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80030c4:	6882      	ldr	r2, [r0, #8]
 80030c6:	6910      	ldr	r0, [r2, #16]
 80030c8:	2300      	movs	r3, #0
 80030ca:	b282      	uxth	r2, r0
 80030cc:	f362 030f 	bfi	r3, r2, #0, #16
 80030d0:	0c00      	lsrs	r0, r0, #16
 80030d2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80030d6:	b082      	sub	sp, #8
}
 80030d8:	4618      	mov	r0, r3
 80030da:	b002      	add	sp, #8
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop

080030e0 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80030e0:	6882      	ldr	r2, [r0, #8]
 80030e2:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80030e6:	2300      	movs	r3, #0
 80030e8:	b282      	uxth	r2, r0
 80030ea:	f362 030f 	bfi	r3, r2, #0, #16
 80030ee:	0c00      	lsrs	r0, r0, #16
 80030f0:	f360 431f 	bfi	r3, r0, #16, #16
{
 80030f4:	b082      	sub	sp, #8
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	b002      	add	sp, #8
 80030fa:	4770      	bx	lr

080030fc <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 80030fc:	6882      	ldr	r2, [r0, #8]
 80030fe:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8003102:	2300      	movs	r3, #0
 8003104:	b282      	uxth	r2, r0
 8003106:	f362 030f 	bfi	r3, r2, #0, #16
 800310a:	0c00      	lsrs	r0, r0, #16
 800310c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8003110:	b082      	sub	sp, #8
}
 8003112:	4618      	mov	r0, r3
 8003114:	b002      	add	sp, #8
 8003116:	4770      	bx	lr

08003118 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8003118:	6883      	ldr	r3, [r0, #8]
}
 800311a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800311e:	4770      	bx	lr

08003120 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8003120:	6882      	ldr	r2, [r0, #8]
{
 8003122:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8003124:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8003128:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 800312c:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8003130:	fb00 3000 	mla	r0, r0, r0, r3
 8003134:	f000 f8c0 	bl	80032b8 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8003138:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800313c:	4298      	cmp	r0, r3
 800313e:	bfa8      	it	ge
 8003140:	4618      	movge	r0, r3
}
 8003142:	b200      	sxth	r0, r0
 8003144:	bd08      	pop	{r3, pc}
 8003146:	bf00      	nop

08003148 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8003148:	2300      	movs	r3, #0
 800314a:	6882      	ldr	r2, [r0, #8]
 800314c:	f361 030f 	bfi	r3, r1, #0, #16
 8003150:	f361 431f 	bfi	r3, r1, #16, #16
 8003154:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop

0800315c <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 800315c:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 800315e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8003162:	f008 f871 	bl	800b248 <STC_GetDefaultIqdref>
 8003166:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800316a:	8220      	strh	r0, [r4, #16]
 800316c:	8263      	strh	r3, [r4, #18]
}
 800316e:	bd10      	pop	{r4, pc}

08003170 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8003170:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8003172:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8003176:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 800317a:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800317e:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8003182:	4250      	negs	r0, r2
 8003184:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8003188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800318c:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 800318e:	da05      	bge.n	800319c <MCM_Clarke+0x2c>
 8003190:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8003192:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8003196:	da0c      	bge.n	80031b2 <MCM_Clarke+0x42>
 8003198:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <MCM_Clarke+0x50>)
 800319a:	e001      	b.n	80031a0 <MCM_Clarke+0x30>
 800319c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2000      	movs	r0, #0
 80031a4:	b292      	uxth	r2, r2
 80031a6:	f363 000f 	bfi	r0, r3, #0, #16
 80031aa:	f362 401f 	bfi	r0, r2, #16, #16
}
 80031ae:	b004      	add	sp, #16
 80031b0:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80031b2:	4803      	ldr	r0, [pc, #12]	; (80031c0 <MCM_Clarke+0x50>)
 80031b4:	b20a      	sxth	r2, r1
 80031b6:	4282      	cmp	r2, r0
 80031b8:	bfb8      	it	lt
 80031ba:	4602      	movlt	r2, r0
 80031bc:	e7f0      	b.n	80031a0 <MCM_Clarke+0x30>
 80031be:	bf00      	nop
 80031c0:	ffff8001 	.word	0xffff8001

080031c4 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <MCM_Trig_Functions+0x28>)
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <MCM_Trig_Functions+0x2c>)
 80031c8:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 80031ca:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 80031ce:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80031d2:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80031d4:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 80031d6:	2000      	movs	r0, #0
 80031d8:	b29a      	uxth	r2, r3
 80031da:	f362 000f 	bfi	r0, r2, #0, #16
 80031de:	0c1b      	lsrs	r3, r3, #16
{
 80031e0:	b082      	sub	sp, #8
  return (CosSin.Components);
 80031e2:	f363 401f 	bfi	r0, r3, #16, #16

}
 80031e6:	b002      	add	sp, #8
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40020c00 	.word	0x40020c00
 80031f0:	00600040 	.word	0x00600040

080031f4 <MCM_Park>:
{
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	4605      	mov	r5, r0
 80031fa:	9001      	str	r0, [sp, #4]
 80031fc:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80031fe:	4608      	mov	r0, r1
 8003200:	f7ff ffe0 	bl	80031c4 <MCM_Trig_Functions>
 8003204:	b22d      	sxth	r5, r5
 8003206:	b204      	sxth	r4, r0
 8003208:	1436      	asrs	r6, r6, #16
 800320a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800320c:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8003210:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8003214:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003218:	da12      	bge.n	8003240 <MCM_Park+0x4c>
 800321a:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 800321c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003220:	4914      	ldr	r1, [pc, #80]	; (8003274 <MCM_Park+0x80>)
 8003222:	da21      	bge.n	8003268 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8003224:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8003228:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 800322c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8003230:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8003234:	da07      	bge.n	8003246 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8003236:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800323a:	da0f      	bge.n	800325c <MCM_Park+0x68>
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <MCM_Park+0x80>)
 800323e:	e004      	b.n	800324a <MCM_Park+0x56>
 8003240:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003244:	e7ee      	b.n	8003224 <MCM_Park+0x30>
 8003246:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800324a:	b28a      	uxth	r2, r1
 800324c:	2000      	movs	r0, #0
 800324e:	b29b      	uxth	r3, r3
 8003250:	f362 000f 	bfi	r0, r2, #0, #16
 8003254:	f363 401f 	bfi	r0, r3, #16, #16
}
 8003258:	b004      	add	sp, #16
 800325a:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800325c:	4805      	ldr	r0, [pc, #20]	; (8003274 <MCM_Park+0x80>)
 800325e:	b213      	sxth	r3, r2
 8003260:	4283      	cmp	r3, r0
 8003262:	bfb8      	it	lt
 8003264:	4603      	movlt	r3, r0
 8003266:	e7f0      	b.n	800324a <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8003268:	b21a      	sxth	r2, r3
 800326a:	4291      	cmp	r1, r2
 800326c:	bfb8      	it	lt
 800326e:	4611      	movlt	r1, r2
 8003270:	e7d8      	b.n	8003224 <MCM_Park+0x30>
 8003272:	bf00      	nop
 8003274:	ffff8001 	.word	0xffff8001

08003278 <MCM_Rev_Park>:
{
 8003278:	b530      	push	{r4, r5, lr}
 800327a:	b085      	sub	sp, #20
 800327c:	4604      	mov	r4, r0
 800327e:	9001      	str	r0, [sp, #4]
 8003280:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8003282:	4608      	mov	r0, r1
 8003284:	f7ff ff9e 	bl	80031c4 <MCM_Trig_Functions>
 8003288:	142d      	asrs	r5, r5, #16
 800328a:	1403      	asrs	r3, r0, #16
 800328c:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 800328e:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8003292:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8003294:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8003298:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800329c:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80032a0:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80032a4:	2000      	movs	r0, #0
 80032a6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80032aa:	f362 000f 	bfi	r0, r2, #0, #16
 80032ae:	f363 401f 	bfi	r0, r3, #16, #16
}
 80032b2:	b005      	add	sp, #20
 80032b4:	bd30      	pop	{r4, r5, pc}
 80032b6:	bf00      	nop

080032b8 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	dd32      	ble.n	8003322 <MCM_Sqrt+0x6a>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if ( wInput <= ( int32_t )2097152 )
 80032bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 80032c0:	bfd4      	ite	le
 80032c2:	2080      	movle	r0, #128	; 0x80
 80032c4:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80032c8:	fb93 f2f0 	sdiv	r2, r3, r0
 80032cc:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80032ce:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80032d2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80032d6:	d025      	beq.n	8003324 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80032d8:	fb93 f2f1 	sdiv	r2, r3, r1
 80032dc:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80032de:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80032e2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80032e6:	d01d      	beq.n	8003324 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80032e8:	fb93 f2f0 	sdiv	r2, r3, r0
 80032ec:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80032ee:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80032f2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80032f6:	d015      	beq.n	8003324 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80032f8:	fb93 f2f1 	sdiv	r2, r3, r1
 80032fc:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80032fe:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003302:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8003306:	d00d      	beq.n	8003324 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003308:	fb93 f2f0 	sdiv	r2, r3, r0
 800330c:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800330e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003312:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8003316:	d005      	beq.n	8003324 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003318:	fb93 f0f1 	sdiv	r0, r3, r1
 800331c:	4408      	add	r0, r1
 800331e:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 8003320:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 8003322:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop

08003328 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <FOC_Clear+0x74>)
 8003330:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8003334:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8003338:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 800333a:	2500      	movs	r5, #0
{
 800333c:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 800333e:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003342:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8003344:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8003346:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 800334a:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 800334e:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003352:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8003356:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800335a:	4811      	ldr	r0, [pc, #68]	; (80033a0 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 800335c:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800335e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8003362:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8003366:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003368:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800336a:	50d5      	str	r5, [r2, r3]
 800336c:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8003370:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8003372:	f006 fda3 	bl	8009ebc <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <FOC_Clear+0x7c>)
 8003378:	4629      	mov	r1, r5
 800337a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800337e:	f006 fd9d 	bl	8009ebc <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <FOC_Clear+0x80>)
 8003384:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003388:	f007 feba 	bl	800b100 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <FOC_Clear+0x84>)
 800338e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8003392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003396:	f006 bf9f 	b.w	800a2d8 <PWMC_SwitchOffPWM>
 800339a:	bf00      	nop
 800339c:	200013b8 	.word	0x200013b8
 80033a0:	200013ac 	.word	0x200013ac
 80033a4:	20001468 	.word	0x20001468
 80033a8:	2000146c 	.word	0x2000146c
 80033ac:	200013a0 	.word	0x200013a0

080033b0 <MCboot>:
{
 80033b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b4:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 80033b8:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 80035ac <MCboot+0x1fc>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80033bc:	4e63      	ldr	r6, [pc, #396]	; (800354c <MCboot+0x19c>)
  ENC_Init (&ENCODER_M1);
 80033be:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8003550 <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80033c2:	4d64      	ldr	r5, [pc, #400]	; (8003554 <MCboot+0x1a4>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80033c4:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80035b0 <MCboot+0x200>
 80033c8:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80035b4 <MCboot+0x204>
  PID_HandleInit(&PIDIqHandle_M1);
 80033cc:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80035b8 <MCboot+0x208>
  PID_HandleInit(&PIDIdHandle_M1);
 80033d0:	4f61      	ldr	r7, [pc, #388]	; (8003558 <MCboot+0x1a8>)
{
 80033d2:	b085      	sub	sp, #20
 80033d4:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80033d6:	4658      	mov	r0, fp
{
 80033d8:	e9cd 3100 	strd	r3, r1, [sp]
  STM_Init(&STM[M1]);
 80033dc:	f007 ff4a 	bl	800b274 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 80033e2:	495f      	ldr	r1, [pc, #380]	; (8003560 <MCboot+0x1b0>)
  pCLM[M1] = &CircleLimitationM1;
 80033e4:	4a5f      	ldr	r2, [pc, #380]	; (8003564 <MCboot+0x1b4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80033e6:	4860      	ldr	r0, [pc, #384]	; (8003568 <MCboot+0x1b8>)
  pCLM[M1] = &CircleLimitationM1;
 80033e8:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 80033ea:	2400      	movs	r4, #0
 80033ec:	700c      	strb	r4, [r1, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80033ee:	6030      	str	r0, [r6, #0]
  R3_2_Init(&PWM_Handle_M1);
 80033f0:	f007 fa34 	bl	800a85c <R3_2_Init>
  startTimers();
 80033f4:	f006 fde8 	bl	8009fc8 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80033f8:	485c      	ldr	r0, [pc, #368]	; (800356c <MCboot+0x1bc>)
 80033fa:	f006 fd4b 	bl	8009e94 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80033fe:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8003400:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8003402:	495a      	ldr	r1, [pc, #360]	; (800356c <MCboot+0x1bc>)
 8003404:	6011      	str	r1, [r2, #0]
  ENC_Init (&ENCODER_M1);
 8003406:	ee18 0a10 	vmov	r0, s16
  pSTC[M1] = &SpeednTorqCtrlM1;
 800340a:	602b      	str	r3, [r5, #0]
  ENC_Init (&ENCODER_M1);
 800340c:	f006 fb30 	bl	8009a70 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8003410:	ee18 3a10 	vmov	r3, s16
 8003414:	6829      	ldr	r1, [r5, #0]
 8003416:	464a      	mov	r2, r9
 8003418:	4650      	mov	r0, sl
 800341a:	f006 fad9 	bl	80099d0 <EAC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 800341e:	4a54      	ldr	r2, [pc, #336]	; (8003570 <MCboot+0x1c0>)
  pEAC[M1] = &EncAlignCtrlM1;
 8003420:	4b55      	ldr	r3, [pc, #340]	; (8003578 <MCboot+0x1c8>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8003422:	6811      	ldr	r1, [r2, #0]
 8003424:	6828      	ldr	r0, [r5, #0]
  pEAC[M1] = &EncAlignCtrlM1;
 8003426:	f8c3 a000 	str.w	sl, [r3]
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 800342a:	ee18 2a10 	vmov	r2, s16
 800342e:	f007 fe4f 	bl	800b0d0 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8003432:	4648      	mov	r0, r9
 8003434:	f008 f8e6 	bl	800b604 <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8003438:	4640      	mov	r0, r8
 800343a:	f006 fd2b 	bl	8009e94 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 800343e:	4638      	mov	r0, r7
 8003440:	f006 fd28 	bl	8009e94 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8003444:	4b4d      	ldr	r3, [pc, #308]	; (800357c <MCboot+0x1cc>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8003446:	484e      	ldr	r0, [pc, #312]	; (8003580 <MCboot+0x1d0>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8003448:	f8c3 8000 	str.w	r8, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 800344c:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <MCboot+0x1d4>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800344e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80035bc <MCboot+0x20c>
  pPIDId[M1] = &PIDIdHandle_M1;
 8003452:	601f      	str	r7, [r3, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8003454:	4f4c      	ldr	r7, [pc, #304]	; (8003588 <MCboot+0x1d8>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8003456:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80035c0 <MCboot+0x210>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800345a:	6038      	str	r0, [r7, #0]
  RVBS_Init(pBusSensorM1);
 800345c:	f007 fda0 	bl	800afa0 <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8003460:	683a      	ldr	r2, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8003462:	4b4a      	ldr	r3, [pc, #296]	; (800358c <MCboot+0x1dc>)
 8003464:	4f4a      	ldr	r7, [pc, #296]	; (8003590 <MCboot+0x1e0>)
  NTC_Init(&TempSensorParamsM1);
 8003466:	484b      	ldr	r0, [pc, #300]	; (8003594 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8003468:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800346c:	603b      	str	r3, [r7, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800346e:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8003472:	f006 fccb 	bl	8009e0c <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8003476:	4b48      	ldr	r3, [pc, #288]	; (8003598 <MCboot+0x1e8>)
 8003478:	4848      	ldr	r0, [pc, #288]	; (800359c <MCboot+0x1ec>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800347a:	4f46      	ldr	r7, [pc, #280]	; (8003594 <MCboot+0x1e4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800347c:	6018      	str	r0, [r3, #0]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800347e:	f8c8 7000 	str.w	r7, [r8]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8003482:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8003486:	f007 fdd9 	bl	800b03c <REMNG_Init>
  FOC_Clear(M1);
 800348a:	4620      	mov	r0, r4
 800348c:	f7ff ff4c 	bl	8003328 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8003490:	f88a 9024 	strb.w	r9, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003494:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8003496:	4f42      	ldr	r7, [pc, #264]	; (80035a0 <MCboot+0x1f0>)
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003498:	f007 fed6 	bl	800b248 <STC_GetDefaultIqdref>
 800349c:	4603      	mov	r3, r0
 800349e:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80034a2:	f8aa 3010 	strh.w	r3, [sl, #16]
 80034a6:	f8aa 2012 	strh.w	r2, [sl, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80034aa:	6828      	ldr	r0, [r5, #0]
 80034ac:	f007 fecc 	bl	800b248 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 80034b0:	493c      	ldr	r1, [pc, #240]	; (80035a4 <MCboot+0x1f4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80034b2:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 80034b4:	6039      	str	r1, [r7, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80034b6:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80034ba:	4653      	mov	r3, sl
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80034bc:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80034c0:	4608      	mov	r0, r1
 80034c2:	4659      	mov	r1, fp
 80034c4:	f7ff fd2a 	bl	8002f1c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80034c8:	6828      	ldr	r0, [r5, #0]
 80034ca:	f8d7 a000 	ldr.w	sl, [r7]
 80034ce:	f007 feb1 	bl	800b234 <STC_GetMecSpeedRefUnitDefault>
 80034d2:	4622      	mov	r2, r4
 80034d4:	4601      	mov	r1, r0
 80034d6:	4650      	mov	r0, sl
 80034d8:	f7ff fd2e 	bl	8002f38 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80034dc:	4a24      	ldr	r2, [pc, #144]	; (8003570 <MCboot+0x1c0>)
  pMCIList[M1] = oMCInterface[M1];
 80034de:	f8d7 c000 	ldr.w	ip, [r7]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80034e2:	6817      	ldr	r7, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80034e4:	4a25      	ldr	r2, [pc, #148]	; (800357c <MCboot+0x1cc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80034e6:	f8d8 e000 	ldr.w	lr, [r8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80034ea:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 80034ec:	4a25      	ldr	r2, [pc, #148]	; (8003584 <MCboot+0x1d4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80034ee:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <MCboot+0x1f8>)
  MCT[M1].pPIDId = pPIDId[M1];
 80034f0:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80034f2:	6832      	ldr	r2, [r6, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80034f4:	4e24      	ldr	r6, [pc, #144]	; (8003588 <MCboot+0x1d8>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80034f6:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80034f8:	f8d6 8000 	ldr.w	r8, [r6]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80034fc:	4e24      	ldr	r6, [pc, #144]	; (8003590 <MCboot+0x1e0>)
 80034fe:	f8d6 a000 	ldr.w	sl, [r6]
  pMCIList[M1] = oMCInterface[M1];
 8003502:	9e00      	ldr	r6, [sp, #0]
 8003504:	f8c6 c000 	str.w	ip, [r6]
  MCT[M1].pPIDId = pPIDId[M1];
 8003508:	6099      	str	r1, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800350a:	e9c3 7000 	strd	r7, r0, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800350e:	e9c3 e80b 	strd	lr, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8003512:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8003516:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 800351a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 800351e:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 8003522:	490f      	ldr	r1, [pc, #60]	; (8003560 <MCboot+0x1b0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8003524:	611a      	str	r2, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8003526:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8003528:	f8c3 a03c 	str.w	sl, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800352c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 800352e:	615c      	str	r4, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 8003530:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pStateMachine = &STM[M1];
 8003534:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8003538:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 800353a:	9a01      	ldr	r2, [sp, #4]
 800353c:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 800353e:	f881 9000 	strb.w	r9, [r1]
}
 8003542:	b005      	add	sp, #20
 8003544:	ecbd 8b02 	vpop	{d8}
 8003548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800354c:	200013a0 	.word	0x200013a0
 8003550:	200008f4 	.word	0x200008f4
 8003554:	2000146c 	.word	0x2000146c
 8003558:	2000098c 	.word	0x2000098c
 800355c:	20001434 	.word	0x20001434
 8003560:	20000f68 	.word	0x20000f68
 8003564:	20000840 	.word	0x20000840
 8003568:	20000b24 	.word	0x20000b24
 800356c:	200009e4 	.word	0x200009e4
 8003570:	200013a4 	.word	0x200013a4
 8003574:	20000be0 	.word	0x20000be0
 8003578:	200013a8 	.word	0x200013a8
 800357c:	200013ac 	.word	0x200013ac
 8003580:	20000bb8 	.word	0x20000bb8
 8003584:	20001468 	.word	0x20001468
 8003588:	20001438 	.word	0x20001438
 800358c:	20000a10 	.word	0x20000a10
 8003590:	20001464 	.word	0x20001464
 8003594:	20000c14 	.word	0x20000c14
 8003598:	20001460 	.word	0x20001460
 800359c:	20000ba0 	.word	0x20000ba0
 80035a0:	200013b0 	.word	0x200013b0
 80035a4:	2000143c 	.word	0x2000143c
 80035a8:	200013e0 	.word	0x200013e0
 80035ac:	20001458 	.word	0x20001458
 80035b0:	20000c3c 	.word	0x20000c3c
 80035b4:	20000970 	.word	0x20000970
 80035b8:	200009b8 	.word	0x200009b8
 80035bc:	200013b8 	.word	0x200013b8
 80035c0:	2000139c 	.word	0x2000139c

080035c4 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop

080035c8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80035c8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <FOC_CalcCurrRef+0x24>)
 80035cc:	2426      	movs	r4, #38	; 0x26
 80035ce:	fb04 3400 	mla	r4, r4, r0, r3
 80035d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80035d6:	b103      	cbz	r3, 80035da <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80035d8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <FOC_CalcCurrRef+0x28>)
 80035dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80035e0:	f007 fdf6 	bl	800b1d0 <STC_CalcTorqueReference>
 80035e4:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80035e6:	8220      	strh	r0, [r4, #16]
}
 80035e8:	bd10      	pop	{r4, pc}
 80035ea:	bf00      	nop
 80035ec:	200013b8 	.word	0x200013b8
 80035f0:	2000146c 	.word	0x2000146c

080035f4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80035f4:	4b01      	ldr	r3, [pc, #4]	; (80035fc <TSK_SetChargeBootCapDelayM1+0x8>)
 80035f6:	8018      	strh	r0, [r3, #0]
}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000f6a 	.word	0x20000f6a

08003600 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8003602:	8818      	ldrh	r0, [r3, #0]
 8003604:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8003606:	fab0 f080 	clz	r0, r0
 800360a:	0940      	lsrs	r0, r0, #5
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000f6a 	.word	0x20000f6a

08003614 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8003614:	4b01      	ldr	r3, [pc, #4]	; (800361c <TSK_SetStopPermanencyTimeM1+0x8>)
 8003616:	8018      	strh	r0, [r3, #0]
}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000f6e 	.word	0x20000f6e

08003620 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8003622:	8818      	ldrh	r0, [r3, #0]
 8003624:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8003626:	fab0 f080 	clz	r0, r0
 800362a:	0940      	lsrs	r0, r0, #5
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000f6e 	.word	0x20000f6e

08003634 <TSK_MediumFrequencyTaskM1>:
{
 8003634:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 8003636:	4c8e      	ldr	r4, [pc, #568]	; (8003870 <TSK_MediumFrequencyTaskM1+0x23c>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8003638:	488e      	ldr	r0, [pc, #568]	; (8003874 <TSK_MediumFrequencyTaskM1+0x240>)
{
 800363a:	b082      	sub	sp, #8
  int16_t wAux = 0;
 800363c:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800363e:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 8003642:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8003646:	f006 fa83 	bl	8009b50 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	f006 fc88 	bl	8009f60 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8003650:	4889      	ldr	r0, [pc, #548]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003652:	f007 fea7 	bl	800b3a4 <STM_GetState>
  switch ( StateM1 )
 8003656:	2812      	cmp	r0, #18
 8003658:	d818      	bhi.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
 800365a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800365e:	002a      	.short	0x002a
 8003660:	00440038 	.word	0x00440038
 8003664:	00620053 	.word	0x00620053
 8003668:	007a0067 	.word	0x007a0067
 800366c:	00950082 	.word	0x00950082
 8003670:	00170013 	.word	0x00170013
 8003674:	00170017 	.word	0x00170017
 8003678:	00ae009f 	.word	0x00ae009f
 800367c:	00cf00bb 	.word	0x00cf00bb
 8003680:	001900de 	.word	0x001900de
    STM_NextState( &STM[M1], IDLE );
 8003684:	487c      	ldr	r0, [pc, #496]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003686:	2100      	movs	r1, #0
 8003688:	f007 fe18 	bl	800b2bc <STM_NextState>
}
 800368c:	b002      	add	sp, #8
 800368e:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 8003690:	4878      	ldr	r0, [pc, #480]	; (8003874 <TSK_MediumFrequencyTaskM1+0x240>)
 8003692:	f006 fa2b 	bl	8009aec <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8003696:	4878      	ldr	r0, [pc, #480]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003698:	2104      	movs	r1, #4
 800369a:	f007 fe0f 	bl	800b2bc <STM_NextState>
 800369e:	2800      	cmp	r0, #0
 80036a0:	d0f4      	beq.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 80036a2:	2000      	movs	r0, #0
 80036a4:	f7ff fe40 	bl	8003328 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80036a8:	4b74      	ldr	r3, [pc, #464]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	f006 ff6a 	bl	800a584 <R3_2_SwitchOnPWM>
 80036b0:	e7ec      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 80036b2:	4873      	ldr	r0, [pc, #460]	; (8003880 <TSK_MediumFrequencyTaskM1+0x24c>)
 80036b4:	f006 f9da 	bl	8009a6c <EAC_GetRestartState>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d0e7      	beq.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 80036bc:	4870      	ldr	r0, [pc, #448]	; (8003880 <TSK_MediumFrequencyTaskM1+0x24c>)
 80036be:	2100      	movs	r1, #0
 80036c0:	f006 f9d2 	bl	8009a68 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 80036c4:	2103      	movs	r1, #3
 80036c6:	486c      	ldr	r0, [pc, #432]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 80036c8:	f007 fdf8 	bl	800b2bc <STM_NextState>
 80036cc:	e7de      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80036ce:	4b6b      	ldr	r3, [pc, #428]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	f006 ff2f 	bl	800a534 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80036d6:	2014      	movs	r0, #20
 80036d8:	f7ff ff8c 	bl	80035f4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 80036dc:	210d      	movs	r1, #13
 80036de:	4866      	ldr	r0, [pc, #408]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 80036e0:	f007 fdec 	bl	800b2bc <STM_NextState>
    break;
 80036e4:	e7d2      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 80036e6:	4866      	ldr	r0, [pc, #408]	; (8003880 <TSK_MediumFrequencyTaskM1+0x24c>)
 80036e8:	f006 f9a4 	bl	8009a34 <EAC_Exec>
 80036ec:	4604      	mov	r4, r0
 80036ee:	2800      	cmp	r0, #0
 80036f0:	f040 80ac 	bne.w	800384c <TSK_MediumFrequencyTaskM1+0x218>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 80036f4:	4b63      	ldr	r3, [pc, #396]	; (8003884 <TSK_MediumFrequencyTaskM1+0x250>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	f007 fd6a 	bl	800b1d0 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 80036fc:	4b62      	ldr	r3, [pc, #392]	; (8003888 <TSK_MediumFrequencyTaskM1+0x254>)
 80036fe:	8258      	strh	r0, [r3, #18]
 8003700:	821c      	strh	r4, [r3, #16]
 8003702:	e7c3      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8003704:	485e      	ldr	r0, [pc, #376]	; (8003880 <TSK_MediumFrequencyTaskM1+0x24c>)
 8003706:	f006 f9ad 	bl	8009a64 <EAC_IsAligned>
 800370a:	2800      	cmp	r0, #0
 800370c:	f040 8092 	bne.w	8003834 <TSK_MediumFrequencyTaskM1+0x200>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8003710:	485b      	ldr	r0, [pc, #364]	; (8003880 <TSK_MediumFrequencyTaskM1+0x24c>)
 8003712:	2101      	movs	r1, #1
 8003714:	f006 f9a8 	bl	8009a68 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8003718:	2101      	movs	r1, #1
 800371a:	4857      	ldr	r0, [pc, #348]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 800371c:	f007 fdce 	bl	800b2bc <STM_NextState>
      break;
 8003720:	e7b4      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8003722:	2105      	movs	r1, #5
 8003724:	4854      	ldr	r0, [pc, #336]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003726:	f007 fdc9 	bl	800b2bc <STM_NextState>
    break;
 800372a:	e7af      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 800372c:	2000      	movs	r0, #0
 800372e:	f7ff ff49 	bl	80035c4 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8003732:	2000      	movs	r0, #0
 8003734:	f7ff ff48 	bl	80035c8 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8003738:	2106      	movs	r1, #6
 800373a:	484f      	ldr	r0, [pc, #316]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 800373c:	f007 fdbe 	bl	800b2bc <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8003740:	4b50      	ldr	r3, [pc, #320]	; (8003884 <TSK_MediumFrequencyTaskM1+0x250>)
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	f007 fd8e 	bl	800b264 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <TSK_MediumFrequencyTaskM1+0x258>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	f7ff fc2a 	bl	8002fa4 <MCI_ExecBufferedCommands>
    break;
 8003750:	e79c      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8003752:	4b4e      	ldr	r3, [pc, #312]	; (800388c <TSK_MediumFrequencyTaskM1+0x258>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	f7ff fc25 	bl	8002fa4 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800375a:	2000      	movs	r0, #0
 800375c:	f7ff ff34 	bl	80035c8 <FOC_CalcCurrRef>
    break;
 8003760:	e794      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003762:	4b46      	ldr	r3, [pc, #280]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f006 ff57 	bl	800a618 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 800376a:	2000      	movs	r0, #0
 800376c:	f7ff fddc 	bl	8003328 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	f006 fb07 	bl	8009d84 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8003776:	f44f 7048 	mov.w	r0, #800	; 0x320
 800377a:	f7ff ff4b 	bl	8003614 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800377e:	2108      	movs	r1, #8
 8003780:	483d      	ldr	r0, [pc, #244]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003782:	f007 fd9b 	bl	800b2bc <STM_NextState>
    break;
 8003786:	e781      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8003788:	f7ff ff4a 	bl	8003620 <TSK_StopPermanencyTimeHasElapsedM1>
 800378c:	2800      	cmp	r0, #0
 800378e:	f43f af7d 	beq.w	800368c <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 8003792:	2109      	movs	r1, #9
 8003794:	4838      	ldr	r0, [pc, #224]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003796:	f007 fd91 	bl	800b2bc <STM_NextState>
 800379a:	e777      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800379c:	f7ff ff30 	bl	8003600 <TSK_ChargeBootCapDelayHasElapsedM1>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	f43f af73 	beq.w	800368c <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80037a6:	4b35      	ldr	r3, [pc, #212]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 80037a8:	2100      	movs	r1, #0
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	f006 fd96 	bl	800a2dc <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 80037b0:	210e      	movs	r1, #14
 80037b2:	4831      	ldr	r0, [pc, #196]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 80037b4:	f007 fd82 	bl	800b2bc <STM_NextState>
 80037b8:	e768      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80037ba:	4b30      	ldr	r3, [pc, #192]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 80037bc:	2101      	movs	r1, #1
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	f006 fd8c 	bl	800a2dc <PWMC_CurrentReadingCalibr>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	f43f af61 	beq.w	800368c <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 80037ca:	210f      	movs	r1, #15
 80037cc:	482a      	ldr	r0, [pc, #168]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 80037ce:	f007 fd75 	bl	800b2bc <STM_NextState>
 80037d2:	e75b      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80037d4:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <TSK_MediumFrequencyTaskM1+0x250>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <TSK_MediumFrequencyTaskM1+0x254>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80037d8:	6810      	ldr	r0, [r2, #0]
 80037da:	492d      	ldr	r1, [pc, #180]	; (8003890 <TSK_MediumFrequencyTaskM1+0x25c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80037e2:	f007 fc89 	bl	800b0f8 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 80037e6:	4826      	ldr	r0, [pc, #152]	; (8003880 <TSK_MediumFrequencyTaskM1+0x24c>)
 80037e8:	f006 f8fc 	bl	80099e4 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 80037ec:	4822      	ldr	r0, [pc, #136]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 80037ee:	2102      	movs	r1, #2
 80037f0:	f007 fd64 	bl	800b2bc <STM_NextState>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	f43f af49 	beq.w	800368c <TSK_MediumFrequencyTaskM1+0x58>
 80037fa:	e752      	b.n	80036a2 <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80037fc:	f7ff ff00 	bl	8003600 <TSK_ChargeBootCapDelayHasElapsedM1>
 8003800:	2800      	cmp	r0, #0
 8003802:	f43f af43 	beq.w	800368c <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 8003808:	2100      	movs	r1, #0
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	f006 fd66 	bl	800a2dc <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8003810:	2111      	movs	r1, #17
 8003812:	4819      	ldr	r0, [pc, #100]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003814:	f007 fd52 	bl	800b2bc <STM_NextState>
 8003818:	e738      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 800381c:	2101      	movs	r1, #1
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	f006 fd5c 	bl	800a2dc <PWMC_CurrentReadingCalibr>
 8003824:	2800      	cmp	r0, #0
 8003826:	f43f af31 	beq.w	800368c <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 800382a:	2112      	movs	r1, #18
 800382c:	4812      	ldr	r0, [pc, #72]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 800382e:	f007 fd45 	bl	800b2bc <STM_NextState>
 8003832:	e72b      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	f006 fe7c 	bl	800a534 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800383c:	2014      	movs	r0, #20
 800383e:	f7ff fed9 	bl	80035f4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8003842:	2110      	movs	r1, #16
 8003844:	480c      	ldr	r0, [pc, #48]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 8003846:	f007 fd39 	bl	800b2bc <STM_NextState>
    break;
 800384a:	e71f      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <TSK_MediumFrequencyTaskM1+0x248>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800384e:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <TSK_MediumFrequencyTaskM1+0x250>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	f006 fee1 	bl	800a618 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	f007 fc69 	bl	800b130 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	4904      	ldr	r1, [pc, #16]	; (8003874 <TSK_MediumFrequencyTaskM1+0x240>)
 8003862:	f007 fc49 	bl	800b0f8 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 8003866:	2107      	movs	r1, #7
 8003868:	4803      	ldr	r0, [pc, #12]	; (8003878 <TSK_MediumFrequencyTaskM1+0x244>)
 800386a:	f007 fd27 	bl	800b2bc <STM_NextState>
 800386e:	e70d      	b.n	800368c <TSK_MediumFrequencyTaskM1+0x58>
 8003870:	20001464 	.word	0x20001464
 8003874:	200008f4 	.word	0x200008f4
 8003878:	20001458 	.word	0x20001458
 800387c:	200013a0 	.word	0x200013a0
 8003880:	20000970 	.word	0x20000970
 8003884:	2000146c 	.word	0x2000146c
 8003888:	200013b8 	.word	0x200013b8
 800388c:	200013b0 	.word	0x200013b0
 8003890:	20000c3c 	.word	0x20000c3c

08003894 <MC_Scheduler>:
{
 8003894:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <MC_Scheduler+0x48>)
 8003898:	781c      	ldrb	r4, [r3, #0]
 800389a:	2c01      	cmp	r4, #1
 800389c:	d000      	beq.n	80038a0 <MC_Scheduler+0xc>
}
 800389e:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80038a0:	4d0f      	ldr	r5, [pc, #60]	; (80038e0 <MC_Scheduler+0x4c>)
 80038a2:	882b      	ldrh	r3, [r5, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b1ab      	cbz	r3, 80038d4 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80038a8:	882b      	ldrh	r3, [r5, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <MC_Scheduler+0x50>)
 80038b2:	8813      	ldrh	r3, [r2, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b11b      	cbz	r3, 80038c0 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80038b8:	8813      	ldrh	r3, [r2, #0]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <MC_Scheduler+0x54>)
 80038c2:	8813      	ldrh	r3, [r2, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0e9      	beq.n	800389e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80038ca:	8813      	ldrh	r3, [r2, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	8013      	strh	r3, [r2, #0]
}
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80038d4:	f7ff feae 	bl	8003634 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80038d8:	802c      	strh	r4, [r5, #0]
 80038da:	e7e9      	b.n	80038b0 <MC_Scheduler+0x1c>
 80038dc:	20000f68 	.word	0x20000f68
 80038e0:	20000f6c 	.word	0x20000f6c
 80038e4:	20000f6a 	.word	0x20000f6a
 80038e8:	20000f6e 	.word	0x20000f6e

080038ec <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80038ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 80038f0:	4832      	ldr	r0, [pc, #200]	; (80039bc <TSK_HighFrequencyTask+0xd0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80038f2:	4f33      	ldr	r7, [pc, #204]	; (80039c0 <TSK_HighFrequencyTask+0xd4>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80038f4:	4c33      	ldr	r4, [pc, #204]	; (80039c4 <TSK_HighFrequencyTask+0xd8>)
{
 80038f6:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 80038f8:	f006 f90a 	bl	8009b10 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <TSK_HighFrequencyTask+0xdc>)
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	f007 fbfc 	bl	800b0fc <STC_GetSpeedSensor>
 8003904:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8003906:	f007 fba1 	bl	800b04c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800390a:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 800390c:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f006 fbb8 	bl	800a084 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8003914:	f000 ff0e 	bl	8004734 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8003918:	f000 fec2 	bl	80046a0 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800391c:	9803      	ldr	r0, [sp, #12]
 800391e:	f7ff fc27 	bl	8003170 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003922:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8003924:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003926:	f7ff fc65 	bl	80031f4 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800392a:	4a28      	ldr	r2, [pc, #160]	; (80039cc <TSK_HighFrequencyTask+0xe0>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800392c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003930:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003932:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003934:	1ac9      	subs	r1, r1, r3
 8003936:	6810      	ldr	r0, [r2, #0]
 8003938:	f006 facc 	bl	8009ed4 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800393c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <TSK_HighFrequencyTask+0xe4>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003942:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003946:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8003948:	1a89      	subs	r1, r1, r2
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	f006 fac2 	bl	8009ed4 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <TSK_HighFrequencyTask+0xe8>)
 8003952:	f8ad 8008 	strh.w	r8, [sp, #8]
 8003956:	f8ad 000a 	strh.w	r0, [sp, #10]
 800395a:	9902      	ldr	r1, [sp, #8]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	f006 f805 	bl	800996c <Circle_Limitation>
 8003962:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003964:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003966:	fa0f f883 	sxth.w	r8, r3
 800396a:	141d      	asrs	r5, r3, #16
 800396c:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800396e:	f007 fb75 	bl	800b05c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003972:	4631      	mov	r1, r6
 8003974:	9802      	ldr	r0, [sp, #8]
 8003976:	f7ff fc7f 	bl	8003278 <MCM_Rev_Park>
 800397a:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800397c:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800397e:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003980:	f006 fb82 	bl	800a088 <PWMC_SetPhaseVoltage>
 8003984:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8003986:	9803      	ldr	r0, [sp, #12]
 8003988:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800398a:	9804      	ldr	r0, [sp, #16]
 800398c:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800398e:	9801      	ldr	r0, [sp, #4]
 8003990:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8003992:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8003994:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8003996:	f8a4 8016 	strh.w	r8, [r4, #22]
 800399a:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 800399c:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 800399e:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80039a2:	d003      	beq.n	80039ac <TSK_HighFrequencyTask+0xc0>
}
 80039a4:	2000      	movs	r0, #0
 80039a6:	b006      	add	sp, #24
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	480a      	ldr	r0, [pc, #40]	; (80039d8 <TSK_HighFrequencyTask+0xec>)
 80039b0:	f007 fc66 	bl	800b280 <STM_FaultProcessing>
}
 80039b4:	2000      	movs	r0, #0
 80039b6:	b006      	add	sp, #24
 80039b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039bc:	200008f4 	.word	0x200008f4
 80039c0:	200013a0 	.word	0x200013a0
 80039c4:	200013b8 	.word	0x200013b8
 80039c8:	2000146c 	.word	0x2000146c
 80039cc:	200013ac 	.word	0x200013ac
 80039d0:	20001468 	.word	0x20001468
 80039d4:	20001434 	.word	0x20001434
 80039d8:	20001458 	.word	0x20001458

080039dc <TSK_SafetyTask_LSON>:
  * @param  motor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_LSON(uint8_t bMotor)
{
 80039dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END TSK_SafetyTask_LSON 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  bool TurnOnLowSideAction;

  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 80039e0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8003adc <TSK_SafetyTask_LSON+0x100>
{
 80039e4:	4604      	mov	r4, r0
  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 80039e6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80039ea:	f006 fca5 	bl	800a338 <PWMC_GetTurnOnLowSidesAction>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 80039ee:	4b36      	ldr	r3, [pc, #216]	; (8003ac8 <TSK_SafetyTask_LSON+0xec>)
  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 80039f0:	4607      	mov	r7, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 80039f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80039f6:	f006 fa1b 	bl	8009e30 <NTC_CalcAvTemp>
 80039fa:	4606      	mov	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80039fc:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8003a00:	f006 fc98 	bl	800a334 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 8003a04:	f006 060e 	and.w	r6, r6, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003a08:	4330      	orrs	r0, r6
 8003a0a:	b285      	uxth	r5, r0
                                                                                (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  /* USER CODE BEGIN TSK_SafetyTask_LSON 1 */

  /* USER CODE END TSK_SafetyTask_LSON 1 */
  if(bMotor == M1)
 8003a0c:	2c00      	cmp	r4, #0
 8003a0e:	d039      	beq.n	8003a84 <TSK_SafetyTask_LSON+0xa8>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(pBusSensorM1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8003a10:	4e2e      	ldr	r6, [pc, #184]	; (8003acc <TSK_SafetyTask_LSON+0xf0>)
 8003a12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003a16:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8003a1a:	43ea      	mvns	r2, r5
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	4629      	mov	r1, r5
 8003a22:	f007 fc2d 	bl	800b280 <STM_FaultProcessing>
  if (((CodeReturn & MC_OVER_VOLT) == MC_OVER_VOLT) && (TurnOnLowSideAction == false))
 8003a26:	07ab      	lsls	r3, r5, #30
 8003a28:	d51b      	bpl.n	8003a62 <TSK_SafetyTask_LSON+0x86>
 8003a2a:	b14f      	cbz	r7, 8003a40 <TSK_SafetyTask_LSON+0x64>
    /* USER CODE END TSK_SafetyTask_LSON 2 */
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
  }
  else
  {
    switch (STM_GetState(&STM[bMotor])) /* Is state equal to FAULT_NOW or FAULT_OVER */
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	f007 fcb9 	bl	800b3a4 <STM_GetState>
 8003a32:	280a      	cmp	r0, #10
 8003a34:	d002      	beq.n	8003a3c <TSK_SafetyTask_LSON+0x60>
 8003a36:	280b      	cmp	r0, #11
 8003a38:	d000      	beq.n	8003a3c <TSK_SafetyTask_LSON+0x60>
 8003a3a:	b1e8      	cbz	r0, 8003a78 <TSK_SafetyTask_LSON+0x9c>
    }
  }
  /* USER CODE BEGIN TSK_SafetyTask_LSON 6 */

  /* USER CODE END TSK_SafetyTask_LSON 6 */
}
 8003a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pEAC[bMotor] != MC_NULL)
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <TSK_SafetyTask_LSON+0xf4>)
 8003a42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a46:	b110      	cbz	r0, 8003a4e <TSK_SafetyTask_LSON+0x72>
      EAC_SetRestartState( pEAC[bMotor], false );
 8003a48:	4639      	mov	r1, r7
 8003a4a:	f006 f80d 	bl	8009a68 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]); /* Required before //PWMC_TurnOnLowSides */
 8003a4e:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8003a52:	f006 fc41 	bl	800a2d8 <PWMC_SwitchOffPWM>
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
 8003a56:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
}
 8003a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
 8003a5e:	f006 bc67 	b.w	800a330 <PWMC_TurnOnLowSides>
    switch (STM_GetState(&STM[bMotor])) /* Is state equal to FAULT_NOW or FAULT_OVER */
 8003a62:	4630      	mov	r0, r6
 8003a64:	f007 fc9e 	bl	800b3a4 <STM_GetState>
 8003a68:	280a      	cmp	r0, #10
 8003a6a:	d013      	beq.n	8003a94 <TSK_SafetyTask_LSON+0xb8>
 8003a6c:	280b      	cmp	r0, #11
 8003a6e:	d028      	beq.n	8003ac2 <TSK_SafetyTask_LSON+0xe6>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d1e3      	bne.n	8003a3c <TSK_SafetyTask_LSON+0x60>
        if (TurnOnLowSideAction == true)
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	d0e1      	beq.n	8003a3c <TSK_SafetyTask_LSON+0x60>
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003a78:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
}
 8003a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003a80:	f006 bc2a 	b.w	800a2d8 <PWMC_SwitchOffPWM>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(pBusSensorM1);
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <TSK_SafetyTask_LSON+0xf8>)
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	f007 faa2 	bl	800afd0 <RVBS_CalcAvVbus>
 8003a8c:	f000 000e 	and.w	r0, r0, #14
 8003a90:	4305      	orrs	r5, r0
 8003a92:	e7bd      	b.n	8003a10 <TSK_SafetyTask_LSON+0x34>
        if (TurnOnLowSideAction == false)
 8003a94:	2f00      	cmp	r7, #0
 8003a96:	d1d1      	bne.n	8003a3c <TSK_SafetyTask_LSON+0x60>
          if (pEAC[bMotor] != MC_NULL)
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <TSK_SafetyTask_LSON+0xf4>)
 8003a9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a9e:	b110      	cbz	r0, 8003aa6 <TSK_SafetyTask_LSON+0xca>
            EAC_SetRestartState( pEAC[bMotor], false );
 8003aa0:	4639      	mov	r1, r7
 8003aa2:	f005 ffe1 	bl	8009a68 <EAC_SetRestartState>
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003aa6:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8003aaa:	f006 fc15 	bl	800a2d8 <PWMC_SwitchOffPWM>
          FOC_Clear(bMotor);
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff fc3a 	bl	8003328 <FOC_Clear>
          MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <TSK_SafetyTask_LSON+0xfc>)
 8003ab6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8003aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8003abe:	f006 b961 	b.w	8009d84 <MPM_Clear>
        if (TurnOnLowSideAction == false)
 8003ac2:	2f00      	cmp	r7, #0
 8003ac4:	d0d8      	beq.n	8003a78 <TSK_SafetyTask_LSON+0x9c>
 8003ac6:	e7b9      	b.n	8003a3c <TSK_SafetyTask_LSON+0x60>
 8003ac8:	2000139c 	.word	0x2000139c
 8003acc:	20001458 	.word	0x20001458
 8003ad0:	200013a8 	.word	0x200013a8
 8003ad4:	20001438 	.word	0x20001438
 8003ad8:	20001464 	.word	0x20001464
 8003adc:	200013a0 	.word	0x200013a0

08003ae0 <TSK_SafetyTask>:
{
 8003ae0:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <TSK_SafetyTask+0x1c>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d000      	beq.n	8003aec <TSK_SafetyTask+0xc>
}
 8003aea:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_LSON(M1);
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7ff ff75 	bl	80039dc <TSK_SafetyTask_LSON>
}
 8003af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8003af6:	f000 bda3 	b.w	8004640 <RCM_ExecUserConv>
 8003afa:	bf00      	nop
 8003afc:	20000f68 	.word	0x20000f68

08003b00 <MC_RunMotorControlTasks>:
{
 8003b00:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <MC_RunMotorControlTasks+0x1c>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b903      	cbnz	r3, 8003b0a <MC_RunMotorControlTasks+0xa>
}
 8003b08:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8003b0a:	f7ff fec3 	bl	8003894 <MC_Scheduler>
    TSK_SafetyTask();
 8003b0e:	f7ff ffe7 	bl	8003ae0 <TSK_SafetyTask>
}
 8003b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8003b16:	f001 b999 	b.w	8004e4c <UI_Scheduler>
 8003b1a:	bf00      	nop
 8003b1c:	20000f68 	.word	0x20000f68

08003b20 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8003b20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <TSK_HardwareFaultTask+0x18>)
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	f006 fd77 	bl	800a618 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8003b2e:	4803      	ldr	r0, [pc, #12]	; (8003b3c <TSK_HardwareFaultTask+0x1c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	2180      	movs	r1, #128	; 0x80
 8003b34:	f007 bba4 	b.w	800b280 <STM_FaultProcessing>
 8003b38:	200013a0 	.word	0x200013a0
 8003b3c:	20001458 	.word	0x20001458

08003b40 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b48:	4a43      	ldr	r2, [pc, #268]	; (8003c58 <mc_lock_pins+0x118>)
 8003b4a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003b4c:	2120      	movs	r1, #32
 8003b4e:	61d9      	str	r1, [r3, #28]
 8003b50:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b52:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	920d      	str	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b58:	4940      	ldr	r1, [pc, #256]	; (8003c5c <mc_lock_pins+0x11c>)
  (void) temp;
 8003b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b5c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003b5e:	2540      	movs	r5, #64	; 0x40
 8003b60:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b62:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	920c      	str	r2, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b68:	483d      	ldr	r0, [pc, #244]	; (8003c60 <mc_lock_pins+0x120>)
  (void) temp;
 8003b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b6c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003b6e:	2602      	movs	r6, #2
 8003b70:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b72:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	920b      	str	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b78:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003b7c:	2701      	movs	r7, #1
  (void) temp;
 8003b7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b80:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003b82:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b84:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b86:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <mc_lock_pins+0x124>)
  temp = READ_REG(GPIOx->LCKR);
 8003b88:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8003b8c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003b90:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b94:	f44f 3c84 	mov.w	ip, #67584	; 0x10800
  (void) temp;
 8003b98:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003b9c:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003ba0:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003ba4:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003ba8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8003bac:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  (void) temp;
 8003bb0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003bb4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003bb6:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003bb8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003bba:	69d1      	ldr	r1, [r2, #28]
 8003bbc:	9108      	str	r1, [sp, #32]
  (void) temp;
 8003bbe:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003bc0:	4929      	ldr	r1, [pc, #164]	; (8003c68 <mc_lock_pins+0x128>)
 8003bc2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003bc4:	2580      	movs	r5, #128	; 0x80
 8003bc6:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003bc8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003bca:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8003bce:	f8cd c01c 	str.w	ip, [sp, #28]
  (void) temp;
 8003bd2:	f8dd e01c 	ldr.w	lr, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003bd6:	f8df c094 	ldr.w	ip, [pc, #148]	; 8003c6c <mc_lock_pins+0x12c>
 8003bda:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003bde:	f44f 7e80 	mov.w	lr, #256	; 0x100
 8003be2:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003be6:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003bea:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8003bee:	f8cd c018 	str.w	ip, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003bf2:	f44f 7e00 	mov.w	lr, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003bf6:	f44f 3c81 	mov.w	ip, #66048	; 0x10200
  (void) temp;
 8003bfa:	f8dd 8018 	ldr.w	r8, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003bfe:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003c02:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c06:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003c0a:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8003c0e:	f8cd c014 	str.w	ip, [sp, #20]
  (void) temp;
 8003c12:	f8dd c014 	ldr.w	ip, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c16:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003c18:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c1a:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003c1c:	69d4      	ldr	r4, [r2, #28]
 8003c1e:	9404      	str	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003c20:	f44f 6780 	mov.w	r7, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c24:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  (void) temp;
 8003c28:	f8dd c010 	ldr.w	ip, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c2c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003c2e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c30:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003c32:	69dc      	ldr	r4, [r3, #28]
 8003c34:	9403      	str	r4, [sp, #12]
  (void) temp;
 8003c36:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c38:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003c3a:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c3c:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003c3e:	69d2      	ldr	r2, [r2, #28]
 8003c40:	9202      	str	r2, [sp, #8]
  (void) temp;
 8003c42:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c44:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003c46:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003c48:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	9301      	str	r3, [sp, #4]
  (void) temp;
 8003c4e:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8003c50:	b00e      	add	sp, #56	; 0x38
 8003c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c56:	bf00      	nop
 8003c58:	00010020 	.word	0x00010020
 8003c5c:	00010040 	.word	0x00010040
 8003c60:	00010002 	.word	0x00010002
 8003c64:	48000400 	.word	0x48000400
 8003c68:	00010080 	.word	0x00010080
 8003c6c:	00010100 	.word	0x00010100

08003c70 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8003c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c72:	460c      	mov	r4, r1
 8003c74:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8003c76:	2100      	movs	r1, #0
{
 8003c78:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8003c7a:	0962      	lsrs	r2, r4, #5
{
 8003c7c:	461f      	mov	r7, r3
 8003c7e:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8003c80:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8003c84:	d122      	bne.n	8003ccc <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8003c86:	2c12      	cmp	r4, #18
 8003c88:	d814      	bhi.n	8003cb4 <MCP_ReceivedFrame+0x44>
 8003c8a:	e8df f014 	tbh	[pc, r4, lsl #1]
 8003c8e:	0016      	.short	0x0016
 8003c90:	00d1003f 	.word	0x00d1003f
 8003c94:	00130163 	.word	0x00130163
 8003c98:	01700013 	.word	0x01700013
 8003c9c:	01f80241 	.word	0x01f80241
 8003ca0:	019d021c 	.word	0x019d021c
 8003ca4:	01cc01b5 	.word	0x01cc01b5
 8003ca8:	001301e5 	.word	0x001301e5
 8003cac:	00130013 	.word	0x00130013
 8003cb0:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8003cba:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f10d 020e 	add.w	r2, sp, #14
 8003cc4:	21ff      	movs	r1, #255	; 0xff
 8003cc6:	47a0      	blx	r4
    }
  }
}
 8003cc8:	b00d      	add	sp, #52	; 0x34
 8003cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	f001 f8ff 	bl	8004ed0 <UI_SetReg>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	f000 8234 	beq.w	8004140 <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 8003cd8:	f004 041f 	and.w	r4, r4, #31
 8003cdc:	2c12      	cmp	r4, #18
 8003cde:	f200 8238 	bhi.w	8004152 <MCP_ReceivedFrame+0x4e2>
 8003ce2:	e8df f014 	tbh	[pc, r4, lsl #1]
 8003ce6:	01ea      	.short	0x01ea
 8003ce8:	00a50013 	.word	0x00a50013
 8003cec:	02360137 	.word	0x02360137
 8003cf0:	01440236 	.word	0x01440236
 8003cf4:	01cc0215 	.word	0x01cc0215
 8003cf8:	017101f0 	.word	0x017101f0
 8003cfc:	01a00189 	.word	0x01a00189
 8003d00:	023601b9 	.word	0x023601b9
 8003d04:	02360236 	.word	0x02360236
 8003d08:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8003d0c:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8003d0e:	2305      	movs	r3, #5
 8003d10:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8003d14:	2988      	cmp	r1, #136	; 0x88
 8003d16:	f200 8237 	bhi.w	8004188 <MCP_ReceivedFrame+0x518>
 8003d1a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003d1e:	028c      	.short	0x028c
 8003d20:	02350235 	.word	0x02350235
 8003d24:	02350282 	.word	0x02350282
 8003d28:	023e023e 	.word	0x023e023e
 8003d2c:	023e023e 	.word	0x023e023e
 8003d30:	023e023e 	.word	0x023e023e
 8003d34:	023e023e 	.word	0x023e023e
 8003d38:	023e023e 	.word	0x023e023e
 8003d3c:	025d023e 	.word	0x025d023e
 8003d40:	0235025d 	.word	0x0235025d
 8003d44:	023e0235 	.word	0x023e0235
 8003d48:	023e023e 	.word	0x023e023e
 8003d4c:	023e023e 	.word	0x023e023e
 8003d50:	02350235 	.word	0x02350235
 8003d54:	01510235 	.word	0x01510235
 8003d58:	02350151 	.word	0x02350151
 8003d5c:	02350235 	.word	0x02350235
 8003d60:	02350235 	.word	0x02350235
 8003d64:	02350235 	.word	0x02350235
 8003d68:	02350235 	.word	0x02350235
 8003d6c:	02350235 	.word	0x02350235
 8003d70:	02350235 	.word	0x02350235
 8003d74:	02350235 	.word	0x02350235
 8003d78:	02350235 	.word	0x02350235
 8003d7c:	02350235 	.word	0x02350235
 8003d80:	02350235 	.word	0x02350235
 8003d84:	02350235 	.word	0x02350235
 8003d88:	02350235 	.word	0x02350235
 8003d8c:	02350235 	.word	0x02350235
 8003d90:	02350235 	.word	0x02350235
 8003d94:	02350235 	.word	0x02350235
 8003d98:	02350235 	.word	0x02350235
 8003d9c:	02350235 	.word	0x02350235
 8003da0:	0235023e 	.word	0x0235023e
 8003da4:	02350235 	.word	0x02350235
 8003da8:	025d0235 	.word	0x025d0235
 8003dac:	025d025d 	.word	0x025d025d
 8003db0:	02350235 	.word	0x02350235
 8003db4:	02350235 	.word	0x02350235
 8003db8:	02350235 	.word	0x02350235
 8003dbc:	0235023e 	.word	0x0235023e
 8003dc0:	02350235 	.word	0x02350235
 8003dc4:	023e023e 	.word	0x023e023e
 8003dc8:	023e023e 	.word	0x023e023e
 8003dcc:	023e023e 	.word	0x023e023e
 8003dd0:	0235023e 	.word	0x0235023e
 8003dd4:	0235025d 	.word	0x0235025d
 8003dd8:	02350235 	.word	0x02350235
 8003ddc:	02350235 	.word	0x02350235
 8003de0:	0235023e 	.word	0x0235023e
 8003de4:	023e0235 	.word	0x023e0235
 8003de8:	0235023e 	.word	0x0235023e
 8003dec:	02350235 	.word	0x02350235
 8003df0:	02350235 	.word	0x02350235
 8003df4:	02350235 	.word	0x02350235
 8003df8:	02350235 	.word	0x02350235
 8003dfc:	02350235 	.word	0x02350235
 8003e00:	02350235 	.word	0x02350235
 8003e04:	02820235 	.word	0x02820235
 8003e08:	025d025d 	.word	0x025d025d
 8003e0c:	025d025d 	.word	0x025d025d
 8003e10:	0235025d 	.word	0x0235025d
 8003e14:	02350235 	.word	0x02350235
 8003e18:	025d025d 	.word	0x025d025d
 8003e1c:	02350235 	.word	0x02350235
 8003e20:	02350235 	.word	0x02350235
 8003e24:	02350235 	.word	0x02350235
 8003e28:	023e0235 	.word	0x023e0235
 8003e2c:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8003e30:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8003e32:	2303      	movs	r3, #3
 8003e34:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8003e38:	2988      	cmp	r1, #136	; 0x88
 8003e3a:	f200 813e 	bhi.w	80040ba <MCP_ReceivedFrame+0x44a>
 8003e3e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003e42:	01de      	.short	0x01de
 8003e44:	01de01b9 	.word	0x01de01b9
 8003e48:	01b901de 	.word	0x01b901de
 8003e4c:	01910191 	.word	0x01910191
 8003e50:	01910191 	.word	0x01910191
 8003e54:	01910191 	.word	0x01910191
 8003e58:	01910191 	.word	0x01910191
 8003e5c:	01910191 	.word	0x01910191
 8003e60:	01910191 	.word	0x01910191
 8003e64:	01910191 	.word	0x01910191
 8003e68:	01910191 	.word	0x01910191
 8003e6c:	01910191 	.word	0x01910191
 8003e70:	01910191 	.word	0x01910191
 8003e74:	01910191 	.word	0x01910191
 8003e78:	013c0191 	.word	0x013c0191
 8003e7c:	01b9013c 	.word	0x01b9013c
 8003e80:	01910191 	.word	0x01910191
 8003e84:	01de0191 	.word	0x01de0191
 8003e88:	013c013c 	.word	0x013c013c
 8003e8c:	013c013c 	.word	0x013c013c
 8003e90:	013c013c 	.word	0x013c013c
 8003e94:	013c013c 	.word	0x013c013c
 8003e98:	013c013c 	.word	0x013c013c
 8003e9c:	013c013c 	.word	0x013c013c
 8003ea0:	013c013c 	.word	0x013c013c
 8003ea4:	013c013c 	.word	0x013c013c
 8003ea8:	013c013c 	.word	0x013c013c
 8003eac:	013c013c 	.word	0x013c013c
 8003eb0:	013c013c 	.word	0x013c013c
 8003eb4:	013c013c 	.word	0x013c013c
 8003eb8:	013c013c 	.word	0x013c013c
 8003ebc:	013c013c 	.word	0x013c013c
 8003ec0:	013c013c 	.word	0x013c013c
 8003ec4:	013c0191 	.word	0x013c0191
 8003ec8:	013c013c 	.word	0x013c013c
 8003ecc:	01b9013c 	.word	0x01b9013c
 8003ed0:	01b901b9 	.word	0x01b901b9
 8003ed4:	01910191 	.word	0x01910191
 8003ed8:	01910191 	.word	0x01910191
 8003edc:	01b901de 	.word	0x01b901de
 8003ee0:	01910191 	.word	0x01910191
 8003ee4:	01910191 	.word	0x01910191
 8003ee8:	01910191 	.word	0x01910191
 8003eec:	01910191 	.word	0x01910191
 8003ef0:	01910191 	.word	0x01910191
 8003ef4:	01de0191 	.word	0x01de0191
 8003ef8:	013c01b9 	.word	0x013c01b9
 8003efc:	01910191 	.word	0x01910191
 8003f00:	01910191 	.word	0x01910191
 8003f04:	013c0191 	.word	0x013c0191
 8003f08:	0191013c 	.word	0x0191013c
 8003f0c:	01de0191 	.word	0x01de0191
 8003f10:	01b901de 	.word	0x01b901de
 8003f14:	01b901b9 	.word	0x01b901b9
 8003f18:	01b901b9 	.word	0x01b901b9
 8003f1c:	019101de 	.word	0x019101de
 8003f20:	01b90191 	.word	0x01b90191
 8003f24:	0191013c 	.word	0x0191013c
 8003f28:	01de0191 	.word	0x01de0191
 8003f2c:	01b901b9 	.word	0x01b901b9
 8003f30:	01b901b9 	.word	0x01b901b9
 8003f34:	01b901b9 	.word	0x01b901b9
 8003f38:	01b901b9 	.word	0x01b901b9
 8003f3c:	01b901b9 	.word	0x01b901b9
 8003f40:	01de01b9 	.word	0x01de01b9
 8003f44:	01de013c 	.word	0x01de013c
 8003f48:	01b901b9 	.word	0x01b901b9
 8003f4c:	019101b9 	.word	0x019101b9
 8003f50:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8003f54:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8003f56:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8003f58:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f001 fa79 	bl	8005454 <UI_ExecCmd>
 8003f62:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8003f66:	2800      	cmp	r0, #0
 8003f68:	f43f aea7 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 8003f6c:	e03c      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
 8003f6e:	ac04      	add	r4, sp, #16
 8003f70:	2100      	movs	r1, #0
 8003f72:	4620      	mov	r0, r4
 8003f74:	2220      	movs	r2, #32
 8003f76:	f007 fbdf 	bl	800b738 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003f7a:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8003f7e:	f10d 0012 	add.w	r0, sp, #18
 8003f82:	1e71      	subs	r1, r6, #1
 8003f84:	2300      	movs	r3, #0
 8003f86:	e005      	b.n	8003f94 <MCP_ReceivedFrame+0x324>
 8003f88:	3301      	adds	r3, #1
 8003f8a:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8003f8c:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003f90:	f000 815c 	beq.w	800424c <MCP_ReceivedFrame+0x5dc>
 8003f94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003f98:	2a09      	cmp	r2, #9
 8003f9a:	d1f5      	bne.n	8003f88 <MCP_ReceivedFrame+0x318>
 8003f9c:	1d5a      	adds	r2, r3, #5
 8003f9e:	1dd9      	adds	r1, r3, #7
 8003fa0:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8003fa2:	5cb2      	ldrb	r2, [r6, r2]
 8003fa4:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8003fa8:	5c72      	ldrb	r2, [r6, r1]
 8003faa:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8003fae:	5cf3      	ldrb	r3, [r6, r3]
 8003fb0:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003fbc:	21f0      	movs	r1, #240	; 0xf0
 8003fbe:	47a0      	blx	r4
      bNoError = true;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8003fc6:	e00f      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003fc8:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003fca:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003fcc:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003fce:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003fd0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003fd4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8003fd8:	b212      	sxth	r2, r2
 8003fda:	b209      	sxth	r1, r1
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f001 facb 	bl	8005578 <UI_SetCurrentReferences>
      bNoError = true;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	21f0      	movs	r1, #240	; 0xf0
 8003ff2:	47a0      	blx	r4
}
 8003ff4:	b00d      	add	sp, #52	; 0x34
 8003ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003ff8:	4c96      	ldr	r4, [pc, #600]	; (8004254 <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 8003ffa:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8003ffc:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003ffe:	4621      	mov	r1, r4
 8004000:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8004002:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8004006:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800400a:	f001 fac5 	bl	8005598 <UI_GetMPInfo>
 800400e:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8004012:	2800      	cmp	r0, #0
 8004014:	f43f ae51 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8004018:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 800401c:	7923      	ldrb	r3, [r4, #4]
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	21f0      	movs	r1, #240	; 0xf0
 8004022:	47b0      	blx	r6
  if (RequireAck)
 8004024:	e650      	b.n	8003cc8 <MCP_ReceivedFrame+0x58>
 8004026:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800402a:	ac04      	add	r4, sp, #16
 800402c:	3b01      	subs	r3, #1
 800402e:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8004030:	2000      	movs	r0, #0
 8004032:	e004      	b.n	800403e <MCP_ReceivedFrame+0x3ce>
 8004034:	3001      	adds	r0, #1
 8004036:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8004038:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800403c:	d0ba      	beq.n	8003fb4 <MCP_ReceivedFrame+0x344>
 800403e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004042:	b2c6      	uxtb	r6, r0
 8004044:	2900      	cmp	r1, #0
 8004046:	d1f5      	bne.n	8004034 <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 8004048:	f1c6 021f 	rsb	r2, r6, #31
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	3201      	adds	r2, #1
 8004050:	4420      	add	r0, r4
 8004052:	f007 fb71 	bl	800b738 <memset>
 8004056:	e7ad      	b.n	8003fb4 <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8004058:	7970      	ldrb	r0, [r6, #5]
 800405a:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800405c:	7873      	ldrb	r3, [r6, #1]
 800405e:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8004060:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8004064:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8004068:	b292      	uxth	r2, r2
 800406a:	b209      	sxth	r1, r1
 800406c:	4628      	mov	r0, r5
 800406e:	f001 fa3f 	bl	80054f0 <UI_ExecTorqueRamp>
 8004072:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8004076:	2800      	cmp	r0, #0
 8004078:	f43f ae1f 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 800407c:	e7b4      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800407e:	f10d 030e 	add.w	r3, sp, #14
 8004082:	7831      	ldrb	r1, [r6, #0]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	f10d 020a 	add.w	r2, sp, #10
 800408a:	ab03      	add	r3, sp, #12
 800408c:	4628      	mov	r0, r5
 800408e:	f001 fa39 	bl	8005504 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8004092:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8004096:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 800409a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 800409e:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80040a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80040a6:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 80040a8:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 80040aa:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80040ae:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80040b2:	2308      	movs	r3, #8
 80040b4:	aa04      	add	r2, sp, #16
 80040b6:	21f0      	movs	r1, #240	; 0xf0
 80040b8:	47a0      	blx	r4
  if (RequireAck)
 80040ba:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 80040be:	2800      	cmp	r0, #0
 80040c0:	f43f adfb 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 80040c4:	e790      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80040c6:	78b1      	ldrb	r1, [r6, #2]
 80040c8:	7873      	ldrb	r3, [r6, #1]
 80040ca:	78f2      	ldrb	r2, [r6, #3]
 80040cc:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80040ce:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80040d0:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80040d2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80040d6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80040da:	4a5f      	ldr	r2, [pc, #380]	; (8004258 <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80040dc:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80040de:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80040e2:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 80040e6:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80040e8:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80040ec:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80040f0:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80040f2:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80040f6:	7831      	ldrb	r1, [r6, #0]
 80040f8:	9000      	str	r0, [sp, #0]
 80040fa:	b21b      	sxth	r3, r3
 80040fc:	b292      	uxth	r2, r2
 80040fe:	4628      	mov	r0, r5
 8004100:	f001 fa1e 	bl	8005540 <UI_SetRevupData>
 8004104:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8004108:	2800      	cmp	r0, #0
 800410a:	f43f add6 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 800410e:	e76b      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8004110:	7877      	ldrb	r7, [r6, #1]
 8004112:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8004114:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8004116:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8004118:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800411a:	78f1      	ldrb	r1, [r6, #3]
 800411c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004120:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8004124:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8004128:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800412c:	b292      	uxth	r2, r2
 800412e:	4628      	mov	r0, r5
 8004130:	f001 f9cc 	bl	80054cc <UI_ExecSpeedRamp>
 8004134:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8004138:	2800      	cmp	r0, #0
 800413a:	f43f adbe 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 800413e:	e753      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8004140:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004144:	230b      	movs	r3, #11
 8004146:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 800414a:	2800      	cmp	r0, #0
 800414c:	f43f adb5 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 8004150:	e74a      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
 8004152:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8004156:	2301      	movs	r3, #1
 8004158:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 800415c:	2800      	cmp	r0, #0
 800415e:	f43f adac 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 8004162:	e741      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8004164:	f10d 0209 	add.w	r2, sp, #9
 8004168:	4628      	mov	r0, r5
 800416a:	f000 ff71 	bl	8005050 <UI_GetReg>
          if ( bNoError == true )
 800416e:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8004172:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8004174:	2b00      	cmp	r3, #0
 8004176:	f43f ada0 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 800417a:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800417e:	2302      	movs	r3, #2
 8004180:	aa04      	add	r2, sp, #16
 8004182:	21f0      	movs	r1, #240	; 0xf0
 8004184:	47a0      	blx	r4
  if (RequireAck)
 8004186:	e59f      	b.n	8003cc8 <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8004188:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800418c:	2302      	movs	r3, #2
 800418e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8004192:	2800      	cmp	r0, #0
 8004194:	f43f ad91 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 8004198:	e726      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 800419a:	78b2      	ldrb	r2, [r6, #2]
 800419c:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800419e:	4628      	mov	r0, r5
 80041a0:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80041a4:	f000 fe94 	bl	8004ed0 <UI_SetReg>
 80041a8:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f43f ad84 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 80041b2:	e719      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80041b4:	f10d 0209 	add.w	r2, sp, #9
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 ff49 	bl	8005050 <UI_GetReg>
          if ( bNoError == true )
 80041be:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80041c2:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f43f ad78 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80041ca:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80041ce:	2304      	movs	r3, #4
 80041d0:	aa04      	add	r2, sp, #16
 80041d2:	21f0      	movs	r1, #240	; 0xf0
 80041d4:	47a0      	blx	r4
  if (RequireAck)
 80041d6:	e577      	b.n	8003cc8 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80041d8:	78b4      	ldrb	r4, [r6, #2]
 80041da:	7873      	ldrb	r3, [r6, #1]
 80041dc:	78f0      	ldrb	r0, [r6, #3]
 80041de:	7932      	ldrb	r2, [r6, #4]
 80041e0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 80041e4:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80041e8:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 fe6f 	bl	8004ed0 <UI_SetReg>
 80041f2:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80041f6:	2800      	cmp	r0, #0
 80041f8:	f43f ad5f 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 80041fc:	e6f4      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80041fe:	f10d 0209 	add.w	r2, sp, #9
 8004202:	4628      	mov	r0, r5
 8004204:	f000 ff24 	bl	8005050 <UI_GetReg>
           if ( bNoError == true )
 8004208:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800420c:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 800420e:	2b00      	cmp	r3, #0
 8004210:	f43f ad53 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8004214:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8004218:	2301      	movs	r3, #1
 800421a:	aa04      	add	r2, sp, #16
 800421c:	21f0      	movs	r1, #240	; 0xf0
 800421e:	47a0      	blx	r4
  if (RequireAck)
 8004220:	e552      	b.n	8003cc8 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8004222:	7872      	ldrb	r2, [r6, #1]
 8004224:	4628      	mov	r0, r5
 8004226:	f000 fe53 	bl	8004ed0 <UI_SetReg>
 800422a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800422e:	2800      	cmp	r0, #0
 8004230:	f43f ad43 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 8004234:	e6d8      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8004236:	7872      	ldrb	r2, [r6, #1]
 8004238:	2100      	movs	r1, #0
 800423a:	4628      	mov	r0, r5
 800423c:	f000 fe48 	bl	8004ed0 <UI_SetReg>
 8004240:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8004244:	2800      	cmp	r0, #0
 8004246:	f43f ad38 	beq.w	8003cba <MCP_ReceivedFrame+0x4a>
 800424a:	e6cd      	b.n	8003fe8 <MCP_ReceivedFrame+0x378>
 800424c:	2326      	movs	r3, #38	; 0x26
 800424e:	2124      	movs	r1, #36	; 0x24
 8004250:	2222      	movs	r2, #34	; 0x22
 8004252:	e6a6      	b.n	8003fa2 <MCP_ReceivedFrame+0x332>
 8004254:	20000f70 	.word	0x20000f70
 8004258:	2aaaaaab 	.word	0x2aaaaaab

0800425c <MCP_WaitNextFrame>:
{
 800425c:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800425e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004260:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8004262:	6980      	ldr	r0, [r0, #24]
 8004264:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 800426c:	69a0      	ldr	r0, [r4, #24]
 800426e:	6a23      	ldr	r3, [r4, #32]
}
 8004270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8004274:	4718      	bx	r3
 8004276:	bf00      	nop

08004278 <MCP_Init>:
{
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b083      	sub	sp, #12
 800427c:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 800427e:	4f0b      	ldr	r7, [pc, #44]	; (80042ac <MCP_Init+0x34>)
{
 8004280:	4608      	mov	r0, r1
 8004282:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8004284:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 8004286:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 800428a:	4616      	mov	r6, r2
 800428c:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 800428e:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <MCP_Init+0x38>)
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <MCP_Init+0x3c>)
 8004292:	9700      	str	r7, [sp, #0]
 8004294:	4621      	mov	r1, r4
{
 8004296:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8004298:	f005 fd56 	bl	8009d48 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 800429c:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80042a0:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7ff ffda 	bl	800425c <MCP_WaitNextFrame>
}
 80042a8:	b003      	add	sp, #12
 80042aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ac:	080042b9 	.word	0x080042b9
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	08003c71 	.word	0x08003c71

080042b8 <MCP_OnTimeOut>:
{
 80042b8:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80042ba:	f7ff ffcf 	bl	800425c <MCP_WaitNextFrame>
}
 80042be:	bd08      	pop	{r3, pc}

080042c0 <MCP_SentFrame>:
{
 80042c0:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80042c2:	f7ff ffcb 	bl	800425c <MCP_WaitNextFrame>
}
 80042c6:	bd08      	pop	{r3, pc}

080042c8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80042c8:	b530      	push	{r4, r5, lr}
 80042ca:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80042cc:	f003 fcd8 	bl	8007c80 <HAL_RCC_GetHCLKFreq>
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80042d2:	4d0c      	ldr	r5, [pc, #48]	; (8004304 <MX_MotorControl_Init+0x3c>)
 80042d4:	4c0c      	ldr	r4, [pc, #48]	; (8004308 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80042d6:	fba3 3000 	umull	r3, r0, r3, r0
 80042da:	09c0      	lsrs	r0, r0, #7
 80042dc:	f002 f910 	bl	8006500 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80042e0:	4629      	mov	r1, r5
 80042e2:	4620      	mov	r0, r4
 80042e4:	f7ff f864 	bl	80033b0 <MCboot>
  mc_lock_pins();
 80042e8:	f7ff fc2a 	bl	8003b40 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <MX_MotorControl_Init+0x44>)
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4807      	ldr	r0, [pc, #28]	; (8004310 <MX_MotorControl_Init+0x48>)
 80042f2:	462b      	mov	r3, r5
 80042f4:	4622      	mov	r2, r4
 80042f6:	2101      	movs	r1, #1
 80042f8:	f000 fd68 	bl	8004dcc <UI_TaskInit>
}
 80042fc:	b003      	add	sp, #12
 80042fe:	bd30      	pop	{r4, r5, pc}
 8004300:	10624dd3 	.word	0x10624dd3
 8004304:	20001474 	.word	0x20001474
 8004308:	20001470 	.word	0x20001470
 800430c:	0800b824 	.word	0x0800b824
 8004310:	20000db0 	.word	0x20000db0

08004314 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004314:	4a65      	ldr	r2, [pc, #404]	; (80044ac <RCM_RegisterRegConv+0x198>)
 8004316:	6813      	ldr	r3, [r2, #0]
{
 8004318:	b470      	push	{r4, r5, r6}
 800431a:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800431c:	2b00      	cmp	r3, #0
 800431e:	d07e      	beq.n	800441e <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004320:	7904      	ldrb	r4, [r0, #4]
 8004322:	7918      	ldrb	r0, [r3, #4]
 8004324:	4284      	cmp	r4, r0
 8004326:	d01e      	beq.n	8004366 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004328:	6855      	ldr	r5, [r2, #4]
 800432a:	2d00      	cmp	r5, #0
 800432c:	f000 808b 	beq.w	8004446 <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004330:	792b      	ldrb	r3, [r5, #4]
 8004332:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 8004334:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004338:	d079      	beq.n	800442e <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800433a:	6893      	ldr	r3, [r2, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80a2 	beq.w	8004486 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004342:	791d      	ldrb	r5, [r3, #4]
 8004344:	42a5      	cmp	r5, r4
 8004346:	d078      	beq.n	800443a <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004348:	68d3      	ldr	r3, [r2, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a0 	beq.w	8004490 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004350:	791d      	ldrb	r5, [r3, #4]
 8004352:	42a5      	cmp	r5, r4
 8004354:	f000 8082 	beq.w	800445c <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8004358:	2803      	cmp	r0, #3
 800435a:	bf88      	it	hi
 800435c:	20ff      	movhi	r0, #255	; 0xff
 800435e:	f240 80a0 	bls.w	80044a2 <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8004362:	bc70      	pop	{r4, r5, r6}
 8004364:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	680b      	ldr	r3, [r1, #0]
 800436a:	4283      	cmp	r3, r0
 800436c:	d1dc      	bne.n	8004328 <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 800436e:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004370:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004372:	4d4f      	ldr	r5, [pc, #316]	; (80044b0 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 8004374:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004378:	2200      	movs	r2, #0
 800437a:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 800437e:	07e5      	lsls	r5, r4, #31
 8004380:	d422      	bmi.n	80043c8 <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004382:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004384:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004386:	f022 0204 	bic.w	r2, r2, #4
 800438a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800438c:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800438e:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8004390:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8004392:	f022 0220 	bic.w	r2, r2, #32
 8004396:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8004398:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80043a0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80043a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043a8:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	dbfc      	blt.n	80043aa <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80043b0:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 80043b2:	07d4      	lsls	r4, r2, #31
 80043b4:	d408      	bmi.n	80043c8 <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 80043b6:	4c3f      	ldr	r4, [pc, #252]	; (80044b4 <RCM_RegisterRegConv+0x1a0>)
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	4022      	ands	r2, r4
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	07d2      	lsls	r2, r2, #31
 80043c6:	d5f7      	bpl.n	80043b8 <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 80043c8:	4d3b      	ldr	r5, [pc, #236]	; (80044b8 <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80043ca:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80043cc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80043d0:	0056      	lsls	r6, r2, #1
 80043d2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80043d6:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 80043da:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 80043dc:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 80043de:	2200      	movs	r2, #0
 80043e0:	55aa      	strb	r2, [r5, r6]
 80043e2:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80043e4:	790c      	ldrb	r4, [r1, #4]
 80043e6:	2c09      	cmp	r4, #9
 80043e8:	d83f      	bhi.n	800446a <RCM_RegisterRegConv+0x156>
 80043ea:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80043ee:	06a2      	lsls	r2, r4, #26
 80043f0:	2501      	movs	r5, #1
 80043f2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 80043f6:	fa05 f404 	lsl.w	r4, r5, r4
 80043fa:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043fc:	0dd4      	lsrs	r4, r2, #23
 80043fe:	f004 0404 	and.w	r4, r4, #4
 8004402:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004404:	688d      	ldr	r5, [r1, #8]
 8004406:	58e1      	ldr	r1, [r4, r3]
 8004408:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800440c:	2607      	movs	r6, #7
 800440e:	4096      	lsls	r6, r2
 8004410:	4095      	lsls	r5, r2
 8004412:	ea21 0206 	bic.w	r2, r1, r6
 8004416:	432a      	orrs	r2, r5
 8004418:	50e2      	str	r2, [r4, r3]
}
 800441a:	bc70      	pop	{r4, r5, r6}
 800441c:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800441e:	6855      	ldr	r5, [r2, #4]
 8004420:	2d00      	cmp	r5, #0
 8004422:	d039      	beq.n	8004498 <RCM_RegisterRegConv+0x184>
 8004424:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 8004426:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004428:	792b      	ldrb	r3, [r5, #4]
 800442a:	42a3      	cmp	r3, r4
 800442c:	d185      	bne.n	800433a <RCM_RegisterRegConv+0x26>
 800442e:	682d      	ldr	r5, [r5, #0]
 8004430:	680b      	ldr	r3, [r1, #0]
 8004432:	429d      	cmp	r5, r3
 8004434:	d181      	bne.n	800433a <RCM_RegisterRegConv+0x26>
 8004436:	2001      	movs	r0, #1
 8004438:	e79a      	b.n	8004370 <RCM_RegisterRegConv+0x5c>
 800443a:	681d      	ldr	r5, [r3, #0]
 800443c:	680b      	ldr	r3, [r1, #0]
 800443e:	429d      	cmp	r5, r3
 8004440:	d182      	bne.n	8004348 <RCM_RegisterRegConv+0x34>
      i++;
 8004442:	2002      	movs	r0, #2
 8004444:	e794      	b.n	8004370 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004446:	6893      	ldr	r3, [r2, #8]
 8004448:	2001      	movs	r0, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f47f af79 	bne.w	8004342 <RCM_RegisterRegConv+0x2e>
 8004450:	68d3      	ldr	r3, [r2, #12]
 8004452:	b333      	cbz	r3, 80044a2 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004454:	791d      	ldrb	r5, [r3, #4]
 8004456:	790c      	ldrb	r4, [r1, #4]
 8004458:	42a5      	cmp	r5, r4
 800445a:	d122      	bne.n	80044a2 <RCM_RegisterRegConv+0x18e>
 800445c:	681c      	ldr	r4, [r3, #0]
 800445e:	680b      	ldr	r3, [r1, #0]
 8004460:	429c      	cmp	r4, r3
 8004462:	f47f af79 	bne.w	8004358 <RCM_RegisterRegConv+0x44>
      i++;
 8004466:	2003      	movs	r0, #3
 8004468:	e782      	b.n	8004370 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800446a:	2503      	movs	r5, #3
 800446c:	f06f 061d 	mvn.w	r6, #29
 8004470:	2201      	movs	r2, #1
 8004472:	fb15 6504 	smlabb	r5, r5, r4, r6
 8004476:	40a2      	lsls	r2, r4
 8004478:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 800447c:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8004480:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004484:	e7ba      	b.n	80043fc <RCM_RegisterRegConv+0xe8>
      i++;
 8004486:	2805      	cmp	r0, #5
 8004488:	bf34      	ite	cc
 800448a:	2000      	movcc	r0, #0
 800448c:	2002      	movcs	r0, #2
 800448e:	e7df      	b.n	8004450 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004490:	2804      	cmp	r0, #4
 8004492:	680b      	ldr	r3, [r1, #0]
 8004494:	d8e7      	bhi.n	8004466 <RCM_RegisterRegConv+0x152>
 8004496:	e76b      	b.n	8004370 <RCM_RegisterRegConv+0x5c>
 8004498:	6893      	ldr	r3, [r2, #8]
 800449a:	b123      	cbz	r3, 80044a6 <RCM_RegisterRegConv+0x192>
 800449c:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 800449e:	4628      	mov	r0, r5
 80044a0:	e74f      	b.n	8004342 <RCM_RegisterRegConv+0x2e>
 80044a2:	680b      	ldr	r3, [r1, #0]
 80044a4:	e764      	b.n	8004370 <RCM_RegisterRegConv+0x5c>
 80044a6:	4618      	mov	r0, r3
 80044a8:	e7d2      	b.n	8004450 <RCM_RegisterRegConv+0x13c>
 80044aa:	bf00      	nop
 80044ac:	200014b8 	.word	0x200014b8
 80044b0:	20001494 	.word	0x20001494
 80044b4:	7fffffc0 	.word	0x7fffffc0
 80044b8:	2000147c 	.word	0x2000147c

080044bc <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80044bc:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <RCM_ExecRegularConv+0x174>)
 80044be:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80044c2:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 80044c4:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80044c8:	0044      	lsls	r4, r0, #1
 80044ca:	2a00      	cmp	r2, #0
 80044cc:	d136      	bne.n	800453c <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80044ce:	7819      	ldrb	r1, [r3, #0]
 80044d0:	2900      	cmp	r1, #0
 80044d2:	d179      	bne.n	80045c8 <RCM_ExecRegularConv+0x10c>
 80044d4:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 80044d6:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 80044d8:	2900      	cmp	r1, #0
 80044da:	d07b      	beq.n	80045d4 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 80044dc:	7ade      	ldrb	r6, [r3, #11]
 80044de:	42b0      	cmp	r0, r6
 80044e0:	f0c0 8098 	bcc.w	8004614 <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 80044e4:	7b1a      	ldrb	r2, [r3, #12]
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	f000 8097 	beq.w	800461a <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 80044ec:	7c5e      	ldrb	r6, [r3, #17]
 80044ee:	42b0      	cmp	r0, r6
 80044f0:	d305      	bcc.n	80044fe <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 80044f2:	7c9a      	ldrb	r2, [r3, #18]
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	f040 8094 	bne.w	8004622 <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80044fa:	2202      	movs	r2, #2
 80044fc:	e071      	b.n	80045e2 <RCM_ExecRegularConv+0x126>
 80044fe:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8004500:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 8004502:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8004506:	1821      	adds	r1, r4, r0
 8004508:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 800450c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8004510:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 8004512:	4e48      	ldr	r6, [pc, #288]	; (8004634 <RCM_ExecRegularConv+0x178>)
 8004514:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 8004516:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 800451a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800451e:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 8004520:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8004522:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 8004524:	1821      	adds	r1, r4, r0
 8004526:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8004528:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 800452c:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8004530:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004534:	7852      	ldrb	r2, [r2, #1]
 8004536:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8004538:	bf18      	it	ne
 800453a:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 800453c:	4a3e      	ldr	r2, [pc, #248]	; (8004638 <RCM_ExecRegularConv+0x17c>)
 800453e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8004542:	bb8a      	cbnz	r2, 80045a8 <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004544:	4a3d      	ldr	r2, [pc, #244]	; (800463c <RCM_ExecRegularConv+0x180>)
 8004546:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800454a:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	2d09      	cmp	r5, #9
 8004550:	d930      	bls.n	80045b4 <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8004552:	2603      	movs	r6, #3
 8004554:	f06f 071d 	mvn.w	r7, #29
 8004558:	2201      	movs	r2, #1
 800455a:	fb16 7605 	smlabb	r6, r6, r5, r7
 800455e:	40aa      	lsls	r2, r5
 8004560:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8004564:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004568:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 800456c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800456e:	0d12      	lsrs	r2, r2, #20
 8004570:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8004574:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8004578:	432a      	orrs	r2, r5
 800457a:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800457c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800457e:	688a      	ldr	r2, [r1, #8]
 8004580:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004584:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004588:	f042 0204 	orr.w	r2, r2, #4
 800458c:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800458e:	680a      	ldr	r2, [r1, #0]
 8004590:	0752      	lsls	r2, r2, #29
 8004592:	d5fc      	bpl.n	800458e <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8004594:	1822      	adds	r2, r4, r0
 8004596:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800459a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800459c:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 800459e:	4d25      	ldr	r5, [pc, #148]	; (8004634 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 80045a0:	2102      	movs	r1, #2
 80045a2:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80045a4:	7952      	ldrb	r2, [r2, #5]
 80045a6:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 80045a8:	4420      	add	r0, r4
 80045aa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 80045ae:	bcf0      	pop	{r4, r5, r6, r7}
 80045b0:	8858      	ldrh	r0, [r3, #2]
 80045b2:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80045b4:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80045b8:	06aa      	lsls	r2, r5, #26
 80045ba:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80045bc:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80045c0:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80045c4:	432a      	orrs	r2, r5
 80045c6:	e7d1      	b.n	800456c <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 80045c8:	795e      	ldrb	r6, [r3, #5]
 80045ca:	4286      	cmp	r6, r0
 80045cc:	d898      	bhi.n	8004500 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 80045ce:	7999      	ldrb	r1, [r3, #6]
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d183      	bne.n	80044dc <RCM_ExecRegularConv+0x20>
 80045d4:	7b19      	ldrb	r1, [r3, #12]
 80045d6:	2900      	cmp	r1, #0
 80045d8:	d188      	bne.n	80044ec <RCM_ExecRegularConv+0x30>
 80045da:	7c99      	ldrb	r1, [r3, #18]
 80045dc:	bb09      	cbnz	r1, 8004622 <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 80045de:	2a04      	cmp	r2, #4
 80045e0:	d014      	beq.n	800460c <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 80045e2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80045e6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80045ea:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 80045ec:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80045f0:	4e10      	ldr	r6, [pc, #64]	; (8004634 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 80045f2:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80045f6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 80045fa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80045fe:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 8004600:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8004604:	7832      	ldrb	r2, [r6, #0]
 8004606:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8004608:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 800460a:	e78b      	b.n	8004524 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 800460c:	4e09      	ldr	r6, [pc, #36]	; (8004634 <RCM_ExecRegularConv+0x178>)
 800460e:	4602      	mov	r2, r0
 8004610:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 8004612:	e787      	b.n	8004524 <RCM_ExecRegularConv+0x68>
      i++;
 8004614:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 8004616:	4611      	mov	r1, r2
 8004618:	e773      	b.n	8004502 <RCM_ExecRegularConv+0x46>
 800461a:	7c9a      	ldrb	r2, [r3, #18]
 800461c:	b90a      	cbnz	r2, 8004622 <RCM_ExecRegularConv+0x166>
      i++;
 800461e:	2201      	movs	r2, #1
 8004620:	e7df      	b.n	80045e2 <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 8004622:	7dde      	ldrb	r6, [r3, #23]
 8004624:	4286      	cmp	r6, r0
      i++;
 8004626:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 800462a:	d9da      	bls.n	80045e2 <RCM_ExecRegularConv+0x126>
 800462c:	e768      	b.n	8004500 <RCM_ExecRegularConv+0x44>
 800462e:	bf00      	nop
 8004630:	2000147c 	.word	0x2000147c
 8004634:	20001478 	.word	0x20001478
 8004638:	20000b24 	.word	0x20000b24
 800463c:	200014b8 	.word	0x200014b8

08004640 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8004640:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8004642:	4c12      	ldr	r4, [pc, #72]	; (800468c <RCM_ExecUserConv+0x4c>)
 8004644:	7823      	ldrb	r3, [r4, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d000      	beq.n	800464c <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800464a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800464c:	4d10      	ldr	r5, [pc, #64]	; (8004690 <RCM_ExecUserConv+0x50>)
 800464e:	7828      	ldrb	r0, [r5, #0]
 8004650:	f7ff ff34 	bl	80044bc <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004654:	782b      	ldrb	r3, [r5, #0]
 8004656:	4a0f      	ldr	r2, [pc, #60]	; (8004694 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004658:	490f      	ldr	r1, [pc, #60]	; (8004698 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800465a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800465e:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004662:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004664:	7852      	ldrb	r2, [r2, #1]
 8004666:	b10a      	cbz	r2, 800466c <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8004668:	2202      	movs	r2, #2
 800466a:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <RCM_ExecUserConv+0x5c>)
 800466e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8004672:	2d00      	cmp	r5, #0
 8004674:	d0e9      	beq.n	800464a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8004676:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800467a:	2100      	movs	r1, #0
 800467c:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800467e:	6852      	ldr	r2, [r2, #4]
 8004680:	4601      	mov	r1, r0
 8004682:	4618      	mov	r0, r3
 8004684:	462b      	mov	r3, r5
}
 8004686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800468a:	4718      	bx	r3
 800468c:	200014b4 	.word	0x200014b4
 8004690:	20001479 	.word	0x20001479
 8004694:	2000147c 	.word	0x2000147c
 8004698:	200014c8 	.word	0x200014c8
 800469c:	20001494 	.word	0x20001494

080046a0 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 80046a0:	4b21      	ldr	r3, [pc, #132]	; (8004728 <RCM_ExecNextConv+0x88>)
 80046a2:	4822      	ldr	r0, [pc, #136]	; (800472c <RCM_ExecNextConv+0x8c>)
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80046aa:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80046ae:	b383      	cbz	r3, 8004712 <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <RCM_ExecNextConv+0x90>)
{
 80046b2:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80046b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b8:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80046ba:	2504      	movs	r5, #4
 80046bc:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80046be:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80046c0:	2d09      	cmp	r5, #9
 80046c2:	ea4f 0442 	mov.w	r4, r2, lsl #1
 80046c6:	d925      	bls.n	8004714 <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80046c8:	2603      	movs	r6, #3
 80046ca:	f06f 071d 	mvn.w	r7, #29
 80046ce:	2301      	movs	r3, #1
 80046d0:	fb16 7605 	smlabb	r6, r6, r5, r7
 80046d4:	40ab      	lsls	r3, r5
 80046d6:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 80046da:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80046de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80046e2:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80046ea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80046ee:	432b      	orrs	r3, r5
 80046f0:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80046f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80046f4:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80046f6:	4422      	add	r2, r4
 80046f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046fc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8004700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	2201      	movs	r2, #1
 800470a:	608b      	str	r3, [r1, #8]
 800470c:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 800470e:	bcf0      	pop	{r4, r5, r6, r7}
 8004710:	4770      	bx	lr
 8004712:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8004714:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8004718:	06ab      	lsls	r3, r5, #26
 800471a:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800471c:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8004720:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8004724:	432b      	orrs	r3, r5
 8004726:	e7dc      	b.n	80046e2 <RCM_ExecNextConv+0x42>
 8004728:	20001478 	.word	0x20001478
 800472c:	2000147c 	.word	0x2000147c
 8004730:	200014b8 	.word	0x200014b8

08004734 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8004734:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8004736:	4c0f      	ldr	r4, [pc, #60]	; (8004774 <RCM_ReadOngoingConv+0x40>)
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <RCM_ReadOngoingConv+0x44>)
 800473a:	7823      	ldrb	r3, [r4, #0]
 800473c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004740:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004744:	0058      	lsls	r0, r3, #1
 8004746:	784d      	ldrb	r5, [r1, #1]
 8004748:	2d01      	cmp	r5, #1
 800474a:	d006      	beq.n	800475a <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 800474c:	4403      	add	r3, r0
 800474e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004752:	7953      	ldrb	r3, [r2, #5]
 8004754:	7023      	strb	r3, [r4, #0]
}
 8004756:	bc70      	pop	{r4, r5, r6}
 8004758:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 800475a:	4d08      	ldr	r5, [pc, #32]	; (800477c <RCM_ReadOngoingConv+0x48>)
 800475c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8004760:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004762:	682e      	ldr	r6, [r5, #0]
 8004764:	0776      	lsls	r6, r6, #29
 8004766:	d5f1      	bpl.n	800474c <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8004768:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800476a:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 800476c:	2502      	movs	r5, #2
 800476e:	704d      	strb	r5, [r1, #1]
 8004770:	e7ec      	b.n	800474c <RCM_ReadOngoingConv+0x18>
 8004772:	bf00      	nop
 8004774:	20001478 	.word	0x20001478
 8004778:	2000147c 	.word	0x2000147c
 800477c:	200014b8 	.word	0x200014b8

08004780 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <HAL_MspInit+0x3c>)
{
 8004782:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004784:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	661a      	str	r2, [r3, #96]	; 0x60
 800478c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800478e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004790:	f002 0201 	and.w	r2, r2, #1
 8004794:	9200      	str	r2, [sp, #0]
 8004796:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800479a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800479e:	659a      	str	r2, [r3, #88]	; 0x58
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80047a8:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80047ac:	f001 fe4e 	bl	800644c <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047b0:	b003      	add	sp, #12
 80047b2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80047b6:	f002 bed7 	b.w	8007568 <HAL_PWREx_DisableUCPDDeadBattery>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000

080047c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047c0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80047c2:	6802      	ldr	r2, [r0, #0]
{
 80047c4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c6:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80047c8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80047d0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80047d4:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80047d6:	d034      	beq.n	8004842 <HAL_ADC_MspInit+0x82>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <HAL_ADC_MspInit+0xf0>)
 80047da:	429a      	cmp	r2, r3
 80047dc:	d001      	beq.n	80047e2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047de:	b00d      	add	sp, #52	; 0x34
 80047e0:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047e2:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_ADC_MspInit+0xf4>)
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047e8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047ec:	d054      	beq.n	8004898 <HAL_ADC_MspInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ee:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <HAL_ADC_MspInit+0xf8>)
 80047f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80047f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047fa:	f002 0201 	and.w	r2, r2, #1
 80047fe:	9204      	str	r2, [sp, #16]
 8004800:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004804:	f042 0202 	orr.w	r2, r2, #2
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c
 800480a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_CURR_AMPL_W_Pin;
 8004814:	2260      	movs	r2, #96	; 0x60
 8004816:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004818:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481a:	a906      	add	r1, sp, #24
 800481c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_CURR_AMPL_W_Pin;
 8004820:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004826:	f002 fd21 	bl	800726c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800482a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800482e:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004830:	4822      	ldr	r0, [pc, #136]	; (80048bc <HAL_ADC_MspInit+0xfc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8004834:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8004836:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800483a:	f002 fd17 	bl	800726c <HAL_GPIO_Init>
}
 800483e:	b00d      	add	sp, #52	; 0x34
 8004840:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_ADC_MspInit+0xf4>)
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004848:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800484a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800484c:	d019      	beq.n	8004882 <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800484e:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <HAL_ADC_MspInit+0xf8>)
 8004850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	64da      	str	r2, [r3, #76]	; 0x4c
 8004858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800485a:	f002 0201 	and.w	r2, r2, #1
 800485e:	9201      	str	r2, [sp, #4]
 8004860:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004864:	f042 0202 	orr.w	r2, r2, #2
 8004868:	64da      	str	r2, [r3, #76]	; 0x4c
 800486a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8004874:	2203      	movs	r2, #3
 8004876:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800487a:	a906      	add	r1, sp, #24
 800487c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004880:	e7ce      	b.n	8004820 <HAL_ADC_MspInit+0x60>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <HAL_ADC_MspInit+0xf8>)
 8004884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800488a:	64da      	str	r2, [r3, #76]	; 0x4c
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	9b00      	ldr	r3, [sp, #0]
 8004896:	e7da      	b.n	800484e <HAL_ADC_MspInit+0x8e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <HAL_ADC_MspInit+0xf8>)
 800489a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800489c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80048a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a8:	9303      	str	r3, [sp, #12]
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	e79f      	b.n	80047ee <HAL_ADC_MspInit+0x2e>
 80048ae:	bf00      	nop
 80048b0:	50000100 	.word	0x50000100
 80048b4:	20000f78 	.word	0x20000f78
 80048b8:	40021000 	.word	0x40021000
 80048bc:	48000400 	.word	0x48000400

080048c0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <HAL_CORDIC_MspInit+0x2c>)
 80048c2:	6802      	ldr	r2, [r0, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d000      	beq.n	80048ca <HAL_CORDIC_MspInit+0xa>
 80048c8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80048ca:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80048ce:	f042 0208 	orr.w	r2, r2, #8
 80048d2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80048d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80048da:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80048dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80048e6:	b002      	add	sp, #8
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40020c00 	.word	0x40020c00

080048f0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80048f0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 80048f2:	6802      	ldr	r2, [r0, #0]
 80048f4:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <HAL_FDCAN_MspInit+0x78>)
{
 80048f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	2400      	movs	r4, #0
  if(hfdcan->Instance==FDCAN1)
 80048fa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004900:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004904:	9406      	str	r4, [sp, #24]
  if(hfdcan->Instance==FDCAN1)
 8004906:	d001      	beq.n	800490c <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004908:	b008      	add	sp, #32
 800490a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800490c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004910:	a902      	add	r1, sp, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004912:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004914:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004918:	659a      	str	r2, [r3, #88]	; 0x58
 800491a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800491c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004920:	9200      	str	r2, [sp, #0]
 8004922:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	64da      	str	r2, [r3, #76]	; 0x4c
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004934:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004938:	2302      	movs	r3, #2
 800493a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800493e:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004940:	2300      	movs	r3, #0
 8004942:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004948:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800494e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004950:	f002 fc8c 	bl	800726c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004954:	4622      	mov	r2, r4
 8004956:	4621      	mov	r1, r4
 8004958:	2015      	movs	r0, #21
 800495a:	f001 fd8b 	bl	8006474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800495e:	2015      	movs	r0, #21
 8004960:	f001 fdc0 	bl	80064e4 <HAL_NVIC_EnableIRQ>
}
 8004964:	b008      	add	sp, #32
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	40006400 	.word	0x40006400

0800496c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800496c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 800496e:	6802      	ldr	r2, [r0, #0]
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_SPI_MspInit+0xac>)
{
 8004972:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	2400      	movs	r4, #0
  if(hspi->Instance==SPI2)
 8004976:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004978:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800497c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004980:	9406      	str	r4, [sp, #24]
  if(hspi->Instance==SPI2)
 8004982:	d001      	beq.n	8004988 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004984:	b008      	add	sp, #32
 8004986:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004988:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    hdma_spi2_rx.Instance = DMA1_Channel1;
 800498c:	4e23      	ldr	r6, [pc, #140]	; (8004a1c <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800498e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004994:	659a      	str	r2, [r3, #88]	; 0x58
 8004996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004998:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800499c:	9200      	str	r2, [sp, #0]
 800499e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a2:	f042 0202 	orr.w	r2, r2, #2
 80049a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049b0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80049b4:	2302      	movs	r3, #2
 80049b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	2300      	movs	r3, #0
 80049be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049c4:	2305      	movs	r3, #5
 80049c6:	4605      	mov	r5, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c8:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ca:	4815      	ldr	r0, [pc, #84]	; (8004a20 <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049cc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ce:	f002 fc4d 	bl	800726c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel1;
 80049d2:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <HAL_SPI_MspInit+0xb8>)
 80049d4:	6033      	str	r3, [r6, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80049d6:	200c      	movs	r0, #12
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049d8:	2180      	movs	r1, #128	; 0x80
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049da:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049de:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80049e2:	6070      	str	r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80049e4:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049e6:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049ea:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ee:	60b4      	str	r4, [r6, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f0:	60f4      	str	r4, [r6, #12]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049f2:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80049f4:	f001 fda4 	bl	8006540 <HAL_DMA_Init>
 80049f8:	b958      	cbnz	r0, 8004a12 <HAL_SPI_MspInit+0xa6>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80049fa:	2200      	movs	r2, #0
 80049fc:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80049fe:	65ae      	str	r6, [r5, #88]	; 0x58
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004a00:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004a02:	62b5      	str	r5, [r6, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004a04:	f001 fd36 	bl	8006474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004a08:	2024      	movs	r0, #36	; 0x24
 8004a0a:	f001 fd6b 	bl	80064e4 <HAL_NVIC_EnableIRQ>
}
 8004a0e:	b008      	add	sp, #32
 8004a10:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004a12:	f7fc fcfd 	bl	8001410 <Error_Handler>
 8004a16:	e7f0      	b.n	80049fa <HAL_SPI_MspInit+0x8e>
 8004a18:	40003800 	.word	0x40003800
 8004a1c:	200010a0 	.word	0x200010a0
 8004a20:	48000400 	.word	0x48000400
 8004a24:	40020008 	.word	0x40020008

08004a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a28:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_TIM_Base_MspInit+0x5c>)
 8004a2c:	6803      	ldr	r3, [r0, #0]
 8004a2e:	4293      	cmp	r3, r2
{
 8004a30:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8004a32:	d005      	beq.n	8004a40 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8004a34:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <HAL_TIM_Base_MspInit+0x60>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <HAL_TIM_Base_MspInit+0x32>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004a3a:	b003      	add	sp, #12
 8004a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_TIM_Base_MspInit+0x64>)
 8004a42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a48:	661a      	str	r2, [r3, #96]	; 0x60
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	9b00      	ldr	r3, [sp, #0]
}
 8004a54:	b003      	add	sp, #12
 8004a56:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_TIM_Base_MspInit+0x64>)
 8004a5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a5e:	f042 0210 	orr.w	r2, r2, #16
 8004a62:	659a      	str	r2, [r3, #88]	; 0x58
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004a66:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004a6e:	4611      	mov	r1, r2
 8004a70:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a72:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004a74:	f001 fcfe 	bl	8006474 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a78:	2036      	movs	r0, #54	; 0x36
}
 8004a7a:	b003      	add	sp, #12
 8004a7c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a80:	f001 bd30 	b.w	80064e4 <HAL_NVIC_EnableIRQ>
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40001000 	.word	0x40001000
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a90:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8004a92:	6801      	ldr	r1, [r0, #0]
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x68>)
{
 8004a96:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8004a9a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004aa0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004aa4:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8004aa6:	d001      	beq.n	8004aac <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004aa8:	b009      	add	sp, #36	; 0x24
 8004aaa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004aac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ab0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab4:	4811      	ldr	r0, [pc, #68]	; (8004afc <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ab6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ab8:	f042 0204 	orr.w	r2, r2, #4
 8004abc:	659a      	str	r2, [r3, #88]	; 0x58
 8004abe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ac0:	f002 0204 	and.w	r2, r2, #4
 8004ac4:	9200      	str	r2, [sp, #0]
 8004ac6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aca:	f042 0202 	orr.w	r2, r2, #2
 8004ace:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ad8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ada:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004adc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004ae4:	24c0      	movs	r4, #192	; 0xc0
 8004ae6:	2502      	movs	r5, #2
 8004ae8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004aec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af0:	f002 fbbc 	bl	800726c <HAL_GPIO_Init>
}
 8004af4:	b009      	add	sp, #36	; 0x24
 8004af6:	bd30      	pop	{r4, r5, pc}
 8004af8:	40000800 	.word	0x40000800
 8004afc:	48000400 	.word	0x48000400

08004b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b00:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004b02:	6801      	ldr	r1, [r0, #0]
 8004b04:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <HAL_TIM_MspPostInit+0xa0>)
{
 8004b06:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004b0a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b10:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004b14:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8004b16:	d001      	beq.n	8004b1c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b18:	b008      	add	sp, #32
 8004b1a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b20:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b24:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b30:	f002 0201 	and.w	r2, r2, #1
 8004b34:	9200      	str	r2, [sp, #0]
 8004b36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b3a:	f042 0202 	orr.w	r2, r2, #2
 8004b3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b42:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004b4c:	2280      	movs	r2, #128	; 0x80
 8004b4e:	2302      	movs	r3, #2
 8004b50:	2601      	movs	r6, #1
 8004b52:	2702      	movs	r7, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004b54:	a902      	add	r1, sp, #8
 8004b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004b5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004b62:	f002 fb83 	bl	800726c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004b66:	2203      	movs	r2, #3
 8004b68:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6a:	a902      	add	r1, sp, #8
 8004b6c:	480d      	ldr	r0, [pc, #52]	; (8004ba4 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b6e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004b70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b74:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004b78:	f44f 66e0 	mov.w	r6, #1792	; 0x700
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7c:	f002 fb76 	bl	800726c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004b80:	2702      	movs	r7, #2
 8004b82:	2202      	movs	r2, #2
 8004b84:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b86:	a902      	add	r1, sp, #8
 8004b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004b8c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b90:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b94:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b96:	f002 fb69 	bl	800726c <HAL_GPIO_Init>
}
 8004b9a:	b008      	add	sp, #32
 8004b9c:	bdd0      	pop	{r4, r6, r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	48000400 	.word	0x48000400

08004ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ba8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8004baa:	6801      	ldr	r1, [r0, #0]
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_UART_MspInit+0x6c>)
{
 8004bae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb0:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8004bb2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004bb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004bbc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8004bbe:	d001      	beq.n	8004bc4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004bc0:	b008      	add	sp, #32
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bc8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bcc:	2007      	movs	r0, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bd0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004bd4:	659a      	str	r2, [r3, #88]	; 0x58
 8004bd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bd8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004bdc:	9200      	str	r2, [sp, #0]
 8004bde:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bea:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004bf8:	240c      	movs	r4, #12
 8004bfa:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004c00:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c04:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c08:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0a:	f002 fb2f 	bl	800726c <HAL_GPIO_Init>
}
 8004c0e:	b008      	add	sp, #32
 8004c10:	bd70      	pop	{r4, r5, r6, pc}
 8004c12:	bf00      	nop
 8004c14:	40004400 	.word	0x40004400

08004c18 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <DMA1_Channel1_IRQHandler+0x8>)
 8004c1a:	f001 bd69 	b.w	80066f0 <HAL_DMA_IRQHandler>
 8004c1e:	bf00      	nop
 8004c20:	200010a0 	.word	0x200010a0

08004c24 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <FDCAN1_IT0_IRQHandler+0x8>)
 8004c26:	f002 b8ab 	b.w	8006d80 <HAL_FDCAN_IRQHandler>
 8004c2a:	bf00      	nop
 8004c2c:	200011b4 	.word	0x200011b4

08004c30 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <SPI2_IRQHandler+0x8>)
 8004c32:	f003 bcb3 	b.w	800859c <HAL_SPI_IRQHandler>
 8004c36:	bf00      	nop
 8004c38:	20000f84 	.word	0x20000f84

08004c3c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c3c:	4801      	ldr	r0, [pc, #4]	; (8004c44 <TIM6_DAC_IRQHandler+0x8>)
 8004c3e:	f004 b8a9 	b.w	8008d94 <HAL_TIM_IRQHandler>
 8004c42:	bf00      	nop
 8004c44:	20001218 	.word	0x20001218

08004c48 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004c48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c4c:	2240      	movs	r2, #64	; 0x40
 8004c4e:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8004c50:	f7fe be4c 	b.w	80038ec <TSK_HighFrequencyTask>

08004c54 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004c54:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004c56:	4804      	ldr	r0, [pc, #16]	; (8004c68 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004c58:	f06f 0201 	mvn.w	r2, #1
 8004c5c:	611a      	str	r2, [r3, #16]
 8004c5e:	f005 bfe3 	b.w	800ac28 <R3_2_TIMx_UP_IRQHandler>
 8004c62:	bf00      	nop
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	20000b24 	.word	0x20000b24

08004c6c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004c6c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	0611      	lsls	r1, r2, #24
 8004c74:	d505      	bpl.n	8004c82 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004c76:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8004c7a:	480a      	ldr	r0, [pc, #40]	; (8004ca4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004c7c:	611a      	str	r2, [r3, #16]
 8004c7e:	f006 f835 	bl	800acec <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004c82:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	05d2      	lsls	r2, r2, #23
 8004c88:	d505      	bpl.n	8004c96 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8004c8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	f006 f80b 	bl	800acac <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8004c9a:	f7fe bdfb 	b.w	8003894 <MC_Scheduler>
 8004c9e:	bf00      	nop
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	20000b24 	.word	0x20000b24

08004ca8 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8004ca8:	4806      	ldr	r0, [pc, #24]	; (8004cc4 <TIM4_IRQHandler+0x1c>)
 8004caa:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	07d1      	lsls	r1, r2, #31
 8004cb0:	d502      	bpl.n	8004cb8 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	07d2      	lsls	r2, r2, #31
 8004cb6:	d400      	bmi.n	8004cba <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004cb8:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004cba:	f06f 0201 	mvn.w	r2, #1
 8004cbe:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8004cc0:	f005 b82c 	b.w	8009d1c <ENC_IRQHandler>
 8004cc4:	200008f4 	.word	0x200008f4

08004cc8 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8004cc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004cca:	4c18      	ldr	r4, [pc, #96]	; (8004d2c <USART2_IRQHandler+0x64>)
 8004ccc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	0691      	lsls	r1, r2, #26
 8004cd4:	d50b      	bpl.n	8004cee <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004cd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8004cd8:	4620      	mov	r0, r4
 8004cda:	b2c9      	uxtb	r1, r1
 8004cdc:	f006 fc10 	bl	800b500 <UFCP_RX_IRQ_Handler>
 8004ce0:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d01a      	beq.n	8004d1c <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d01d      	beq.n	8004d26 <USART2_IRQHandler+0x5e>
 8004cea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	0612      	lsls	r2, r2, #24
 8004cf2:	d504      	bpl.n	8004cfe <USART2_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8004cf4:	480d      	ldr	r0, [pc, #52]	; (8004d2c <USART2_IRQHandler+0x64>)
 8004cf6:	f006 fb6b 	bl	800b3d0 <UFCP_TX_IRQ_Handler>
 8004cfa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	d50a      	bpl.n	8004d1a <USART2_IRQHandler+0x52>
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8004d04:	4809      	ldr	r0, [pc, #36]	; (8004d2c <USART2_IRQHandler+0x64>)
 8004d06:	f006 fc5d 	bl	800b5c4 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8004d0a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004d0e:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8004d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d14:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8004d16:	f000 b8bb 	b.w	8004e90 <UI_SerialCommunicationTimeOutStop>
}
 8004d1a:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8004d1c:	f000 f8be 	bl	8004e9c <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8004d20:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004d24:	e7e3      	b.n	8004cee <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8004d26:	f000 f8b3 	bl	8004e90 <UI_SerialCommunicationTimeOutStop>
 8004d2a:	e7de      	b.n	8004cea <USART2_IRQHandler+0x22>
 8004d2c:	20000c74 	.word	0x20000c74

08004d30 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004d30:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004d32:	f7fe fef5 	bl	8003b20 <TSK_HardwareFaultTask>
 8004d36:	4d18      	ldr	r5, [pc, #96]	; (8004d98 <HardFault_Handler+0x68>)
 8004d38:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8004d3a:	462c      	mov	r4, r5
 8004d3c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	0711      	lsls	r1, r2, #28
 8004d44:	4620      	mov	r0, r4
 8004d46:	d508      	bpl.n	8004d5a <HardFault_Handler+0x2a>
 8004d48:	f006 fc3c 	bl	800b5c4 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8004d4c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004d50:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8004d52:	f000 f89d 	bl	8004e90 <UI_SerialCommunicationTimeOutStop>
 8004d56:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	0612      	lsls	r2, r2, #24
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8004d5e:	4620      	mov	r0, r4
 8004d60:	d513      	bpl.n	8004d8a <HardFault_Handler+0x5a>
 8004d62:	f006 fb35 	bl	800b3d0 <UFCP_TX_IRQ_Handler>
 8004d66:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	0691      	lsls	r1, r2, #26
 8004d6e:	d5e7      	bpl.n	8004d40 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004d70:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8004d72:	4620      	mov	r0, r4
 8004d74:	b2c9      	uxtb	r1, r1
 8004d76:	f006 fbc3 	bl	800b500 <UFCP_RX_IRQ_Handler>
 8004d7a:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d008      	beq.n	8004d92 <HardFault_Handler+0x62>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d1db      	bne.n	8004d3c <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8004d84:	f000 f884 	bl	8004e90 <UI_SerialCommunicationTimeOutStop>
 8004d88:	e7d8      	b.n	8004d3c <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	0692      	lsls	r2, r2, #26
 8004d8e:	d5d7      	bpl.n	8004d40 <HardFault_Handler+0x10>
 8004d90:	e7ee      	b.n	8004d70 <HardFault_Handler+0x40>
          UI_SerialCommunicationTimeOutStart();
 8004d92:	f000 f883 	bl	8004e9c <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8004d96:	e7d1      	b.n	8004d3c <HardFault_Handler+0xc>
 8004d98:	20000c74 	.word	0x20000c74

08004d9c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004d9c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004d9e:	4c0a      	ldr	r4, [pc, #40]	; (8004dc8 <SysTick_Handler+0x2c>)
 8004da0:	7823      	ldrb	r3, [r4, #0]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d006      	beq.n	8004db4 <SysTick_Handler+0x18>
 8004da6:	3301      	adds	r3, #1
 8004da8:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8004daa:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004db0:	f7fe bea6 	b.w	8003b00 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004db4:	f000 fc32 	bl	800561c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004db8:	f001 fbbe 	bl	8006538 <HAL_SYSTICK_IRQHandler>
 8004dbc:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004dbe:	7023      	strb	r3, [r4, #0]
}
 8004dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004dc4:	f7fe be9c 	b.w	8003b00 <MC_RunMotorControlTasks>
 8004dc8:	20000db4 	.word	0x20000db4

08004dcc <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8004dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8004dd0:	4d17      	ldr	r5, [pc, #92]	; (8004e30 <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8004dd2:	f8df c070 	ldr.w	ip, [pc, #112]	; 8004e44 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8004dd6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004e48 <UI_TaskInit+0x7c>
{
 8004dda:	468e      	mov	lr, r1
 8004ddc:	4681      	mov	r9, r0
 8004dde:	4616      	mov	r6, r2
 8004de0:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8004de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004de4:	4664      	mov	r4, ip
 8004de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004de8:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8004dec:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 8004dee:	4d11      	ldr	r5, [pc, #68]	; (8004e34 <UI_TaskInit+0x68>)
{
 8004df0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8004df4:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8004df8:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8004dfc:	4640      	mov	r0, r8
{
 8004dfe:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8004e00:	f006 fae4 	bl	800b3cc <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8004e04:	f8cd a004 	str.w	sl, [sp, #4]
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <UI_TaskInit+0x6c>)
 8004e0a:	6828      	ldr	r0, [r5, #0]
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <UI_TaskInit+0x70>)
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4641      	mov	r1, r8
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <UI_TaskInit+0x74>)
 8004e14:	f7ff fa30 	bl	8004278 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004e18:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004e1c:	6828      	ldr	r0, [r5, #0]
 8004e1e:	463b      	mov	r3, r7
 8004e20:	4632      	mov	r2, r6
 8004e22:	4621      	mov	r1, r4

}
 8004e24:	b002      	add	sp, #8
 8004e26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004e2a:	f000 b83d 	b.w	8004ea8 <UI_Init>
 8004e2e:	bf00      	nop
 8004e30:	20000f50 	.word	0x20000f50
 8004e34:	20000f80 	.word	0x20000f80
 8004e38:	0800b5e1 	.word	0x0800b5e1
 8004e3c:	0800b451 	.word	0x0800b451
 8004e40:	0800b431 	.word	0x0800b431
 8004e44:	200014cc 	.word	0x200014cc
 8004e48:	20000c74 	.word	0x20000c74

08004e4c <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8004e4c:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <UI_Scheduler+0x38>)
 8004e4e:	8813      	ldrh	r3, [r2, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b11b      	cbz	r3, 8004e5c <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8004e54:	8813      	ldrh	r3, [r2, #0]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <UI_Scheduler+0x3c>)
 8004e5e:	8813      	ldrh	r3, [r2, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d903      	bls.n	8004e6e <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8004e66:	8813      	ldrh	r3, [r2, #0]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8004e6e:	4a07      	ldr	r2, [pc, #28]	; (8004e8c <UI_Scheduler+0x40>)
 8004e70:	8813      	ldrh	r3, [r2, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d903      	bls.n	8004e80 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8004e78:	8813      	ldrh	r3, [r2, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]
  }
}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000f7e 	.word	0x20000f7e
 8004e88:	20000f7c 	.word	0x20000f7c
 8004e8c:	20000db6 	.word	0x20000db6

08004e90 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8004e90:	4b01      	ldr	r3, [pc, #4]	; (8004e98 <UI_SerialCommunicationTimeOutStop+0x8>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	801a      	strh	r2, [r3, #0]
}
 8004e96:	4770      	bx	lr
 8004e98:	20000f7c 	.word	0x20000f7c

08004e9c <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <UI_SerialCommunicationTimeOutStart+0x8>)
 8004e9e:	224f      	movs	r2, #79	; 0x4f
 8004ea0:	801a      	strh	r2, [r3, #0]
}
 8004ea2:	4770      	bx	lr
 8004ea4:	20000f7c 	.word	0x20000f7c

08004ea8 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004ea8:	b430      	push	{r4, r5}
 8004eaa:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8004eac:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8004eae:	2500      	movs	r5, #0
 8004eb0:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8004eb2:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8004eb6:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8004eb8:	7101      	strb	r1, [r0, #4]
}
 8004eba:	4770      	bx	lr

08004ebc <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8004ebc:	7903      	ldrb	r3, [r0, #4]
 8004ebe:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8004ec0:	bf86      	itte	hi
 8004ec2:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8004ec4:	2001      	movhi	r0, #1
    retVal = false;
 8004ec6:	2000      	movls	r0, #0
  }
  return retVal;
}
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop

08004ecc <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8004ecc:	7d00      	ldrb	r0, [r0, #20]
 8004ece:	4770      	bx	lr

08004ed0 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8004ed0:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004ed2:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004ed6:	7d03      	ldrb	r3, [r0, #20]
{
 8004ed8:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004eda:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004ede:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
{
 8004ee2:	4614      	mov	r4, r2
 8004ee4:	295b      	cmp	r1, #91	; 0x5b
 8004ee6:	d82f      	bhi.n	8004f48 <UI_SetReg+0x78>
 8004ee8:	e8df f001 	tbb	[pc, r1]
 8004eec:	412e2e3d 	.word	0x412e2e3d
 8004ef0:	544e482e 	.word	0x544e482e
 8004ef4:	726c665a 	.word	0x726c665a
 8004ef8:	908a8478 	.word	0x908a8478
 8004efc:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f00:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f04:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f08:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f0c:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f10:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f14:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f18:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f1c:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f20:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f24:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f28:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f2c:	2e2e962e 	.word	0x2e2e962e
 8004f30:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f34:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f38:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f3c:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f40:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f44:	312e2e2e 	.word	0x312e2e2e
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004f48:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8004f4a:	b003      	add	sp, #12
 8004f4c:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004f4e:	493f      	ldr	r1, [pc, #252]	; (800504c <UI_SetReg+0x17c>)
 8004f50:	fb81 3104 	smull	r3, r1, r1, r4
 8004f54:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8004f58:	4628      	mov	r0, r5
 8004f5a:	b209      	sxth	r1, r1
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f7fd ffeb 	bl	8002f38 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8004f62:	2001      	movs	r0, #1
    break;
 8004f64:	e7f1      	b.n	8004f4a <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8004f66:	b2e1      	uxtb	r1, r4
 8004f68:	f7ff ffa8 	bl	8004ebc <UI_SelectMC>
    break;
 8004f6c:	e7ed      	b.n	8004f4a <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8004f6e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004f72:	d057      	beq.n	8005024 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8004f74:	2c01      	cmp	r4, #1
 8004f76:	d05f      	beq.n	8005038 <UI_SetReg+0x168>
  bool retVal = true;
 8004f78:	2001      	movs	r0, #1
 8004f7a:	e7e6      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	b221      	sxth	r1, r4
 8004f80:	f004 ff90 	bl	8009ea4 <PID_SetKP>
  bool retVal = true;
 8004f84:	2001      	movs	r0, #1
    break;
 8004f86:	e7e0      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	b221      	sxth	r1, r4
 8004f8c:	f004 ff8c 	bl	8009ea8 <PID_SetKI>
  bool retVal = true;
 8004f90:	2001      	movs	r0, #1
    break;
 8004f92:	e7da      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	b221      	sxth	r1, r4
 8004f98:	f004 ff96 	bl	8009ec8 <PID_SetKD>
  bool retVal = true;
 8004f9c:	2001      	movs	r0, #1
    break;
 8004f9e:	e7d4      	b.n	8004f4a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f7fe f88f 	bl	80030c4 <MCI_GetIqdref>
 8004fa6:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8004fa8:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8004fac:	4628      	mov	r0, r5
 8004fae:	9901      	ldr	r1, [sp, #4]
 8004fb0:	f7fd ffd8 	bl	8002f64 <MCI_SetCurrentReferences>
  bool retVal = true;
 8004fb4:	2001      	movs	r0, #1
    break;
 8004fb6:	e7c8      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8004fb8:	6858      	ldr	r0, [r3, #4]
 8004fba:	b221      	sxth	r1, r4
 8004fbc:	f004 ff72 	bl	8009ea4 <PID_SetKP>
  bool retVal = true;
 8004fc0:	2001      	movs	r0, #1
    break;
 8004fc2:	e7c2      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8004fc4:	6858      	ldr	r0, [r3, #4]
 8004fc6:	b221      	sxth	r1, r4
 8004fc8:	f004 ff6e 	bl	8009ea8 <PID_SetKI>
  bool retVal = true;
 8004fcc:	2001      	movs	r0, #1
    break;
 8004fce:	e7bc      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8004fd0:	6858      	ldr	r0, [r3, #4]
 8004fd2:	b221      	sxth	r1, r4
 8004fd4:	f004 ff78 	bl	8009ec8 <PID_SetKD>
  bool retVal = true;
 8004fd8:	2001      	movs	r0, #1
    break;
 8004fda:	e7b6      	b.n	8004f4a <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f7fe f871 	bl	80030c4 <MCI_GetIqdref>
 8004fe2:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8004fe4:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8004fe8:	4628      	mov	r0, r5
 8004fea:	9901      	ldr	r1, [sp, #4]
 8004fec:	f7fd ffba 	bl	8002f64 <MCI_SetCurrentReferences>
  bool retVal = true;
 8004ff0:	2001      	movs	r0, #1
    break;
 8004ff2:	e7aa      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8004ff4:	6898      	ldr	r0, [r3, #8]
 8004ff6:	b221      	sxth	r1, r4
 8004ff8:	f004 ff54 	bl	8009ea4 <PID_SetKP>
  bool retVal = true;
 8004ffc:	2001      	movs	r0, #1
    break;
 8004ffe:	e7a4      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8005000:	6898      	ldr	r0, [r3, #8]
 8005002:	b221      	sxth	r1, r4
 8005004:	f004 ff50 	bl	8009ea8 <PID_SetKI>
  bool retVal = true;
 8005008:	2001      	movs	r0, #1
    break;
 800500a:	e79e      	b.n	8004f4a <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800500c:	6898      	ldr	r0, [r3, #8]
 800500e:	b221      	sxth	r1, r4
 8005010:	f004 ff5a 	bl	8009ec8 <PID_SetKD>
  bool retVal = true;
 8005014:	2001      	movs	r0, #1
    break;
 8005016:	e798      	b.n	8004f4a <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8005018:	4628      	mov	r0, r5
 800501a:	b221      	sxth	r1, r4
 800501c:	f7fe f894 	bl	8003148 <MCI_SetIdref>
  bool retVal = true;
 8005020:	2001      	movs	r0, #1
    break;
 8005022:	e792      	b.n	8004f4a <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8005024:	4628      	mov	r0, r5
 8005026:	f7fe f877 	bl	8003118 <MCI_GetTeref>
 800502a:	4622      	mov	r2, r4
 800502c:	4601      	mov	r1, r0
 800502e:	4628      	mov	r0, r5
 8005030:	f7fd ff8e 	bl	8002f50 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8005034:	2001      	movs	r0, #1
 8005036:	e788      	b.n	8004f4a <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8005038:	4628      	mov	r0, r5
 800503a:	f7fe f815 	bl	8003068 <MCI_GetMecSpeedRefUnit>
 800503e:	2200      	movs	r2, #0
 8005040:	4601      	mov	r1, r0
 8005042:	4628      	mov	r0, r5
 8005044:	f7fd ff78 	bl	8002f38 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8005048:	4620      	mov	r0, r4
 800504a:	e77e      	b.n	8004f4a <UI_SetReg+0x7a>
 800504c:	2aaaaaab 	.word	0x2aaaaaab

08005050 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8005050:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005052:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8005056:	7d03      	ldrb	r3, [r0, #20]
{
 8005058:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800505a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800505e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8005062:	2a00      	cmp	r2, #0
 8005064:	f000 8089 	beq.w	800517a <UI_GetReg+0x12a>
  {
    *success = true;
 8005068:	2601      	movs	r6, #1
 800506a:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 800506c:	2981      	cmp	r1, #129	; 0x81
 800506e:	f200 81db 	bhi.w	8005428 <UI_GetReg+0x3d8>
 8005072:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005076:	0163      	.short	0x0163
 8005078:	0159015d 	.word	0x0159015d
 800507c:	01b601bd 	.word	0x01b601bd
 8005080:	01ae01b2 	.word	0x01ae01b2
 8005084:	00ff01aa 	.word	0x00ff01aa
 8005088:	0178017c 	.word	0x0178017c
 800508c:	00fa0174 	.word	0x00fa0174
 8005090:	016a016e 	.word	0x016a016e
 8005094:	01d90166 	.word	0x01d90166
 8005098:	01d901d9 	.word	0x01d901d9
 800509c:	01d901d9 	.word	0x01d901d9
 80050a0:	01d901d9 	.word	0x01d901d9
 80050a4:	01d901d9 	.word	0x01d901d9
 80050a8:	01a201a6 	.word	0x01a201a6
 80050ac:	01d9019e 	.word	0x01d9019e
 80050b0:	01d201d9 	.word	0x01d201d9
 80050b4:	01c801cd 	.word	0x01c801cd
 80050b8:	01c101d9 	.word	0x01c101d9
 80050bc:	014f0154 	.word	0x014f0154
 80050c0:	01940199 	.word	0x01940199
 80050c4:	01c801cd 	.word	0x01c801cd
 80050c8:	00fa00ff 	.word	0x00fa00ff
 80050cc:	018a018f 	.word	0x018a018f
 80050d0:	01800185 	.word	0x01800185
 80050d4:	0127013b 	.word	0x0127013b
 80050d8:	01d901d9 	.word	0x01d901d9
 80050dc:	01d901d9 	.word	0x01d901d9
 80050e0:	01d901d9 	.word	0x01d901d9
 80050e4:	01d901d9 	.word	0x01d901d9
 80050e8:	01d901d9 	.word	0x01d901d9
 80050ec:	01d901d9 	.word	0x01d901d9
 80050f0:	01d901d9 	.word	0x01d901d9
 80050f4:	01190120 	.word	0x01190120
 80050f8:	01d900fa 	.word	0x01d900fa
 80050fc:	01d901d9 	.word	0x01d901d9
 8005100:	01d901d9 	.word	0x01d901d9
 8005104:	01d901d9 	.word	0x01d901d9
 8005108:	01d901d9 	.word	0x01d901d9
 800510c:	01d901d9 	.word	0x01d901d9
 8005110:	01d901d9 	.word	0x01d901d9
 8005114:	01d901d9 	.word	0x01d901d9
 8005118:	01d901d9 	.word	0x01d901d9
 800511c:	01d901d9 	.word	0x01d901d9
 8005120:	01d901d9 	.word	0x01d901d9
 8005124:	01d901d9 	.word	0x01d901d9
 8005128:	01d901d9 	.word	0x01d901d9
 800512c:	01d90108 	.word	0x01d90108
 8005130:	01d901d9 	.word	0x01d901d9
 8005134:	01d901d9 	.word	0x01d901d9
 8005138:	01d901d9 	.word	0x01d901d9
 800513c:	01d901d9 	.word	0x01d901d9
 8005140:	01d901d9 	.word	0x01d901d9
 8005144:	01d901d9 	.word	0x01d901d9
 8005148:	01d901d9 	.word	0x01d901d9
 800514c:	01d901d9 	.word	0x01d901d9
 8005150:	010401d9 	.word	0x010401d9
 8005154:	01720115 	.word	0x01720115
 8005158:	00f701d9 	.word	0x00f701d9
 800515c:	01d900f7 	.word	0x01d900f7
 8005160:	01d901d9 	.word	0x01d901d9
 8005164:	01d901d9 	.word	0x01d901d9
 8005168:	01d901d9 	.word	0x01d901d9
 800516c:	01d901d9 	.word	0x01d901d9
 8005170:	01d901d9 	.word	0x01d901d9
 8005174:	01d901d9 	.word	0x01d901d9
 8005178:	00f7      	.short	0x00f7
 800517a:	2970      	cmp	r1, #112	; 0x70
 800517c:	d872      	bhi.n	8005264 <UI_GetReg+0x214>
 800517e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005182:	00dd      	.short	0x00dd
 8005184:	00d300d7 	.word	0x00d300d7
 8005188:	01300137 	.word	0x01300137
 800518c:	0128012c 	.word	0x0128012c
 8005190:	00790124 	.word	0x00790124
 8005194:	00f200f6 	.word	0x00f200f6
 8005198:	007400ee 	.word	0x007400ee
 800519c:	00e400e8 	.word	0x00e400e8
 80051a0:	007100e0 	.word	0x007100e0
 80051a4:	00710071 	.word	0x00710071
 80051a8:	00710071 	.word	0x00710071
 80051ac:	00710071 	.word	0x00710071
 80051b0:	00710071 	.word	0x00710071
 80051b4:	011c0120 	.word	0x011c0120
 80051b8:	00710118 	.word	0x00710118
 80051bc:	014c0071 	.word	0x014c0071
 80051c0:	01420147 	.word	0x01420147
 80051c4:	013b0071 	.word	0x013b0071
 80051c8:	00c900ce 	.word	0x00c900ce
 80051cc:	010e0113 	.word	0x010e0113
 80051d0:	01420147 	.word	0x01420147
 80051d4:	00740079 	.word	0x00740079
 80051d8:	01040109 	.word	0x01040109
 80051dc:	00fa00ff 	.word	0x00fa00ff
 80051e0:	00a100b5 	.word	0x00a100b5
 80051e4:	00710071 	.word	0x00710071
 80051e8:	00710071 	.word	0x00710071
 80051ec:	00710071 	.word	0x00710071
 80051f0:	00710071 	.word	0x00710071
 80051f4:	00710071 	.word	0x00710071
 80051f8:	00710071 	.word	0x00710071
 80051fc:	00710071 	.word	0x00710071
 8005200:	0093009a 	.word	0x0093009a
 8005204:	00710074 	.word	0x00710074
 8005208:	00710071 	.word	0x00710071
 800520c:	00710071 	.word	0x00710071
 8005210:	00710071 	.word	0x00710071
 8005214:	00710071 	.word	0x00710071
 8005218:	00710071 	.word	0x00710071
 800521c:	00710071 	.word	0x00710071
 8005220:	00710071 	.word	0x00710071
 8005224:	00710071 	.word	0x00710071
 8005228:	00710071 	.word	0x00710071
 800522c:	00710071 	.word	0x00710071
 8005230:	00710071 	.word	0x00710071
 8005234:	00710071 	.word	0x00710071
 8005238:	00710082 	.word	0x00710082
 800523c:	00710071 	.word	0x00710071
 8005240:	00710071 	.word	0x00710071
 8005244:	00710071 	.word	0x00710071
 8005248:	00710071 	.word	0x00710071
 800524c:	00710071 	.word	0x00710071
 8005250:	00710071 	.word	0x00710071
 8005254:	00710071 	.word	0x00710071
 8005258:	00710071 	.word	0x00710071
 800525c:	007e0071 	.word	0x007e0071
 8005260:	00ec008f 	.word	0x00ec008f
  int32_t bRetVal = 0;
 8005264:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8005266:	b00c      	add	sp, #48	; 0x30
 8005268:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800526a:	4620      	mov	r0, r4
 800526c:	f7fd ff2a 	bl	80030c4 <MCI_GetIqdref>
 8005270:	1400      	asrs	r0, r0, #16
    break;
 8005272:	e7f8      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8005274:	4620      	mov	r0, r4
 8005276:	f7fd ff25 	bl	80030c4 <MCI_GetIqdref>
 800527a:	b200      	sxth	r0, r0
    break;
 800527c:	e7f3      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800527e:	6828      	ldr	r0, [r5, #0]
 8005280:	f004 fe1e 	bl	8009ec0 <PID_GetKPDivisor>
    break;
 8005284:	e7ef      	b.n	8005266 <UI_GetReg+0x216>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8005286:	4620      	mov	r0, r4
 8005288:	f7fd fed8 	bl	800303c <MCI_GetControlMode>
 800528c:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800528e:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8005290:	f000 80d7 	beq.w	8005442 <UI_GetReg+0x3f2>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8005294:	f7fd fee8 	bl	8003068 <MCI_GetMecSpeedRefUnit>
 8005298:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800529c:	0040      	lsls	r0, r0, #1
 800529e:	e7e2      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80052a0:	6828      	ldr	r0, [r5, #0]
 80052a2:	f004 fe0f 	bl	8009ec4 <PID_GetKIDivisor>
    break;
 80052a6:	e7de      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80052a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80052aa:	f005 ffc9 	bl	800b240 <STC_GetMinAppNegativeMecSpeedUnit>
 80052ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80052b2:	0040      	lsls	r0, r0, #1
    break;
 80052b4:	e7d7      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80052b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80052b8:	f005 ffc0 	bl	800b23c <STC_GetMaxAppPositiveMecSpeedUnit>
 80052bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80052c0:	0040      	lsls	r0, r0, #1
    break;
 80052c2:	e7d0      	b.n	8005266 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80052c4:	6902      	ldr	r2, [r0, #16]
 80052c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052ca:	0f1a      	lsrs	r2, r3, #28
 80052cc:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052ce:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052d2:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052d4:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052d8:	f240 80ae 	bls.w	8005438 <UI_GetReg+0x3e8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d8c1      	bhi.n	8005264 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 80052e0:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d0be      	beq.n	8005264 <UI_GetReg+0x214>
        bRetVal = SPD_GetS16Speed(pSPD);
 80052e6:	f005 fee9 	bl	800b0bc <SPD_GetS16Speed>
 80052ea:	e7bc      	b.n	8005266 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80052ec:	6902      	ldr	r2, [r0, #16]
 80052ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052f2:	0f1a      	lsrs	r2, r3, #28
 80052f4:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052f6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052fa:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80052fc:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005300:	f240 8095 	bls.w	800542e <UI_GetReg+0x3de>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005304:	2b01      	cmp	r3, #1
 8005306:	d8ad      	bhi.n	8005264 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8005308:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800530a:	2800      	cmp	r0, #0
 800530c:	d0aa      	beq.n	8005264 <UI_GetReg+0x214>
        bRetVal = SPD_GetElAngle(pSPD);
 800530e:	f005 fe9d 	bl	800b04c <SPD_GetElAngle>
 8005312:	e7a8      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).b;
 8005314:	4620      	mov	r0, r4
 8005316:	f7fd feab 	bl	8003070 <MCI_GetIab>
 800531a:	1400      	asrs	r0, r0, #16
    break;
 800531c:	e7a3      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).a;
 800531e:	4620      	mov	r0, r4
 8005320:	f7fd fea6 	bl	8003070 <MCI_GetIab>
 8005324:	b200      	sxth	r0, r0
    break;
 8005326:	e79e      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8005328:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800532a:	f006 f83b 	bl	800b3a4 <STM_GetState>
	break;
 800532e:	e79a      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8005330:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 8005332:	b00c      	add	sp, #48	; 0x30
 8005334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8005338:	f006 b842 	b.w	800b3c0 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800533c:	f7ff fdc6 	bl	8004ecc <UI_GetSelectedMC>
    break;
 8005340:	e791      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8005342:	68a8      	ldr	r0, [r5, #8]
 8005344:	f004 fdc2 	bl	8009ecc <PID_GetKD>
    break;
 8005348:	e78d      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800534a:	68a8      	ldr	r0, [r5, #8]
 800534c:	f004 fdb2 	bl	8009eb4 <PID_GetKI>
    break;
 8005350:	e789      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8005352:	68a8      	ldr	r0, [r5, #8]
 8005354:	f004 fdaa 	bl	8009eac <PID_GetKP>
    break;
 8005358:	e785      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)(MC_UID);
 800535a:	483d      	ldr	r0, [pc, #244]	; (8005450 <UI_GetReg+0x400>)
 800535c:	e783      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 800535e:	6868      	ldr	r0, [r5, #4]
 8005360:	f004 fdb4 	bl	8009ecc <PID_GetKD>
    break;
 8005364:	e77f      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8005366:	6868      	ldr	r0, [r5, #4]
 8005368:	f004 fda4 	bl	8009eb4 <PID_GetKI>
    break;
 800536c:	e77b      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800536e:	6868      	ldr	r0, [r5, #4]
 8005370:	f004 fd9c 	bl	8009eac <PID_GetKP>
    break;
 8005374:	e777      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8005376:	4620      	mov	r0, r4
 8005378:	f7fd fec0 	bl	80030fc <MCI_GetValphabeta>
 800537c:	1400      	asrs	r0, r0, #16
    break;
 800537e:	e772      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8005380:	4620      	mov	r0, r4
 8005382:	f7fd febb 	bl	80030fc <MCI_GetValphabeta>
 8005386:	b200      	sxth	r0, r0
    break;
 8005388:	e76d      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).d;
 800538a:	4620      	mov	r0, r4
 800538c:	f7fd fea8 	bl	80030e0 <MCI_GetVqd>
 8005390:	1400      	asrs	r0, r0, #16
    break;
 8005392:	e768      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).q;
 8005394:	4620      	mov	r0, r4
 8005396:	f7fd fea3 	bl	80030e0 <MCI_GetVqd>
 800539a:	b200      	sxth	r0, r0
    break;
 800539c:	e763      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 800539e:	4620      	mov	r0, r4
 80053a0:	f7fd fe74 	bl	800308c <MCI_GetIalphabeta>
 80053a4:	1400      	asrs	r0, r0, #16
    break;
 80053a6:	e75e      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7fd fe6f 	bl	800308c <MCI_GetIalphabeta>
 80053ae:	b200      	sxth	r0, r0
    break;
 80053b0:	e759      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80053b2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80053b4:	f004 fd14 	bl	8009de0 <MPM_GetAvrgElMotorPowerW>
    break;
 80053b8:	e755      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80053ba:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80053bc:	f004 fd54 	bl	8009e68 <NTC_GetAvTemp_C>
    break;
 80053c0:	e751      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80053c2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80053c4:	f004 facc 	bl	8009960 <VBS_GetAvBusVoltage_V>
    break;
 80053c8:	e74d      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 80053ca:	6828      	ldr	r0, [r5, #0]
 80053cc:	f004 fd7e 	bl	8009ecc <PID_GetKD>
    break;
 80053d0:	e749      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 80053d2:	6828      	ldr	r0, [r5, #0]
 80053d4:	f004 fd6e 	bl	8009eb4 <PID_GetKI>
    break;
 80053d8:	e745      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 80053da:	6828      	ldr	r0, [r5, #0]
 80053dc:	f004 fd66 	bl	8009eac <PID_GetKP>
    break;
 80053e0:	e741      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7fd fe40 	bl	8003068 <MCI_GetMecSpeedRefUnit>
 80053e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80053ec:	0040      	lsls	r0, r0, #1
    break;
 80053ee:	e73a      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7fd fe23 	bl	800303c <MCI_GetControlMode>
    break;
 80053f6:	e736      	b.n	8005266 <UI_GetReg+0x216>
      if (pMCT->pRevupCtrl)
 80053f8:	6968      	ldr	r0, [r5, #20]
 80053fa:	2800      	cmp	r0, #0
 80053fc:	f43f af32 	beq.w	8005264 <UI_GetReg+0x214>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8005400:	f006 f972 	bl	800b6e8 <RUC_GetNumberOfPhases>
 8005404:	e72f      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).d;
 8005406:	4620      	mov	r0, r4
 8005408:	f7fd fe4e 	bl	80030a8 <MCI_GetIqd>
 800540c:	1400      	asrs	r0, r0, #16
    break;
 800540e:	e72a      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).q;
 8005410:	4620      	mov	r0, r4
 8005412:	f7fd fe49 	bl	80030a8 <MCI_GetIqd>
 8005416:	b200      	sxth	r0, r0
    break;
 8005418:	e725      	b.n	8005266 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800541a:	4620      	mov	r0, r4
 800541c:	f7fd fe1c 	bl	8003058 <MCI_GetAvrgMecSpeedUnit>
 8005420:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005424:	0040      	lsls	r0, r0, #1
    break;
 8005426:	e71e      	b.n	8005266 <UI_GetReg+0x216>
        *success = false;
 8005428:	2000      	movs	r0, #0
 800542a:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800542c:	e71b      	b.n	8005266 <UI_GetReg+0x216>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800542e:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8005430:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005432:	f63f af6a 	bhi.w	800530a <UI_GetReg+0x2ba>
 8005436:	e767      	b.n	8005308 <UI_GetReg+0x2b8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005438:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 800543a:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800543c:	f63f af51 	bhi.w	80052e2 <UI_GetReg+0x292>
 8005440:	e74e      	b.n	80052e0 <UI_GetReg+0x290>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8005442:	f7fd fdfd 	bl	8003040 <MCI_GetLastRampFinalSpeed>
 8005446:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800544a:	0040      	lsls	r0, r0, #1
 800544c:	e70b      	b.n	8005266 <UI_GetReg+0x216>
 800544e:	bf00      	nop
 8005450:	34a6847a 	.word	0x34a6847a

08005454 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8005454:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005456:	6883      	ldr	r3, [r0, #8]
 8005458:	7d02      	ldrb	r2, [r0, #20]
 800545a:	3901      	subs	r1, #1
 800545c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8005460:	290d      	cmp	r1, #13
 8005462:	d808      	bhi.n	8005476 <UI_ExecCmd+0x22>
 8005464:	e8df f001 	tbb	[pc, r1]
 8005468:	0e091419 	.word	0x0e091419
 800546c:	231e100e 	.word	0x231e100e
 8005470:	07070728 	.word	0x07070728
 8005474:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005476:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8005478:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 800547a:	4620      	mov	r0, r4
 800547c:	f7fd fdce 	bl	800301c <MCI_GetSTMState>
 8005480:	2806      	cmp	r0, #6
 8005482:	d01e      	beq.n	80054c2 <UI_ExecCmd+0x6e>
  bool retVal = true;
 8005484:	2001      	movs	r0, #1
}
 8005486:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8005488:	4620      	mov	r0, r4
 800548a:	f7fd fdc7 	bl	800301c <MCI_GetSTMState>
 800548e:	b120      	cbz	r0, 800549a <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8005490:	4620      	mov	r0, r4
 8005492:	f7fd fd7b 	bl	8002f8c <MCI_StopMotor>
  bool retVal = true;
 8005496:	2001      	movs	r0, #1
}
 8005498:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 800549a:	4620      	mov	r0, r4
 800549c:	f7fd fd6c 	bl	8002f78 <MCI_StartMotor>
  bool retVal = true;
 80054a0:	2001      	movs	r0, #1
}
 80054a2:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7fd fd75 	bl	8002f94 <MCI_FaultAcknowledged>
  bool retVal = true;
 80054aa:	2001      	movs	r0, #1
}
 80054ac:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7fd fd74 	bl	8002f9c <MCI_EncoderAlign>
  bool retVal = true;
 80054b4:	2001      	movs	r0, #1
}
 80054b6:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 80054b8:	4620      	mov	r0, r4
 80054ba:	f7fd fe4f 	bl	800315c <MCI_Clear_Iqdref>
  bool retVal = true;
 80054be:	2001      	movs	r0, #1
}
 80054c0:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7fd fdc4 	bl	8003050 <MCI_StopRamp>
  bool retVal = true;
 80054c8:	2001      	movs	r0, #1
}
 80054ca:	bd10      	pop	{r4, pc}

080054cc <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 80054cc:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80054ce:	4b07      	ldr	r3, [pc, #28]	; (80054ec <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80054d0:	7d04      	ldrb	r4, [r0, #20]
 80054d2:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 80054d4:	fb83 c301 	smull	ip, r3, r3, r1
 80054d8:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80054dc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80054e0:	b209      	sxth	r1, r1
 80054e2:	f7fd fd29 	bl	8002f38 <MCI_ExecSpeedRamp>
  return true;
}
 80054e6:	2001      	movs	r0, #1
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	bf00      	nop
 80054ec:	2aaaaaab 	.word	0x2aaaaaab

080054f0 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80054f0:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80054f2:	6883      	ldr	r3, [r0, #8]
 80054f4:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80054f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80054fa:	f7fd fd29 	bl	8002f50 <MCI_ExecTorqueRamp>
  return true;
}
 80054fe:	2001      	movs	r0, #1
 8005500:	bd10      	pop	{r4, pc}
 8005502:	bf00      	nop

08005504 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005506:	7d04      	ldrb	r4, [r0, #20]
 8005508:	68c0      	ldr	r0, [r0, #12]
 800550a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800550e:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8005510:	b19c      	cbz	r4, 800553a <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8005512:	4620      	mov	r0, r4
 8005514:	461e      	mov	r6, r3
 8005516:	4617      	mov	r7, r2
 8005518:	460d      	mov	r5, r1
 800551a:	f006 f8cf 	bl	800b6bc <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800551e:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8005520:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8005522:	4620      	mov	r0, r4
 8005524:	f006 f8d0 	bl	800b6c8 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005528:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800552a:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800552c:	4620      	mov	r0, r4
 800552e:	f006 f8d3 	bl	800b6d8 <RUC_GetPhaseFinalTorque>
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8005536:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8005538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 800553a:	4620      	mov	r0, r4
}
 800553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800553e:	bf00      	nop

08005540 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8005540:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005542:	7d04      	ldrb	r4, [r0, #20]
 8005544:	68c0      	ldr	r0, [r0, #12]
{
 8005546:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005548:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 800554c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005550:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8005552:	9001      	str	r0, [sp, #4]
{
 8005554:	461d      	mov	r5, r3
 8005556:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8005558:	f006 f89e 	bl	800b698 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800555c:	9801      	ldr	r0, [sp, #4]
 800555e:	462a      	mov	r2, r5
 8005560:	4621      	mov	r1, r4
 8005562:	f006 f89f 	bl	800b6a4 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8005566:	9801      	ldr	r0, [sp, #4]
 8005568:	4632      	mov	r2, r6
 800556a:	4621      	mov	r1, r4
 800556c:	f006 f8a0 	bl	800b6b0 <RUC_SetPhaseFinalTorque>
  return true;
}
 8005570:	2001      	movs	r0, #1
 8005572:	b002      	add	sp, #8
 8005574:	bd70      	pop	{r4, r5, r6, pc}
 8005576:	bf00      	nop

08005578 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8005578:	b410      	push	{r4}
 800557a:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800557c:	7d04      	ldrb	r4, [r0, #20]
 800557e:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8005580:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8005584:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8005588:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800558c:	9901      	ldr	r1, [sp, #4]
}
 800558e:	b003      	add	sp, #12
 8005590:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8005594:	f7fd bce6 	b.w	8002f64 <MCI_SetCurrentReferences>

08005598 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8005598:	2000      	movs	r0, #0
 800559a:	4770      	bx	lr

0800559c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800559c:	4a03      	ldr	r2, [pc, #12]	; (80055ac <SystemInit+0x10>)
 800559e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055aa:	4770      	bx	lr
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055b0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <HAL_InitTick+0x40>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	b90b      	cbnz	r3, 80055bc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80055b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80055bc:	490d      	ldr	r1, [pc, #52]	; (80055f4 <HAL_InitTick+0x44>)
 80055be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055c2:	4605      	mov	r5, r0
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	6808      	ldr	r0, [r1, #0]
 80055ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80055ce:	f000 ff97 	bl	8006500 <HAL_SYSTICK_Config>
 80055d2:	4604      	mov	r4, r0
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d1ef      	bne.n	80055b8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055d8:	2d0f      	cmp	r5, #15
 80055da:	d8ed      	bhi.n	80055b8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055dc:	4602      	mov	r2, r0
 80055de:	4629      	mov	r1, r5
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295
 80055e4:	f000 ff46 	bl	8006474 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <HAL_InitTick+0x48>)
 80055ea:	4620      	mov	r0, r4
 80055ec:	601d      	str	r5, [r3, #0]
}
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20000dbc 	.word	0x20000dbc
 80055f4:	20000db8 	.word	0x20000db8
 80055f8:	20000dc0 	.word	0x20000dc0

080055fc <HAL_Init>:
{
 80055fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055fe:	2003      	movs	r0, #3
 8005600:	f000 ff24 	bl	800644c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005604:	2004      	movs	r0, #4
 8005606:	f7ff ffd3 	bl	80055b0 <HAL_InitTick>
 800560a:	b110      	cbz	r0, 8005612 <HAL_Init+0x16>
    status = HAL_ERROR;
 800560c:	2401      	movs	r4, #1
}
 800560e:	4620      	mov	r0, r4
 8005610:	bd10      	pop	{r4, pc}
 8005612:	4604      	mov	r4, r0
    HAL_MspInit();
 8005614:	f7ff f8b4 	bl	8004780 <HAL_MspInit>
}
 8005618:	4620      	mov	r0, r4
 800561a:	bd10      	pop	{r4, pc}

0800561c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <HAL_IncTick+0x10>)
 800561e:	4904      	ldr	r1, [pc, #16]	; (8005630 <HAL_IncTick+0x14>)
 8005620:	6813      	ldr	r3, [r2, #0]
 8005622:	6809      	ldr	r1, [r1, #0]
 8005624:	440b      	add	r3, r1
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	2000157c 	.word	0x2000157c
 8005630:	20000dbc 	.word	0x20000dbc

08005634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <HAL_GetTick+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000157c 	.word	0x2000157c

08005640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005644:	f7ff fff6 	bl	8005634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005648:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800564a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800564c:	d002      	beq.n	8005654 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <HAL_Delay+0x20>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005654:	f7ff ffee 	bl	8005634 <HAL_GetTick>
 8005658:	1b43      	subs	r3, r0, r5
 800565a:	42a3      	cmp	r3, r4
 800565c:	d3fa      	bcc.n	8005654 <HAL_Delay+0x14>
  {
  }
}
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	20000dbc 	.word	0x20000dbc

08005664 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005664:	b570      	push	{r4, r5, r6, lr}
 8005666:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005668:	2300      	movs	r3, #0
 800566a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800566c:	2800      	cmp	r0, #0
 800566e:	f000 80cb 	beq.w	8005808 <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005672:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8005674:	4604      	mov	r4, r0
 8005676:	2d00      	cmp	r5, #0
 8005678:	f000 8094 	beq.w	80057a4 <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800567c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800567e:	6893      	ldr	r3, [r2, #8]
 8005680:	009d      	lsls	r5, r3, #2
 8005682:	d505      	bpl.n	8005690 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005684:	6893      	ldr	r3, [r2, #8]
 8005686:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800568a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800568e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005690:	6893      	ldr	r3, [r2, #8]
 8005692:	00d8      	lsls	r0, r3, #3
 8005694:	d419      	bmi.n	80056ca <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005696:	4b71      	ldr	r3, [pc, #452]	; (800585c <HAL_ADC_Init+0x1f8>)
 8005698:	4871      	ldr	r0, [pc, #452]	; (8005860 <HAL_ADC_Init+0x1fc>)
 800569a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800569c:	6891      	ldr	r1, [r2, #8]
 800569e:	099b      	lsrs	r3, r3, #6
 80056a0:	fba0 0303 	umull	r0, r3, r0, r3
 80056a4:	099b      	lsrs	r3, r3, #6
 80056a6:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80056aa:	3301      	adds	r3, #1
 80056ac:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80056b6:	6091      	str	r1, [r2, #8]
 80056b8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80056ba:	9b01      	ldr	r3, [sp, #4]
 80056bc:	b12b      	cbz	r3, 80056ca <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f9      	bne.n	80056be <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056ca:	6893      	ldr	r3, [r2, #8]
 80056cc:	00d9      	lsls	r1, r3, #3
 80056ce:	d45b      	bmi.n	8005788 <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056d2:	f043 0310 	orr.w	r3, r3, #16
 80056d6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056e0:	6893      	ldr	r3, [r2, #8]
 80056e2:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 80056e6:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056ec:	d153      	bne.n	8005796 <HAL_ADC_Init+0x132>
 80056ee:	06db      	lsls	r3, r3, #27
 80056f0:	d451      	bmi.n	8005796 <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056fe:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005700:	07de      	lsls	r6, r3, #31
 8005702:	d40e      	bmi.n	8005722 <HAL_ADC_Init+0xbe>
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <HAL_ADC_Init+0x200>)
 8005706:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800570a:	6889      	ldr	r1, [r1, #8]
 800570c:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800570e:	430b      	orrs	r3, r1
 8005710:	07dd      	lsls	r5, r3, #31
 8005712:	d406      	bmi.n	8005722 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005714:	4954      	ldr	r1, [pc, #336]	; (8005868 <HAL_ADC_Init+0x204>)
 8005716:	6865      	ldr	r5, [r4, #4]
 8005718:	688b      	ldr	r3, [r1, #8]
 800571a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800571e:	432b      	orrs	r3, r5
 8005720:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8005722:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8005726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005728:	432b      	orrs	r3, r5
 800572a:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800572c:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800572e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8005732:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005736:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005738:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800573c:	d05f      	beq.n	80057fe <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800573e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005740:	b121      	cbz	r1, 800574c <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8005742:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005744:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005748:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800574a:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800574c:	68d6      	ldr	r6, [r2, #12]
 800574e:	4947      	ldr	r1, [pc, #284]	; (800586c <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005750:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005752:	4031      	ands	r1, r6
 8005754:	430b      	orrs	r3, r1
 8005756:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005758:	6913      	ldr	r3, [r2, #16]
 800575a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800575e:	432b      	orrs	r3, r5
 8005760:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005762:	6893      	ldr	r3, [r2, #8]
 8005764:	0759      	lsls	r1, r3, #29
 8005766:	d523      	bpl.n	80057b0 <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005768:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800576a:	6963      	ldr	r3, [r4, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d04e      	beq.n	800580e <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005770:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005772:	f023 030f 	bic.w	r3, r3, #15
 8005776:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005778:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005784:	b002      	add	sp, #8
 8005786:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005788:	6893      	ldr	r3, [r2, #8]
 800578a:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800578e:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005792:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005794:	d0ab      	beq.n	80056ee <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005796:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005798:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800579a:	f043 0310 	orr.w	r3, r3, #16
 800579e:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80057a0:	b002      	add	sp, #8
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80057a4:	f7ff f80c 	bl	80047c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80057a8:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80057aa:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80057ae:	e765      	b.n	800567c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057b0:	6893      	ldr	r3, [r2, #8]
 80057b2:	071b      	lsls	r3, r3, #28
 80057b4:	d4d9      	bmi.n	800576a <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057b6:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057bc:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 80057be:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057c0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057c4:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057c6:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057ca:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057ce:	430b      	orrs	r3, r1
 80057d0:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057d2:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80057d4:	bb1d      	cbnz	r5, 800581e <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057da:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80057dc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80057e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80057ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d021      	beq.n	8005838 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80057f4:	6913      	ldr	r3, [r2, #16]
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	6113      	str	r3, [r2, #16]
 80057fc:	e7b5      	b.n	800576a <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005800:	3901      	subs	r1, #1
 8005802:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005806:	e79a      	b.n	800573e <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8005808:	2001      	movs	r0, #1
}
 800580a:	b002      	add	sp, #8
 800580c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800580e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005810:	6a23      	ldr	r3, [r4, #32]
 8005812:	f021 010f 	bic.w	r1, r1, #15
 8005816:	3b01      	subs	r3, #1
 8005818:	430b      	orrs	r3, r1
 800581a:	6313      	str	r3, [r2, #48]	; 0x30
 800581c:	e7ac      	b.n	8005778 <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800581e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005822:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005824:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005828:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800582c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005830:	432b      	orrs	r3, r5
 8005832:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005836:	e7d9      	b.n	80057ec <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005838:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 800583c:	6911      	ldr	r1, [r2, #16]
 800583e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005840:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8005844:	f021 0104 	bic.w	r1, r1, #4
 8005848:	4333      	orrs	r3, r6
 800584a:	430b      	orrs	r3, r1
 800584c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800584e:	432b      	orrs	r3, r5
 8005850:	430b      	orrs	r3, r1
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6113      	str	r3, [r2, #16]
 8005858:	e787      	b.n	800576a <HAL_ADC_Init+0x106>
 800585a:	bf00      	nop
 800585c:	20000db8 	.word	0x20000db8
 8005860:	053e2d63 	.word	0x053e2d63
 8005864:	50000100 	.word	0x50000100
 8005868:	50000300 	.word	0x50000300
 800586c:	fff04007 	.word	0xfff04007

08005870 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005870:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005872:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8005876:	b083      	sub	sp, #12
 8005878:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800587a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800587c:	f04f 0000 	mov.w	r0, #0
 8005880:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005882:	f000 8143 	beq.w	8005b0c <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005886:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005888:	2001      	movs	r0, #1
 800588a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800588e:	6894      	ldr	r4, [r2, #8]
 8005890:	0766      	lsls	r6, r4, #29
 8005892:	d43d      	bmi.n	8005910 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 8005894:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005898:	09a6      	lsrs	r6, r4, #6
 800589a:	f102 0530 	add.w	r5, r2, #48	; 0x30
 800589e:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80058a2:	f004 041f 	and.w	r4, r4, #31
 80058a6:	5977      	ldr	r7, [r6, r5]
 80058a8:	f04f 0c1f 	mov.w	ip, #31
 80058ac:	fa0c fc04 	lsl.w	ip, ip, r4
 80058b0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80058b4:	ea27 070c 	bic.w	r7, r7, ip
 80058b8:	40a0      	lsls	r0, r4
 80058ba:	4338      	orrs	r0, r7
 80058bc:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058be:	6890      	ldr	r0, [r2, #8]
 80058c0:	0745      	lsls	r5, r0, #29
 80058c2:	f140 809a 	bpl.w	80059fa <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058c6:	6890      	ldr	r0, [r2, #8]
 80058c8:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058ca:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058cc:	07e4      	lsls	r4, r4, #31
 80058ce:	d530      	bpl.n	8005932 <HAL_ADC_ConfigChannel+0xc2>
 80058d0:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80058d2:	49c2      	ldr	r1, [pc, #776]	; (8005bdc <HAL_ADC_ConfigChannel+0x36c>)
 80058d4:	420c      	tst	r4, r1
 80058d6:	d02a      	beq.n	800592e <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80058d8:	49c1      	ldr	r1, [pc, #772]	; (8005be0 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80058da:	4dc2      	ldr	r5, [pc, #776]	; (8005be4 <HAL_ADC_ConfigChannel+0x374>)
 80058dc:	6888      	ldr	r0, [r1, #8]
 80058de:	42ac      	cmp	r4, r5
 80058e0:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80058e4:	d01d      	beq.n	8005922 <HAL_ADC_ConfigChannel+0xb2>
 80058e6:	4dc0      	ldr	r5, [pc, #768]	; (8005be8 <HAL_ADC_ConfigChannel+0x378>)
 80058e8:	42ac      	cmp	r4, r5
 80058ea:	d01a      	beq.n	8005922 <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058ec:	4dbf      	ldr	r5, [pc, #764]	; (8005bec <HAL_ADC_ConfigChannel+0x37c>)
 80058ee:	42ac      	cmp	r4, r5
 80058f0:	f040 813e 	bne.w	8005b70 <HAL_ADC_ConfigChannel+0x300>
 80058f4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80058f8:	d119      	bne.n	800592e <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058fa:	4cbd      	ldr	r4, [pc, #756]	; (8005bf0 <HAL_ADC_ConfigChannel+0x380>)
 80058fc:	42a2      	cmp	r2, r4
 80058fe:	d016      	beq.n	800592e <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005900:	688a      	ldr	r2, [r1, #8]
 8005902:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005906:	4316      	orrs	r6, r2
 8005908:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 800590c:	608e      	str	r6, [r1, #8]
}
 800590e:	e003      	b.n	8005918 <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005912:	f042 0220 	orr.w	r2, r2, #32
 8005916:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800591e:	b003      	add	sp, #12
 8005920:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005922:	0201      	lsls	r1, r0, #8
 8005924:	d403      	bmi.n	800592e <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005926:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800592a:	f000 8102 	beq.w	8005b32 <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800592e:	2000      	movs	r0, #0
 8005930:	e7f2      	b.n	8005918 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005932:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005934:	4caf      	ldr	r4, [pc, #700]	; (8005bf4 <HAL_ADC_ConfigChannel+0x384>)
 8005936:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800593a:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8005c04 <HAL_ADC_ConfigChannel+0x394>
 800593e:	f006 0718 	and.w	r7, r6, #24
 8005942:	40fc      	lsrs	r4, r7
 8005944:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8005948:	4004      	ands	r4, r0
 800594a:	ea25 0507 	bic.w	r5, r5, r7
 800594e:	432c      	orrs	r4, r5
 8005950:	4566      	cmp	r6, ip
 8005952:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005956:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005958:	d1bb      	bne.n	80058d2 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800595a:	2f00      	cmp	r7, #0
 800595c:	f000 80d9 	beq.w	8005b12 <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005964:	2c00      	cmp	r4, #0
 8005966:	f000 8181 	beq.w	8005c6c <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800596a:	fab4 f484 	clz	r4, r4
 800596e:	3401      	adds	r4, #1
 8005970:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005974:	2c09      	cmp	r4, #9
 8005976:	f240 8179 	bls.w	8005c6c <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800597e:	2d00      	cmp	r5, #0
 8005980:	f000 81d7 	beq.w	8005d32 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8005984:	fab5 f585 	clz	r5, r5
 8005988:	3501      	adds	r5, #1
 800598a:	06ad      	lsls	r5, r5, #26
 800598c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005990:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005994:	2c00      	cmp	r4, #0
 8005996:	f000 81d1 	beq.w	8005d3c <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 800599a:	fab4 f484 	clz	r4, r4
 800599e:	3401      	adds	r4, #1
 80059a0:	f004 041f 	and.w	r4, r4, #31
 80059a4:	2601      	movs	r6, #1
 80059a6:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059aa:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f000 81c1 	beq.w	8005d38 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80059b6:	fab0 f480 	clz	r4, r0
 80059ba:	3401      	adds	r4, #1
 80059bc:	f004 041f 	and.w	r4, r4, #31
 80059c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80059c4:	f1a4 001e 	sub.w	r0, r4, #30
 80059c8:	0500      	lsls	r0, r0, #20
 80059ca:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059ce:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80059d0:	0dc7      	lsrs	r7, r0, #23
 80059d2:	f007 0704 	and.w	r7, r7, #4
 80059d6:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 80059da:	688e      	ldr	r6, [r1, #8]
 80059dc:	597c      	ldr	r4, [r7, r5]
 80059de:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80059e2:	f04f 0c07 	mov.w	ip, #7
 80059e6:	fa0c fc00 	lsl.w	ip, ip, r0
 80059ea:	ea24 040c 	bic.w	r4, r4, ip
 80059ee:	fa06 f000 	lsl.w	r0, r6, r0
 80059f2:	4320      	orrs	r0, r4
 80059f4:	5178      	str	r0, [r7, r5]
 80059f6:	680c      	ldr	r4, [r1, #0]
}
 80059f8:	e76b      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059fa:	6890      	ldr	r0, [r2, #8]
 80059fc:	f010 0008 	ands.w	r0, r0, #8
 8005a00:	f040 8082 	bne.w	8005b08 <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a04:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005a06:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a08:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005a0c:	f000 80c4 	beq.w	8005b98 <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a10:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8005a14:	f00c 0c04 	and.w	ip, ip, #4
 8005a18:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8005a1c:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005a20:	f85c 5007 	ldr.w	r5, [ip, r7]
 8005a24:	f04f 0e07 	mov.w	lr, #7
 8005a28:	fa0e fe06 	lsl.w	lr, lr, r6
 8005a2c:	40b4      	lsls	r4, r6
 8005a2e:	ea25 050e 	bic.w	r5, r5, lr
 8005a32:	432c      	orrs	r4, r5
 8005a34:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005a38:	6954      	ldr	r4, [r2, #20]
 8005a3a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005a3e:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a40:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a44:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a46:	f1bc 0f04 	cmp.w	ip, #4
 8005a4a:	d02e      	beq.n	8005aaa <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a4c:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8005a50:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8005c08 <HAL_ADC_ConfigChannel+0x398>
 8005a54:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8005a58:	680f      	ldr	r7, [r1, #0]
 8005a5a:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a5e:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8005a62:	694d      	ldr	r5, [r1, #20]
 8005a64:	0076      	lsls	r6, r6, #1
 8005a66:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8005a6a:	40b5      	lsls	r5, r6
 8005a6c:	ea47 070e 	orr.w	r7, r7, lr
 8005a70:	433d      	orrs	r5, r7
 8005a72:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8005a76:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a7a:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005a7c:	698e      	ldr	r6, [r1, #24]
 8005a7e:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8005a82:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8005a86:	4335      	orrs	r5, r6
 8005a88:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005a8c:	690e      	ldr	r6, [r1, #16]
 8005a8e:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8005a90:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8005a94:	2f01      	cmp	r7, #1
 8005a96:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8005a9a:	bf08      	it	eq
 8005a9c:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8005aa0:	4328      	orrs	r0, r5
 8005aa2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8005aa6:	6808      	ldr	r0, [r1, #0]
}
 8005aa8:	e70f      	b.n	80058ca <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005aaa:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005aac:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005aae:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005ab0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ab4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	f040 80a7 	bne.w	8005c0c <HAL_ADC_ConfigChannel+0x39c>
 8005abe:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ac2:	42ac      	cmp	r4, r5
 8005ac4:	f000 8119 	beq.w	8005cfa <HAL_ADC_ConfigChannel+0x48a>
 8005ac8:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005aca:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005acc:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ad0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005ad4:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8005ad8:	42ae      	cmp	r6, r5
 8005ada:	f000 80fc 	beq.w	8005cd6 <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ade:	68a6      	ldr	r6, [r4, #8]
 8005ae0:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ae2:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ae6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005aea:	42ae      	cmp	r6, r5
 8005aec:	f000 80e2 	beq.w	8005cb4 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005af0:	68e6      	ldr	r6, [r4, #12]
 8005af2:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005af4:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005af6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005afa:	42b5      	cmp	r5, r6
 8005afc:	f47f aee5 	bne.w	80058ca <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005b06:	6020      	str	r0, [r4, #0]
 8005b08:	6808      	ldr	r0, [r1, #0]
}
 8005b0a:	e6de      	b.n	80058ca <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8005b0c:	2002      	movs	r0, #2
}
 8005b0e:	b003      	add	sp, #12
 8005b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b12:	0e80      	lsrs	r0, r0, #26
 8005b14:	1c44      	adds	r4, r0, #1
 8005b16:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b1a:	2e09      	cmp	r6, #9
 8005b1c:	d850      	bhi.n	8005bc0 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b1e:	06a5      	lsls	r5, r4, #26
 8005b20:	2401      	movs	r4, #1
 8005b22:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005b26:	40b4      	lsls	r4, r6
 8005b28:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005b2c:	4325      	orrs	r5, r4
 8005b2e:	0500      	lsls	r0, r0, #20
 8005b30:	e74d      	b.n	80059ce <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b32:	482b      	ldr	r0, [pc, #172]	; (8005be0 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b34:	4a30      	ldr	r2, [pc, #192]	; (8005bf8 <HAL_ADC_ConfigChannel+0x388>)
 8005b36:	6881      	ldr	r1, [r0, #8]
 8005b38:	4c30      	ldr	r4, [pc, #192]	; (8005bfc <HAL_ADC_ConfigChannel+0x38c>)
 8005b3a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005b3e:	430e      	orrs	r6, r1
 8005b40:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8005b44:	6086      	str	r6, [r0, #8]
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	0992      	lsrs	r2, r2, #6
 8005b4a:	fba4 1202 	umull	r1, r2, r4, r2
 8005b4e:	0992      	lsrs	r2, r2, #6
 8005b50:	3201      	adds	r2, #1
 8005b52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005b56:	0092      	lsls	r2, r2, #2
 8005b58:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005b5a:	9a01      	ldr	r2, [sp, #4]
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	f43f aee6 	beq.w	800592e <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8005b62:	9a01      	ldr	r2, [sp, #4]
 8005b64:	3a01      	subs	r2, #1
 8005b66:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005b68:	9a01      	ldr	r2, [sp, #4]
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	d1f9      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x2f2>
 8005b6e:	e6de      	b.n	800592e <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b70:	4d23      	ldr	r5, [pc, #140]	; (8005c00 <HAL_ADC_ConfigChannel+0x390>)
 8005b72:	42ac      	cmp	r4, r5
 8005b74:	f47f aedb 	bne.w	800592e <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b78:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005b7c:	f47f aed7 	bne.w	800592e <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005b80:	4c1b      	ldr	r4, [pc, #108]	; (8005bf0 <HAL_ADC_ConfigChannel+0x380>)
 8005b82:	42a2      	cmp	r2, r4
 8005b84:	f43f aed3 	beq.w	800592e <HAL_ADC_ConfigChannel+0xbe>
 8005b88:	688a      	ldr	r2, [r1, #8]
 8005b8a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005b8e:	4332      	orrs	r2, r6
 8005b90:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005b94:	608a      	str	r2, [r1, #8]
}
 8005b96:	e6bf      	b.n	8005918 <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b98:	0df5      	lsrs	r5, r6, #23
 8005b9a:	f102 0414 	add.w	r4, r2, #20
 8005b9e:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8005ba2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005ba6:	592f      	ldr	r7, [r5, r4]
 8005ba8:	f04f 0c07 	mov.w	ip, #7
 8005bac:	fa0c f606 	lsl.w	r6, ip, r6
 8005bb0:	ea27 0606 	bic.w	r6, r7, r6
 8005bb4:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005bb6:	6954      	ldr	r4, [r2, #20]
 8005bb8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005bbc:	6154      	str	r4, [r2, #20]
}
 8005bbe:	e73f      	b.n	8005a40 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bc0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005bc4:	06a5      	lsls	r5, r4, #26
 8005bc6:	381e      	subs	r0, #30
 8005bc8:	2401      	movs	r4, #1
 8005bca:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005bce:	fa04 f606 	lsl.w	r6, r4, r6
 8005bd2:	0500      	lsls	r0, r0, #20
 8005bd4:	4335      	orrs	r5, r6
 8005bd6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005bda:	e6f8      	b.n	80059ce <HAL_ADC_ConfigChannel+0x15e>
 8005bdc:	80080000 	.word	0x80080000
 8005be0:	50000300 	.word	0x50000300
 8005be4:	c3210000 	.word	0xc3210000
 8005be8:	90c00010 	.word	0x90c00010
 8005bec:	c7520000 	.word	0xc7520000
 8005bf0:	50000100 	.word	0x50000100
 8005bf4:	0007ffff 	.word	0x0007ffff
 8005bf8:	20000db8 	.word	0x20000db8
 8005bfc:	053e2d63 	.word	0x053e2d63
 8005c00:	cb840000 	.word	0xcb840000
 8005c04:	407f0000 	.word	0x407f0000
 8005c08:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c10:	b11d      	cbz	r5, 8005c1a <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8005c12:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c16:	42ac      	cmp	r4, r5
 8005c18:	d06f      	beq.n	8005cfa <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c1a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005c1c:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c1e:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c22:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005c26:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c2e:	b11d      	cbz	r5, 8005c38 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8005c30:	fab5 f585 	clz	r5, r5
 8005c34:	42ae      	cmp	r6, r5
 8005c36:	d04e      	beq.n	8005cd6 <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c38:	68a5      	ldr	r5, [r4, #8]
 8005c3a:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c3c:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c40:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c44:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c48:	b11d      	cbz	r5, 8005c52 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8005c4a:	fab5 f585 	clz	r5, r5
 8005c4e:	42ae      	cmp	r6, r5
 8005c50:	d030      	beq.n	8005cb4 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c52:	68e5      	ldr	r5, [r4, #12]
 8005c54:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c56:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c58:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	f43f ae32 	beq.w	80058ca <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8005c66:	fab5 f585 	clz	r5, r5
 8005c6a:	e746      	b.n	8005afa <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	d058      	beq.n	8005d26 <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8005c74:	fab5 f585 	clz	r5, r5
 8005c78:	3501      	adds	r5, #1
 8005c7a:	06ad      	lsls	r5, r5, #26
 8005c7c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c80:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	d04c      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8005c88:	fab4 f484 	clz	r4, r4
 8005c8c:	3401      	adds	r4, #1
 8005c8e:	f004 041f 	and.w	r4, r4, #31
 8005c92:	2601      	movs	r6, #1
 8005c94:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c98:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d044      	beq.n	8005d2c <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8005ca2:	fab0 f480 	clz	r4, r0
 8005ca6:	3401      	adds	r4, #1
 8005ca8:	f004 041f 	and.w	r4, r4, #31
 8005cac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005cb0:	0520      	lsls	r0, r4, #20
 8005cb2:	e68c      	b.n	80059ce <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8005cb4:	6838      	ldr	r0, [r7, #0]
 8005cb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cba:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cbc:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005cbe:	68e5      	ldr	r5, [r4, #12]
 8005cc0:	68e6      	ldr	r6, [r4, #12]
 8005cc2:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005cc6:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cca:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	d1c5      	bne.n	8005c5c <HAL_ADC_ConfigChannel+0x3ec>
 8005cd0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005cd4:	e711      	b.n	8005afa <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 8005cd6:	6838      	ldr	r0, [r7, #0]
 8005cd8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cdc:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cde:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ce0:	68a5      	ldr	r5, [r4, #8]
 8005ce2:	68a6      	ldr	r6, [r4, #8]
 8005ce4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ce8:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cec:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cf0:	2d00      	cmp	r5, #0
 8005cf2:	d1a7      	bne.n	8005c44 <HAL_ADC_ConfigChannel+0x3d4>
 8005cf4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005cf8:	e6f7      	b.n	8005aea <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 8005cfa:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d02:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d06:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d08:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8005d0a:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005d0c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d10:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d14:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	d186      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x3ba>
 8005d1c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005d20:	e6da      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x268>
 8005d22:	2402      	movs	r4, #2
 8005d24:	e7b8      	b.n	8005c98 <HAL_ADC_ConfigChannel+0x428>
 8005d26:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005d2a:	e7a9      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x410>
 8005d2c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005d30:	e64d      	b.n	80059ce <HAL_ADC_ConfigChannel+0x15e>
 8005d32:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005d36:	e62b      	b.n	8005990 <HAL_ADC_ConfigChannel+0x120>
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <HAL_ADC_ConfigChannel+0x4d0>)
 8005d3a:	e648      	b.n	80059ce <HAL_ADC_ConfigChannel+0x15e>
 8005d3c:	2402      	movs	r4, #2
 8005d3e:	e634      	b.n	80059aa <HAL_ADC_ConfigChannel+0x13a>
 8005d40:	fe500000 	.word	0xfe500000

08005d44 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d48:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d4c:	6944      	ldr	r4, [r0, #20]
{
 8005d4e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8005d50:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005d52:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8005d54:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005d56:	f000 8187 	beq.w	8006068 <HAL_ADCEx_InjectedConfigChannel+0x324>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005d60:	b1e4      	cbz	r4, 8005d9c <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005d62:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d019      	beq.n	8005d9c <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005d68:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8005d6a:	2c00      	cmp	r4, #0
 8005d6c:	f040 8126 	bne.w	8005fbc <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005d70:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	f000 8248 	beq.w	8006208 <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005d78:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005d7a:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005d7e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005d80:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005d82:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005d84:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005d88:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005d8a:	f005 051f 	and.w	r5, r5, #31
 8005d8e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8005d92:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005d94:	4323      	orrs	r3, r4
 8005d96:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005d98:	6803      	ldr	r3, [r0, #0]
 8005d9a:	e005      	b.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005d9c:	684b      	ldr	r3, [r1, #4]
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	f000 80f8 	beq.w	8005f94 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8005da4:	680a      	ldr	r2, [r1, #0]
 8005da6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005da8:	689c      	ldr	r4, [r3, #8]
 8005daa:	0724      	lsls	r4, r4, #28
 8005dac:	d410      	bmi.n	8005dd0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005dae:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	f040 80e5 	bne.w	8005f82 <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005db8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8005dbc:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8005dc0:	68dd      	ldr	r5, [r3, #12]
 8005dc2:	0524      	lsls	r4, r4, #20
 8005dc4:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8005dc8:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8005dcc:	432c      	orrs	r4, r5
 8005dce:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dd0:	689c      	ldr	r4, [r3, #8]
 8005dd2:	f014 0404 	ands.w	r4, r4, #4
 8005dd6:	d060      	beq.n	8005e9a <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005dd8:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dda:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ddc:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dde:	07ef      	lsls	r7, r5, #31
 8005de0:	d414      	bmi.n	8005e0c <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005de2:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005de4:	4dbe      	ldr	r5, [pc, #760]	; (80060e0 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 8005de6:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005dea:	f8df e320 	ldr.w	lr, [pc, #800]	; 800610c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8005dee:	f007 0c18 	and.w	ip, r7, #24
 8005df2:	fa25 f50c 	lsr.w	r5, r5, ip
 8005df6:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8005dfa:	4015      	ands	r5, r2
 8005dfc:	ea26 060c 	bic.w	r6, r6, ip
 8005e00:	4335      	orrs	r5, r6
 8005e02:	4577      	cmp	r7, lr
 8005e04:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 8005e08:	f000 80fd 	beq.w	8006006 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005e0c:	49b5      	ldr	r1, [pc, #724]	; (80060e4 <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 8005e0e:	420a      	tst	r2, r1
 8005e10:	d019      	beq.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005e12:	4db5      	ldr	r5, [pc, #724]	; (80060e8 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005e14:	4eb5      	ldr	r6, [pc, #724]	; (80060ec <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 8005e16:	68a9      	ldr	r1, [r5, #8]
 8005e18:	42b2      	cmp	r2, r6
 8005e1a:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8005e1e:	d019      	beq.n	8005e54 <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005e20:	4eb3      	ldr	r6, [pc, #716]	; (80060f0 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 8005e22:	42b2      	cmp	r2, r6
 8005e24:	d016      	beq.n	8005e54 <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005e26:	4eb3      	ldr	r6, [pc, #716]	; (80060f4 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8005e28:	42b2      	cmp	r2, r6
 8005e2a:	f040 8126 	bne.w	800607a <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e2e:	01ce      	lsls	r6, r1, #7
 8005e30:	d409      	bmi.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e32:	4ab1      	ldr	r2, [pc, #708]	; (80060f8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d006      	beq.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005e38:	68ab      	ldr	r3, [r5, #8]
 8005e3a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005e3e:	431f      	orrs	r7, r3
 8005e40:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8005e44:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e46:	2300      	movs	r3, #0
 8005e48:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	b002      	add	sp, #8
 8005e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e54:	020a      	lsls	r2, r1, #8
 8005e56:	d4f6      	bmi.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e5c:	d1f3      	bne.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
 8005e5e:	4aa2      	ldr	r2, [pc, #648]	; (80060e8 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005e60:	49a6      	ldr	r1, [pc, #664]	; (80060fc <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8005e62:	6893      	ldr	r3, [r2, #8]
 8005e64:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005e68:	431f      	orrs	r7, r3
 8005e6a:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8005e6e:	6097      	str	r7, [r2, #8]
 8005e70:	680b      	ldr	r3, [r1, #0]
 8005e72:	4aa3      	ldr	r2, [pc, #652]	; (8006100 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8005e74:	099b      	lsrs	r3, r3, #6
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	099b      	lsrs	r3, r3, #6
 8005e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	3318      	adds	r3, #24
 8005e84:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0dc      	beq.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 8005e8c:	9b01      	ldr	r3, [sp, #4]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f9      	bne.n	8005e8c <HAL_ADCEx_InjectedConfigChannel+0x148>
 8005e98:	e7d5      	b.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e9a:	689d      	ldr	r5, [r3, #8]
 8005e9c:	f015 0508 	ands.w	r5, r5, #8
 8005ea0:	d19c      	bne.n	8005ddc <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005ea2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	f040 809f 	bne.w	8005fe8 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005eaa:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005eae:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005eb0:	68dc      	ldr	r4, [r3, #12]
 8005eb2:	bf0c      	ite	eq
 8005eb4:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005eb8:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8005ebc:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ebe:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005ec0:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8005ec4:	2e01      	cmp	r6, #1
 8005ec6:	f000 80ff 	beq.w	80060c8 <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005eca:	691e      	ldr	r6, [r3, #16]
 8005ecc:	f026 0602 	bic.w	r6, r6, #2
 8005ed0:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005ed2:	688e      	ldr	r6, [r1, #8]
 8005ed4:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8005ed8:	f000 80e2 	beq.w	80060a0 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005edc:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8005ee0:	f00e 0e04 	and.w	lr, lr, #4
 8005ee4:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8005ee8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005eec:	f85e 700c 	ldr.w	r7, [lr, ip]
 8005ef0:	f04f 0807 	mov.w	r8, #7
 8005ef4:	fa08 f802 	lsl.w	r8, r8, r2
 8005ef8:	4096      	lsls	r6, r2
 8005efa:	ea27 0208 	bic.w	r2, r7, r8
 8005efe:	4316      	orrs	r6, r2
 8005f00:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f0a:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005f0c:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005f10:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005f12:	f1be 0f04 	cmp.w	lr, #4
 8005f16:	f000 80fd 	beq.w	8006114 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f1a:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8005f1e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8006110 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8005f22:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 8005f26:	ea06 0808 	and.w	r8, r6, r8
 8005f2a:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005f2c:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8005f30:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 8005f34:	694e      	ldr	r6, [r1, #20]
 8005f36:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005f3a:	fa06 f60c 	lsl.w	r6, r6, ip
 8005f3e:	ea47 0708 	orr.w	r7, r7, r8
 8005f42:	433e      	orrs	r6, r7
 8005f44:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8005f48:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f4c:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8005f50:	698f      	ldr	r7, [r1, #24]
 8005f52:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8005f56:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8005f5a:	433e      	orrs	r6, r7
 8005f5c:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005f60:	690f      	ldr	r7, [r1, #16]
 8005f62:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 8005f66:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8005f6a:	f1bc 0f01 	cmp.w	ip, #1
 8005f6e:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8005f72:	bf08      	it	eq
 8005f74:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8005f78:	4335      	orrs	r5, r6
 8005f7a:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8005f7e:	680a      	ldr	r2, [r1, #0]
}
 8005f80:	e72c      	b.n	8005ddc <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8005f82:	68dc      	ldr	r4, [r3, #12]
 8005f84:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8005f88:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005f8c:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8005f90:	60dc      	str	r4, [r3, #12]
 8005f92:	e71d      	b.n	8005dd0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005f94:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005f96:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d06a      	beq.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005f9c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005f9e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005fa2:	0c55      	lsrs	r5, r2, #17
 8005fa4:	4323      	orrs	r3, r4
 8005fa6:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8005faa:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005fac:	6803      	ldr	r3, [r0, #0]
 8005fae:	4e55      	ldr	r6, [pc, #340]	; (8006104 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8005fb0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005fb2:	4034      	ands	r4, r6
 8005fb4:	432c      	orrs	r4, r5
 8005fb6:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005fb8:	6645      	str	r5, [r0, #100]	; 0x64
 8005fba:	e6f5      	b.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005fbc:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005fc0:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005fc2:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8005fc6:	f006 061f 	and.w	r6, r6, #31
 8005fca:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005fcc:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8005fce:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005fd0:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005fd4:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005fd6:	2c00      	cmp	r4, #0
 8005fd8:	f47f aee6 	bne.w	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005fdc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005fde:	4e49      	ldr	r6, [pc, #292]	; (8006104 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8005fe0:	4034      	ands	r4, r6
 8005fe2:	4325      	orrs	r5, r4
 8005fe4:	64dd      	str	r5, [r3, #76]	; 0x4c
 8005fe6:	e6df      	b.n	8005da8 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005fe8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005fea:	2c00      	cmp	r4, #0
 8005fec:	f43f af5d 	beq.w	8005eaa <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005ff0:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005ff4:	2c01      	cmp	r4, #1
 8005ff6:	f000 8154 	beq.w	80062a2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005ffa:	68dc      	ldr	r4, [r3, #12]
 8005ffc:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8006000:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006002:	462c      	mov	r4, r5
 8006004:	e75c      	b.n	8005ec0 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006006:	f1bc 0f00 	cmp.w	ip, #0
 800600a:	f040 80c7 	bne.w	800619c <HAL_ADCEx_InjectedConfigChannel+0x458>
 800600e:	0e92      	lsrs	r2, r2, #26
 8006010:	1c55      	adds	r5, r2, #1
 8006012:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006016:	2f09      	cmp	r7, #9
 8006018:	f240 80f9 	bls.w	800620e <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800601c:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8006020:	06ae      	lsls	r6, r5, #26
 8006022:	3a1e      	subs	r2, #30
 8006024:	2501      	movs	r5, #1
 8006026:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800602a:	fa05 f707 	lsl.w	r7, r5, r7
 800602e:	0512      	lsls	r2, r2, #20
 8006030:	433e      	orrs	r6, r7
 8006032:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006036:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006038:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 800603c:	f00c 0c04 	and.w	ip, ip, #4
 8006040:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8006044:	688e      	ldr	r6, [r1, #8]
 8006046:	f85c 5007 	ldr.w	r5, [ip, r7]
 800604a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800604e:	f04f 0e07 	mov.w	lr, #7
 8006052:	fa0e fe02 	lsl.w	lr, lr, r2
 8006056:	ea25 050e 	bic.w	r5, r5, lr
 800605a:	fa06 f202 	lsl.w	r2, r6, r2
 800605e:	432a      	orrs	r2, r5
 8006060:	f84c 2007 	str.w	r2, [ip, r7]
 8006064:	680a      	ldr	r2, [r1, #0]
}
 8006066:	e6d1      	b.n	8005e0c <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8006068:	2402      	movs	r4, #2
}
 800606a:	4620      	mov	r0, r4
 800606c:	b002      	add	sp, #8
 800606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8006072:	0c55      	lsrs	r5, r2, #17
 8006074:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8006078:	e798      	b.n	8005fac <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800607a:	4e23      	ldr	r6, [pc, #140]	; (8006108 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 800607c:	42b2      	cmp	r2, r6
 800607e:	f47f aee2 	bne.w	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006082:	0249      	lsls	r1, r1, #9
 8006084:	f53f aedf 	bmi.w	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 8006088:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	f43f aedb 	beq.w	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006090:	68ab      	ldr	r3, [r5, #8]
 8006092:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8006096:	431f      	orrs	r7, r3
 8006098:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 800609c:	60af      	str	r7, [r5, #8]
}
 800609e:	e6d2      	b.n	8005e46 <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80060a0:	0dd7      	lsrs	r7, r2, #23
 80060a2:	f007 0704 	and.w	r7, r7, #4
 80060a6:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80060aa:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 80060ae:	f04f 0c07 	mov.w	ip, #7
 80060b2:	59ba      	ldr	r2, [r7, r6]
 80060b4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80060b8:	ea22 020c 	bic.w	r2, r2, ip
 80060bc:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060c4:	615a      	str	r2, [r3, #20]
}
 80060c6:	e721      	b.n	8005f0c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 80060c8:	691f      	ldr	r7, [r3, #16]
 80060ca:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80060cc:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 80060d0:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80060d2:	433e      	orrs	r6, r7
 80060d4:	ea46 060c 	orr.w	r6, r6, ip
 80060d8:	f046 0602 	orr.w	r6, r6, #2
 80060dc:	611e      	str	r6, [r3, #16]
 80060de:	e6f8      	b.n	8005ed2 <HAL_ADCEx_InjectedConfigChannel+0x18e>
 80060e0:	0007ffff 	.word	0x0007ffff
 80060e4:	80080000 	.word	0x80080000
 80060e8:	50000300 	.word	0x50000300
 80060ec:	c3210000 	.word	0xc3210000
 80060f0:	90c00010 	.word	0x90c00010
 80060f4:	c7520000 	.word	0xc7520000
 80060f8:	50000100 	.word	0x50000100
 80060fc:	20000db8 	.word	0x20000db8
 8006100:	053e2d63 	.word	0x053e2d63
 8006104:	04104000 	.word	0x04104000
 8006108:	cb840000 	.word	0xcb840000
 800610c:	407f0000 	.word	0x407f0000
 8006110:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006114:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006116:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006118:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800611a:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800611e:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006122:	2e00      	cmp	r6, #0
 8006124:	d07d      	beq.n	8006222 <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800612a:	b126      	cbz	r6, 8006136 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 800612c:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006130:	42b5      	cmp	r5, r6
 8006132:	f000 80bb 	beq.w	80062ac <HAL_ADCEx_InjectedConfigChannel+0x568>
 8006136:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8006138:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800613a:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800613e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006142:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006146:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800614a:	b126      	cbz	r6, 8006156 <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 800614c:	fab6 f686 	clz	r6, r6
 8006150:	42b7      	cmp	r7, r6
 8006152:	f000 80c0 	beq.w	80062d6 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006156:	68ae      	ldr	r6, [r5, #8]
 8006158:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800615a:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800615e:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006162:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8006166:	b126      	cbz	r6, 8006172 <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 8006168:	fab6 f686 	clz	r6, r6
 800616c:	42b7      	cmp	r7, r6
 800616e:	f000 80c7 	beq.w	8006300 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006172:	68ee      	ldr	r6, [r5, #12]
 8006174:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006176:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006178:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617c:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8006180:	2e00      	cmp	r6, #0
 8006182:	f43f ae2b 	beq.w	8005ddc <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8006186:	fab6 f686 	clz	r6, r6
 800618a:	42be      	cmp	r6, r7
 800618c:	f47f ae26 	bne.w	8005ddc <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8006190:	682a      	ldr	r2, [r5, #0]
 8006192:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006196:	602a      	str	r2, [r5, #0]
 8006198:	680a      	ldr	r2, [r1, #0]
}
 800619a:	e61f      	b.n	8005ddc <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80061a0:	2d00      	cmp	r5, #0
 80061a2:	d05a      	beq.n	800625a <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 80061a4:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80061a8:	3501      	adds	r5, #1
 80061aa:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061ae:	2d09      	cmp	r5, #9
 80061b0:	d953      	bls.n	800625a <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	f000 80c2 	beq.w	8006340 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 80061bc:	fab6 f686 	clz	r6, r6
 80061c0:	3601      	adds	r6, #1
 80061c2:	06b6      	lsls	r6, r6, #26
 80061c4:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80061cc:	2d00      	cmp	r5, #0
 80061ce:	f000 80b5 	beq.w	800633c <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 80061d2:	fab5 f585 	clz	r5, r5
 80061d6:	3501      	adds	r5, #1
 80061d8:	f005 051f 	and.w	r5, r5, #31
 80061dc:	2701      	movs	r7, #1
 80061de:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80061e2:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	f000 80a5 	beq.w	8006338 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 80061ee:	fab2 f582 	clz	r5, r2
 80061f2:	3501      	adds	r5, #1
 80061f4:	f005 051f 	and.w	r5, r5, #31
 80061f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061fc:	f1a5 021e 	sub.w	r2, r5, #30
 8006200:	0512      	lsls	r2, r2, #20
 8006202:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006206:	e716      	b.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8006208:	3b01      	subs	r3, #1
 800620a:	461c      	mov	r4, r3
 800620c:	e5ba      	b.n	8005d84 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800620e:	06ae      	lsls	r6, r5, #26
 8006210:	2501      	movs	r5, #1
 8006212:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8006216:	40bd      	lsls	r5, r7
 8006218:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800621c:	432e      	orrs	r6, r5
 800621e:	0512      	lsls	r2, r2, #20
 8006220:	e709      	b.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006222:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006226:	42b5      	cmp	r5, r6
 8006228:	d040      	beq.n	80062ac <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800622a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800622c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800622e:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006232:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006236:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 800623a:	42b7      	cmp	r7, r6
 800623c:	d04b      	beq.n	80062d6 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800623e:	68af      	ldr	r7, [r5, #8]
 8006240:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006242:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006246:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800624a:	42b7      	cmp	r7, r6
 800624c:	d058      	beq.n	8006300 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800624e:	68ef      	ldr	r7, [r5, #12]
 8006250:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006252:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006254:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006258:	e797      	b.n	800618a <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800625e:	2e00      	cmp	r6, #0
 8006260:	d064      	beq.n	800632c <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8006262:	fab6 f686 	clz	r6, r6
 8006266:	3601      	adds	r6, #1
 8006268:	06b6      	lsls	r6, r6, #26
 800626a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8006272:	2d00      	cmp	r5, #0
 8006274:	d058      	beq.n	8006328 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 8006276:	fab5 f585 	clz	r5, r5
 800627a:	3501      	adds	r5, #1
 800627c:	f005 051f 	and.w	r5, r5, #31
 8006280:	2701      	movs	r7, #1
 8006282:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006286:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800628c:	2a00      	cmp	r2, #0
 800628e:	d050      	beq.n	8006332 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8006290:	fab2 f582 	clz	r5, r2
 8006294:	3501      	adds	r5, #1
 8006296:	f005 051f 	and.w	r5, r5, #31
 800629a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800629e:	052a      	lsls	r2, r5, #20
 80062a0:	e6c9      	b.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062a2:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80062a4:	f046 0620 	orr.w	r6, r6, #32
 80062a8:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80062aa:	e609      	b.n	8005ec0 <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 80062ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062ae:	461d      	mov	r5, r3
 80062b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062b4:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80062b8:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80062ba:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80062bc:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80062be:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062c2:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062c6:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	f47f af3b 	bne.w	8006146 <HAL_ADCEx_InjectedConfigChannel+0x402>
 80062d0:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80062d4:	e7b1      	b.n	800623a <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 80062d6:	f8dc 2000 	ldr.w	r2, [ip]
 80062da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062de:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80062e2:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80062e4:	68ae      	ldr	r6, [r5, #8]
 80062e6:	68af      	ldr	r7, [r5, #8]
 80062e8:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062ec:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062f0:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	f47f af34 	bne.w	8006162 <HAL_ADCEx_InjectedConfigChannel+0x41e>
 80062fa:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80062fe:	e7a4      	b.n	800624a <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 8006300:	f8dc 2000 	ldr.w	r2, [ip]
 8006304:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006308:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800630c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800630e:	68ee      	ldr	r6, [r5, #12]
 8006310:	68ef      	ldr	r7, [r5, #12]
 8006312:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006316:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800631a:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800631c:	2e00      	cmp	r6, #0
 800631e:	f47f af2d 	bne.w	800617c <HAL_ADCEx_InjectedConfigChannel+0x438>
 8006322:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8006326:	e730      	b.n	800618a <HAL_ADCEx_InjectedConfigChannel+0x446>
 8006328:	2502      	movs	r5, #2
 800632a:	e7ac      	b.n	8006286 <HAL_ADCEx_InjectedConfigChannel+0x542>
 800632c:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8006330:	e79d      	b.n	800626e <HAL_ADCEx_InjectedConfigChannel+0x52a>
 8006332:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8006336:	e67e      	b.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8006338:	4a03      	ldr	r2, [pc, #12]	; (8006348 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 800633a:	e67c      	b.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 800633c:	2502      	movs	r5, #2
 800633e:	e750      	b.n	80061e2 <HAL_ADCEx_InjectedConfigChannel+0x49e>
 8006340:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8006344:	e740      	b.n	80061c8 <HAL_ADCEx_InjectedConfigChannel+0x484>
 8006346:	bf00      	nop
 8006348:	fe500000 	.word	0xfe500000

0800634c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800634c:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800634e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006352:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8006354:	2a01      	cmp	r2, #1
{
 8006356:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8006358:	d04f      	beq.n	80063fa <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800635a:	6804      	ldr	r4, [r0, #0]
 800635c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800635e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006360:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006362:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006366:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8006368:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800636c:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800636e:	d008      	beq.n	8006382 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006370:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006376:	f041 0120 	orr.w	r1, r1, #32
 800637a:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800637c:	b01c      	add	sp, #112	; 0x70
 800637e:	bcf0      	pop	{r4, r5, r6, r7}
 8006380:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006382:	4a23      	ldr	r2, [pc, #140]	; (8006410 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006384:	6890      	ldr	r0, [r2, #8]
 8006386:	0740      	lsls	r0, r0, #29
 8006388:	d50b      	bpl.n	80063a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800638a:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800638c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800638e:	f042 0220 	orr.w	r2, r2, #32
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8006394:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800639c:	b01c      	add	sp, #112	; 0x70
 800639e:	bcf0      	pop	{r4, r5, r6, r7}
 80063a0:	4770      	bx	lr
 80063a2:	68a0      	ldr	r0, [r4, #8]
 80063a4:	0746      	lsls	r6, r0, #29
 80063a6:	d4f1      	bmi.n	800638c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80063a8:	b1d5      	cbz	r5, 80063e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80063aa:	4e1a      	ldr	r6, [pc, #104]	; (8006414 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80063ac:	684f      	ldr	r7, [r1, #4]
 80063ae:	68b0      	ldr	r0, [r6, #8]
 80063b0:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80063b4:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80063b8:	4338      	orrs	r0, r7
 80063ba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80063be:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063c0:	68a4      	ldr	r4, [r4, #8]
 80063c2:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063c4:	4320      	orrs	r0, r4
 80063c6:	f010 0001 	ands.w	r0, r0, #1
 80063ca:	d114      	bne.n	80063f6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 80063cc:	68b4      	ldr	r4, [r6, #8]
 80063ce:	688a      	ldr	r2, [r1, #8]
 80063d0:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 80063d4:	4315      	orrs	r5, r2
 80063d6:	f021 010f 	bic.w	r1, r1, #15
 80063da:	430d      	orrs	r5, r1
 80063dc:	60b5      	str	r5, [r6, #8]
 80063de:	e7da      	b.n	8006396 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80063e0:	4d0c      	ldr	r5, [pc, #48]	; (8006414 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80063e2:	68a9      	ldr	r1, [r5, #8]
 80063e4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80063e8:	60a9      	str	r1, [r5, #8]
 80063ea:	68a1      	ldr	r1, [r4, #8]
 80063ec:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063ee:	4308      	orrs	r0, r1
 80063f0:	f010 0001 	ands.w	r0, r0, #1
 80063f4:	d005      	beq.n	8006402 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063f6:	2000      	movs	r0, #0
 80063f8:	e7cd      	b.n	8006396 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80063fa:	2002      	movs	r0, #2
}
 80063fc:	b01c      	add	sp, #112	; 0x70
 80063fe:	bcf0      	pop	{r4, r5, r6, r7}
 8006400:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006402:	68aa      	ldr	r2, [r5, #8]
 8006404:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8006408:	f022 020f 	bic.w	r2, r2, #15
 800640c:	60aa      	str	r2, [r5, #8]
 800640e:	e7c2      	b.n	8006396 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006410:	50000100 	.word	0x50000100
 8006414:	50000300 	.word	0x50000300

08006418 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006418:	b1b0      	cbz	r0, 8006448 <HAL_CORDIC_Init+0x30>
{
 800641a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800641c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006420:	4604      	mov	r4, r0
 8006422:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006426:	b153      	cbz	r3, 800643e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006428:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800642a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800642c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800642e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8006432:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8006436:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800643a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 800643c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800643e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006442:	f7fe fa3d 	bl	80048c0 <HAL_CORDIC_MspInit>
 8006446:	e7ef      	b.n	8006428 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006448:	2001      	movs	r0, #1
}
 800644a:	4770      	bx	lr

0800644c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800644c:	4908      	ldr	r1, [pc, #32]	; (8006470 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800644e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006450:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006452:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006454:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006458:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800645a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800645e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006468:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800646c:	60cb      	str	r3, [r1, #12]
 800646e:	4770      	bx	lr
 8006470:	e000ed00 	.word	0xe000ed00

08006474 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <HAL_NVIC_SetPriority+0x68>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800647c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800647e:	f1c3 0507 	rsb	r5, r3, #7
 8006482:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006484:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006488:	bf28      	it	cs
 800648a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800648c:	2c06      	cmp	r4, #6
 800648e:	d919      	bls.n	80064c4 <HAL_NVIC_SetPriority+0x50>
 8006490:	3b03      	subs	r3, #3
 8006492:	f04f 34ff 	mov.w	r4, #4294967295
 8006496:	409c      	lsls	r4, r3
 8006498:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800649c:	f04f 34ff 	mov.w	r4, #4294967295
 80064a0:	40ac      	lsls	r4, r5
 80064a2:	ea21 0104 	bic.w	r1, r1, r4
 80064a6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80064a8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064aa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80064ae:	db0c      	blt.n	80064ca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80064b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80064b8:	0109      	lsls	r1, r1, #4
 80064ba:	b2c9      	uxtb	r1, r1
 80064bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80064c0:	bc30      	pop	{r4, r5}
 80064c2:	4770      	bx	lr
 80064c4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064c6:	4613      	mov	r3, r2
 80064c8:	e7e8      	b.n	800649c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <HAL_NVIC_SetPriority+0x6c>)
 80064cc:	f000 000f 	and.w	r0, r0, #15
 80064d0:	0109      	lsls	r1, r1, #4
 80064d2:	4403      	add	r3, r0
 80064d4:	b2c9      	uxtb	r1, r1
 80064d6:	7619      	strb	r1, [r3, #24]
 80064d8:	bc30      	pop	{r4, r5}
 80064da:	4770      	bx	lr
 80064dc:	e000ed00 	.word	0xe000ed00
 80064e0:	e000ecfc 	.word	0xe000ecfc

080064e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80064e4:	2800      	cmp	r0, #0
 80064e6:	db07      	blt.n	80064f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064e8:	4a04      	ldr	r2, [pc, #16]	; (80064fc <HAL_NVIC_EnableIRQ+0x18>)
 80064ea:	f000 011f 	and.w	r1, r0, #31
 80064ee:	2301      	movs	r3, #1
 80064f0:	0940      	lsrs	r0, r0, #5
 80064f2:	408b      	lsls	r3, r1
 80064f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	e000e100 	.word	0xe000e100

08006500 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006500:	3801      	subs	r0, #1
 8006502:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006506:	d20e      	bcs.n	8006526 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006508:	4b08      	ldr	r3, [pc, #32]	; (800652c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800650a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800650c:	4c08      	ldr	r4, [pc, #32]	; (8006530 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800650e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006510:	20f0      	movs	r0, #240	; 0xf0
 8006512:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006516:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006518:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800651a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800651c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800651e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006522:	6019      	str	r1, [r3, #0]
 8006524:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006526:	2001      	movs	r0, #1
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	e000e010 	.word	0xe000e010
 8006530:	e000ed00 	.word	0xe000ed00

08006534 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop

08006538 <HAL_SYSTICK_IRQHandler>:
{
 8006538:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800653a:	f7ff fffb 	bl	8006534 <HAL_SYSTICK_Callback>
}
 800653e:	bd08      	pop	{r3, pc}

08006540 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006540:	2800      	cmp	r0, #0
 8006542:	d07d      	beq.n	8006640 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006544:	4a3f      	ldr	r2, [pc, #252]	; (8006644 <HAL_DMA_Init+0x104>)
 8006546:	4603      	mov	r3, r0
 8006548:	6800      	ldr	r0, [r0, #0]
 800654a:	4290      	cmp	r0, r2
{
 800654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006550:	d962      	bls.n	8006618 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006552:	493d      	ldr	r1, [pc, #244]	; (8006648 <HAL_DMA_Init+0x108>)
 8006554:	4a3d      	ldr	r2, [pc, #244]	; (800664c <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8006556:	4c3e      	ldr	r4, [pc, #248]	; (8006650 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006558:	4401      	add	r1, r0
 800655a:	fba2 2101 	umull	r2, r1, r2, r1
 800655e:	0909      	lsrs	r1, r1, #4
 8006560:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006562:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006566:	691e      	ldr	r6, [r3, #16]
 8006568:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 800656a:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800656c:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800656e:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006570:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8006668 <HAL_DMA_Init+0x128>
 8006574:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006644 <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006578:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 800657a:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800657e:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 8006580:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006584:	4c31      	ldr	r4, [pc, #196]	; (800664c <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8006586:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800658a:	69de      	ldr	r6, [r3, #28]
 800658c:	6459      	str	r1, [r3, #68]	; 0x44
 800658e:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006590:	b2c5      	uxtb	r5, r0
 8006592:	3d08      	subs	r5, #8
 8006594:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8006598:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800659a:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800659c:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065a0:	4e2c      	ldr	r6, [pc, #176]	; (8006654 <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80065a2:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065a4:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065a8:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065ac:	4540      	cmp	r0, r8
 80065ae:	bf88      	it	hi
 80065b0:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 80065b2:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065b6:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065b8:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800666c <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 80065bc:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80065be:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065c2:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065c6:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065ca:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80065ce:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065d2:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065d4:	d029      	beq.n	800662a <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065d6:	6858      	ldr	r0, [r3, #4]
 80065d8:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065da:	3801      	subs	r0, #1
 80065dc:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065de:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065e2:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065e6:	d826      	bhi.n	8006636 <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065e8:	491b      	ldr	r1, [pc, #108]	; (8006658 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065ea:	481c      	ldr	r0, [pc, #112]	; (800665c <HAL_DMA_Init+0x11c>)
 80065ec:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065ee:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065f0:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065f2:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065f4:	f002 021f 	and.w	r2, r2, #31
 80065f8:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065fc:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065fe:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006600:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006602:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006604:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006606:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006608:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800660a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800660c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006618:	4911      	ldr	r1, [pc, #68]	; (8006660 <HAL_DMA_Init+0x120>)
 800661a:	4a0c      	ldr	r2, [pc, #48]	; (800664c <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 800661c:	4c11      	ldr	r4, [pc, #68]	; (8006664 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800661e:	4401      	add	r1, r0
 8006620:	fba2 2101 	umull	r2, r1, r2, r1
 8006624:	0909      	lsrs	r1, r1, #4
 8006626:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8006628:	e79b      	b.n	8006562 <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800662a:	2200      	movs	r2, #0
 800662c:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800662e:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006632:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 8006636:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8006638:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c
 800663e:	e7e2      	b.n	8006606 <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 8006640:	2001      	movs	r0, #1
}
 8006642:	4770      	bx	lr
 8006644:	40020407 	.word	0x40020407
 8006648:	bffdfbf8 	.word	0xbffdfbf8
 800664c:	cccccccd 	.word	0xcccccccd
 8006650:	40020400 	.word	0x40020400
 8006654:	40020800 	.word	0x40020800
 8006658:	1000823f 	.word	0x1000823f
 800665c:	40020940 	.word	0x40020940
 8006660:	bffdfff8 	.word	0xbffdfff8
 8006664:	40020000 	.word	0x40020000
 8006668:	40020820 	.word	0x40020820
 800666c:	40020880 	.word	0x40020880

08006670 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006670:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006674:	2a02      	cmp	r2, #2
{
 8006676:	4603      	mov	r3, r0
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006678:	d009      	beq.n	800668e <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 800667a:	2201      	movs	r2, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800667c:	2004      	movs	r0, #4
    __HAL_UNLOCK(hdma);
 800667e:	2100      	movs	r1, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006680:	63d8      	str	r0, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006682:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    status = HAL_ERROR;
 8006686:	4610      	mov	r0, r2
    hdma->State = HAL_DMA_STATE_READY;
 8006688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800668c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800668e:	6802      	ldr	r2, [r0, #0]
{
 8006690:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006692:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006694:	6810      	ldr	r0, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006696:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006698:	f020 000e 	bic.w	r0, r0, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800669c:	e9d3 4110 	ldrd	r4, r1, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066a0:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80066a2:	6810      	ldr	r0, [r2, #0]
 80066a4:	f020 0001 	bic.w	r0, r0, #1
 80066a8:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066aa:	682a      	ldr	r2, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80066ac:	6d58      	ldr	r0, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066b2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066b4:	f001 011f 	and.w	r1, r1, #31
 80066b8:	2201      	movs	r2, #1
 80066ba:	408a      	lsls	r2, r1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066be:	6062      	str	r2, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066c0:	6071      	str	r1, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80066c2:	b130      	cbz	r0, 80066d2 <HAL_DMA_Abort_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066c4:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066c6:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066ce:	6002      	str	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066d0:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 80066d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80066d4:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80066d6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80066d8:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80066dc:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80066e0:	b11a      	cbz	r2, 80066ea <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80066e2:	4618      	mov	r0, r3
 80066e4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80066e6:	4620      	mov	r0, r4
}
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80066ea:	4610      	mov	r0, r2
}
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	bf00      	nop

080066f0 <HAL_DMA_IRQHandler>:
{
 80066f0:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80066f2:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 80066f6:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066f8:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80066fa:	6805      	ldr	r5, [r0, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	409a      	lsls	r2, r3
 8006702:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8006704:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006706:	d00e      	beq.n	8006726 <HAL_DMA_IRQHandler+0x36>
 8006708:	f014 0f04 	tst.w	r4, #4
 800670c:	d00b      	beq.n	8006726 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800670e:	682b      	ldr	r3, [r5, #0]
 8006710:	069b      	lsls	r3, r3, #26
 8006712:	d403      	bmi.n	800671c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	f023 0304 	bic.w	r3, r3, #4
 800671a:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800671c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800671e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006720:	b1cb      	cbz	r3, 8006756 <HAL_DMA_IRQHandler+0x66>
}
 8006722:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006724:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006726:	2202      	movs	r2, #2
 8006728:	409a      	lsls	r2, r3
 800672a:	420a      	tst	r2, r1
 800672c:	d015      	beq.n	800675a <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 800672e:	f014 0f02 	tst.w	r4, #2
 8006732:	d012      	beq.n	800675a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	0699      	lsls	r1, r3, #26
 8006738:	d406      	bmi.n	8006748 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800673a:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800673c:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800673e:	f023 030a 	bic.w	r3, r3, #10
 8006742:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006744:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8006748:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800674a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800674c:	2200      	movs	r2, #0
 800674e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e5      	bne.n	8006722 <HAL_DMA_IRQHandler+0x32>
}
 8006756:	bc70      	pop	{r4, r5, r6}
 8006758:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800675a:	2208      	movs	r2, #8
 800675c:	409a      	lsls	r2, r3
 800675e:	420a      	tst	r2, r1
 8006760:	d0f9      	beq.n	8006756 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8006762:	0722      	lsls	r2, r4, #28
 8006764:	d5f7      	bpl.n	8006756 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006766:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006768:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800676a:	f022 020e 	bic.w	r2, r2, #14
 800676e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006770:	2201      	movs	r2, #1
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8006776:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006778:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800677a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800677c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006780:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8006784:	2900      	cmp	r1, #0
 8006786:	d0e6      	beq.n	8006756 <HAL_DMA_IRQHandler+0x66>
}
 8006788:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800678a:	4708      	bx	r1

0800678c <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800678c:	2800      	cmp	r0, #0
 800678e:	f000 80d8 	beq.w	8006942 <HAL_FDCAN_Init+0x1b6>
{
 8006792:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006794:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006798:	4604      	mov	r4, r0
 800679a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d071      	beq.n	8006886 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	6993      	ldr	r3, [r2, #24]
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067ac:	f7fe ff42 	bl	8005634 <HAL_GetTick>
 80067b0:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80067b2:	e004      	b.n	80067be <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80067b4:	f7fe ff3e 	bl	8005634 <HAL_GetTick>
 80067b8:	1b43      	subs	r3, r0, r5
 80067ba:	2b0a      	cmp	r3, #10
 80067bc:	d85a      	bhi.n	8006874 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	0711      	lsls	r1, r2, #28
 80067c4:	d4f6      	bmi.n	80067b4 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	f042 0201 	orr.w	r2, r2, #1
 80067cc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067ce:	f7fe ff31 	bl	8005634 <HAL_GetTick>
 80067d2:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80067d4:	e004      	b.n	80067e0 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80067d6:	f7fe ff2d 	bl	8005634 <HAL_GetTick>
 80067da:	1b40      	subs	r0, r0, r5
 80067dc:	280a      	cmp	r0, #10
 80067de:	d849      	bhi.n	8006874 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	699a      	ldr	r2, [r3, #24]
 80067e4:	07d2      	lsls	r2, r2, #31
 80067e6:	d5f6      	bpl.n	80067d6 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80067e8:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80067ea:	4959      	ldr	r1, [pc, #356]	; (8006950 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80067ec:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 80067f0:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80067f2:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80067f4:	f000 80a1 	beq.w	800693a <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80067f8:	7c22      	ldrb	r2, [r4, #16]
 80067fa:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	bf0c      	ite	eq
 8006800:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006804:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8006808:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800680a:	7c62      	ldrb	r2, [r4, #17]
 800680c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	bf0c      	ite	eq
 8006812:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006816:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 800681a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800681c:	7ca2      	ldrb	r2, [r4, #18]
 800681e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	bf0c      	ite	eq
 8006824:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006828:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800682c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800682e:	699a      	ldr	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006830:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006834:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006838:	432a      	orrs	r2, r5
 800683a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006842:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006844:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006846:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006848:	f022 0210 	bic.w	r2, r2, #16
 800684c:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800684e:	d01f      	beq.n	8006890 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006850:	b311      	cbz	r1, 8006898 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006852:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006854:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006856:	d076      	beq.n	8006946 <HAL_FDCAN_Init+0x1ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006858:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800685c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800685e:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006860:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006862:	f042 0210 	orr.w	r2, r2, #16
 8006866:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006868:	d116      	bne.n	8006898 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	f042 0220 	orr.w	r2, r2, #32
 8006870:	619a      	str	r2, [r3, #24]
 8006872:	e011      	b.n	8006898 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006874:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006876:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006878:	f043 0301 	orr.w	r3, r3, #1
 800687c:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800687e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006882:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006884:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006886:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 800688a:	f7fe f831 	bl	80048f0 <HAL_FDCAN_MspInit>
 800688e:	e788      	b.n	80067a2 <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	f042 0204 	orr.w	r2, r2, #4
 8006896:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006898:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800689c:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800689e:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068a0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068a2:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068a4:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80068a8:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068aa:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068ac:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80068ae:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80068b4:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068b8:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80068ba:	d10e      	bne.n	80068da <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068bc:	e9d4 520b 	ldrd	r5, r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80068c0:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80068c4:	3a01      	subs	r2, #1
 80068c6:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068c8:	3d01      	subs	r5, #1
 80068ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80068ce:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068d0:	4302      	orrs	r2, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80068d2:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80068d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80068d8:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80068da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80068de:	6be2      	ldr	r2, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80068e0:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80068e2:	481c      	ldr	r0, [pc, #112]	; (8006954 <HAL_FDCAN_Init+0x1c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80068e4:	4311      	orrs	r1, r2
 80068e6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80068ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80068ee:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80068f0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80068f4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80068f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80068fc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006900:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006902:	4d15      	ldr	r5, [pc, #84]	; (8006958 <HAL_FDCAN_Init+0x1cc>)
 8006904:	6465      	str	r5, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006906:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800690a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800690e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006912:	4912      	ldr	r1, [pc, #72]	; (800695c <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006914:	4b12      	ldr	r3, [pc, #72]	; (8006960 <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006916:	4a13      	ldr	r2, [pc, #76]	; (8006964 <HAL_FDCAN_Init+0x1d8>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006918:	3540      	adds	r5, #64	; 0x40
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800691a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800691e:	e9c4 5112 	strd	r5, r1, [r4, #72]	; 0x48

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006922:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006926:	2100      	movs	r1, #0
 8006928:	f004 ff06 	bl	800b738 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 800692c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800692e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006930:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006932:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8006936:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8006938:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800693a:	4a0b      	ldr	r2, [pc, #44]	; (8006968 <HAL_FDCAN_Init+0x1dc>)
 800693c:	6861      	ldr	r1, [r4, #4]
 800693e:	6011      	str	r1, [r2, #0]
 8006940:	e75a      	b.n	80067f8 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8006942:	2001      	movs	r0, #1
}
 8006944:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006946:	f042 0220 	orr.w	r2, r2, #32
 800694a:	619a      	str	r2, [r3, #24]
 800694c:	e7a4      	b.n	8006898 <HAL_FDCAN_Init+0x10c>
 800694e:	bf00      	nop
 8006950:	40006400 	.word	0x40006400
 8006954:	4000a400 	.word	0x4000a400
 8006958:	4000a470 	.word	0x4000a470
 800695c:	4000a588 	.word	0x4000a588
 8006960:	4000a678 	.word	0x4000a678
 8006964:	4000a660 	.word	0x4000a660
 8006968:	40006500 	.word	0x40006500

0800696c <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800696c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006970:	3b01      	subs	r3, #1
 8006972:	2b01      	cmp	r3, #1
 8006974:	d905      	bls.n	8006982 <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006976:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006978:	f043 0302 	orr.w	r3, r3, #2
 800697c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 800697e:	2001      	movs	r0, #1
}
 8006980:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006982:	680b      	ldr	r3, [r1, #0]
{
 8006984:	b470      	push	{r4, r5, r6}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006986:	b983      	cbnz	r3, 80069aa <HAL_FDCAN_ConfigFilter+0x3e>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006988:	e9d1 6202 	ldrd	r6, r2, [r1, #8]
 800698c:	694d      	ldr	r5, [r1, #20]
      *FilterAddress = FilterElementW1;
 800698e:	6c04      	ldr	r4, [r0, #64]	; 0x40
                         (sFilterConfig->FilterID1 << 16U)    |
 8006990:	6908      	ldr	r0, [r1, #16]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006992:	6849      	ldr	r1, [r1, #4]
                         (sFilterConfig->FilterConfig << 27U) |
 8006994:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006996:	ea42 7286 	orr.w	r2, r2, r6, lsl #30
 800699a:	432a      	orrs	r2, r5
 800699c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      *FilterAddress = FilterElementW1;
 80069a0:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    return HAL_OK;
 80069a4:	4618      	mov	r0, r3
}
 80069a6:	bc70      	pop	{r4, r5, r6}
 80069a8:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80069aa:	e9d1 6203 	ldrd	r6, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069ae:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80069b0:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80069b2:	688d      	ldr	r5, [r1, #8]
 80069b4:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069b6:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80069ba:	ea42 7246 	orr.w	r2, r2, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80069be:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
      *FilterAddress = FilterElementW1;
 80069c2:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 80069c6:	2000      	movs	r0, #0
}
 80069c8:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 80069ca:	604b      	str	r3, [r1, #4]
}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <HAL_FDCAN_ConfigGlobalFilter>:
{
 80069d0:	b470      	push	{r4, r5, r6}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80069d2:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
 80069d6:	2e01      	cmp	r6, #1
 80069d8:	d006      	beq.n	80069e8 <HAL_FDCAN_ConfigGlobalFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80069da:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80069dc:	f043 0304 	orr.w	r3, r3, #4
 80069e0:	6603      	str	r3, [r0, #96]	; 0x60
}
 80069e2:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 80069e4:	2001      	movs	r0, #1
}
 80069e6:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80069e8:	6806      	ldr	r6, [r0, #0]
 80069ea:	4615      	mov	r5, r2
 80069ec:	9a03      	ldr	r2, [sp, #12]
 80069ee:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 80069f2:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80069f6:	ea43 0285 	orr.w	r2, r3, r5, lsl #2
 80069fa:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80069fe:	f020 033f 	bic.w	r3, r0, #63	; 0x3f
 8006a02:	4319      	orrs	r1, r3
 8006a04:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
    return HAL_OK;
 8006a08:	2000      	movs	r0, #0
}
 8006a0a:	bc70      	pop	{r4, r5, r6}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop

08006a10 <HAL_FDCAN_ConfigTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a10:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d005      	beq.n	8006a24 <HAL_FDCAN_ConfigTxDelayCompensation+0x14>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a18:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a1a:	f043 0304 	orr.w	r3, r3, #4
 8006a1e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006a20:	2001      	movs	r0, #1
}
 8006a22:	4770      	bx	lr
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8006a24:	6803      	ldr	r3, [r0, #0]
 8006a26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006a2a:	649a      	str	r2, [r3, #72]	; 0x48
    return HAL_OK;
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	4770      	bx	lr

08006a30 <HAL_FDCAN_EnableTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a30:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d005      	beq.n	8006a44 <HAL_FDCAN_EnableTxDelayCompensation+0x14>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a38:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a3a:	f043 0304 	orr.w	r3, r3, #4
 8006a3e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006a40:	2001      	movs	r0, #1
}
 8006a42:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006a44:	6802      	ldr	r2, [r0, #0]
 8006a46:	68d3      	ldr	r3, [r2, #12]
 8006a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a4c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8006a4e:	2000      	movs	r0, #0
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop

08006a54 <HAL_FDCAN_EnableISOMode>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a54:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d005      	beq.n	8006a68 <HAL_FDCAN_EnableISOMode+0x14>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a5c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a5e:	f043 0304 	orr.w	r3, r3, #4
 8006a62:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006a64:	2001      	movs	r0, #1
}
 8006a66:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_NISO);
 8006a68:	6802      	ldr	r2, [r0, #0]
 8006a6a:	6993      	ldr	r3, [r2, #24]
 8006a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a70:	6193      	str	r3, [r2, #24]
    return HAL_OK;
 8006a72:	2000      	movs	r0, #0
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop

08006a78 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a78:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8006a7c:	2a01      	cmp	r2, #1
{
 8006a7e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a80:	d005      	beq.n	8006a8e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a82:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006a84:	f042 0204 	orr.w	r2, r2, #4
 8006a88:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006a8a:	2001      	movs	r0, #1
}
 8006a8c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a8e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a96:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a98:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006aa0:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006aa2:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop

08006aa8 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006aa8:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006aaa:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8006aae:	2802      	cmp	r0, #2
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
{
 8006ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006ab6:	681d      	ldr	r5, [r3, #0]
 8006ab8:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8006abc:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 8006ac0:	d00c      	beq.n	8006adc <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006ac2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8006aca:	2001      	movs	r0, #1
}
 8006acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ad2:	f042 0208 	orr.w	r2, r2, #8
 8006ad6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 8006ad8:	2001      	movs	r0, #1
}
 8006ada:	4770      	bx	lr
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006adc:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006ae0:	684c      	ldr	r4, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006ae2:	f3c6 4c01 	ubfx	ip, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006ae6:	2c00      	cmp	r4, #0
 8006ae8:	d13c      	bne.n	8006b64 <HAL_FDCAN_AddMessageToTxFifoQ+0xbc>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006aea:	690c      	ldr	r4, [r1, #16]
 8006aec:	688f      	ldr	r7, [r1, #8]
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006aee:	680e      	ldr	r6, [r1, #0]
                   FDCAN_STANDARD_ID |
 8006af0:	433c      	orrs	r4, r7
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006af2:	ea44 4886 	orr.w	r8, r4, r6, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006af6:	e9d1 7406 	ldrd	r7, r4, [r1, #24]
 8006afa:	694e      	ldr	r6, [r1, #20]
 8006afc:	433c      	orrs	r4, r7
 8006afe:	4334      	orrs	r4, r6
 8006b00:	68ce      	ldr	r6, [r1, #12]
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b02:	6d5f      	ldr	r7, [r3, #84]	; 0x54
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b04:	ea44 0e06 	orr.w	lr, r4, r6
 8006b08:	6a0c      	ldr	r4, [r1, #32]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b0a:	eb0c 06cc 	add.w	r6, ip, ip, lsl #3
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b0e:	ea4e 6404 	orr.w	r4, lr, r4, lsl #24
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b12:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006b16:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8006b1a:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b1e:	89cc      	ldrh	r4, [r1, #14]
 8006b20:	4e14      	ldr	r6, [pc, #80]	; (8006b74 <HAL_FDCAN_AddMessageToTxFifoQ+0xcc>)
 8006b22:	5d34      	ldrb	r4, [r6, r4]
 8006b24:	b1ac      	cbz	r4, 8006b52 <HAL_FDCAN_AddMessageToTxFifoQ+0xaa>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b26:	7894      	ldrb	r4, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b28:	f892 8003 	ldrb.w	r8, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006b2c:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b2e:	0424      	lsls	r4, r4, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b30:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b34:	f892 8001 	ldrb.w	r8, [r2, #1]
 8006b38:	433c      	orrs	r4, r7
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b3a:	eb00 070e 	add.w	r7, r0, lr
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b3e:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b42:	60bc      	str	r4, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b44:	89cc      	ldrh	r4, [r1, #14]
 8006b46:	5d34      	ldrb	r4, [r6, r4]
 8006b48:	3004      	adds	r0, #4
 8006b4a:	42a0      	cmp	r0, r4
 8006b4c:	f102 0204 	add.w	r2, r2, #4
 8006b50:	d3e9      	bcc.n	8006b26 <HAL_FDCAN_AddMessageToTxFifoQ+0x7e>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b52:	2201      	movs	r2, #1
 8006b54:	fa02 f20c 	lsl.w	r2, r2, ip
 8006b58:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
    return HAL_OK;
 8006b5c:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006b5e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                   pTxHeader->TxFrameType |
 8006b64:	690c      	ldr	r4, [r1, #16]
 8006b66:	680f      	ldr	r7, [r1, #0]
 8006b68:	688e      	ldr	r6, [r1, #8]
 8006b6a:	433c      	orrs	r4, r7
 8006b6c:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b6e:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
 8006b72:	e7c0      	b.n	8006af6 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006b74:	0800b85c 	.word	0x0800b85c

08006b78 <HAL_FDCAN_GetRxMessage>:
{
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006b7a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006b7e:	2c02      	cmp	r4, #2
 8006b80:	d10c      	bne.n	8006b9c <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b82:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006b84:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b86:	d00f      	beq.n	8006ba8 <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006b88:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 8006b8c:	0724      	lsls	r4, r4, #28
 8006b8e:	d15c      	bne.n	8006c4a <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b90:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b96:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006b98:	2001      	movs	r0, #1
}
 8006b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b9c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b9e:	f043 0308 	orr.w	r3, r3, #8
 8006ba2:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006ba4:	2001      	movs	r0, #1
}
 8006ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006ba8:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 8006bac:	0725      	lsls	r5, r4, #28
 8006bae:	d0ef      	beq.n	8006b90 <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bb0:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006bb4:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bb6:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006bba:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8006bbe:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006bc2:	683c      	ldr	r4, [r7, #0]
 8006bc4:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006bc8:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006bca:	2c00      	cmp	r4, #0
 8006bcc:	d14c      	bne.n	8006c68 <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006bce:	683c      	ldr	r4, [r7, #0]
 8006bd0:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006bd4:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006bd6:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006bd8:	f8df c094 	ldr.w	ip, [pc, #148]	; 8006c70 <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006bdc:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8006be0:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006be2:	683c      	ldr	r4, [r7, #0]
 8006be4:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8006be8:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006bea:	88bc      	ldrh	r4, [r7, #4]
 8006bec:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006bee:	687c      	ldr	r4, [r7, #4]
 8006bf0:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8006bf4:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006bf6:	687d      	ldr	r5, [r7, #4]
 8006bf8:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8006bfc:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006bfe:	687d      	ldr	r5, [r7, #4]
 8006c00:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8006c04:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006c06:	79fd      	ldrb	r5, [r7, #7]
 8006c08:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c0c:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006c0e:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006c10:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c12:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006c16:	0fed      	lsrs	r5, r5, #31
 8006c18:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c1a:	b174      	cbz	r4, 8006c3a <HAL_FDCAN_GetRxMessage+0xc2>
 8006c1c:	1e5d      	subs	r5, r3, #1
 8006c1e:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006c20:	4623      	mov	r3, r4
 8006c22:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8006c26:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c2a:	89d6      	ldrh	r6, [r2, #14]
 8006c2c:	3b06      	subs	r3, #6
 8006c2e:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8006c32:	1bdb      	subs	r3, r3, r7
 8006c34:	429e      	cmp	r6, r3
 8006c36:	d8f3      	bhi.n	8006c20 <HAL_FDCAN_GetRxMessage+0xa8>
 8006c38:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006c3a:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006c3c:	bf0c      	ite	eq
 8006c3e:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006c42:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 8006c46:	2000      	movs	r0, #0
}
 8006c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c4a:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c4e:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c50:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c54:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8006c58:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006c5c:	683c      	ldr	r4, [r7, #0]
 8006c5e:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006c62:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d0b2      	beq.n	8006bce <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006c68:	683c      	ldr	r4, [r7, #0]
 8006c6a:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8006c6e:	e7b1      	b.n	8006bd4 <HAL_FDCAN_GetRxMessage+0x5c>
 8006c70:	0800b85c 	.word	0x0800b85c

08006c74 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006c74:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d905      	bls.n	8006c8a <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c7e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006c80:	f043 0302 	orr.w	r3, r3, #2
 8006c84:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006c86:	2001      	movs	r0, #1
}
 8006c88:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c8a:	6803      	ldr	r3, [r0, #0]
{
 8006c8c:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c8e:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c92:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c94:	d03d      	beq.n	8006d12 <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006c96:	07c4      	lsls	r4, r0, #31
 8006c98:	d43b      	bmi.n	8006d12 <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006c9a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006c9c:	f044 0401 	orr.w	r4, r4, #1
 8006ca0:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006ca2:	b1cd      	cbz	r5, 8006cd8 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006ca4:	07c5      	lsls	r5, r0, #31
 8006ca6:	d517      	bpl.n	8006cd8 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006ca8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006caa:	f040 0002 	orr.w	r0, r0, #2
 8006cae:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006cb0:	060c      	lsls	r4, r1, #24
 8006cb2:	d504      	bpl.n	8006cbe <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006cb4:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006cb8:	4310      	orrs	r0, r2
 8006cba:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006cbe:	05c8      	lsls	r0, r1, #23
 8006cc0:	d504      	bpl.n	8006ccc <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006cc2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006cc6:	4302      	orrs	r2, r0
 8006cc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cce:	4311      	orrs	r1, r2
    return HAL_OK;
 8006cd0:	2000      	movs	r0, #0
}
 8006cd2:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006cd4:	6559      	str	r1, [r3, #84]	; 0x54
}
 8006cd6:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006cd8:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006cdc:	d001      	beq.n	8006ce2 <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006cde:	0784      	lsls	r4, r0, #30
 8006ce0:	d4e2      	bmi.n	8006ca8 <HAL_FDCAN_ActivateNotification+0x34>
 8006ce2:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006ce6:	d131      	bne.n	8006d4c <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006ce8:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006cec:	d001      	beq.n	8006cf2 <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006cee:	0704      	lsls	r4, r0, #28
 8006cf0:	d4da      	bmi.n	8006ca8 <HAL_FDCAN_ActivateNotification+0x34>
 8006cf2:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006cf6:	d001      	beq.n	8006cfc <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006cf8:	06c5      	lsls	r5, r0, #27
 8006cfa:	d4d5      	bmi.n	8006ca8 <HAL_FDCAN_ActivateNotification+0x34>
 8006cfc:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d00:	d001      	beq.n	8006d06 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006d02:	0684      	lsls	r4, r0, #26
 8006d04:	d4d0      	bmi.n	8006ca8 <HAL_FDCAN_ActivateNotification+0x34>
 8006d06:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006d0a:	d0d1      	beq.n	8006cb0 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006d0c:	0645      	lsls	r5, r0, #25
 8006d0e:	d5cf      	bpl.n	8006cb0 <HAL_FDCAN_ActivateNotification+0x3c>
 8006d10:	e7ca      	b.n	8006ca8 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006d12:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006d16:	d001      	beq.n	8006d1c <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006d18:	0784      	lsls	r4, r0, #30
 8006d1a:	d5be      	bpl.n	8006c9a <HAL_FDCAN_ActivateNotification+0x26>
 8006d1c:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006d20:	d117      	bne.n	8006d52 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d22:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006d26:	d001      	beq.n	8006d2c <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006d28:	0704      	lsls	r4, r0, #28
 8006d2a:	d5b6      	bpl.n	8006c9a <HAL_FDCAN_ActivateNotification+0x26>
 8006d2c:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006d30:	d001      	beq.n	8006d36 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006d32:	06c4      	lsls	r4, r0, #27
 8006d34:	d5b1      	bpl.n	8006c9a <HAL_FDCAN_ActivateNotification+0x26>
 8006d36:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d3a:	d001      	beq.n	8006d40 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006d3c:	0684      	lsls	r4, r0, #26
 8006d3e:	d5ac      	bpl.n	8006c9a <HAL_FDCAN_ActivateNotification+0x26>
 8006d40:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006d44:	d0ad      	beq.n	8006ca2 <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006d46:	0644      	lsls	r4, r0, #25
 8006d48:	d4ab      	bmi.n	8006ca2 <HAL_FDCAN_ActivateNotification+0x2e>
 8006d4a:	e7a6      	b.n	8006c9a <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006d4c:	0745      	lsls	r5, r0, #29
 8006d4e:	d4ab      	bmi.n	8006ca8 <HAL_FDCAN_ActivateNotification+0x34>
 8006d50:	e7ca      	b.n	8006ce8 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d52:	0744      	lsls	r4, r0, #29
 8006d54:	d5a1      	bpl.n	8006c9a <HAL_FDCAN_ActivateNotification+0x26>
 8006d56:	e7e4      	b.n	8006d22 <HAL_FDCAN_ActivateNotification+0xae>

08006d58 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop

08006d5c <HAL_FDCAN_RxFifo1Callback>:
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <HAL_FDCAN_TxBufferAbortCallback>:
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop

08006d6c <HAL_FDCAN_TimestampWraparoundCallback>:
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop

08006d74 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop

08006d78 <HAL_FDCAN_ErrorCallback>:
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop

08006d7c <HAL_FDCAN_ErrorStatusCallback>:
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop

08006d80 <HAL_FDCAN_IRQHandler>:
{
 8006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006d84:	6803      	ldr	r3, [r0, #0]
 8006d86:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d8a:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006d8e:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d92:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006d94:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006d98:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006d9a:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006d9e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006da0:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006da4:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006da6:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006daa:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8006dae:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006db2:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006db4:	0652      	lsls	r2, r2, #25
{
 8006db6:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006db8:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006dbc:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006dc0:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006dc4:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006dc8:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006dcc:	d502      	bpl.n	8006dd4 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dd0:	0651      	lsls	r1, r2, #25
 8006dd2:	d473      	bmi.n	8006ebc <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd6:	05d2      	lsls	r2, r2, #23
 8006dd8:	d502      	bpl.n	8006de0 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006dda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ddc:	05d0      	lsls	r0, r2, #23
 8006dde:	d45d      	bmi.n	8006e9c <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 8006de0:	f1b9 0f00 	cmp.w	r9, #0
 8006de4:	d14a      	bne.n	8006e7c <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 8006de6:	f1b8 0f00 	cmp.w	r8, #0
 8006dea:	d137      	bne.n	8006e5c <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	d13e      	bne.n	8006e6e <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006df2:	0591      	lsls	r1, r2, #22
 8006df4:	d502      	bpl.n	8006dfc <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006df8:	0592      	lsls	r2, r2, #22
 8006dfa:	d475      	bmi.n	8006ee8 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dfe:	0617      	lsls	r7, r2, #24
 8006e00:	d502      	bpl.n	8006e08 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006e02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e04:	0610      	lsls	r0, r2, #24
 8006e06:	d477      	bmi.n	8006ef8 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e0a:	0491      	lsls	r1, r2, #18
 8006e0c:	d502      	bpl.n	8006e14 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e10:	0492      	lsls	r2, r2, #18
 8006e12:	d459      	bmi.n	8006ec8 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e16:	0417      	lsls	r7, r2, #16
 8006e18:	d502      	bpl.n	8006e20 <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006e1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e1c:	0410      	lsls	r0, r2, #16
 8006e1e:	d45b      	bmi.n	8006ed8 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e22:	0451      	lsls	r1, r2, #17
 8006e24:	d509      	bpl.n	8006e3a <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006e26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e28:	0452      	lsls	r2, r2, #17
 8006e2a:	d506      	bpl.n	8006e3a <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006e2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e30:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006e32:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006e34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e38:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006e3a:	b94e      	cbnz	r6, 8006e50 <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 8006e3c:	b125      	cbz	r5, 8006e48 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006e42:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e44:	431d      	orrs	r5, r3
 8006e46:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006e48:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e4a:	bb13      	cbnz	r3, 8006e92 <HAL_FDCAN_IRQHandler+0x112>
}
 8006e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006e50:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006e52:	4631      	mov	r1, r6
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7ff ff91 	bl	8006d7c <HAL_FDCAN_ErrorStatusCallback>
 8006e5a:	e7ef      	b.n	8006e3c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e5c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006e60:	4641      	mov	r1, r8
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7fa f8b0 	bl	8000fc8 <HAL_FDCAN_RxFifo0Callback>
 8006e68:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	d0c0      	beq.n	8006df0 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e6e:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006e70:	4639      	mov	r1, r7
 8006e72:	4620      	mov	r0, r4
 8006e74:	f7ff ff72 	bl	8006d5c <HAL_FDCAN_RxFifo1Callback>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	e7b9      	b.n	8006df0 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e7c:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006e80:	4649      	mov	r1, r9
 8006e82:	4620      	mov	r0, r4
 8006e84:	f7ff ff68 	bl	8006d58 <HAL_FDCAN_TxEventFifoCallback>
 8006e88:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006e8a:	f1b8 0f00 	cmp.w	r8, #0
 8006e8e:	d0ad      	beq.n	8006dec <HAL_FDCAN_IRQHandler+0x6c>
 8006e90:	e7e4      	b.n	8006e5c <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff ff70 	bl	8006d78 <HAL_FDCAN_ErrorCallback>
}
 8006e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006e9c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006ea0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006ea8:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006eaa:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7ff ff5b 	bl	8006d68 <HAL_FDCAN_TxBufferAbortCallback>
 8006eb2:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006eb4:	f1b9 0f00 	cmp.w	r9, #0
 8006eb8:	d095      	beq.n	8006de6 <HAL_FDCAN_IRQHandler+0x66>
 8006eba:	e7df      	b.n	8006e7c <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006ebc:	2240      	movs	r2, #64	; 0x40
 8006ebe:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006ec0:	f7ff ff58 	bl	8006d74 <HAL_FDCAN_HighPriorityMessageCallback>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	e785      	b.n	8006dd4 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006ec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ecc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff ff4c 	bl	8006d6c <HAL_FDCAN_TimestampWraparoundCallback>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	e79d      	b.n	8006e14 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006ed8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006edc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7ff ff46 	bl	8006d70 <HAL_FDCAN_TimeoutOccurredCallback>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	e79b      	b.n	8006e20 <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff ff36 	bl	8006d60 <HAL_FDCAN_TxFifoEmptyCallback>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	e781      	b.n	8006dfc <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006ef8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006efc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006f00:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006f02:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006f04:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff ff2c 	bl	8006d64 <HAL_FDCAN_TxBufferCompleteCallback>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	e77b      	b.n	8006e08 <HAL_FDCAN_IRQHandler+0x88>

08006f10 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f14:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8007068 <HAL_FLASH_Program+0x158>
 8006f18:	f899 4000 	ldrb.w	r4, [r9]
 8006f1c:	2c01      	cmp	r4, #1
 8006f1e:	d04f      	beq.n	8006fc0 <HAL_FLASH_Program+0xb0>
 8006f20:	469b      	mov	fp, r3
 8006f22:	2301      	movs	r3, #1
 8006f24:	4682      	mov	sl, r0
 8006f26:	460f      	mov	r7, r1
 8006f28:	4690      	mov	r8, r2
 8006f2a:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006f2e:	f7fe fb81 	bl	8005634 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f32:	4e4c      	ldr	r6, [pc, #304]	; (8007064 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8006f34:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f36:	e005      	b.n	8006f44 <HAL_FLASH_Program+0x34>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006f38:	f7fe fb7c 	bl	8005634 <HAL_GetTick>
 8006f3c:	1b44      	subs	r4, r0, r5
 8006f3e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8006f42:	d837      	bhi.n	8006fb4 <HAL_FLASH_Program+0xa4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f44:	6933      	ldr	r3, [r6, #16]
 8006f46:	03d8      	lsls	r0, r3, #15
 8006f48:	d4f6      	bmi.n	8006f38 <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006f4a:	6934      	ldr	r4, [r6, #16]
 8006f4c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 8006f50:	401c      	ands	r4, r3
 8006f52:	d147      	bne.n	8006fe4 <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006f54:	6933      	ldr	r3, [r6, #16]
 8006f56:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006f58:	bf44      	itt	mi
 8006f5a:	2301      	movmi	r3, #1
 8006f5c:	6133      	strmi	r3, [r6, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f8c9 3004 	str.w	r3, [r9, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006f64:	f1ba 0f00 	cmp.w	sl, #0
 8006f68:	d02d      	beq.n	8006fc6 <HAL_FLASH_Program+0xb6>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006f6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d940      	bls.n	8006ff4 <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 8006f72:	f7fe fb5f 	bl	8005634 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f76:	4e3b      	ldr	r6, [pc, #236]	; (8007064 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8006f78:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f7a:	e005      	b.n	8006f88 <HAL_FLASH_Program+0x78>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006f7c:	f7fe fb5a 	bl	8005634 <HAL_GetTick>
 8006f80:	1b40      	subs	r0, r0, r5
 8006f82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006f86:	d82b      	bhi.n	8006fe0 <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f88:	6933      	ldr	r3, [r6, #16]
 8006f8a:	03db      	lsls	r3, r3, #15
 8006f8c:	d4f6      	bmi.n	8006f7c <HAL_FLASH_Program+0x6c>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006f8e:	6933      	ldr	r3, [r6, #16]
 8006f90:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8006f94:	4013      	ands	r3, r2
 8006f96:	d152      	bne.n	800703e <HAL_FLASH_Program+0x12e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006f98:	6930      	ldr	r0, [r6, #16]
 8006f9a:	f010 0001 	ands.w	r0, r0, #1
 8006f9e:	d002      	beq.n	8006fa6 <HAL_FLASH_Program+0x96>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	6132      	str	r2, [r6, #16]
    if (prog_bit != 0U)
 8006fa6:	b134      	cbz	r4, 8006fb6 <HAL_FLASH_Program+0xa6>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006fa8:	4a2e      	ldr	r2, [pc, #184]	; (8007064 <HAL_FLASH_Program+0x154>)
 8006faa:	6953      	ldr	r3, [r2, #20]
 8006fac:	ea23 0404 	bic.w	r4, r3, r4
 8006fb0:	6154      	str	r4, [r2, #20]
 8006fb2:	e000      	b.n	8006fb6 <HAL_FLASH_Program+0xa6>
 8006fb4:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f889 3000 	strb.w	r3, [r9]
}
 8006fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8006fc0:	2002      	movs	r0, #2
}
 8006fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006fc6:	4a27      	ldr	r2, [pc, #156]	; (8007064 <HAL_FLASH_Program+0x154>)
 8006fc8:	6953      	ldr	r3, [r2, #20]
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006fd0:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8006fd4:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8006fd8:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006fda:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 8006fde:	e7c8      	b.n	8006f72 <HAL_FLASH_Program+0x62>
      return HAL_TIMEOUT;
 8006fe0:	2003      	movs	r0, #3
 8006fe2:	e7e0      	b.n	8006fa6 <HAL_FLASH_Program+0x96>
    pFlash.ErrorCode |= error;
 8006fe4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006fe8:	4323      	orrs	r3, r4
 8006fea:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 8006fee:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8006ff0:	6134      	str	r4, [r6, #16]
  if (status == HAL_OK)
 8006ff2:	e7e0      	b.n	8006fb6 <HAL_FLASH_Program+0xa6>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006ff4:	4a1b      	ldr	r2, [pc, #108]	; (8007064 <HAL_FLASH_Program+0x154>)
 8006ff6:	6953      	ldr	r3, [r2, #20]
 8006ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ffc:	6153      	str	r3, [r2, #20]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006ffe:	4643      	mov	r3, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007000:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007004:	b672      	cpsid	i
 8007006:	1dfa      	adds	r2, r7, #7
 8007008:	eba2 0208 	sub.w	r2, r2, r8
 800700c:	2a0e      	cmp	r2, #14
 800700e:	d91e      	bls.n	800704e <HAL_FLASH_Program+0x13e>
 8007010:	ea47 0208 	orr.w	r2, r7, r8
 8007014:	0752      	lsls	r2, r2, #29
 8007016:	d11a      	bne.n	800704e <HAL_FLASH_Program+0x13e>
 8007018:	1aff      	subs	r7, r7, r3
 800701a:	f508 7880 	add.w	r8, r8, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800701e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007022:	18fa      	adds	r2, r7, r3
 8007024:	3308      	adds	r3, #8
 8007026:	4543      	cmp	r3, r8
 8007028:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 800702c:	d1f7      	bne.n	800701e <HAL_FLASH_Program+0x10e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702e:	f385 8810 	msr	PRIMASK, r5
        prog_bit = FLASH_CR_FSTPG;
 8007032:	f1ba 0f02 	cmp.w	sl, #2
 8007036:	bf08      	it	eq
 8007038:	f44f 2480 	moveq.w	r4, #262144	; 0x40000
 800703c:	e799      	b.n	8006f72 <HAL_FLASH_Program+0x62>
    pFlash.ErrorCode |= error;
 800703e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007042:	431a      	orrs	r2, r3
 8007044:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 8007048:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800704a:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 800704c:	e7ab      	b.n	8006fa6 <HAL_FLASH_Program+0x96>
 800704e:	eba7 0708 	sub.w	r7, r7, r8
 8007052:	f508 7880 	add.w	r8, r8, #256	; 0x100
    *dest_addr = *src_addr;
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	51da      	str	r2, [r3, r7]
    src_addr++;
 800705a:	3304      	adds	r3, #4
  while (row_index != 0U);
 800705c:	4598      	cmp	r8, r3
 800705e:	d1fa      	bne.n	8007056 <HAL_FLASH_Program+0x146>
 8007060:	e7e5      	b.n	800702e <HAL_FLASH_Program+0x11e>
 8007062:	bf00      	nop
 8007064:	40022000 	.word	0x40022000
 8007068:	20000dc4 	.word	0x20000dc4

0800706c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800706c:	4b06      	ldr	r3, [pc, #24]	; (8007088 <HAL_FLASH_Unlock+0x1c>)
 800706e:	695a      	ldr	r2, [r3, #20]
 8007070:	2a00      	cmp	r2, #0
 8007072:	db01      	blt.n	8007078 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8007074:	2000      	movs	r0, #0
}
 8007076:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007078:	4904      	ldr	r1, [pc, #16]	; (800708c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800707a:	4a05      	ldr	r2, [pc, #20]	; (8007090 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800707c:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800707e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007080:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8007082:	0fc0      	lsrs	r0, r0, #31
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40022000 	.word	0x40022000
 800708c:	45670123 	.word	0x45670123
 8007090:	cdef89ab 	.word	0xcdef89ab

08007094 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <HAL_FLASH_Lock+0x14>)
 8007096:	695a      	ldr	r2, [r3, #20]
 8007098:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800709c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800709e:	6958      	ldr	r0, [r3, #20]
}
 80070a0:	43c0      	mvns	r0, r0
 80070a2:	0fc0      	lsrs	r0, r0, #31
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40022000 	.word	0x40022000

080070ac <HAL_FLASH_GetError>:
  return pFlash.ErrorCode;
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <HAL_FLASH_GetError+0x8>)
 80070ae:	6858      	ldr	r0, [r3, #4]
}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000dc4 	.word	0x20000dc4

080070b8 <FLASH_WaitForLastOperation>:
{
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80070bc:	f7fe faba 	bl	8005634 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80070c0:	4e10      	ldr	r6, [pc, #64]	; (8007104 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 80070c2:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80070c4:	e004      	b.n	80070d0 <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 80070c6:	f7fe fab5 	bl	8005634 <HAL_GetTick>
 80070ca:	1b03      	subs	r3, r0, r4
 80070cc:	42ab      	cmp	r3, r5
 80070ce:	d80f      	bhi.n	80070f0 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80070d0:	6933      	ldr	r3, [r6, #16]
 80070d2:	03db      	lsls	r3, r3, #15
 80070d4:	d4f7      	bmi.n	80070c6 <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80070d6:	6933      	ldr	r3, [r6, #16]
 80070d8:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 80070dc:	4013      	ands	r3, r2
 80070de:	d109      	bne.n	80070f4 <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80070e0:	6930      	ldr	r0, [r6, #16]
 80070e2:	f010 0001 	ands.w	r0, r0, #1
 80070e6:	d002      	beq.n	80070ee <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80070e8:	2201      	movs	r2, #1
 80070ea:	4618      	mov	r0, r3
 80070ec:	6132      	str	r2, [r6, #16]
}
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80070f0:	2003      	movs	r0, #3
}
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 80070f4:	4904      	ldr	r1, [pc, #16]	; (8007108 <FLASH_WaitForLastOperation+0x50>)
 80070f6:	684a      	ldr	r2, [r1, #4]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 80070fc:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80070fe:	6133      	str	r3, [r6, #16]
}
 8007100:	bd70      	pop	{r4, r5, r6, pc}
 8007102:	bf00      	nop
 8007104:	40022000 	.word	0x40022000
 8007108:	20000dc4 	.word	0x20000dc4

0800710c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800710c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007110:	4e54      	ldr	r6, [pc, #336]	; (8007264 <HAL_FLASHEx_Erase+0x158>)
 8007112:	7833      	ldrb	r3, [r6, #0]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d077      	beq.n	8007208 <HAL_FLASHEx_Erase+0xfc>
 8007118:	4681      	mov	r9, r0
 800711a:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800711c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007120:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8007122:	7034      	strb	r4, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007124:	f7ff ffc8 	bl	80070b8 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8007128:	4605      	mov	r5, r0
 800712a:	b120      	cbz	r0, 8007136 <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800712c:	2300      	movs	r3, #0
 800712e:	7033      	strb	r3, [r6, #0]

  return status;
}
 8007130:	4628      	mov	r0, r5
 8007132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007136:	4b4c      	ldr	r3, [pc, #304]	; (8007268 <HAL_FLASHEx_Erase+0x15c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007138:	6070      	str	r0, [r6, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007140:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007142:	d165      	bne.n	8007210 <HAL_FLASHEx_Erase+0x104>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007144:	0552      	lsls	r2, r2, #21
 8007146:	f140 808a 	bpl.w	800725e <HAL_FLASHEx_Erase+0x152>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800714a:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800714c:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800714e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007152:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007154:	7731      	strb	r1, [r6, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007156:	f8d9 3000 	ldr.w	r3, [r9]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d065      	beq.n	800722a <HAL_FLASHEx_Erase+0x11e>
      *PageError = 0xFFFFFFFFU;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295
 8007162:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007164:	e9d9 8302 	ldrd	r8, r3, [r9, #8]
 8007168:	4443      	add	r3, r8
 800716a:	4598      	cmp	r8, r3
 800716c:	d226      	bcs.n	80071bc <HAL_FLASHEx_Erase+0xb0>
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800716e:	4c3e      	ldr	r4, [pc, #248]	; (8007268 <HAL_FLASHEx_Erase+0x15c>)
 8007170:	e006      	b.n	8007180 <HAL_FLASHEx_Erase+0x74>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007172:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8007176:	f108 0801 	add.w	r8, r8, #1
 800717a:	4413      	add	r3, r2
 800717c:	4543      	cmp	r3, r8
 800717e:	d91d      	bls.n	80071bc <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007180:	6962      	ldr	r2, [r4, #20]
 8007182:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007186:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 800718a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800718e:	4313      	orrs	r3, r2
 8007190:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007192:	6963      	ldr	r3, [r4, #20]
 8007194:	f043 0302 	orr.w	r3, r3, #2
 8007198:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800719a:	6963      	ldr	r3, [r4, #20]
 800719c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a0:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071a6:	f7ff ff87 	bl	80070b8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80071aa:	6963      	ldr	r3, [r4, #20]
 80071ac:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80071b0:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d0dd      	beq.n	8007172 <HAL_FLASHEx_Erase+0x66>
          *PageError = page_index;
 80071b6:	f8c7 8000 	str.w	r8, [r7]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071ba:	4605      	mov	r5, r0
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80071bc:	7f33      	ldrb	r3, [r6, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80071be:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80071c2:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80071c4:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80071c6:	d10c      	bne.n	80071e2 <HAL_FLASHEx_Erase+0xd6>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <HAL_FLASHEx_Erase+0x15c>)
 80071ca:	6811      	ldr	r1, [r2, #0]
 80071cc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	6811      	ldr	r1, [r2, #0]
 80071d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80071d8:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071da:	6811      	ldr	r1, [r2, #0]
 80071dc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80071e0:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80071e2:	3b02      	subs	r3, #2
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d80c      	bhi.n	8007202 <HAL_FLASHEx_Erase+0xf6>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80071e8:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <HAL_FLASHEx_Erase+0x15c>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071f8:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007202:	2300      	movs	r3, #0
 8007204:	7733      	strb	r3, [r6, #28]
}
 8007206:	e791      	b.n	800712c <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8007208:	2502      	movs	r5, #2
}
 800720a:	4628      	mov	r0, r5
 800720c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	0551      	lsls	r1, r2, #21
 800721a:	d51e      	bpl.n	800725a <HAL_FLASHEx_Erase+0x14e>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800721c:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800721e:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007224:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007226:	7731      	strb	r1, [r6, #28]
 8007228:	e795      	b.n	8007156 <HAL_FLASHEx_Erase+0x4a>
    if ((Banks & FLASH_BANK_1) != 0U)
 800722a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800722e:	07db      	lsls	r3, r3, #31
 8007230:	d504      	bpl.n	800723c <HAL_FLASHEx_Erase+0x130>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007232:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <HAL_FLASHEx_Erase+0x15c>)
 8007234:	6953      	ldr	r3, [r2, #20]
 8007236:	f043 0304 	orr.w	r3, r3, #4
 800723a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800723c:	4c0a      	ldr	r4, [pc, #40]	; (8007268 <HAL_FLASHEx_Erase+0x15c>)
 800723e:	6963      	ldr	r3, [r4, #20]
 8007240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007244:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800724a:	f7ff ff35 	bl	80070b8 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800724e:	6963      	ldr	r3, [r4, #20]
 8007250:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007254:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007256:	6163      	str	r3, [r4, #20]
 8007258:	e7b0      	b.n	80071bc <HAL_FLASHEx_Erase+0xb0>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800725a:	7734      	strb	r4, [r6, #28]
 800725c:	e77b      	b.n	8007156 <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800725e:	7730      	strb	r0, [r6, #28]
 8007260:	e779      	b.n	8007156 <HAL_FLASHEx_Erase+0x4a>
 8007262:	bf00      	nop
 8007264:	20000dc4 	.word	0x20000dc4
 8007268:	40022000 	.word	0x40022000

0800726c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007270:	680e      	ldr	r6, [r1, #0]
{
 8007272:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007274:	2e00      	cmp	r6, #0
 8007276:	f000 808b 	beq.w	8007390 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800727a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8007450 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 800727e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007280:	2201      	movs	r2, #1
 8007282:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8007286:	ea14 0c06 	ands.w	ip, r4, r6
 800728a:	d07c      	beq.n	8007386 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800728c:	684d      	ldr	r5, [r1, #4]
 800728e:	f025 0a10 	bic.w	sl, r5, #16
 8007292:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007296:	2a01      	cmp	r2, #1
 8007298:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800729c:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072a0:	d979      	bls.n	8007396 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 80072a2:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072a4:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072a6:	fa02 f208 	lsl.w	r2, r2, r8
 80072aa:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072ae:	fa04 f408 	lsl.w	r4, r4, r8
 80072b2:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80072b4:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072b6:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 80072b8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072ba:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072be:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072c0:	fa02 f208 	lsl.w	r2, r2, r8
 80072c4:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072c6:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 80072c8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072ca:	d55c      	bpl.n	8007386 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072cc:	4c5a      	ldr	r4, [pc, #360]	; (8007438 <HAL_GPIO_Init+0x1cc>)
 80072ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80072d0:	f042 0201 	orr.w	r2, r2, #1
 80072d4:	6622      	str	r2, [r4, #96]	; 0x60
 80072d6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80072d8:	f023 0403 	bic.w	r4, r3, #3
 80072dc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80072e0:	f002 0201 	and.w	r2, r2, #1
 80072e4:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80072e8:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072ea:	f003 0203 	and.w	r2, r3, #3
 80072ee:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072f2:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80072f4:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072f6:	220f      	movs	r2, #15
 80072f8:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072fc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007300:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007304:	d018      	beq.n	8007338 <HAL_GPIO_Init+0xcc>
 8007306:	4a4d      	ldr	r2, [pc, #308]	; (800743c <HAL_GPIO_Init+0x1d0>)
 8007308:	4290      	cmp	r0, r2
 800730a:	f000 8084 	beq.w	8007416 <HAL_GPIO_Init+0x1aa>
 800730e:	4a4c      	ldr	r2, [pc, #304]	; (8007440 <HAL_GPIO_Init+0x1d4>)
 8007310:	4290      	cmp	r0, r2
 8007312:	f000 8085 	beq.w	8007420 <HAL_GPIO_Init+0x1b4>
 8007316:	4a4b      	ldr	r2, [pc, #300]	; (8007444 <HAL_GPIO_Init+0x1d8>)
 8007318:	4290      	cmp	r0, r2
 800731a:	d076      	beq.n	800740a <HAL_GPIO_Init+0x19e>
 800731c:	4a4a      	ldr	r2, [pc, #296]	; (8007448 <HAL_GPIO_Init+0x1dc>)
 800731e:	4290      	cmp	r0, r2
 8007320:	f000 8084 	beq.w	800742c <HAL_GPIO_Init+0x1c0>
 8007324:	4a49      	ldr	r2, [pc, #292]	; (800744c <HAL_GPIO_Init+0x1e0>)
 8007326:	4290      	cmp	r0, r2
 8007328:	bf0c      	ite	eq
 800732a:	f04f 0805 	moveq.w	r8, #5
 800732e:	f04f 0806 	movne.w	r8, #6
 8007332:	fa08 f209 	lsl.w	r2, r8, r9
 8007336:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007338:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 800733a:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800733e:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007342:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8007344:	bf54      	ite	pl
 8007346:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8007348:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 800734c:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8007350:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007354:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8007356:	bf54      	ite	pl
 8007358:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800735a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 800735e:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007362:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007366:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8007368:	bf54      	ite	pl
 800736a:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800736c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8007370:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8007374:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007378:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 800737a:	bf54      	ite	pl
 800737c:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800737e:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 8007382:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8007386:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007388:	fa36 f203 	lsrs.w	r2, r6, r3
 800738c:	f47f af78 	bne.w	8007280 <HAL_GPIO_Init+0x14>
  }
}
 8007390:	b003      	add	sp, #12
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007396:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007398:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800739c:	fa02 f208 	lsl.w	r2, r2, r8
 80073a0:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073a4:	68cf      	ldr	r7, [r1, #12]
 80073a6:	fa07 f708 	lsl.w	r7, r7, r8
 80073aa:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80073ae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80073b0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073b2:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073b6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073ba:	465c      	mov	r4, fp
 80073bc:	409c      	lsls	r4, r3
 80073be:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 80073c0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80073c2:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073c4:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073c8:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073cc:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073d0:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073d4:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 80073d8:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073da:	f47f af6d 	bne.w	80072b8 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 80073de:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80073e2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073e6:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80073ea:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073ee:	0092      	lsls	r2, r2, #2
 80073f0:	f04f 0a0f 	mov.w	sl, #15
 80073f4:	fa0a fb02 	lsl.w	fp, sl, r2
 80073f8:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073fc:	690c      	ldr	r4, [r1, #16]
 80073fe:	4094      	lsls	r4, r2
 8007400:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8007404:	f8c9 4020 	str.w	r4, [r9, #32]
 8007408:	e756      	b.n	80072b8 <HAL_GPIO_Init+0x4c>
 800740a:	f04f 0803 	mov.w	r8, #3
 800740e:	fa08 f209 	lsl.w	r2, r8, r9
 8007412:	4317      	orrs	r7, r2
 8007414:	e790      	b.n	8007338 <HAL_GPIO_Init+0xcc>
 8007416:	2201      	movs	r2, #1
 8007418:	fa02 f209 	lsl.w	r2, r2, r9
 800741c:	4317      	orrs	r7, r2
 800741e:	e78b      	b.n	8007338 <HAL_GPIO_Init+0xcc>
 8007420:	f04f 0802 	mov.w	r8, #2
 8007424:	fa08 f209 	lsl.w	r2, r8, r9
 8007428:	4317      	orrs	r7, r2
 800742a:	e785      	b.n	8007338 <HAL_GPIO_Init+0xcc>
 800742c:	f04f 0804 	mov.w	r8, #4
 8007430:	fa08 f209 	lsl.w	r2, r8, r9
 8007434:	4317      	orrs	r7, r2
 8007436:	e77f      	b.n	8007338 <HAL_GPIO_Init+0xcc>
 8007438:	40021000 	.word	0x40021000
 800743c:	48000400 	.word	0x48000400
 8007440:	48000800 	.word	0x48000800
 8007444:	48000c00 	.word	0x48000c00
 8007448:	48001000 	.word	0x48001000
 800744c:	48001400 	.word	0x48001400
 8007450:	40010400 	.word	0x40010400

08007454 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007454:	6903      	ldr	r3, [r0, #16]
 8007456:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007458:	bf14      	ite	ne
 800745a:	2001      	movne	r0, #1
 800745c:	2000      	moveq	r0, #0
 800745e:	4770      	bx	lr

08007460 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007460:	b10a      	cbz	r2, 8007466 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007462:	6181      	str	r1, [r0, #24]
 8007464:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007466:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop

0800746c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800746c:	4a3b      	ldr	r2, [pc, #236]	; (800755c <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 800746e:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007470:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007472:	b968      	cbnz	r0, 8007490 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800747c:	d014      	beq.n	80074a8 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800747e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8007482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007486:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800748a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800748e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007490:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007494:	d02f      	beq.n	80074f6 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800749a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800749e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80074a0:	2000      	movs	r0, #0
}
 80074a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074a8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074ac:	4b2c      	ldr	r3, [pc, #176]	; (8007560 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80074ae:	482d      	ldr	r0, [pc, #180]	; (8007564 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074b0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80074b4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074b8:	6811      	ldr	r1, [r2, #0]
 80074ba:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80074be:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80074c2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074c4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074c6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074c8:	2332      	movs	r3, #50	; 0x32
 80074ca:	fb03 f304 	mul.w	r3, r3, r4
 80074ce:	fba0 0303 	umull	r0, r3, r0, r3
 80074d2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074d4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074d6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074da:	d506      	bpl.n	80074ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 80074dc:	e000      	b.n	80074e0 <HAL_PWREx_ControlVoltageScaling+0x74>
 80074de:	b123      	cbz	r3, 80074ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 80074e0:	6951      	ldr	r1, [r2, #20]
 80074e2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80074e4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074e8:	d4f9      	bmi.n	80074de <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074ea:	4b1c      	ldr	r3, [pc, #112]	; (800755c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	055c      	lsls	r4, r3, #21
 80074f0:	d5d6      	bpl.n	80074a0 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80074f2:	2003      	movs	r0, #3
 80074f4:	e7c9      	b.n	800748a <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074fe:	d009      	beq.n	8007514 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007500:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8007504:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800750c:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800750e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8007512:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007514:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007518:	4b11      	ldr	r3, [pc, #68]	; (8007560 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800751a:	4812      	ldr	r0, [pc, #72]	; (8007564 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800751c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007520:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007524:	6811      	ldr	r1, [r2, #0]
 8007526:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800752a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800752e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007530:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007532:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007534:	2332      	movs	r3, #50	; 0x32
 8007536:	fb03 f304 	mul.w	r3, r3, r4
 800753a:	fba0 0303 	umull	r0, r3, r0, r3
 800753e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007540:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007542:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007546:	d5d0      	bpl.n	80074ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 8007548:	e001      	b.n	800754e <HAL_PWREx_ControlVoltageScaling+0xe2>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0cd      	beq.n	80074ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 800754e:	6951      	ldr	r1, [r2, #20]
 8007550:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007552:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007556:	d5c8      	bpl.n	80074ea <HAL_PWREx_ControlVoltageScaling+0x7e>
 8007558:	e7f7      	b.n	800754a <HAL_PWREx_ControlVoltageScaling+0xde>
 800755a:	bf00      	nop
 800755c:	40007000 	.word	0x40007000
 8007560:	20000db8 	.word	0x20000db8
 8007564:	431bde83 	.word	0x431bde83

08007568 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007568:	4a02      	ldr	r2, [pc, #8]	; (8007574 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800756a:	6893      	ldr	r3, [r2, #8]
 800756c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007570:	6093      	str	r3, [r2, #8]
}
 8007572:	4770      	bx	lr
 8007574:	40007000 	.word	0x40007000

08007578 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007578:	2800      	cmp	r0, #0
 800757a:	f000 81c3 	beq.w	8007904 <HAL_RCC_OscConfig+0x38c>
{
 800757e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007582:	6803      	ldr	r3, [r0, #0]
 8007584:	07d9      	lsls	r1, r3, #31
{
 8007586:	b082      	sub	sp, #8
 8007588:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800758a:	d52d      	bpl.n	80075e8 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800758c:	49b5      	ldr	r1, [pc, #724]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 800758e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007590:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007592:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007596:	2a0c      	cmp	r2, #12
 8007598:	f000 810a 	beq.w	80077b0 <HAL_RCC_OscConfig+0x238>
 800759c:	2a08      	cmp	r2, #8
 800759e:	f000 810c 	beq.w	80077ba <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a8:	f000 8133 	beq.w	8007812 <HAL_RCC_OscConfig+0x29a>
 80075ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b0:	f000 819b 	beq.w	80078ea <HAL_RCC_OscConfig+0x372>
 80075b4:	4dab      	ldr	r5, [pc, #684]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 80075b6:	682a      	ldr	r2, [r5, #0]
 80075b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	682a      	ldr	r2, [r5, #0]
 80075c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075c4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f040 8128 	bne.w	800781c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075cc:	f7fe f832 	bl	8005634 <HAL_GetTick>
 80075d0:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075d2:	e005      	b.n	80075e0 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d4:	f7fe f82e 	bl	8005634 <HAL_GetTick>
 80075d8:	1b80      	subs	r0, r0, r6
 80075da:	2864      	cmp	r0, #100	; 0x64
 80075dc:	f200 813b 	bhi.w	8007856 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	039f      	lsls	r7, r3, #14
 80075e4:	d4f6      	bmi.n	80075d4 <HAL_RCC_OscConfig+0x5c>
 80075e6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e8:	079e      	lsls	r6, r3, #30
 80075ea:	d528      	bpl.n	800763e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ec:	4a9d      	ldr	r2, [pc, #628]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 80075ee:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075f0:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075f2:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80075f6:	2b0c      	cmp	r3, #12
 80075f8:	f000 80ec 	beq.w	80077d4 <HAL_RCC_OscConfig+0x25c>
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	f000 80ee 	beq.w	80077de <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007602:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007604:	4d97      	ldr	r5, [pc, #604]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 8116 	beq.w	8007838 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007612:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007614:	f7fe f80e 	bl	8005634 <HAL_GetTick>
 8007618:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800761a:	e005      	b.n	8007628 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800761c:	f7fe f80a 	bl	8005634 <HAL_GetTick>
 8007620:	1b80      	subs	r0, r0, r6
 8007622:	2802      	cmp	r0, #2
 8007624:	f200 8117 	bhi.w	8007856 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	0558      	lsls	r0, r3, #21
 800762c:	d5f6      	bpl.n	800761c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762e:	686b      	ldr	r3, [r5, #4]
 8007630:	6922      	ldr	r2, [r4, #16]
 8007632:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007636:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800763a:	606b      	str	r3, [r5, #4]
 800763c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800763e:	071a      	lsls	r2, r3, #28
 8007640:	d519      	bpl.n	8007676 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007642:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007644:	4d87      	ldr	r5, [pc, #540]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 809e 	beq.w	8007788 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 800764c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007658:	f7fd ffec 	bl	8005634 <HAL_GetTick>
 800765c:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800765e:	e005      	b.n	800766c <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007660:	f7fd ffe8 	bl	8005634 <HAL_GetTick>
 8007664:	1b80      	subs	r0, r0, r6
 8007666:	2802      	cmp	r0, #2
 8007668:	f200 80f5 	bhi.w	8007856 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800766c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007670:	079f      	lsls	r7, r3, #30
 8007672:	d5f5      	bpl.n	8007660 <HAL_RCC_OscConfig+0xe8>
 8007674:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007676:	0759      	lsls	r1, r3, #29
 8007678:	d541      	bpl.n	80076fe <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800767a:	4b7a      	ldr	r3, [pc, #488]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 800767c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800767e:	00d2      	lsls	r2, r2, #3
 8007680:	f100 80ed 	bmi.w	800785e <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007686:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800768a:	659a      	str	r2, [r3, #88]	; 0x58
 800768c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007696:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007698:	4e73      	ldr	r6, [pc, #460]	; (8007868 <HAL_RCC_OscConfig+0x2f0>)
 800769a:	6833      	ldr	r3, [r6, #0]
 800769c:	05df      	lsls	r7, r3, #23
 800769e:	f140 8113 	bpl.w	80078c8 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076a2:	68a3      	ldr	r3, [r4, #8]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	f000 80e3 	beq.w	8007870 <HAL_RCC_OscConfig+0x2f8>
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	f000 8169 	beq.w	8007982 <HAL_RCC_OscConfig+0x40a>
 80076b0:	4e6c      	ldr	r6, [pc, #432]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 80076b2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80076be:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80076c2:	f022 0204 	bic.w	r2, r2, #4
 80076c6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 80d7 	bne.w	800787e <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d0:	f7fd ffb0 	bl	8005634 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80076d8:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076da:	e005      	b.n	80076e8 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076dc:	f7fd ffaa 	bl	8005634 <HAL_GetTick>
 80076e0:	1bc0      	subs	r0, r0, r7
 80076e2:	4540      	cmp	r0, r8
 80076e4:	f200 80b7 	bhi.w	8007856 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076e8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80076ec:	079a      	lsls	r2, r3, #30
 80076ee:	d4f5      	bmi.n	80076dc <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076f0:	b125      	cbz	r5, 80076fc <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f2:	4a5c      	ldr	r2, [pc, #368]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 80076f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80076f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076fa:	6593      	str	r3, [r2, #88]	; 0x58
 80076fc:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076fe:	069b      	lsls	r3, r3, #26
 8007700:	d518      	bpl.n	8007734 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007702:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007704:	4d57      	ldr	r5, [pc, #348]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 80ca 	beq.w	80078a0 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 800770c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007718:	f7fd ff8c 	bl	8005634 <HAL_GetTick>
 800771c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800771e:	e005      	b.n	800772c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007720:	f7fd ff88 	bl	8005634 <HAL_GetTick>
 8007724:	1b80      	subs	r0, r0, r6
 8007726:	2802      	cmp	r0, #2
 8007728:	f200 8095 	bhi.w	8007856 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800772c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007730:	079f      	lsls	r7, r3, #30
 8007732:	d5f5      	bpl.n	8007720 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007734:	69e0      	ldr	r0, [r4, #28]
 8007736:	b318      	cbz	r0, 8007780 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007738:	4d4a      	ldr	r5, [pc, #296]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 800773a:	68ab      	ldr	r3, [r5, #8]
 800773c:	f003 030c 	and.w	r3, r3, #12
 8007740:	2b0c      	cmp	r3, #12
 8007742:	f000 812c 	beq.w	800799e <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007746:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007748:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800774a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800774e:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007750:	f000 80da 	beq.w	8007908 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007754:	68eb      	ldr	r3, [r5, #12]
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800775c:	68eb      	ldr	r3, [r5, #12]
 800775e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007766:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007768:	f7fd ff64 	bl	8005634 <HAL_GetTick>
 800776c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800776e:	e004      	b.n	800777a <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007770:	f7fd ff60 	bl	8005634 <HAL_GetTick>
 8007774:	1b00      	subs	r0, r0, r4
 8007776:	2802      	cmp	r0, #2
 8007778:	d86d      	bhi.n	8007856 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800777a:	682b      	ldr	r3, [r5, #0]
 800777c:	019b      	lsls	r3, r3, #6
 800777e:	d4f7      	bmi.n	8007770 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8007780:	2000      	movs	r0, #0
}
 8007782:	b002      	add	sp, #8
 8007784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007788:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007794:	f7fd ff4e 	bl	8005634 <HAL_GetTick>
 8007798:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800779a:	e004      	b.n	80077a6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800779c:	f7fd ff4a 	bl	8005634 <HAL_GetTick>
 80077a0:	1b80      	subs	r0, r0, r6
 80077a2:	2802      	cmp	r0, #2
 80077a4:	d857      	bhi.n	8007856 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077a6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80077aa:	0798      	lsls	r0, r3, #30
 80077ac:	d4f6      	bmi.n	800779c <HAL_RCC_OscConfig+0x224>
 80077ae:	e761      	b.n	8007674 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077b0:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80077b4:	2903      	cmp	r1, #3
 80077b6:	f47f aef4 	bne.w	80075a2 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ba:	4a2a      	ldr	r2, [pc, #168]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	0392      	lsls	r2, r2, #14
 80077c0:	f57f af12 	bpl.w	80075e8 <HAL_RCC_OscConfig+0x70>
 80077c4:	6862      	ldr	r2, [r4, #4]
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	f47f af0e 	bne.w	80075e8 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80077cc:	2001      	movs	r0, #1
}
 80077ce:	b002      	add	sp, #8
 80077d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d4:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80077d8:	2a02      	cmp	r2, #2
 80077da:	f47f af12 	bne.w	8007602 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077de:	4b21      	ldr	r3, [pc, #132]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	055d      	lsls	r5, r3, #21
 80077e4:	d502      	bpl.n	80077ec <HAL_RCC_OscConfig+0x274>
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0ef      	beq.n	80077cc <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ec:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 80077ee:	6920      	ldr	r0, [r4, #16]
 80077f0:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80077f2:	491e      	ldr	r1, [pc, #120]	; (800786c <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80077fc:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80077fe:	6808      	ldr	r0, [r1, #0]
 8007800:	f7fd fed6 	bl	80055b0 <HAL_InitTick>
 8007804:	2800      	cmp	r0, #0
 8007806:	d1e1      	bne.n	80077cc <HAL_RCC_OscConfig+0x254>
 8007808:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800780a:	071a      	lsls	r2, r3, #28
 800780c:	f57f af33 	bpl.w	8007676 <HAL_RCC_OscConfig+0xfe>
 8007810:	e717      	b.n	8007642 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007812:	4a14      	ldr	r2, [pc, #80]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
 8007814:	6813      	ldr	r3, [r2, #0]
 8007816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800781c:	f7fd ff0a 	bl	8005634 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007820:	4e10      	ldr	r6, [pc, #64]	; (8007864 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8007822:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007824:	e004      	b.n	8007830 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007826:	f7fd ff05 	bl	8005634 <HAL_GetTick>
 800782a:	1b40      	subs	r0, r0, r5
 800782c:	2864      	cmp	r0, #100	; 0x64
 800782e:	d812      	bhi.n	8007856 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	039b      	lsls	r3, r3, #14
 8007834:	d5f7      	bpl.n	8007826 <HAL_RCC_OscConfig+0x2ae>
 8007836:	e6d6      	b.n	80075e6 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007840:	f7fd fef8 	bl	8005634 <HAL_GetTick>
 8007844:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007846:	682b      	ldr	r3, [r5, #0]
 8007848:	0559      	lsls	r1, r3, #21
 800784a:	d5dd      	bpl.n	8007808 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800784c:	f7fd fef2 	bl	8005634 <HAL_GetTick>
 8007850:	1b80      	subs	r0, r0, r6
 8007852:	2802      	cmp	r0, #2
 8007854:	d9f7      	bls.n	8007846 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8007856:	2003      	movs	r0, #3
}
 8007858:	b002      	add	sp, #8
 800785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800785e:	2500      	movs	r5, #0
 8007860:	e71a      	b.n	8007698 <HAL_RCC_OscConfig+0x120>
 8007862:	bf00      	nop
 8007864:	40021000 	.word	0x40021000
 8007868:	40007000 	.word	0x40007000
 800786c:	20000dc0 	.word	0x20000dc0
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007870:	4a65      	ldr	r2, [pc, #404]	; (8007a08 <HAL_RCC_OscConfig+0x490>)
 8007872:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800787e:	f7fd fed9 	bl	8005634 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007882:	4f61      	ldr	r7, [pc, #388]	; (8007a08 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8007884:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007886:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800788a:	e004      	b.n	8007896 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800788c:	f7fd fed2 	bl	8005634 <HAL_GetTick>
 8007890:	1b80      	subs	r0, r0, r6
 8007892:	4540      	cmp	r0, r8
 8007894:	d8df      	bhi.n	8007856 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007896:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800789a:	0799      	lsls	r1, r3, #30
 800789c:	d5f6      	bpl.n	800788c <HAL_RCC_OscConfig+0x314>
 800789e:	e727      	b.n	80076f0 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80078a0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80078ac:	f7fd fec2 	bl	8005634 <HAL_GetTick>
 80078b0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078b2:	e004      	b.n	80078be <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078b4:	f7fd febe 	bl	8005634 <HAL_GetTick>
 80078b8:	1b80      	subs	r0, r0, r6
 80078ba:	2802      	cmp	r0, #2
 80078bc:	d8cb      	bhi.n	8007856 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078be:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80078c2:	0798      	lsls	r0, r3, #30
 80078c4:	d4f6      	bmi.n	80078b4 <HAL_RCC_OscConfig+0x33c>
 80078c6:	e735      	b.n	8007734 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078c8:	6833      	ldr	r3, [r6, #0]
 80078ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80078d0:	f7fd feb0 	bl	8005634 <HAL_GetTick>
 80078d4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078d6:	6833      	ldr	r3, [r6, #0]
 80078d8:	05d8      	lsls	r0, r3, #23
 80078da:	f53f aee2 	bmi.w	80076a2 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078de:	f7fd fea9 	bl	8005634 <HAL_GetTick>
 80078e2:	1bc0      	subs	r0, r0, r7
 80078e4:	2802      	cmp	r0, #2
 80078e6:	d9f6      	bls.n	80078d6 <HAL_RCC_OscConfig+0x35e>
 80078e8:	e7b5      	b.n	8007856 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078ee:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007900:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007902:	e78b      	b.n	800781c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007904:	2001      	movs	r0, #1
}
 8007906:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007908:	f7fd fe94 	bl	8005634 <HAL_GetTick>
 800790c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800790e:	e004      	b.n	800791a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007910:	f7fd fe90 	bl	8005634 <HAL_GetTick>
 8007914:	1b80      	subs	r0, r0, r6
 8007916:	2802      	cmp	r0, #2
 8007918:	d89d      	bhi.n	8007856 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	0199      	lsls	r1, r3, #6
 800791e:	d4f7      	bmi.n	8007910 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007920:	68e9      	ldr	r1, [r5, #12]
 8007922:	4b3a      	ldr	r3, [pc, #232]	; (8007a0c <HAL_RCC_OscConfig+0x494>)
 8007924:	6a22      	ldr	r2, [r4, #32]
 8007926:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800792a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800792c:	400b      	ands	r3, r1
 800792e:	4313      	orrs	r3, r2
 8007930:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8007934:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007938:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 800793c:	3801      	subs	r0, #1
 800793e:	0849      	lsrs	r1, r1, #1
 8007940:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007944:	3901      	subs	r1, #1
 8007946:	0852      	lsrs	r2, r2, #1
 8007948:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800794c:	3a01      	subs	r2, #1
 800794e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007952:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007954:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007956:	4e2c      	ldr	r6, [pc, #176]	; (8007a08 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8007958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800795c:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800795e:	68eb      	ldr	r3, [r5, #12]
 8007960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007964:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007966:	f7fd fe65 	bl	8005634 <HAL_GetTick>
 800796a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800796c:	e005      	b.n	800797a <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800796e:	f7fd fe61 	bl	8005634 <HAL_GetTick>
 8007972:	1b00      	subs	r0, r0, r4
 8007974:	2802      	cmp	r0, #2
 8007976:	f63f af6e 	bhi.w	8007856 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800797a:	6833      	ldr	r3, [r6, #0]
 800797c:	019a      	lsls	r2, r3, #6
 800797e:	d5f6      	bpl.n	800796e <HAL_RCC_OscConfig+0x3f6>
 8007980:	e6fe      	b.n	8007780 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007982:	4b21      	ldr	r3, [pc, #132]	; (8007a08 <HAL_RCC_OscConfig+0x490>)
 8007984:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007988:	f042 0204 	orr.w	r2, r2, #4
 800798c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007990:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007994:	f042 0201 	orr.w	r2, r2, #1
 8007998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800799c:	e76f      	b.n	800787e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800799e:	2801      	cmp	r0, #1
 80079a0:	f43f aeef 	beq.w	8007782 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80079a4:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a6:	6a22      	ldr	r2, [r4, #32]
 80079a8:	f003 0103 	and.w	r1, r3, #3
 80079ac:	4291      	cmp	r1, r2
 80079ae:	f47f af0d 	bne.w	80077cc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079b8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ba:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80079be:	f47f af05 	bne.w	80077cc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80079c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80079c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079c8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80079cc:	f47f aefe 	bne.w	80077cc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80079d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80079d6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80079da:	f47f aef7 	bne.w	80077cc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80079e0:	0852      	lsrs	r2, r2, #1
 80079e2:	3a01      	subs	r2, #1
 80079e4:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079e8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80079ec:	f47f aeee 	bne.w	80077cc <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80079f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80079f2:	0852      	lsrs	r2, r2, #1
 80079f4:	3a01      	subs	r2, #1
 80079f6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079fa:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80079fe:	bf14      	ite	ne
 8007a00:	2001      	movne	r0, #1
 8007a02:	2000      	moveq	r0, #0
 8007a04:	e6bd      	b.n	8007782 <HAL_RCC_OscConfig+0x20a>
 8007a06:	bf00      	nop
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	019f800c 	.word	0x019f800c

08007a10 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a10:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x54>)
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	f002 020c 	and.w	r2, r2, #12
 8007a18:	2a04      	cmp	r2, #4
 8007a1a:	d021      	beq.n	8007a60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	f002 020c 	and.w	r2, r2, #12
 8007a22:	2a08      	cmp	r2, #8
 8007a24:	d01c      	beq.n	8007a60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	f002 020c 	and.w	r2, r2, #12
 8007a2c:	2a0c      	cmp	r2, #12
 8007a2e:	d001      	beq.n	8007a34 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007a30:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007a32:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a34:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a36:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a38:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a3a:	f3c0 1003 	ubfx	r0, r0, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a3e:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a42:	1c42      	adds	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a44:	4808      	ldr	r0, [pc, #32]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x58>)
 8007a46:	fbb0 f0f2 	udiv	r0, r0, r2
 8007a4a:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x54>)
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007a56:	3301      	adds	r3, #1
 8007a58:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007a5a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007a5e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007a60:	4801      	ldr	r0, [pc, #4]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x58>)
 8007a62:	4770      	bx	lr
 8007a64:	40021000 	.word	0x40021000
 8007a68:	00f42400 	.word	0x00f42400

08007a6c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f000 80e9 	beq.w	8007c44 <HAL_RCC_ClockConfig+0x1d8>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a72:	4a7c      	ldr	r2, [pc, #496]	; (8007c64 <HAL_RCC_ClockConfig+0x1f8>)
{
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a78:	6813      	ldr	r3, [r2, #0]
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	428b      	cmp	r3, r1
 8007a80:	460d      	mov	r5, r1
 8007a82:	4604      	mov	r4, r0
 8007a84:	d20c      	bcs.n	8007aa0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a86:	6813      	ldr	r3, [r2, #0]
 8007a88:	f023 030f 	bic.w	r3, r3, #15
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a90:	6813      	ldr	r3, [r2, #0]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	428b      	cmp	r3, r1
 8007a98:	d002      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007a9a:	2001      	movs	r0, #1
}
 8007a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	07de      	lsls	r6, r3, #31
 8007aa4:	d563      	bpl.n	8007b6e <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aa6:	6862      	ldr	r2, [r4, #4]
 8007aa8:	2a03      	cmp	r2, #3
 8007aaa:	f000 809a 	beq.w	8007be2 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aae:	4b6e      	ldr	r3, [pc, #440]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ab0:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ab2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ab4:	f000 8091 	beq.w	8007bda <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ab8:	055b      	lsls	r3, r3, #21
 8007aba:	d5ee      	bpl.n	8007a9a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007abc:	f7ff ffa8 	bl	8007a10 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007ac0:	4b6a      	ldr	r3, [pc, #424]	; (8007c6c <HAL_RCC_ClockConfig+0x200>)
 8007ac2:	4298      	cmp	r0, r3
 8007ac4:	f200 80c0 	bhi.w	8007c48 <HAL_RCC_ClockConfig+0x1dc>
 8007ac8:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007aca:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ace:	4e66      	ldr	r6, [pc, #408]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007ad0:	68b3      	ldr	r3, [r6, #8]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8007ada:	f7fd fdab 	bl	8005634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ade:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007ae2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ae4:	e004      	b.n	8007af0 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ae6:	f7fd fda5 	bl	8005634 <HAL_GetTick>
 8007aea:	1bc0      	subs	r0, r0, r7
 8007aec:	4540      	cmp	r0, r8
 8007aee:	d871      	bhi.n	8007bd4 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007af0:	68b3      	ldr	r3, [r6, #8]
 8007af2:	6862      	ldr	r2, [r4, #4]
 8007af4:	f003 030c 	and.w	r3, r3, #12
 8007af8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007afc:	d1f3      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	079f      	lsls	r7, r3, #30
 8007b02:	d436      	bmi.n	8007b72 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8007b04:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8007b08:	d103      	bne.n	8007b12 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b0a:	68b3      	ldr	r3, [r6, #8]
 8007b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b10:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b12:	4e54      	ldr	r6, [pc, #336]	; (8007c64 <HAL_RCC_ClockConfig+0x1f8>)
 8007b14:	6833      	ldr	r3, [r6, #0]
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	42ab      	cmp	r3, r5
 8007b1c:	d846      	bhi.n	8007bac <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	075a      	lsls	r2, r3, #29
 8007b22:	d506      	bpl.n	8007b32 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b24:	4950      	ldr	r1, [pc, #320]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007b26:	68e0      	ldr	r0, [r4, #12]
 8007b28:	688a      	ldr	r2, [r1, #8]
 8007b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b2e:	4302      	orrs	r2, r0
 8007b30:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b32:	071b      	lsls	r3, r3, #28
 8007b34:	d507      	bpl.n	8007b46 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b36:	4a4c      	ldr	r2, [pc, #304]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007b38:	6921      	ldr	r1, [r4, #16]
 8007b3a:	6893      	ldr	r3, [r2, #8]
 8007b3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007b40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007b44:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b46:	f7ff ff63 	bl	8007a10 <HAL_RCC_GetSysClockFreq>
 8007b4a:	4a47      	ldr	r2, [pc, #284]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007b4c:	4c48      	ldr	r4, [pc, #288]	; (8007c70 <HAL_RCC_ClockConfig+0x204>)
 8007b4e:	6892      	ldr	r2, [r2, #8]
 8007b50:	4948      	ldr	r1, [pc, #288]	; (8007c74 <HAL_RCC_ClockConfig+0x208>)
 8007b52:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007b56:	4603      	mov	r3, r0
 8007b58:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007b5a:	4847      	ldr	r0, [pc, #284]	; (8007c78 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b5c:	f002 021f 	and.w	r2, r2, #31
 8007b60:	40d3      	lsrs	r3, r2
 8007b62:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007b64:	6800      	ldr	r0, [r0, #0]
}
 8007b66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007b6a:	f7fd bd21 	b.w	80055b0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b6e:	0798      	lsls	r0, r3, #30
 8007b70:	d5cf      	bpl.n	8007b12 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b72:	0758      	lsls	r0, r3, #29
 8007b74:	d504      	bpl.n	8007b80 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b76:	493c      	ldr	r1, [pc, #240]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007b78:	688a      	ldr	r2, [r1, #8]
 8007b7a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007b7e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b80:	0719      	lsls	r1, r3, #28
 8007b82:	d506      	bpl.n	8007b92 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b84:	4a38      	ldr	r2, [pc, #224]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007b86:	6893      	ldr	r3, [r2, #8]
 8007b88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b8c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b90:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b92:	4a35      	ldr	r2, [pc, #212]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007b94:	68a1      	ldr	r1, [r4, #8]
 8007b96:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b98:	4e32      	ldr	r6, [pc, #200]	; (8007c64 <HAL_RCC_ClockConfig+0x1f8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ba2:	6833      	ldr	r3, [r6, #0]
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	42ab      	cmp	r3, r5
 8007baa:	d9b8      	bls.n	8007b1e <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bac:	6833      	ldr	r3, [r6, #0]
 8007bae:	f023 030f 	bic.w	r3, r3, #15
 8007bb2:	432b      	orrs	r3, r5
 8007bb4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007bb6:	f7fd fd3d 	bl	8005634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007bbe:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bc0:	6833      	ldr	r3, [r6, #0]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	42ab      	cmp	r3, r5
 8007bc8:	d0a9      	beq.n	8007b1e <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bca:	f7fd fd33 	bl	8005634 <HAL_GetTick>
 8007bce:	1bc0      	subs	r0, r0, r7
 8007bd0:	4540      	cmp	r0, r8
 8007bd2:	d9f5      	bls.n	8007bc0 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8007bd4:	2003      	movs	r0, #3
}
 8007bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bda:	039a      	lsls	r2, r3, #14
 8007bdc:	f53f af6e 	bmi.w	8007abc <HAL_RCC_ClockConfig+0x50>
 8007be0:	e75b      	b.n	8007a9a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007be2:	4821      	ldr	r0, [pc, #132]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007be4:	6801      	ldr	r1, [r0, #0]
 8007be6:	0189      	lsls	r1, r1, #6
 8007be8:	f57f af57 	bpl.w	8007a9a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007bec:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007bee:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bf0:	68c0      	ldr	r0, [r0, #12]
      if(pllfreq > 80000000U)
 8007bf2:	4f1e      	ldr	r7, [pc, #120]	; (8007c6c <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007bf4:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8007bf8:	1c4e      	adds	r6, r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bfa:	4920      	ldr	r1, [pc, #128]	; (8007c7c <HAL_RCC_ClockConfig+0x210>)
 8007bfc:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c00:	4e19      	ldr	r6, [pc, #100]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c02:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007c06:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c0a:	68f0      	ldr	r0, [r6, #12]
 8007c0c:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8007c10:	3001      	adds	r0, #1
 8007c12:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8007c14:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8007c18:	42b9      	cmp	r1, r7
 8007c1a:	d920      	bls.n	8007c5e <HAL_RCC_ClockConfig+0x1f2>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c1c:	68b1      	ldr	r1, [r6, #8]
 8007c1e:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8007c22:	d005      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x1c4>
 8007c24:	f013 0902 	ands.w	r9, r3, #2
 8007c28:	f43f af51 	beq.w	8007ace <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c2c:	68a3      	ldr	r3, [r4, #8]
 8007c2e:	b9b3      	cbnz	r3, 8007c5e <HAL_RCC_ClockConfig+0x1f2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c30:	490d      	ldr	r1, [pc, #52]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007c32:	688b      	ldr	r3, [r1, #8]
 8007c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3c:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c3e:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007c42:	e744      	b.n	8007ace <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8007c44:	2001      	movs	r0, #1
}
 8007c46:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c48:	4a07      	ldr	r2, [pc, #28]	; (8007c68 <HAL_RCC_ClockConfig+0x1fc>)
 8007c4a:	6893      	ldr	r3, [r2, #8]
 8007c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c56:	6862      	ldr	r2, [r4, #4]
 8007c58:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007c5c:	e737      	b.n	8007ace <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007c5e:	f04f 0900 	mov.w	r9, #0
 8007c62:	e734      	b.n	8007ace <HAL_RCC_ClockConfig+0x62>
 8007c64:	40022000 	.word	0x40022000
 8007c68:	40021000 	.word	0x40021000
 8007c6c:	04c4b400 	.word	0x04c4b400
 8007c70:	0800b844 	.word	0x0800b844
 8007c74:	20000db8 	.word	0x20000db8
 8007c78:	20000dc0 	.word	0x20000dc0
 8007c7c:	00f42400 	.word	0x00f42400

08007c80 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8007c80:	4b01      	ldr	r3, [pc, #4]	; (8007c88 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000db8 	.word	0x20000db8

08007c8c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007c8c:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007c8e:	4a06      	ldr	r2, [pc, #24]	; (8007ca8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007c90:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007c92:	4906      	ldr	r1, [pc, #24]	; (8007cac <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007c94:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007c98:	6808      	ldr	r0, [r1, #0]
 8007c9a:	5cd3      	ldrb	r3, [r2, r3]
 8007c9c:	f003 031f 	and.w	r3, r3, #31
}
 8007ca0:	40d8      	lsrs	r0, r3
 8007ca2:	4770      	bx	lr
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	0800b854 	.word	0x0800b854
 8007cac:	20000db8 	.word	0x20000db8

08007cb0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cb0:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007cb2:	4a06      	ldr	r2, [pc, #24]	; (8007ccc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007cb6:	4906      	ldr	r1, [pc, #24]	; (8007cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cb8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007cbc:	6808      	ldr	r0, [r1, #0]
 8007cbe:	5cd3      	ldrb	r3, [r2, r3]
 8007cc0:	f003 031f 	and.w	r3, r3, #31
}
 8007cc4:	40d8      	lsrs	r0, r3
 8007cc6:	4770      	bx	lr
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	0800b854 	.word	0x0800b854
 8007cd0:	20000db8 	.word	0x20000db8

08007cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cd8:	6803      	ldr	r3, [r0, #0]
{
 8007cda:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cdc:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007ce0:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ce2:	d056      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ce4:	4b9f      	ldr	r3, [pc, #636]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007ce6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ce8:	00d5      	lsls	r5, r2, #3
 8007cea:	f140 810c 	bpl.w	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8007cee:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cf0:	4d9d      	ldr	r5, [pc, #628]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007cf2:	682b      	ldr	r3, [r5, #0]
 8007cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf8:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cfa:	f7fd fc9b 	bl	8005634 <HAL_GetTick>
 8007cfe:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d00:	e005      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d02:	f7fd fc97 	bl	8005634 <HAL_GetTick>
 8007d06:	1b83      	subs	r3, r0, r6
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	f200 8107 	bhi.w	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	05d8      	lsls	r0, r3, #23
 8007d12:	d5f6      	bpl.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d14:	4d93      	ldr	r5, [pc, #588]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007d16:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d1a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007d1e:	d027      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007d20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d025      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d26:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d2a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d32:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d36:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d3a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d42:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d44:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007d48:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d4c:	f140 8108 	bpl.w	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d50:	f7fd fc70 	bl	8005634 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d54:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007d58:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d5a:	e005      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d5c:	f7fd fc6a 	bl	8005634 <HAL_GetTick>
 8007d60:	1b80      	subs	r0, r0, r6
 8007d62:	4540      	cmp	r0, r8
 8007d64:	f200 80da 	bhi.w	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d68:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007d6c:	079b      	lsls	r3, r3, #30
 8007d6e:	d5f5      	bpl.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d72:	497c      	ldr	r1, [pc, #496]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007d74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d82:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d84:	b127      	cbz	r7, 8007d90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d86:	4a77      	ldr	r2, [pc, #476]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007d88:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8007d90:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d92:	07de      	lsls	r6, r3, #31
 8007d94:	d508      	bpl.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d96:	4973      	ldr	r1, [pc, #460]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007d98:	6865      	ldr	r5, [r4, #4]
 8007d9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d9e:	f022 0203 	bic.w	r2, r2, #3
 8007da2:	432a      	orrs	r2, r5
 8007da4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007da8:	079d      	lsls	r5, r3, #30
 8007daa:	d508      	bpl.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dac:	496d      	ldr	r1, [pc, #436]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007dae:	68a5      	ldr	r5, [r4, #8]
 8007db0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007db4:	f022 020c 	bic.w	r2, r2, #12
 8007db8:	432a      	orrs	r2, r5
 8007dba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dbe:	0759      	lsls	r1, r3, #29
 8007dc0:	d508      	bpl.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dc2:	4968      	ldr	r1, [pc, #416]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007dc4:	68e5      	ldr	r5, [r4, #12]
 8007dc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007dca:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007dce:	432a      	orrs	r2, r5
 8007dd0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dd4:	071a      	lsls	r2, r3, #28
 8007dd6:	d508      	bpl.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dd8:	4962      	ldr	r1, [pc, #392]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007dda:	6925      	ldr	r5, [r4, #16]
 8007ddc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007de0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007de4:	432a      	orrs	r2, r5
 8007de6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dea:	069f      	lsls	r7, r3, #26
 8007dec:	d508      	bpl.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dee:	495d      	ldr	r1, [pc, #372]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007df0:	6965      	ldr	r5, [r4, #20]
 8007df2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007df6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dfa:	432a      	orrs	r2, r5
 8007dfc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e00:	065e      	lsls	r6, r3, #25
 8007e02:	d508      	bpl.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e04:	4957      	ldr	r1, [pc, #348]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e06:	69a5      	ldr	r5, [r4, #24]
 8007e08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007e10:	432a      	orrs	r2, r5
 8007e12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e16:	061d      	lsls	r5, r3, #24
 8007e18:	d508      	bpl.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e1a:	4952      	ldr	r1, [pc, #328]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e1c:	69e5      	ldr	r5, [r4, #28]
 8007e1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007e26:	432a      	orrs	r2, r5
 8007e28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e2c:	05d9      	lsls	r1, r3, #23
 8007e2e:	d508      	bpl.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e30:	494c      	ldr	r1, [pc, #304]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e32:	6a25      	ldr	r5, [r4, #32]
 8007e34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007e3c:	432a      	orrs	r2, r5
 8007e3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e42:	059a      	lsls	r2, r3, #22
 8007e44:	d508      	bpl.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e46:	4947      	ldr	r1, [pc, #284]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007e4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e4e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007e52:	432a      	orrs	r2, r5
 8007e54:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e58:	055f      	lsls	r7, r3, #21
 8007e5a:	d50b      	bpl.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e5c:	4941      	ldr	r1, [pc, #260]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e5e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007e60:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e64:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007e68:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e6a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e72:	d055      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e74:	051e      	lsls	r6, r3, #20
 8007e76:	d50b      	bpl.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e78:	493a      	ldr	r1, [pc, #232]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e7a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007e7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e80:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007e84:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e86:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e8e:	d04c      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e90:	04dd      	lsls	r5, r3, #19
 8007e92:	d50b      	bpl.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e94:	4933      	ldr	r1, [pc, #204]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e96:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007e98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007ea0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ea2:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ea6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007eaa:	d043      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007eac:	0499      	lsls	r1, r3, #18
 8007eae:	d50b      	bpl.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eb0:	492c      	ldr	r1, [pc, #176]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007eb2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007eb4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007eb8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007ebc:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ebe:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ec2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ec6:	d03a      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ec8:	045a      	lsls	r2, r3, #17
 8007eca:	d50b      	bpl.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ecc:	4925      	ldr	r1, [pc, #148]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007ece:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007ed0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ed4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007ed8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007eda:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ede:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ee2:	d031      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	d50b      	bpl.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ee8:	4a1e      	ldr	r2, [pc, #120]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007eea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007eec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007ef0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007ef4:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ef6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007efa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007efe:	d028      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8007f00:	b002      	add	sp, #8
 8007f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f0c:	659a      	str	r2, [r3, #88]	; 0x58
 8007f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007f18:	2701      	movs	r7, #1
 8007f1a:	e6e9      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8007f1c:	2003      	movs	r0, #3
 8007f1e:	e731      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f20:	68ca      	ldr	r2, [r1, #12]
 8007f22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f26:	60ca      	str	r2, [r1, #12]
 8007f28:	e7a4      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f2a:	68ca      	ldr	r2, [r1, #12]
 8007f2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f30:	60ca      	str	r2, [r1, #12]
 8007f32:	e7ad      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f34:	68ca      	ldr	r2, [r1, #12]
 8007f36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f3a:	60ca      	str	r2, [r1, #12]
 8007f3c:	e7b6      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f3e:	68ca      	ldr	r2, [r1, #12]
 8007f40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f44:	60ca      	str	r2, [r1, #12]
 8007f46:	e7bf      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f48:	68ca      	ldr	r2, [r1, #12]
 8007f4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f4e:	60ca      	str	r2, [r1, #12]
 8007f50:	e7c8      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f52:	68d3      	ldr	r3, [r2, #12]
 8007f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f58:	60d3      	str	r3, [r2, #12]
}
 8007f5a:	b002      	add	sp, #8
 8007f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f60:	4613      	mov	r3, r2
 8007f62:	e706      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007f64:	40021000 	.word	0x40021000
 8007f68:	40007000 	.word	0x40007000

08007f6c <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	460c      	mov	r4, r1
 8007f72:	4617      	mov	r7, r2
 8007f74:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f76:	f7fd fb5d 	bl	8005634 <HAL_GetTick>
 8007f7a:	4427      	add	r7, r4
 8007f7c:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 8007f7e:	f7fd fb59 	bl	8005634 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f82:	4b2e      	ldr	r3, [pc, #184]	; (800803c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f8e:	0d1b      	lsrs	r3, r3, #20
 8007f90:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8007f94:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f96:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f98:	682a      	ldr	r2, [r5, #0]
 8007f9a:	1c61      	adds	r1, r4, #1
 8007f9c:	6893      	ldr	r3, [r2, #8]
 8007f9e:	d10d      	bne.n	8007fbc <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8007fa0:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007fa4:	d007      	beq.n	8007fb6 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007fa6:	7b13      	ldrb	r3, [r2, #12]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007fac:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007fae:	6893      	ldr	r3, [r2, #8]
 8007fb0:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007fb4:	d1f7      	bne.n	8007fa6 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8007fb6:	2000      	movs	r0, #0
}
 8007fb8:	b003      	add	sp, #12
 8007fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007fbc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007fc0:	d0f9      	beq.n	8007fb6 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007fc2:	7b13      	ldrb	r3, [r2, #12]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8007fc8:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fca:	f7fd fb33 	bl	8005634 <HAL_GetTick>
 8007fce:	1bc0      	subs	r0, r0, r7
 8007fd0:	42b0      	cmp	r0, r6
 8007fd2:	d208      	bcs.n	8007fe6 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8007fd4:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007fd6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007fd8:	2a00      	cmp	r2, #0
      count--;
 8007fda:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007fde:	bf08      	it	eq
 8007fe0:	2600      	moveq	r6, #0
      count--;
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	e7d8      	b.n	8007f98 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe6:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fea:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fec:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ff4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ff6:	d014      	beq.n	8008022 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ff8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007ffa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007ffe:	d007      	beq.n	8008010 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 8008000:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8008002:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8008004:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008008:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800800c:	2003      	movs	r0, #3
 800800e:	e7d3      	b.n	8007fb8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e7ee      	b.n	8008000 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008022:	68aa      	ldr	r2, [r5, #8]
 8008024:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008028:	d002      	beq.n	8008030 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800802a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800802e:	d1e3      	bne.n	8007ff8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e7de      	b.n	8007ff8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 800803a:	bf00      	nop
 800803c:	20000db8 	.word	0x20000db8

08008040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	eb01 0802 	add.w	r8, r1, r2
 800804a:	460d      	mov	r5, r1
 800804c:	4616      	mov	r6, r2
 800804e:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008050:	f7fd faf0 	bl	8005634 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008054:	4f46      	ldr	r7, [pc, #280]	; (8008170 <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008056:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 800805a:	f7fd faeb 	bl	8005634 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008064:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008068:	0d1b      	lsrs	r3, r3, #20
 800806a:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 800806e:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008070:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008072:	1c68      	adds	r0, r5, #1
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	d11f      	bne.n	80080b8 <SPI_EndRxTxTransaction+0x78>
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800807e:	d1fb      	bne.n	8008078 <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008080:	f7fd fad8 	bl	8005634 <HAL_GetTick>
 8008084:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 8008088:	f7fd fad4 	bl	8005634 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008092:	fb08 f303 	mul.w	r3, r8, r3
 8008096:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 8008098:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800809a:	1c69      	adds	r1, r5, #1
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	d11f      	bne.n	80080e0 <SPI_EndRxTxTransaction+0xa0>
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	0612      	lsls	r2, r2, #24
 80080a4:	d4fc      	bmi.n	80080a0 <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080a6:	4632      	mov	r2, r6
 80080a8:	4629      	mov	r1, r5
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7ff ff5e 	bl	8007f6c <SPI_WaitFifoStateUntilTimeout.constprop.1>
 80080b0:	bb40      	cbnz	r0, 8008104 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80080b2:	b002      	add	sp, #8
 80080b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80080be:	d0df      	beq.n	8008080 <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080c0:	f7fd fab8 	bl	8005634 <HAL_GetTick>
 80080c4:	eba0 000a 	sub.w	r0, r0, sl
 80080c8:	4548      	cmp	r0, r9
 80080ca:	d221      	bcs.n	8008110 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 80080cc:	9a00      	ldr	r2, [sp, #0]
      count--;
 80080ce:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 80080d0:	2a00      	cmp	r2, #0
      count--;
 80080d2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80080d6:	bf08      	it	eq
 80080d8:	f04f 0900 	moveq.w	r9, #0
      count--;
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	e7c8      	b.n	8008072 <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	061b      	lsls	r3, r3, #24
 80080e4:	d5df      	bpl.n	80080a6 <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080e6:	f7fd faa5 	bl	8005634 <HAL_GetTick>
 80080ea:	1bc3      	subs	r3, r0, r7
 80080ec:	4543      	cmp	r3, r8
 80080ee:	d20f      	bcs.n	8008110 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 80080f0:	9a01      	ldr	r2, [sp, #4]
      count--;
 80080f2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80080f4:	2a00      	cmp	r2, #0
      count--;
 80080f6:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80080fa:	bf08      	it	eq
 80080fc:	f04f 0800 	moveq.w	r8, #0
      count--;
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	e7ca      	b.n	800809a <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008104:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008106:	f043 0320 	orr.w	r3, r3, #32
 800810a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800810c:	2003      	movs	r0, #3
 800810e:	e7d0      	b.n	80080b2 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008110:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008114:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008116:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800811a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800811e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008120:	d019      	beq.n	8008156 <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008122:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008124:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008128:	d107      	bne.n	800813a <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008138:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800813a:	2301      	movs	r3, #1
 800813c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008140:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8008142:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008144:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8008148:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800814a:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800814c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8008150:	b002      	add	sp, #8
 8008152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008156:	68a2      	ldr	r2, [r4, #8]
 8008158:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800815c:	d002      	beq.n	8008164 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800815e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008162:	d1de      	bne.n	8008122 <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e7d9      	b.n	8008122 <SPI_EndRxTxTransaction+0xe2>
 800816e:	bf00      	nop
 8008170:	20000db8 	.word	0x20000db8

08008174 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008174:	2800      	cmp	r0, #0
 8008176:	d07f      	beq.n	8008278 <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008178:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 800817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008180:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008182:	f1bc 0f00 	cmp.w	ip, #0
 8008186:	d05c      	beq.n	8008242 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008188:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800818a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800818e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008192:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008194:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008198:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800819a:	2b00      	cmp	r3, #0
 800819c:	d05e      	beq.n	800825c <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 800819e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081a0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80081a2:	2302      	movs	r3, #2
 80081a4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80081a8:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081aa:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80081ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b2:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081b4:	d94c      	bls.n	8008250 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081b6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80081ba:	d15f      	bne.n	800827c <HAL_SPI_Init+0x108>
 80081bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081be:	2700      	movs	r7, #0
 80081c0:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081c4:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 80081c8:	6925      	ldr	r5, [r4, #16]
 80081ca:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80081ce:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 80081d2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80081d6:	4333      	orrs	r3, r6
 80081d8:	f005 0502 	and.w	r5, r5, #2
 80081dc:	432b      	orrs	r3, r5
 80081de:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081e0:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081e4:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081ea:	432b      	orrs	r3, r5
 80081ec:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081f0:	f002 0208 	and.w	r2, r2, #8
 80081f4:	ea42 0208 	orr.w	r2, r2, r8
 80081f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081fc:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008200:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008204:	ea43 030e 	orr.w	r3, r3, lr
 8008208:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800820c:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008210:	4333      	orrs	r3, r6
 8008212:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008216:	f00c 0c10 	and.w	ip, ip, #16
 800821a:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800821e:	432b      	orrs	r3, r5
 8008220:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008222:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008226:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008228:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800822a:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800822c:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800822e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8008232:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008234:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008236:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008238:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 800823c:	4610      	mov	r0, r2
}
 800823e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008242:	6843      	ldr	r3, [r0, #4]
 8008244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008248:	d0a1      	beq.n	800818e <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800824a:	f8c0 c01c 	str.w	ip, [r0, #28]
 800824e:	e79e      	b.n	800818e <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008250:	d00c      	beq.n	800826c <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008252:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008256:	2000      	movs	r0, #0
 8008258:	62a0      	str	r0, [r4, #40]	; 0x28
 800825a:	e7b3      	b.n	80081c4 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 800825c:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008260:	4620      	mov	r0, r4
 8008262:	f7fc fb83 	bl	800496c <HAL_SPI_MspInit>
 8008266:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800826a:	e798      	b.n	800819e <HAL_SPI_Init+0x2a>
 800826c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800826e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8008272:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8008276:	e7a5      	b.n	80081c4 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8008278:	2001      	movs	r0, #1
}
 800827a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800827c:	2700      	movs	r7, #0
 800827e:	e7ea      	b.n	8008256 <HAL_SPI_Init+0xe2>

08008280 <HAL_SPI_TransmitReceive>:
{
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008286:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800828a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800828c:	2801      	cmp	r0, #1
 800828e:	f000 809d 	beq.w	80083cc <HAL_SPI_TransmitReceive+0x14c>
 8008292:	4698      	mov	r8, r3
 8008294:	2301      	movs	r3, #1
 8008296:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800829a:	468a      	mov	sl, r1
 800829c:	4691      	mov	r9, r2
 800829e:	f7fd f9c9 	bl	8005634 <HAL_GetTick>
  tmp_state           = hspi->State;
 80082a2:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80082a6:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082a8:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 80082aa:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80082ac:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082ae:	d010      	beq.n	80082d2 <HAL_SPI_TransmitReceive+0x52>
 80082b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082b4:	d008      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 80082b6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80082b8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80082ba:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80082bc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80082c0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80082c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80082c8:	68a2      	ldr	r2, [r4, #8]
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d1f3      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x36>
 80082ce:	2904      	cmp	r1, #4
 80082d0:	d1f1      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80082d2:	f1ba 0f00 	cmp.w	sl, #0
 80082d6:	d07c      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x152>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	d079      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x152>
 80082de:	f1b8 0f00 	cmp.w	r8, #0
 80082e2:	d076      	beq.n	80083d2 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082e4:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082e8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082ec:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082ee:	bf1c      	itt	ne
 80082f0:	2205      	movne	r2, #5
 80082f2:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80082f6:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 80082f8:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082fc:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80082fe:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008302:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008304:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8008306:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800830a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800830e:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008312:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008316:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 8008318:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800831c:	d85b      	bhi.n	80083d6 <HAL_SPI_TransmitReceive+0x156>
 800831e:	f1b8 0f01 	cmp.w	r8, #1
 8008322:	f240 80ea 	bls.w	80084fa <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008326:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800832a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800832c:	6811      	ldr	r1, [r2, #0]
 800832e:	0649      	lsls	r1, r1, #25
 8008330:	f140 80ea 	bpl.w	8008508 <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008334:	b96b      	cbnz	r3, 8008352 <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 8008336:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b01      	cmp	r3, #1
 800833c:	f240 8120 	bls.w	8008580 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008340:	4651      	mov	r1, sl
 8008342:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008346:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8008348:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800834a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800834c:	3b02      	subs	r3, #2
 800834e:	b29b      	uxth	r3, r3
 8008350:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008352:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008356:	b29b      	uxth	r3, r3
 8008358:	b92b      	cbnz	r3, 8008366 <HAL_SPI_TransmitReceive+0xe6>
 800835a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 8084 	beq.w	800846e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	6893      	ldr	r3, [r2, #8]
 800836a:	0799      	lsls	r1, r3, #30
 800836c:	d505      	bpl.n	800837a <HAL_SPI_TransmitReceive+0xfa>
 800836e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008370:	b29b      	uxth	r3, r3
 8008372:	b113      	cbz	r3, 800837a <HAL_SPI_TransmitReceive+0xfa>
 8008374:	2f00      	cmp	r7, #0
 8008376:	f040 80e1 	bne.w	800853c <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800837a:	6893      	ldr	r3, [r2, #8]
 800837c:	f013 0301 	ands.w	r3, r3, #1
 8008380:	d01b      	beq.n	80083ba <HAL_SPI_TransmitReceive+0x13a>
 8008382:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008386:	b289      	uxth	r1, r1
 8008388:	b1b9      	cbz	r1, 80083ba <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 800838a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800838e:	b289      	uxth	r1, r1
 8008390:	2901      	cmp	r1, #1
 8008392:	f240 80c5 	bls.w	8008520 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008396:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008398:	68d1      	ldr	r1, [r2, #12]
 800839a:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 800839e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80083a2:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80083a4:	3902      	subs	r1, #2
 80083a6:	b289      	uxth	r1, r1
 80083a8:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80083ac:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80083b0:	b289      	uxth	r1, r1
 80083b2:	2901      	cmp	r1, #1
 80083b4:	f240 80d1 	bls.w	800855a <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 80083b8:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083ba:	f7fd f93b 	bl	8005634 <HAL_GetTick>
 80083be:	1b40      	subs	r0, r0, r5
 80083c0:	42b0      	cmp	r0, r6
 80083c2:	d3c7      	bcc.n	8008354 <HAL_SPI_TransmitReceive+0xd4>
 80083c4:	1c73      	adds	r3, r6, #1
 80083c6:	d0c5      	beq.n	8008354 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 80083c8:	2003      	movs	r0, #3
 80083ca:	e775      	b.n	80082b8 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80083cc:	2002      	movs	r0, #2
}
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 80083d2:	2001      	movs	r0, #1
 80083d4:	e770      	b.n	80082b8 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083d6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80083da:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083dc:	6811      	ldr	r1, [r2, #0]
 80083de:	0648      	lsls	r0, r1, #25
 80083e0:	d403      	bmi.n	80083ea <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 80083e2:	6811      	ldr	r1, [r2, #0]
 80083e4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80083e8:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 8081 	bne.w	80084f2 <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083f0:	4651      	mov	r1, sl
 80083f2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80083f6:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80083f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083fa:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29b      	uxth	r3, r3
 8008400:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008402:	1c72      	adds	r2, r6, #1
{
 8008404:	f04f 0701 	mov.w	r7, #1
 8008408:	d028      	beq.n	800845c <HAL_SPI_TransmitReceive+0x1dc>
 800840a:	e06d      	b.n	80084e8 <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800840c:	6822      	ldr	r2, [r4, #0]
 800840e:	6893      	ldr	r3, [r2, #8]
 8008410:	079b      	lsls	r3, r3, #30
 8008412:	d50d      	bpl.n	8008430 <HAL_SPI_TransmitReceive+0x1b0>
 8008414:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008416:	b29b      	uxth	r3, r3
 8008418:	b153      	cbz	r3, 8008430 <HAL_SPI_TransmitReceive+0x1b0>
 800841a:	b14f      	cbz	r7, 8008430 <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800841c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800841e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008422:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8008424:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008426:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008428:	3b01      	subs	r3, #1
 800842a:	b29b      	uxth	r3, r3
 800842c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800842e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008430:	6893      	ldr	r3, [r2, #8]
 8008432:	f013 0301 	ands.w	r3, r3, #1
 8008436:	d00f      	beq.n	8008458 <HAL_SPI_TransmitReceive+0x1d8>
 8008438:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800843c:	b289      	uxth	r1, r1
 800843e:	b159      	cbz	r1, 8008458 <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008440:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008442:	68d2      	ldr	r2, [r2, #12]
 8008444:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8008448:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800844c:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800844e:	3a01      	subs	r2, #1
 8008450:	b292      	uxth	r2, r2
        txallowed = 1U;
 8008452:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008454:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008458:	f7fd f8ec 	bl	8005634 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800845c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1d3      	bne.n	800840c <HAL_SPI_TransmitReceive+0x18c>
 8008464:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1ce      	bne.n	800840c <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800846e:	462a      	mov	r2, r5
 8008470:	4631      	mov	r1, r6
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff fde4 	bl	8008040 <SPI_EndRxTxTransaction>
 8008478:	2800      	cmp	r0, #0
 800847a:	f43f af1d 	beq.w	80082b8 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800847e:	2320      	movs	r3, #32
 8008480:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008482:	2001      	movs	r0, #1
 8008484:	e718      	b.n	80082b8 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008486:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0ee      	beq.n	800846e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	6893      	ldr	r3, [r2, #8]
 8008494:	0798      	lsls	r0, r3, #30
 8008496:	d50d      	bpl.n	80084b4 <HAL_SPI_TransmitReceive+0x234>
 8008498:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800849a:	b29b      	uxth	r3, r3
 800849c:	b153      	cbz	r3, 80084b4 <HAL_SPI_TransmitReceive+0x234>
 800849e:	b14f      	cbz	r7, 80084b4 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084a2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80084a6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80084a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084aa:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80084b2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084b4:	6893      	ldr	r3, [r2, #8]
 80084b6:	f013 0301 	ands.w	r3, r3, #1
 80084ba:	d00f      	beq.n	80084dc <HAL_SPI_TransmitReceive+0x25c>
 80084bc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80084c0:	b289      	uxth	r1, r1
 80084c2:	b159      	cbz	r1, 80084dc <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084c6:	68d2      	ldr	r2, [r2, #12]
 80084c8:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80084cc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084d0:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80084d2:	3a01      	subs	r2, #1
 80084d4:	b292      	uxth	r2, r2
        txallowed = 1U;
 80084d6:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80084d8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084dc:	f7fd f8aa 	bl	8005634 <HAL_GetTick>
 80084e0:	1b40      	subs	r0, r0, r5
 80084e2:	42b0      	cmp	r0, r6
 80084e4:	f4bf af70 	bcs.w	80083c8 <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1cf      	bne.n	8008490 <HAL_SPI_TransmitReceive+0x210>
 80084f0:	e7c9      	b.n	8008486 <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084f2:	f1b8 0f01 	cmp.w	r8, #1
 80084f6:	d184      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x182>
 80084f8:	e77a      	b.n	80083f0 <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084fa:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80084fe:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008500:	6811      	ldr	r1, [r2, #0]
 8008502:	0649      	lsls	r1, r1, #25
 8008504:	f53f af17 	bmi.w	8008336 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8008508:	6811      	ldr	r1, [r2, #0]
 800850a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800850e:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008510:	2b00      	cmp	r3, #0
 8008512:	f43f af10 	beq.w	8008336 <HAL_SPI_TransmitReceive+0xb6>
 8008516:	f1b8 0f01 	cmp.w	r8, #1
 800851a:	f47f af1a 	bne.w	8008352 <HAL_SPI_TransmitReceive+0xd2>
 800851e:	e70a      	b.n	8008336 <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008520:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008522:	7b12      	ldrb	r2, [r2, #12]
 8008524:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8008526:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 800852a:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800852c:	3a01      	subs	r2, #1
 800852e:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8008530:	3101      	adds	r1, #1
        txallowed = 1U;
 8008532:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 8008534:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8008538:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800853a:	e73e      	b.n	80083ba <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 800853c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b01      	cmp	r3, #1
 8008542:	d910      	bls.n	8008566 <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008544:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008546:	f831 3b02 	ldrh.w	r3, [r1], #2
 800854a:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800854c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800854e:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008550:	3b02      	subs	r3, #2
 8008552:	b29b      	uxth	r3, r3
 8008554:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008556:	2700      	movs	r7, #0
 8008558:	e70f      	b.n	800837a <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800855a:	6851      	ldr	r1, [r2, #4]
 800855c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 8008560:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008562:	6051      	str	r1, [r2, #4]
 8008564:	e729      	b.n	80083ba <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800856c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800856e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008570:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8008572:	3b01      	subs	r3, #1
 8008574:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8008576:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8008578:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800857a:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 800857c:	2700      	movs	r7, #0
 800857e:	e6fc      	b.n	800837a <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8008586:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008588:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800858a:	3b01      	subs	r3, #1
 800858c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800858e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8008590:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008592:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008594:	e6dd      	b.n	8008352 <HAL_SPI_TransmitReceive+0xd2>
 8008596:	bf00      	nop

08008598 <HAL_SPI_ErrorCallback>:
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop

0800859c <HAL_SPI_IRQHandler>:
{
 800859c:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800859e:	6802      	ldr	r2, [r0, #0]
 80085a0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80085a2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80085a4:	f013 0f40 	tst.w	r3, #64	; 0x40
{
 80085a8:	b085      	sub	sp, #20
 80085aa:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80085ac:	f3c3 1580 	ubfx	r5, r3, #6, #1
 80085b0:	d105      	bne.n	80085be <HAL_SPI_IRQHandler+0x22>
 80085b2:	f013 0f01 	tst.w	r3, #1
 80085b6:	d002      	beq.n	80085be <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80085b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80085bc:	d17a      	bne.n	80086b4 <HAL_SPI_IRQHandler+0x118>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80085be:	0798      	lsls	r0, r3, #30
 80085c0:	d501      	bpl.n	80085c6 <HAL_SPI_IRQHandler+0x2a>
 80085c2:	0608      	lsls	r0, r1, #24
 80085c4:	d470      	bmi.n	80086a8 <HAL_SPI_IRQHandler+0x10c>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80085c6:	f013 0f20 	tst.w	r3, #32
 80085ca:	f3c3 1040 	ubfx	r0, r3, #5, #1
 80085ce:	d049      	beq.n	8008664 <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80085d0:	0688      	lsls	r0, r1, #26
 80085d2:	d545      	bpl.n	8008660 <HAL_SPI_IRQHandler+0xc4>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80085d4:	b175      	cbz	r5, 80085f4 <HAL_SPI_IRQHandler+0x58>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80085d6:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80085da:	2803      	cmp	r0, #3
 80085dc:	d06c      	beq.n	80086b8 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80085de:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085e0:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80085e2:	f040 0004 	orr.w	r0, r0, #4
 80085e6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085e8:	9500      	str	r5, [sp, #0]
 80085ea:	68d0      	ldr	r0, [r2, #12]
 80085ec:	9000      	str	r0, [sp, #0]
 80085ee:	6890      	ldr	r0, [r2, #8]
 80085f0:	9000      	str	r0, [sp, #0]
 80085f2:	9800      	ldr	r0, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80085f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085f6:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80085f8:	f040 0001 	orr.w	r0, r0, #1
 80085fc:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085fe:	9502      	str	r5, [sp, #8]
 8008600:	6890      	ldr	r0, [r2, #8]
 8008602:	9002      	str	r0, [sp, #8]
 8008604:	6810      	ldr	r0, [r2, #0]
 8008606:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	9802      	ldr	r0, [sp, #8]
 800860e:	f3c3 2300 	ubfx	r3, r3, #8, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008612:	2b00      	cmp	r3, #0
 8008614:	d13e      	bne.n	8008694 <HAL_SPI_IRQHandler+0xf8>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008616:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008618:	b313      	cbz	r3, 8008660 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800861a:	6853      	ldr	r3, [r2, #4]
 800861c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008620:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8008622:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008624:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8008626:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800862a:	d04d      	beq.n	80086c8 <HAL_SPI_IRQHandler+0x12c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800862c:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800862e:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008630:	f023 0303 	bic.w	r3, r3, #3
 8008634:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8008636:	b140      	cbz	r0, 800864a <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008638:	4b25      	ldr	r3, [pc, #148]	; (80086d0 <HAL_SPI_IRQHandler+0x134>)
 800863a:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800863c:	f7fe f818 	bl	8006670 <HAL_DMA_Abort_IT>
 8008640:	b118      	cbz	r0, 800864a <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008642:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008648:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800864a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800864c:	b140      	cbz	r0, 8008660 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800864e:	4b20      	ldr	r3, [pc, #128]	; (80086d0 <HAL_SPI_IRQHandler+0x134>)
 8008650:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008652:	f7fe f80d 	bl	8006670 <HAL_DMA_Abort_IT>
 8008656:	b118      	cbz	r0, 8008660 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008658:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800865a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800865e:	6623      	str	r3, [r4, #96]	; 0x60
}
 8008660:	b005      	add	sp, #20
 8008662:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008664:	b195      	cbz	r5, 800868c <HAL_SPI_IRQHandler+0xf0>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008666:	068d      	lsls	r5, r1, #26
 8008668:	d5fa      	bpl.n	8008660 <HAL_SPI_IRQHandler+0xc4>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800866a:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 800866e:	2d03      	cmp	r5, #3
 8008670:	d022      	beq.n	80086b8 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008672:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8008674:	f045 0504 	orr.w	r5, r5, #4
 8008678:	6625      	str	r5, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800867a:	9000      	str	r0, [sp, #0]
 800867c:	68d0      	ldr	r0, [r2, #12]
 800867e:	9000      	str	r0, [sp, #0]
 8008680:	6890      	ldr	r0, [r2, #8]
 8008682:	9000      	str	r0, [sp, #0]
 8008684:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008686:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800868a:	e7c2      	b.n	8008612 <HAL_SPI_IRQHandler+0x76>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800868c:	05dd      	lsls	r5, r3, #23
 800868e:	d5e7      	bpl.n	8008660 <HAL_SPI_IRQHandler+0xc4>
 8008690:	068b      	lsls	r3, r1, #26
 8008692:	d5e5      	bpl.n	8008660 <HAL_SPI_IRQHandler+0xc4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008694:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008696:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008698:	f043 0308 	orr.w	r3, r3, #8
 800869c:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800869e:	9003      	str	r0, [sp, #12]
 80086a0:	6893      	ldr	r3, [r2, #8]
 80086a2:	9303      	str	r3, [sp, #12]
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	e7b6      	b.n	8008616 <HAL_SPI_IRQHandler+0x7a>
    hspi->TxISR(hspi);
 80086a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80086aa:	4620      	mov	r0, r4
}
 80086ac:	b005      	add	sp, #20
 80086ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 80086b2:	4718      	bx	r3
    hspi->RxISR(hspi);
 80086b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80086b6:	e7f9      	b.n	80086ac <HAL_SPI_IRQHandler+0x110>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086b8:	2300      	movs	r3, #0
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	68d3      	ldr	r3, [r2, #12]
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	6893      	ldr	r3, [r2, #8]
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	9b01      	ldr	r3, [sp, #4]
        return;
 80086c6:	e7cb      	b.n	8008660 <HAL_SPI_IRQHandler+0xc4>
        HAL_SPI_ErrorCallback(hspi);
 80086c8:	4620      	mov	r0, r4
 80086ca:	f7ff ff65 	bl	8008598 <HAL_SPI_ErrorCallback>
 80086ce:	e7c7      	b.n	8008660 <HAL_SPI_IRQHandler+0xc4>
 80086d0:	080086d5 	.word	0x080086d5

080086d4 <SPI_DMAAbortOnError>:
{
 80086d4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80086de:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80086e0:	f7ff ff5a 	bl	8008598 <HAL_SPI_ErrorCallback>
}
 80086e4:	bd08      	pop	{r3, pc}
 80086e6:	bf00      	nop

080086e8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086e8:	6a03      	ldr	r3, [r0, #32]
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	6203      	str	r3, [r0, #32]
{
 80086f0:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086f6:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086f8:	4f18      	ldr	r7, [pc, #96]	; (800875c <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 80086fa:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80086fc:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8008702:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008706:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800870a:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 800870c:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8008710:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008714:	d00e      	beq.n	8008734 <TIM_OC1_SetConfig+0x4c>
 8008716:	4c12      	ldr	r4, [pc, #72]	; (8008760 <TIM_OC1_SetConfig+0x78>)
 8008718:	42a0      	cmp	r0, r4
 800871a:	d00b      	beq.n	8008734 <TIM_OC1_SetConfig+0x4c>
 800871c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8008720:	42a0      	cmp	r0, r4
 8008722:	d007      	beq.n	8008734 <TIM_OC1_SetConfig+0x4c>
 8008724:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008728:	42a0      	cmp	r0, r4
 800872a:	d003      	beq.n	8008734 <TIM_OC1_SetConfig+0x4c>
 800872c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008730:	42a0      	cmp	r0, r4
 8008732:	d10b      	bne.n	800874c <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008734:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008736:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800873a:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800873c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008740:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008744:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008746:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800874a:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800874c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800874e:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008750:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008752:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8008754:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8008756:	6203      	str	r3, [r0, #32]
}
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	40012c00 	.word	0x40012c00
 8008760:	40013400 	.word	0x40013400

08008764 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008764:	6a03      	ldr	r3, [r0, #32]
 8008766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800876a:	6203      	str	r3, [r0, #32]
{
 800876c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008770:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008772:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008774:	4f19      	ldr	r7, [pc, #100]	; (80087dc <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008776:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8008778:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800877a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800877e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008782:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008786:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008788:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800878c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008790:	d00f      	beq.n	80087b2 <TIM_OC3_SetConfig+0x4e>
 8008792:	4c13      	ldr	r4, [pc, #76]	; (80087e0 <TIM_OC3_SetConfig+0x7c>)
 8008794:	42a0      	cmp	r0, r4
 8008796:	d00c      	beq.n	80087b2 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008798:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800879c:	42a0      	cmp	r0, r4
 800879e:	d00f      	beq.n	80087c0 <TIM_OC3_SetConfig+0x5c>
 80087a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d00b      	beq.n	80087c0 <TIM_OC3_SetConfig+0x5c>
 80087a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80087ac:	42a0      	cmp	r0, r4
 80087ae:	d10e      	bne.n	80087ce <TIM_OC3_SetConfig+0x6a>
 80087b0:	e006      	b.n	80087c0 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087b2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80087b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087b8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80087bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087c4:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c8:	432c      	orrs	r4, r5
 80087ca:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087ce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80087d0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80087d2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80087d4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80087d6:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80087d8:	6203      	str	r3, [r0, #32]
}
 80087da:	4770      	bx	lr
 80087dc:	40012c00 	.word	0x40012c00
 80087e0:	40013400 	.word	0x40013400

080087e4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087e4:	6a03      	ldr	r3, [r0, #32]
 80087e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ea:	6203      	str	r3, [r0, #32]
{
 80087ec:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087f2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087f4:	4f19      	ldr	r7, [pc, #100]	; (800885c <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087f6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 80087fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008802:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008806:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008808:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800880c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008810:	d00f      	beq.n	8008832 <TIM_OC4_SetConfig+0x4e>
 8008812:	4c13      	ldr	r4, [pc, #76]	; (8008860 <TIM_OC4_SetConfig+0x7c>)
 8008814:	42a0      	cmp	r0, r4
 8008816:	d00c      	beq.n	8008832 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008818:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800881c:	42a0      	cmp	r0, r4
 800881e:	d00f      	beq.n	8008840 <TIM_OC4_SetConfig+0x5c>
 8008820:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008824:	42a0      	cmp	r0, r4
 8008826:	d00b      	beq.n	8008840 <TIM_OC4_SetConfig+0x5c>
 8008828:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800882c:	42a0      	cmp	r0, r4
 800882e:	d10e      	bne.n	800884e <TIM_OC4_SetConfig+0x6a>
 8008830:	e006      	b.n	8008840 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008832:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008834:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008838:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800883c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008840:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008844:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008848:	432c      	orrs	r4, r5
 800884a:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800884e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008850:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008852:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008854:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8008856:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8008858:	6203      	str	r3, [r0, #32]
}
 800885a:	4770      	bx	lr
 800885c:	40012c00 	.word	0x40012c00
 8008860:	40013400 	.word	0x40013400

08008864 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008864:	2800      	cmp	r0, #0
 8008866:	d07d      	beq.n	8008964 <HAL_TIM_Base_Init+0x100>
{
 8008868:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800886a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800886e:	4604      	mov	r4, r0
 8008870:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008874:	2b00      	cmp	r3, #0
 8008876:	d06d      	beq.n	8008954 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008878:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800887a:	4a3b      	ldr	r2, [pc, #236]	; (8008968 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 800887c:	2302      	movs	r3, #2
 800887e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008882:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8008884:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008886:	d051      	beq.n	800892c <HAL_TIM_Base_Init+0xc8>
 8008888:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800888c:	d021      	beq.n	80088d2 <HAL_TIM_Base_Init+0x6e>
 800888e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008892:	4291      	cmp	r1, r2
 8008894:	d01d      	beq.n	80088d2 <HAL_TIM_Base_Init+0x6e>
 8008896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800889a:	4291      	cmp	r1, r2
 800889c:	d019      	beq.n	80088d2 <HAL_TIM_Base_Init+0x6e>
 800889e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80088a2:	4291      	cmp	r1, r2
 80088a4:	d042      	beq.n	800892c <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088a6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80088aa:	4291      	cmp	r1, r2
 80088ac:	d057      	beq.n	800895e <HAL_TIM_Base_Init+0xfa>
 80088ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088b2:	4291      	cmp	r1, r2
 80088b4:	d053      	beq.n	800895e <HAL_TIM_Base_Init+0xfa>
 80088b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088ba:	4291      	cmp	r1, r2
 80088bc:	d04f      	beq.n	800895e <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088be:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80088c2:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80088ca:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088cc:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088ce:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088d0:	e010      	b.n	80088f4 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80088d2:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088d4:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d6:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80088dc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80088de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088e2:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088e4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ea:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80088ec:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80088ee:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088f0:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088f2:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80088f4:	2301      	movs	r3, #1
 80088f6:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008900:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008904:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008908:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800890c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800891c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008920:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008924:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008928:	2000      	movs	r0, #0
}
 800892a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800892c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800892e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008930:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008936:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8008938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800893c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800893e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008942:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008944:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800894a:	6863      	ldr	r3, [r4, #4]
 800894c:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	630b      	str	r3, [r1, #48]	; 0x30
 8008952:	e7cf      	b.n	80088f4 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8008954:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008958:	f7fc f866 	bl	8004a28 <HAL_TIM_Base_MspInit>
 800895c:	e78c      	b.n	8008878 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800895e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008960:	69a2      	ldr	r2, [r4, #24]
 8008962:	e7e9      	b.n	8008938 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 8008964:	2001      	movs	r0, #1
}
 8008966:	4770      	bx	lr
 8008968:	40012c00 	.word	0x40012c00

0800896c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800896c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008970:	2b01      	cmp	r3, #1
 8008972:	d122      	bne.n	80089ba <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008974:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008976:	4917      	ldr	r1, [pc, #92]	; (80089d4 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008978:	2202      	movs	r2, #2
 800897a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800897e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008980:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008982:	f042 0201 	orr.w	r2, r2, #1
 8008986:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008988:	d019      	beq.n	80089be <HAL_TIM_Base_Start_IT+0x52>
 800898a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898e:	d016      	beq.n	80089be <HAL_TIM_Base_Start_IT+0x52>
 8008990:	4a11      	ldr	r2, [pc, #68]	; (80089d8 <HAL_TIM_Base_Start_IT+0x6c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d013      	beq.n	80089be <HAL_TIM_Base_Start_IT+0x52>
 8008996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800899a:	4293      	cmp	r3, r2
 800899c:	d00f      	beq.n	80089be <HAL_TIM_Base_Start_IT+0x52>
 800899e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00b      	beq.n	80089be <HAL_TIM_Base_Start_IT+0x52>
 80089a6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d007      	beq.n	80089be <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	f042 0201 	orr.w	r2, r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80089b6:	2000      	movs	r0, #0
 80089b8:	4770      	bx	lr
    return HAL_ERROR;
 80089ba:	2001      	movs	r0, #1
 80089bc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089be:	6899      	ldr	r1, [r3, #8]
 80089c0:	4a06      	ldr	r2, [pc, #24]	; (80089dc <HAL_TIM_Base_Start_IT+0x70>)
 80089c2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c4:	2a06      	cmp	r2, #6
 80089c6:	d002      	beq.n	80089ce <HAL_TIM_Base_Start_IT+0x62>
 80089c8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80089cc:	d1ef      	bne.n	80089ae <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 80089ce:	2000      	movs	r0, #0
}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40000400 	.word	0x40000400
 80089dc:	00010007 	.word	0x00010007

080089e0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80089e0:	6803      	ldr	r3, [r0, #0]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	f022 0201 	bic.w	r2, r2, #1
 80089e8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80089ea:	6a1a      	ldr	r2, [r3, #32]
 80089ec:	f241 1111 	movw	r1, #4369	; 0x1111
 80089f0:	420a      	tst	r2, r1
 80089f2:	d108      	bne.n	8008a06 <HAL_TIM_Base_Stop_IT+0x26>
 80089f4:	6a19      	ldr	r1, [r3, #32]
 80089f6:	f244 4244 	movw	r2, #17476	; 0x4444
 80089fa:	4211      	tst	r1, r2
 80089fc:	d103      	bne.n	8008a06 <HAL_TIM_Base_Stop_IT+0x26>
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	f022 0201 	bic.w	r2, r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008a06:	2301      	movs	r3, #1
 8008a08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIM_PWM_MspInit>:
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop

08008a14 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d07d      	beq.n	8008b14 <HAL_TIM_PWM_Init+0x100>
{
 8008a18:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008a1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a1e:	4604      	mov	r4, r0
 8008a20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d06d      	beq.n	8008b04 <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a28:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a2a:	4a3b      	ldr	r2, [pc, #236]	; (8008b18 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a32:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8008a34:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a36:	d051      	beq.n	8008adc <HAL_TIM_PWM_Init+0xc8>
 8008a38:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008a3c:	d021      	beq.n	8008a82 <HAL_TIM_PWM_Init+0x6e>
 8008a3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008a42:	4291      	cmp	r1, r2
 8008a44:	d01d      	beq.n	8008a82 <HAL_TIM_PWM_Init+0x6e>
 8008a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a4a:	4291      	cmp	r1, r2
 8008a4c:	d019      	beq.n	8008a82 <HAL_TIM_PWM_Init+0x6e>
 8008a4e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008a52:	4291      	cmp	r1, r2
 8008a54:	d042      	beq.n	8008adc <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a56:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	d057      	beq.n	8008b0e <HAL_TIM_PWM_Init+0xfa>
 8008a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a62:	4291      	cmp	r1, r2
 8008a64:	d053      	beq.n	8008b0e <HAL_TIM_PWM_Init+0xfa>
 8008a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	d04f      	beq.n	8008b0e <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a6e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a70:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8008a72:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a78:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008a7a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a7c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a7e:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a80:	e010      	b.n	8008aa4 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8008a82:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a84:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a86:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a8c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a92:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a94:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8008a9c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008a9e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa0:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008aa2:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aa8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008ab0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008ab4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008ab8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008ac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008acc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008ad0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008ad4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008ad8:	2000      	movs	r0, #0
}
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8008adc:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ade:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ae0:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ae6:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aec:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008af4:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008afa:	6863      	ldr	r3, [r4, #4]
 8008afc:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008afe:	6963      	ldr	r3, [r4, #20]
 8008b00:	630b      	str	r3, [r1, #48]	; 0x30
 8008b02:	e7cf      	b.n	8008aa4 <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8008b04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008b08:	f7ff ff82 	bl	8008a10 <HAL_TIM_PWM_MspInit>
 8008b0c:	e78c      	b.n	8008a28 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b0e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b10:	69a2      	ldr	r2, [r4, #24]
 8008b12:	e7e9      	b.n	8008ae8 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8008b14:	2001      	movs	r0, #1
}
 8008b16:	4770      	bx	lr
 8008b18:	40012c00 	.word	0x40012c00

08008b1c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f000 80ab 	beq.w	8008c78 <HAL_TIM_Encoder_Init+0x15c>
{
 8008b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 8095 	beq.w	8008c62 <HAL_TIM_Encoder_Init+0x146>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b38:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b3a:	4950      	ldr	r1, [pc, #320]	; (8008c7c <HAL_TIM_Encoder_Init+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8008b48:	f022 0207 	bic.w	r2, r2, #7
 8008b4c:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b4e:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8008b50:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b52:	d072      	beq.n	8008c3a <HAL_TIM_Encoder_Init+0x11e>
 8008b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b58:	d021      	beq.n	8008b9e <HAL_TIM_Encoder_Init+0x82>
 8008b5a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008b5e:	428b      	cmp	r3, r1
 8008b60:	d01d      	beq.n	8008b9e <HAL_TIM_Encoder_Init+0x82>
 8008b62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b66:	428b      	cmp	r3, r1
 8008b68:	d019      	beq.n	8008b9e <HAL_TIM_Encoder_Init+0x82>
 8008b6a:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8008b6e:	428b      	cmp	r3, r1
 8008b70:	d063      	beq.n	8008c3a <HAL_TIM_Encoder_Init+0x11e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b72:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8008b76:	428b      	cmp	r3, r1
 8008b78:	d078      	beq.n	8008c6c <HAL_TIM_Encoder_Init+0x150>
 8008b7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b7e:	428b      	cmp	r3, r1
 8008b80:	d074      	beq.n	8008c6c <HAL_TIM_Encoder_Init+0x150>
 8008b82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b86:	428b      	cmp	r3, r1
 8008b88:	d070      	beq.n	8008c6c <HAL_TIM_Encoder_Init+0x150>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b8a:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b8c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b92:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8008b94:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008b96:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b98:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008b9a:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b9c:	e010      	b.n	8008bc0 <HAL_TIM_Encoder_Init+0xa4>
    tmpcr1 |= Structure->CounterMode;
 8008b9e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ba0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ba6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ba8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bac:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bae:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bb4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bb6:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8008bb8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008bba:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bbc:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008bbe:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008bc0:	2601      	movs	r6, #1
 8008bc2:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8008bc4:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8008bc8:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bca:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008bcc:	69af      	ldr	r7, [r5, #24]
 8008bce:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8008bd0:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008bd4:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bd8:	69e8      	ldr	r0, [r5, #28]
 8008bda:	0112      	lsls	r2, r2, #4
 8008bdc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008be0:	68e8      	ldr	r0, [r5, #12]
 8008be2:	4302      	orrs	r2, r0
 8008be4:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008be6:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008bea:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8008bee:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 8008bf2:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bf4:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bf8:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bfc:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008bfe:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c02:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c06:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c0a:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c0e:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8008c10:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c14:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8008c16:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8008c18:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8008c1a:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c1c:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c20:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c28:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c2c:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008c30:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 8008c34:	2000      	movs	r0, #0
}
 8008c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8008c3a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c3c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c42:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c48:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c4a:	69a1      	ldr	r1, [r4, #24]
 8008c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c50:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8008c52:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c54:	68e2      	ldr	r2, [r4, #12]
 8008c56:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008c5c:	6962      	ldr	r2, [r4, #20]
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008c60:	e7ae      	b.n	8008bc0 <HAL_TIM_Encoder_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 8008c62:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8008c66:	f7fb ff13 	bl	8004a90 <HAL_TIM_Encoder_MspInit>
 8008c6a:	e765      	b.n	8008b38 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c6c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c6e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c74:	4302      	orrs	r2, r0
 8008c76:	e7e9      	b.n	8008c4c <HAL_TIM_Encoder_Init+0x130>
    return HAL_ERROR;
 8008c78:	2001      	movs	r0, #1
}
 8008c7a:	4770      	bx	lr
 8008c7c:	40012c00 	.word	0x40012c00

08008c80 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8008c80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d04d      	beq.n	8008d24 <HAL_TIM_SlaveConfigSynchro+0xa4>
 8008c88:	4602      	mov	r2, r0
{
 8008c8a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c8c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8008c8e:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008c90:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8008c92:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008c96:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008c9a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008c9c:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ca0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008ca8:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cae:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008cb2:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008cb4:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8008cb6:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8008cb8:	d051      	beq.n	8008d5e <HAL_TIM_SlaveConfigSynchro+0xde>
 8008cba:	d825      	bhi.n	8008d08 <HAL_TIM_SlaveConfigSynchro+0x88>
 8008cbc:	2c40      	cmp	r4, #64	; 0x40
 8008cbe:	d033      	beq.n	8008d28 <HAL_TIM_SlaveConfigSynchro+0xa8>
 8008cc0:	2c50      	cmp	r4, #80	; 0x50
 8008cc2:	d110      	bne.n	8008ce6 <HAL_TIM_SlaveConfigSynchro+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cc4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc6:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cc8:	688c      	ldr	r4, [r1, #8]
 8008cca:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ccc:	f026 0601 	bic.w	r6, r6, #1
 8008cd0:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd2:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cd4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8008cdc:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cde:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ce2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008ce4:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008ce6:	68c3      	ldr	r3, [r0, #12]
 8008ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cec:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008cee:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8008cf0:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8008cf2:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf8:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8008cfa:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008cfe:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8008d02:	4608      	mov	r0, r1
}
 8008d04:	bcf0      	pop	{r4, r5, r6, r7}
 8008d06:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8008d08:	2c70      	cmp	r4, #112	; 0x70
 8008d0a:	d1ec      	bne.n	8008ce6 <HAL_TIM_SlaveConfigSynchro+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d0c:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8008d10:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8008d12:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d14:	432b      	orrs	r3, r5
 8008d16:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d1a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d1e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d20:	6083      	str	r3, [r0, #8]
 8008d22:	e7e0      	b.n	8008ce6 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8008d24:	2002      	movs	r0, #2
}
 8008d26:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008d28:	2d05      	cmp	r5, #5
 8008d2a:	d010      	beq.n	8008d4e <HAL_TIM_SlaveConfigSynchro+0xce>
 8008d2c:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8008d30:	d00d      	beq.n	8008d4e <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 8008d32:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008d34:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008d36:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008d38:	f024 0401 	bic.w	r4, r4, #1
 8008d3c:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008d3e:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008d44:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8008d48:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8008d4a:	6205      	str	r5, [r0, #32]
      break;
 8008d4c:	e7cb      	b.n	8008ce6 <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8008d4e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8008d50:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8008d52:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008d56:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8008d5a:	bcf0      	pop	{r4, r5, r6, r7}
 8008d5c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d5e:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d60:	688d      	ldr	r5, [r1, #8]
 8008d62:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d64:	f024 0410 	bic.w	r4, r4, #16
 8008d68:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d6a:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8008d6c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d6e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d76:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d7a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008d7e:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8008d80:	6203      	str	r3, [r0, #32]
 8008d82:	e7b0      	b.n	8008ce6 <HAL_TIM_SlaveConfigSynchro+0x66>

08008d84 <HAL_TIM_OC_DelayElapsedCallback>:
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop

08008d88 <HAL_TIM_IC_CaptureCallback>:
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop

08008d8c <HAL_TIM_PWM_PulseFinishedCallback>:
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop

08008d90 <HAL_TIM_TriggerCallback>:
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop

08008d94 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d94:	6803      	ldr	r3, [r0, #0]
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	0791      	lsls	r1, r2, #30
{
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d9e:	d503      	bpl.n	8008da8 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	0792      	lsls	r2, r2, #30
 8008da4:	f100 808a 	bmi.w	8008ebc <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008da8:	691a      	ldr	r2, [r3, #16]
 8008daa:	0752      	lsls	r2, r2, #29
 8008dac:	d502      	bpl.n	8008db4 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	0750      	lsls	r0, r2, #29
 8008db2:	d470      	bmi.n	8008e96 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008db4:	691a      	ldr	r2, [r3, #16]
 8008db6:	0711      	lsls	r1, r2, #28
 8008db8:	d502      	bpl.n	8008dc0 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	0712      	lsls	r2, r2, #28
 8008dbe:	d458      	bmi.n	8008e72 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	06d1      	lsls	r1, r2, #27
 8008dc4:	d502      	bpl.n	8008dcc <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	06d2      	lsls	r2, r2, #27
 8008dca:	d43e      	bmi.n	8008e4a <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dcc:	691a      	ldr	r2, [r3, #16]
 8008dce:	07d0      	lsls	r0, r2, #31
 8008dd0:	d503      	bpl.n	8008dda <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	07d1      	lsls	r1, r2, #31
 8008dd6:	f100 808a 	bmi.w	8008eee <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dda:	691a      	ldr	r2, [r3, #16]
 8008ddc:	0612      	lsls	r2, r2, #24
 8008dde:	d503      	bpl.n	8008de8 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	0610      	lsls	r0, r2, #24
 8008de4:	f100 808b 	bmi.w	8008efe <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008de8:	691a      	ldr	r2, [r3, #16]
 8008dea:	05d1      	lsls	r1, r2, #23
 8008dec:	d503      	bpl.n	8008df6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	0612      	lsls	r2, r2, #24
 8008df2:	f100 808c 	bmi.w	8008f0e <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008df6:	691a      	ldr	r2, [r3, #16]
 8008df8:	0650      	lsls	r0, r2, #25
 8008dfa:	d503      	bpl.n	8008e04 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	0651      	lsls	r1, r2, #25
 8008e00:	f100 808d 	bmi.w	8008f1e <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e04:	691a      	ldr	r2, [r3, #16]
 8008e06:	0692      	lsls	r2, r2, #26
 8008e08:	d503      	bpl.n	8008e12 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	0690      	lsls	r0, r2, #26
 8008e0e:	f100 808e 	bmi.w	8008f2e <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	02d1      	lsls	r1, r2, #11
 8008e16:	d503      	bpl.n	8008e20 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	02d2      	lsls	r2, r2, #11
 8008e1c:	f100 808f 	bmi.w	8008f3e <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	0290      	lsls	r0, r2, #10
 8008e24:	d503      	bpl.n	8008e2e <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	0291      	lsls	r1, r2, #10
 8008e2a:	f100 8090 	bmi.w	8008f4e <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	0252      	lsls	r2, r2, #9
 8008e32:	d503      	bpl.n	8008e3c <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	0250      	lsls	r0, r2, #9
 8008e38:	f100 8091 	bmi.w	8008f5e <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	0211      	lsls	r1, r2, #8
 8008e40:	d502      	bpl.n	8008e48 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	0212      	lsls	r2, r2, #8
 8008e46:	d44a      	bmi.n	8008ede <HAL_TIM_IRQHandler+0x14a>
}
 8008e48:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e4a:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e4e:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e50:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e5c:	f040 8090 	bne.w	8008f80 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e60:	f7ff ff90 	bl	8008d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7ff ff91 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	7722      	strb	r2, [r4, #28]
 8008e70:	e7ac      	b.n	8008dcc <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e72:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e76:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e78:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e7a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8008e80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e82:	d17a      	bne.n	8008f7a <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e84:	f7ff ff7e 	bl	8008d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f7ff ff7f 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8e:	2200      	movs	r2, #0
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	7722      	strb	r2, [r4, #28]
 8008e94:	e794      	b.n	8008dc0 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e96:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e9a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e9c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e9e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea8:	d164      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eaa:	f7ff ff6b 	bl	8008d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7ff ff6c 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	7722      	strb	r2, [r4, #28]
 8008eba:	e77b      	b.n	8008db4 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ebc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ec0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ec2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ec4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	0799      	lsls	r1, r3, #30
 8008eca:	d150      	bne.n	8008f6e <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ecc:	f7ff ff5a 	bl	8008d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff ff5b 	bl	8008d8c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	7722      	strb	r2, [r4, #28]
 8008edc:	e764      	b.n	8008da8 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008ede:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008ee2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008ee4:	611a      	str	r2, [r3, #16]
}
 8008ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008eea:	f000 ba29 	b.w	8009340 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008eee:	f06f 0201 	mvn.w	r2, #1
 8008ef2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f7f8 fb9f 	bl	8001638 <HAL_TIM_PeriodElapsedCallback>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	e76d      	b.n	8008dda <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008efe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f02:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 fa11 	bl	800932c <HAL_TIMEx_BreakCallback>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	e76c      	b.n	8008de8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f12:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 fa0b 	bl	8009330 <HAL_TIMEx_Break2Callback>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	e76b      	b.n	8008df6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7ff ff33 	bl	8008d90 <HAL_TIM_TriggerCallback>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	e76a      	b.n	8008e04 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f2e:	f06f 0220 	mvn.w	r2, #32
 8008f32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008f34:	4620      	mov	r0, r4
 8008f36:	f000 f9f7 	bl	8009328 <HAL_TIMEx_CommutCallback>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	e769      	b.n	8008e12 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008f3e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008f42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 f9f5 	bl	8009334 <HAL_TIMEx_EncoderIndexCallback>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	e768      	b.n	8008e20 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008f4e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008f52:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 f9ef 	bl	8009338 <HAL_TIMEx_DirectionChangeCallback>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	e767      	b.n	8008e2e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008f5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008f62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 f9e9 	bl	800933c <HAL_TIMEx_IndexErrorCallback>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	e766      	b.n	8008e3c <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8008f6e:	f7ff ff0b 	bl	8008d88 <HAL_TIM_IC_CaptureCallback>
 8008f72:	e7b0      	b.n	8008ed6 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8008f74:	f7ff ff08 	bl	8008d88 <HAL_TIM_IC_CaptureCallback>
 8008f78:	e79c      	b.n	8008eb4 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8008f7a:	f7ff ff05 	bl	8008d88 <HAL_TIM_IC_CaptureCallback>
 8008f7e:	e786      	b.n	8008e8e <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8008f80:	f7ff ff02 	bl	8008d88 <HAL_TIM_IC_CaptureCallback>
 8008f84:	e771      	b.n	8008e6a <HAL_TIM_IRQHandler+0xd6>
 8008f86:	bf00      	nop

08008f88 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	f023 0310 	bic.w	r3, r3, #16
 8008f8e:	6203      	str	r3, [r0, #32]
{
 8008f90:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8008f92:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008f94:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008f96:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f98:	4f19      	ldr	r7, [pc, #100]	; (8009000 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f9a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f9c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8008fa2:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fa6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008faa:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fb4:	d00f      	beq.n	8008fd6 <TIM_OC2_SetConfig+0x4e>
 8008fb6:	4c13      	ldr	r4, [pc, #76]	; (8009004 <TIM_OC2_SetConfig+0x7c>)
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d00c      	beq.n	8008fd6 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fbc:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d00f      	beq.n	8008fe4 <TIM_OC2_SetConfig+0x5c>
 8008fc4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d00b      	beq.n	8008fe4 <TIM_OC2_SetConfig+0x5c>
 8008fcc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008fd0:	42a0      	cmp	r0, r4
 8008fd2:	d10e      	bne.n	8008ff2 <TIM_OC2_SetConfig+0x6a>
 8008fd4:	e006      	b.n	8008fe4 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fd6:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fdc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fe4:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fe8:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fec:	432c      	orrs	r4, r5
 8008fee:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008ff2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008ff4:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008ff6:	6182      	str	r2, [r0, #24]
}
 8008ff8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8008ffa:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008ffc:	6203      	str	r3, [r0, #32]
}
 8008ffe:	4770      	bx	lr
 8009000:	40012c00 	.word	0x40012c00
 8009004:	40013400 	.word	0x40013400

08009008 <HAL_TIM_PWM_ConfigChannel>:
{
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800900a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800900e:	2b01      	cmp	r3, #1
 8009010:	f000 80e4 	beq.w	80091dc <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8009014:	2301      	movs	r3, #1
 8009016:	4604      	mov	r4, r0
 8009018:	460d      	mov	r5, r1
 800901a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800901e:	2a14      	cmp	r2, #20
 8009020:	d844      	bhi.n	80090ac <HAL_TIM_PWM_ConfigChannel+0xa4>
 8009022:	e8df f002 	tbb	[pc, r2]
 8009026:	4347      	.short	0x4347
 8009028:	435b4343 	.word	0x435b4343
 800902c:	43704343 	.word	0x43704343
 8009030:	43844343 	.word	0x43844343
 8009034:	43994343 	.word	0x43994343
 8009038:	4343      	.short	0x4343
 800903a:	0b          	.byte	0x0b
 800903b:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800903c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800903e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009042:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009044:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009046:	4e6c      	ldr	r6, [pc, #432]	; (80091f8 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009048:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800904c:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800904e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009050:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009054:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009058:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800905c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009060:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009062:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009066:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800906a:	d008      	beq.n	800907e <HAL_TIM_PWM_ConfigChannel+0x76>
 800906c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009070:	42b3      	cmp	r3, r6
 8009072:	d004      	beq.n	800907e <HAL_TIM_PWM_ConfigChannel+0x76>
 8009074:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8009078:	42b3      	cmp	r3, r6
 800907a:	f040 80b1 	bne.w	80091e0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800907e:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009080:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009084:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8009088:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800908a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800908c:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 800908e:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8009090:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009092:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009094:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009096:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800909a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800909c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800909e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80090a2:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090a6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80090aa:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80090ac:	2000      	movs	r0, #0
 80090ae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80090b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090b4:	6800      	ldr	r0, [r0, #0]
 80090b6:	f7ff fb17 	bl	80086e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090ba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090bc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090be:	6999      	ldr	r1, [r3, #24]
 80090c0:	f041 0108 	orr.w	r1, r1, #8
 80090c4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090c6:	6999      	ldr	r1, [r3, #24]
 80090c8:	f021 0104 	bic.w	r1, r1, #4
 80090cc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090ce:	699a      	ldr	r2, [r3, #24]
 80090d0:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80090d2:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090d4:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80090d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80090da:	e7ea      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090dc:	6800      	ldr	r0, [r0, #0]
 80090de:	f7ff ff53 	bl	8008f88 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090e4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090e6:	6999      	ldr	r1, [r3, #24]
 80090e8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80090ec:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090ee:	6999      	ldr	r1, [r3, #24]
 80090f0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80090f4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090f6:	699a      	ldr	r2, [r3, #24]
 80090f8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80090fc:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090fe:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8009100:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8009104:	e7d5      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009106:	6800      	ldr	r0, [r0, #0]
 8009108:	f7ff fb2c 	bl	8008764 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800910c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800910e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009110:	69d9      	ldr	r1, [r3, #28]
 8009112:	f041 0108 	orr.w	r1, r1, #8
 8009116:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009118:	69d9      	ldr	r1, [r3, #28]
 800911a:	f021 0104 	bic.w	r1, r1, #4
 800911e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009120:	69da      	ldr	r2, [r3, #28]
 8009122:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8009124:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009126:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8009128:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800912c:	e7c1      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800912e:	6800      	ldr	r0, [r0, #0]
 8009130:	f7ff fb58 	bl	80087e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009134:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009136:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009138:	69d9      	ldr	r1, [r3, #28]
 800913a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800913e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009140:	69d9      	ldr	r1, [r3, #28]
 8009142:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009146:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009148:	69da      	ldr	r2, [r3, #28]
 800914a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 800914e:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009150:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8009152:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8009156:	e7ac      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009158:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800915a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800915e:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8009160:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009162:	4e25      	ldr	r6, [pc, #148]	; (80091f8 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009164:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009168:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800916a:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800916c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800916e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009170:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8009174:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009178:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800917c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800917e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8009182:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009186:	d00f      	beq.n	80091a8 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009188:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800918c:	42b3      	cmp	r3, r6
 800918e:	d00b      	beq.n	80091a8 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009190:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8009194:	42b3      	cmp	r3, r6
 8009196:	d007      	beq.n	80091a8 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009198:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800919c:	42b3      	cmp	r3, r6
 800919e:	d003      	beq.n	80091a8 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 80091a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80091a4:	42b3      	cmp	r3, r6
 80091a6:	d104      	bne.n	80091b2 <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091a8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091aa:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091ae:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 80091b2:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80091b4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80091b6:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80091b8:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80091ba:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091be:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091c0:	f041 0108 	orr.w	r1, r1, #8
 80091c4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091c6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80091c8:	f021 0104 	bic.w	r1, r1, #4
 80091cc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091d0:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80091d2:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091d4:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80091d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80091da:	e76a      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 80091dc:	2002      	movs	r0, #2
}
 80091de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80091e4:	42b3      	cmp	r3, r6
 80091e6:	f43f af4a 	beq.w	800907e <HAL_TIM_PWM_ConfigChannel+0x76>
 80091ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80091ee:	42b3      	cmp	r3, r6
 80091f0:	f47f af4a 	bne.w	8009088 <HAL_TIM_PWM_ConfigChannel+0x80>
 80091f4:	e743      	b.n	800907e <HAL_TIM_PWM_ConfigChannel+0x76>
 80091f6:	bf00      	nop
 80091f8:	40012c00 	.word	0x40012c00

080091fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d03c      	beq.n	800927e <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8009204:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009206:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009208:	4c1e      	ldr	r4, [pc, #120]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800920a:	2302      	movs	r3, #2
 800920c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009210:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8009212:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009214:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009216:	d026      	beq.n	8009266 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8009218:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800921c:	42a2      	cmp	r2, r4
 800921e:	d022      	beq.n	8009266 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009220:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009222:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800922a:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800922c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8009230:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009232:	d00a      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8009236:	429a      	cmp	r2, r3
 8009238:	d007      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800923a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800923e:	429a      	cmp	r2, r3
 8009240:	d003      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8009242:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8009246:	429a      	cmp	r2, r3
 8009248:	d104      	bne.n	8009254 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800924a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800924c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009250:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009252:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8009254:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8009256:	2201      	movs	r2, #1
 8009258:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800925c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8009260:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8009262:	4618      	mov	r0, r3
}
 8009264:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009266:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800926a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800926e:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8009270:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009278:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800927a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800927c:	e7e5      	b.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 800927e:	2002      	movs	r0, #2
}
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40012c00 	.word	0x40012c00
 8009288:	40000400 	.word	0x40000400

0800928c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800928c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009290:	2b01      	cmp	r3, #1
 8009292:	d044      	beq.n	800931e <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8009294:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009296:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800929a:	4602      	mov	r2, r0
 800929c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092a0:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092a4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092aa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092b0:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092b4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ba:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092c0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092c2:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092c4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ca:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092cc:	4c15      	ldr	r4, [pc, #84]	; (8009324 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80092ce:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092d0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092d4:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092d6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092da:	d00a      	beq.n	80092f2 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80092dc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80092e0:	42a0      	cmp	r0, r4
 80092e2:	d006      	beq.n	80092f2 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80092e4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80092e6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80092e8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80092ec:	4608      	mov	r0, r1
}
 80092ee:	bc30      	pop	{r4, r5}
 80092f0:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092f2:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092fa:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009300:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009304:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800930c:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800930e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009312:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009314:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009316:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800931a:	430b      	orrs	r3, r1
 800931c:	e7e2      	b.n	80092e4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800931e:	2002      	movs	r0, #2
}
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	40012c00 	.word	0x40012c00

08009328 <HAL_TIMEx_CommutCallback>:
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop

0800932c <HAL_TIMEx_BreakCallback>:
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop

08009330 <HAL_TIMEx_Break2Callback>:
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop

08009334 <HAL_TIMEx_EncoderIndexCallback>:
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop

08009338 <HAL_TIMEx_DirectionChangeCallback>:
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop

0800933c <HAL_TIMEx_IndexErrorCallback>:
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop

08009340 <HAL_TIMEx_TransitionErrorCallback>:
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop

08009344 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009344:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009346:	07da      	lsls	r2, r3, #31
{
 8009348:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800934a:	d506      	bpl.n	800935a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800934c:	6801      	ldr	r1, [r0, #0]
 800934e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009350:	684a      	ldr	r2, [r1, #4]
 8009352:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009356:	4322      	orrs	r2, r4
 8009358:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800935a:	079c      	lsls	r4, r3, #30
 800935c:	d506      	bpl.n	800936c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800935e:	6801      	ldr	r1, [r0, #0]
 8009360:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009362:	684a      	ldr	r2, [r1, #4]
 8009364:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009368:	4322      	orrs	r2, r4
 800936a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800936c:	0759      	lsls	r1, r3, #29
 800936e:	d506      	bpl.n	800937e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009370:	6801      	ldr	r1, [r0, #0]
 8009372:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009374:	684a      	ldr	r2, [r1, #4]
 8009376:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800937a:	4322      	orrs	r2, r4
 800937c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800937e:	071a      	lsls	r2, r3, #28
 8009380:	d506      	bpl.n	8009390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009382:	6801      	ldr	r1, [r0, #0]
 8009384:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009386:	684a      	ldr	r2, [r1, #4]
 8009388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800938c:	4322      	orrs	r2, r4
 800938e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009390:	06dc      	lsls	r4, r3, #27
 8009392:	d506      	bpl.n	80093a2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009394:	6801      	ldr	r1, [r0, #0]
 8009396:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009398:	688a      	ldr	r2, [r1, #8]
 800939a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800939e:	4322      	orrs	r2, r4
 80093a0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093a2:	0699      	lsls	r1, r3, #26
 80093a4:	d506      	bpl.n	80093b4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093a6:	6801      	ldr	r1, [r0, #0]
 80093a8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80093aa:	688a      	ldr	r2, [r1, #8]
 80093ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093b0:	4322      	orrs	r2, r4
 80093b2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093b4:	065a      	lsls	r2, r3, #25
 80093b6:	d509      	bpl.n	80093cc <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093b8:	6801      	ldr	r1, [r0, #0]
 80093ba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80093bc:	684a      	ldr	r2, [r1, #4]
 80093be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80093c2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093c4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093ca:	d00b      	beq.n	80093e4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093cc:	061b      	lsls	r3, r3, #24
 80093ce:	d506      	bpl.n	80093de <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093d0:	6802      	ldr	r2, [r0, #0]
 80093d2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80093d4:	6853      	ldr	r3, [r2, #4]
 80093d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80093da:	430b      	orrs	r3, r1
 80093dc:	6053      	str	r3, [r2, #4]
  }
}
 80093de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093e2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e4:	684a      	ldr	r2, [r1, #4]
 80093e6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80093e8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80093ec:	4322      	orrs	r2, r4
 80093ee:	604a      	str	r2, [r1, #4]
 80093f0:	e7ec      	b.n	80093cc <UART_AdvFeatureConfig+0x88>
 80093f2:	bf00      	nop

080093f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0
{
 80093f8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093fa:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093fe:	f7fc f919 	bl	8005634 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8009408:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800940a:	d40d      	bmi.n	8009428 <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	0752      	lsls	r2, r2, #29
 8009410:	d431      	bmi.n	8009476 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009412:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009414:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 8009416:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800941a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 800941e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8009420:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009424:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009426:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009428:	69da      	ldr	r2, [r3, #28]
 800942a:	0292      	lsls	r2, r2, #10
 800942c:	d4ee      	bmi.n	800940c <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800942e:	f7fc f901 	bl	8005634 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009432:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009434:	1b40      	subs	r0, r0, r5
 8009436:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800943a:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800943c:	d22c      	bcs.n	8009498 <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800943e:	0750      	lsls	r0, r2, #29
 8009440:	d5f2      	bpl.n	8009428 <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	0511      	lsls	r1, r2, #20
 8009446:	d5ef      	bpl.n	8009428 <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800944c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009454:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009456:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009458:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945a:	f021 0101 	bic.w	r1, r1, #1
 800945e:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009460:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8009462:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8009466:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800946a:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 800946c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009470:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8009474:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	0258      	lsls	r0, r3, #9
 800947a:	d4ca      	bmi.n	8009412 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800947c:	f7fc f8da 	bl	8005634 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009480:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009482:	1b40      	subs	r0, r0, r5
 8009484:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009488:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948a:	d205      	bcs.n	8009498 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800948c:	0751      	lsls	r1, r2, #29
 800948e:	d5f2      	bpl.n	8009476 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009490:	69da      	ldr	r2, [r3, #28]
 8009492:	0512      	lsls	r2, r2, #20
 8009494:	d5ef      	bpl.n	8009476 <UART_CheckIdleState+0x82>
 8009496:	e7d7      	b.n	8009448 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800949c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949e:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80094a0:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a2:	f022 0201 	bic.w	r2, r2, #1
 80094a6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80094a8:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80094aa:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80094ae:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80094b2:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80094b4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 80094b8:	bd38      	pop	{r3, r4, r5, pc}
 80094ba:	bf00      	nop

080094bc <HAL_UART_Init>:
  if (huart == NULL)
 80094bc:	2800      	cmp	r0, #0
 80094be:	f000 817f 	beq.w	80097c0 <HAL_UART_Init+0x304>
  if (huart->gState == HAL_UART_STATE_RESET)
 80094c2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80094c6:	b570      	push	{r4, r5, r6, lr}
 80094c8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d056      	beq.n	800957c <HAL_UART_Init+0xc0>
  __HAL_UART_DISABLE(huart);
 80094ce:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094d0:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094d2:	49c1      	ldr	r1, [pc, #772]	; (80097d8 <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 80094d4:	2224      	movs	r2, #36	; 0x24
 80094d6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80094da:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094dc:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80094de:	f020 0001 	bic.w	r0, r0, #1
 80094e2:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094e4:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094e6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094e8:	4332      	orrs	r2, r6
 80094ea:	4302      	orrs	r2, r0
 80094ec:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094ee:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094f0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094f2:	430a      	orrs	r2, r1
 80094f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094fa:	49b8      	ldr	r1, [pc, #736]	; (80097dc <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009500:	432a      	orrs	r2, r5
 8009502:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009504:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009506:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009508:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800950a:	d03c      	beq.n	8009586 <HAL_UART_Init+0xca>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800950c:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009510:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009514:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8009518:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800951a:	430a      	orrs	r2, r1
 800951c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009520:	49af      	ldr	r1, [pc, #700]	; (80097e0 <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009522:	f022 020f 	bic.w	r2, r2, #15
 8009526:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009528:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800952a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800952c:	d012      	beq.n	8009554 <HAL_UART_Init+0x98>
 800952e:	4aad      	ldr	r2, [pc, #692]	; (80097e4 <HAL_UART_Init+0x328>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d07b      	beq.n	800962c <HAL_UART_Init+0x170>
 8009534:	4aac      	ldr	r2, [pc, #688]	; (80097e8 <HAL_UART_Init+0x32c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	f000 8130 	beq.w	800979c <HAL_UART_Init+0x2e0>
 800953c:	4aab      	ldr	r2, [pc, #684]	; (80097ec <HAL_UART_Init+0x330>)
 800953e:	4293      	cmp	r3, r2
 8009540:	f000 80cf 	beq.w	80096e2 <HAL_UART_Init+0x226>
  huart->NbRxDataToProcess = 1;
 8009544:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8009548:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800954a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800954e:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8009550:	2001      	movs	r0, #1
 8009552:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009554:	4ba6      	ldr	r3, [pc, #664]	; (80097f0 <HAL_UART_Init+0x334>)
 8009556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955a:	f003 0303 	and.w	r3, r3, #3
 800955e:	3b01      	subs	r3, #1
 8009560:	2b02      	cmp	r3, #2
 8009562:	f240 80d7 	bls.w	8009714 <HAL_UART_Init+0x258>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009566:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800956a:	f000 8131 	beq.w	80097d0 <HAL_UART_Init+0x314>
        pclk = HAL_RCC_GetPCLK2Freq();
 800956e:	f7fe fb9f 	bl	8007cb0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009572:	2800      	cmp	r0, #0
 8009574:	f000 80d1 	beq.w	800971a <HAL_UART_Init+0x25e>
 8009578:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800957a:	e081      	b.n	8009680 <HAL_UART_Init+0x1c4>
    huart->Lock = HAL_UNLOCKED;
 800957c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009580:	f7fb fb12 	bl	8004ba8 <HAL_UART_MspInit>
 8009584:	e7a3      	b.n	80094ce <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009586:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800958a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800958e:	430a      	orrs	r2, r1
 8009590:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009594:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009596:	4896      	ldr	r0, [pc, #600]	; (80097f0 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009598:	f022 020f 	bic.w	r2, r2, #15
 800959c:	430a      	orrs	r2, r1
 800959e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095a0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80095a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80095a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ac:	f000 8134 	beq.w	8009818 <HAL_UART_Init+0x35c>
 80095b0:	d80c      	bhi.n	80095cc <HAL_UART_Init+0x110>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 812b 	beq.w	800980e <HAL_UART_Init+0x352>
 80095b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095bc:	d1c2      	bne.n	8009544 <HAL_UART_Init+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 80095be:	f7fe fa27 	bl	8007a10 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f000 80a9 	beq.w	800971a <HAL_UART_Init+0x25e>
 80095c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095ca:	e004      	b.n	80095d6 <HAL_UART_Init+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095d0:	d1b8      	bne.n	8009544 <HAL_UART_Init+0x88>
        pclk = (uint32_t) LSE_VALUE;
 80095d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095d6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095d8:	4b86      	ldr	r3, [pc, #536]	; (80097f4 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095da:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095de:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80095e2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095e6:	42b3      	cmp	r3, r6
 80095e8:	d3ac      	bcc.n	8009544 <HAL_UART_Init+0x88>
 80095ea:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80095ee:	d8a9      	bhi.n	8009544 <HAL_UART_Init+0x88>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095f0:	2600      	movs	r6, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	4631      	mov	r1, r6
 80095f6:	f7f7 fa55 	bl	8000aa4 <__aeabi_uldivmod>
 80095fa:	020b      	lsls	r3, r1, #8
 80095fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009600:	0202      	lsls	r2, r0, #8
 8009602:	0868      	lsrs	r0, r5, #1
 8009604:	1810      	adds	r0, r2, r0
 8009606:	f143 0100 	adc.w	r1, r3, #0
 800960a:	462a      	mov	r2, r5
 800960c:	4633      	mov	r3, r6
 800960e:	f7f7 fa49 	bl	8000aa4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009612:	4b79      	ldr	r3, [pc, #484]	; (80097f8 <HAL_UART_Init+0x33c>)
 8009614:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009618:	429a      	cmp	r2, r3
 800961a:	d893      	bhi.n	8009544 <HAL_UART_Init+0x88>
          huart->Instance->BRR = usartdiv;
 800961c:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800961e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8009622:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8009624:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009628:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 800962a:	e043      	b.n	80096b4 <HAL_UART_Init+0x1f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800962c:	4b70      	ldr	r3, [pc, #448]	; (80097f0 <HAL_UART_Init+0x334>)
 800962e:	4a73      	ldr	r2, [pc, #460]	; (80097fc <HAL_UART_Init+0x340>)
 8009630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009634:	f003 030c 	and.w	r3, r3, #12
 8009638:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800963a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800963e:	d079      	beq.n	8009734 <HAL_UART_Init+0x278>
    switch (clocksource)
 8009640:	2b08      	cmp	r3, #8
 8009642:	f63f af7f 	bhi.w	8009544 <HAL_UART_Init+0x88>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <HAL_UART_Init+0x190>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	0800970f 	.word	0x0800970f
 8009650:	0800956f 	.word	0x0800956f
 8009654:	080096df 	.word	0x080096df
 8009658:	08009545 	.word	0x08009545
 800965c:	08009703 	.word	0x08009703
 8009660:	08009545 	.word	0x08009545
 8009664:	08009545 	.word	0x08009545
 8009668:	08009545 	.word	0x08009545
 800966c:	0800967d 	.word	0x0800967d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009670:	2b30      	cmp	r3, #48	; 0x30
 8009672:	f47f af67 	bne.w	8009544 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009676:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800967a:	d074      	beq.n	8009766 <HAL_UART_Init+0x2aa>
 800967c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009680:	6862      	ldr	r2, [r4, #4]
 8009682:	4b5c      	ldr	r3, [pc, #368]	; (80097f4 <HAL_UART_Init+0x338>)
 8009684:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8009688:	fbb0 f3f3 	udiv	r3, r0, r3
 800968c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009690:	fbb3 f3f2 	udiv	r3, r3, r2
 8009694:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009696:	f1a3 0110 	sub.w	r1, r3, #16
 800969a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800969e:	4291      	cmp	r1, r2
 80096a0:	f63f af50 	bhi.w	8009544 <HAL_UART_Init+0x88>
        huart->Instance->BRR = usartdiv;
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 80096a8:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80096aa:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80096ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096b2:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d138      	bne.n	800972c <HAL_UART_Init+0x270>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096ca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80096d2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80096d4:	601a      	str	r2, [r3, #0]
}
 80096d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 80096da:	f7ff be8b 	b.w	80093f4 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 80096de:	4848      	ldr	r0, [pc, #288]	; (8009800 <HAL_UART_Init+0x344>)
 80096e0:	e7ce      	b.n	8009680 <HAL_UART_Init+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096e2:	4b43      	ldr	r3, [pc, #268]	; (80097f0 <HAL_UART_Init+0x334>)
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096ec:	2b80      	cmp	r3, #128	; 0x80
 80096ee:	f000 8095 	beq.w	800981c <HAL_UART_Init+0x360>
 80096f2:	d861      	bhi.n	80097b8 <HAL_UART_Init+0x2fc>
 80096f4:	b143      	cbz	r3, 8009708 <HAL_UART_Init+0x24c>
 80096f6:	2b40      	cmp	r3, #64	; 0x40
 80096f8:	f47f af24 	bne.w	8009544 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009700:	d060      	beq.n	80097c4 <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 8009702:	f7fe f985 	bl	8007a10 <HAL_RCC_GetSysClockFreq>
        break;
 8009706:	e734      	b.n	8009572 <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009708:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800970c:	d07c      	beq.n	8009808 <HAL_UART_Init+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800970e:	f7fe fabd 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
        break;
 8009712:	e72e      	b.n	8009572 <HAL_UART_Init+0xb6>
 8009714:	4a3b      	ldr	r2, [pc, #236]	; (8009804 <HAL_UART_Init+0x348>)
 8009716:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8009718:	e78f      	b.n	800963a <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 800971a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800971c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8009722:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009726:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0c6      	beq.n	80096ba <HAL_UART_Init+0x1fe>
    UART_AdvFeatureConfig(huart);
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff fe09 	bl	8009344 <UART_AdvFeatureConfig>
 8009732:	e7c2      	b.n	80096ba <HAL_UART_Init+0x1fe>
    switch (clocksource)
 8009734:	2b08      	cmp	r3, #8
 8009736:	f63f af05 	bhi.w	8009544 <HAL_UART_Init+0x88>
 800973a:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <HAL_UART_Init+0x284>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009809 	.word	0x08009809
 8009744:	080097d1 	.word	0x080097d1
 8009748:	08009765 	.word	0x08009765
 800974c:	08009545 	.word	0x08009545
 8009750:	080097c5 	.word	0x080097c5
 8009754:	08009545 	.word	0x08009545
 8009758:	08009545 	.word	0x08009545
 800975c:	08009545 	.word	0x08009545
 8009760:	08009767 	.word	0x08009767
        pclk = (uint32_t) HSI_VALUE;
 8009764:	4826      	ldr	r0, [pc, #152]	; (8009800 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	4922      	ldr	r1, [pc, #136]	; (80097f4 <HAL_UART_Init+0x338>)
 800976a:	0853      	lsrs	r3, r2, #1
 800976c:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8009770:	fbb0 f0f1 	udiv	r0, r0, r1
 8009774:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009778:	fbb0 f0f2 	udiv	r0, r0, r2
 800977c:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800977e:	f1a2 0110 	sub.w	r1, r2, #16
 8009782:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009786:	4299      	cmp	r1, r3
 8009788:	f63f aedc 	bhi.w	8009544 <HAL_UART_Init+0x88>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800978c:	f020 030f 	bic.w	r3, r0, #15
 8009790:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009792:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8009796:	6820      	ldr	r0, [r4, #0]
 8009798:	4313      	orrs	r3, r2
 800979a:	e784      	b.n	80096a6 <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800979c:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <HAL_UART_Init+0x334>)
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d038      	beq.n	800981c <HAL_UART_Init+0x360>
 80097aa:	f63f af61 	bhi.w	8009670 <HAL_UART_Init+0x1b4>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0aa      	beq.n	8009708 <HAL_UART_Init+0x24c>
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d0a2      	beq.n	80096fc <HAL_UART_Init+0x240>
 80097b6:	e6c5      	b.n	8009544 <HAL_UART_Init+0x88>
 80097b8:	2bc0      	cmp	r3, #192	; 0xc0
 80097ba:	f43f af5c 	beq.w	8009676 <HAL_UART_Init+0x1ba>
 80097be:	e6c1      	b.n	8009544 <HAL_UART_Init+0x88>
}
 80097c0:	2001      	movs	r0, #1
 80097c2:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 80097c4:	f7fe f924 	bl	8007a10 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d0a6      	beq.n	800971a <HAL_UART_Init+0x25e>
 80097cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097ce:	e7ca      	b.n	8009766 <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK2Freq();
 80097d0:	f7fe fa6e 	bl	8007cb0 <HAL_RCC_GetPCLK2Freq>
        break;
 80097d4:	e7f8      	b.n	80097c8 <HAL_UART_Init+0x30c>
 80097d6:	bf00      	nop
 80097d8:	cfff69f3 	.word	0xcfff69f3
 80097dc:	40008000 	.word	0x40008000
 80097e0:	40013800 	.word	0x40013800
 80097e4:	40004400 	.word	0x40004400
 80097e8:	40004800 	.word	0x40004800
 80097ec:	40004c00 	.word	0x40004c00
 80097f0:	40021000 	.word	0x40021000
 80097f4:	0800b880 	.word	0x0800b880
 80097f8:	000ffcff 	.word	0x000ffcff
 80097fc:	0800b870 	.word	0x0800b870
 8009800:	00f42400 	.word	0x00f42400
 8009804:	0800b86c 	.word	0x0800b86c
        pclk = HAL_RCC_GetPCLK1Freq();
 8009808:	f7fe fa40 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
        break;
 800980c:	e7dc      	b.n	80097c8 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800980e:	f7fe fa3d 	bl	8007c8c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009812:	2800      	cmp	r0, #0
 8009814:	d081      	beq.n	800971a <HAL_UART_Init+0x25e>
 8009816:	e6d7      	b.n	80095c8 <HAL_UART_Init+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009818:	4803      	ldr	r0, [pc, #12]	; (8009828 <HAL_UART_Init+0x36c>)
 800981a:	e6dc      	b.n	80095d6 <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800981c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009822:	f47f af2d 	bne.w	8009680 <HAL_UART_Init+0x1c4>
 8009826:	e79e      	b.n	8009766 <HAL_UART_Init+0x2aa>
 8009828:	00f42400 	.word	0x00f42400

0800982c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800982c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009830:	2a01      	cmp	r2, #1
 8009832:	d017      	beq.n	8009864 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009834:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009836:	2124      	movs	r1, #36	; 0x24
{
 8009838:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800983a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 800983e:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009840:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009842:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009844:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009846:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800984a:	f024 0401 	bic.w	r4, r4, #1
 800984e:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8009850:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009852:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009854:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009856:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 800985a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800985c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009860:	bc30      	pop	{r4, r5}
 8009862:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009864:	2002      	movs	r0, #2
}
 8009866:	4770      	bx	lr

08009868 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009868:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800986c:	2a01      	cmp	r2, #1
 800986e:	d033      	beq.n	80098d8 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8009870:	4603      	mov	r3, r0
 8009872:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009874:	681a      	ldr	r2, [r3, #0]
{
 8009876:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009878:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800987c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800987e:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009880:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8009882:	f020 0001 	bic.w	r0, r0, #1
 8009886:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009888:	6890      	ldr	r0, [r2, #8]
 800988a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800988e:	4301      	orrs	r1, r0
 8009890:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009892:	b1f5      	cbz	r5, 80098d2 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009894:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009896:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009898:	4810      	ldr	r0, [pc, #64]	; (80098dc <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800989a:	4f11      	ldr	r7, [pc, #68]	; (80098e0 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800989c:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098a0:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098a2:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098a4:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80098a6:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80098a8:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098aa:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ac:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ae:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098b2:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098b6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80098ba:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80098bc:	2520      	movs	r5, #32
 80098be:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098c2:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80098c4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80098c8:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80098ca:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80098ce:	bcf0      	pop	{r4, r5, r6, r7}
 80098d0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80098d2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80098d4:	4608      	mov	r0, r1
 80098d6:	e7ee      	b.n	80098b6 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80098d8:	2002      	movs	r0, #2
}
 80098da:	4770      	bx	lr
 80098dc:	0800b8a0 	.word	0x0800b8a0
 80098e0:	0800b898 	.word	0x0800b898

080098e4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80098e4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80098e8:	2a01      	cmp	r2, #1
 80098ea:	d033      	beq.n	8009954 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80098ec:	4603      	mov	r3, r0
 80098ee:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098f0:	681a      	ldr	r2, [r3, #0]
{
 80098f2:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80098f4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098f8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80098fa:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098fc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80098fe:	f020 0001 	bic.w	r0, r0, #1
 8009902:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009904:	6890      	ldr	r0, [r2, #8]
 8009906:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800990a:	4301      	orrs	r1, r0
 800990c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800990e:	b1f5      	cbz	r5, 800994e <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009910:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009912:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009914:	4810      	ldr	r0, [pc, #64]	; (8009958 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8009916:	4f11      	ldr	r7, [pc, #68]	; (800995c <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009918:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800991c:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800991e:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009920:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009922:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009924:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009926:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009928:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800992a:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800992e:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009932:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009936:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8009938:	2520      	movs	r5, #32
 800993a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800993e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009940:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009944:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009946:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800994a:	bcf0      	pop	{r4, r5, r6, r7}
 800994c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800994e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009950:	4608      	mov	r0, r1
 8009952:	e7ee      	b.n	8009932 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8009954:	2002      	movs	r0, #2
}
 8009956:	4770      	bx	lr
 8009958:	0800b8a0 	.word	0x0800b8a0
 800995c:	0800b898 	.word	0x0800b898

08009960 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8009960:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8009962:	8840      	ldrh	r0, [r0, #2]
 8009964:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8009968:	0c00      	lsrs	r0, r0, #16
 800996a:	4770      	bx	lr

0800996c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800996c:	b410      	push	{r4}
 800996e:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009970:	8802      	ldrh	r2, [r0, #0]
 8009972:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8009974:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009978:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800997c:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009980:	42a2      	cmp	r2, r4
{
 8009982:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009984:	d219      	bcs.n	80099ba <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8009986:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 800998a:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800998e:	b2e4      	uxtb	r4, r4
 8009990:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8009994:	8882      	ldrh	r2, [r0, #4]
 8009996:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800999a:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800999c:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80099a0:	bfbc      	itt	lt
 80099a2:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80099a6:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bfbc      	itt	lt
 80099ac:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80099b0:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80099b2:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80099b6:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80099ba:	b289      	uxth	r1, r1
 80099bc:	2000      	movs	r0, #0
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f361 000f 	bfi	r0, r1, #0, #16
 80099c4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80099c8:	b005      	add	sp, #20
 80099ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 80099d0:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 80099d2:	2400      	movs	r4, #0
 80099d4:	81c4      	strh	r4, [r0, #14]
  pHandle->pVSS = pVSS;
 80099d6:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->EncRestart = false;
}
 80099da:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pENC = pENC;
 80099de:	6083      	str	r3, [r0, #8]
}
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop

080099e4 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 80099e4:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 80099e6:	2200      	movs	r2, #0
{
 80099e8:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 80099ea:	4611      	mov	r1, r2
 80099ec:	6840      	ldr	r0, [r0, #4]
 80099ee:	f001 fe15 	bl	800b61c <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 80099f2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80099f6:	6860      	ldr	r0, [r4, #4]
 80099f8:	f001 fe08 	bl	800b60c <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80099fc:	6820      	ldr	r0, [r4, #0]
 80099fe:	2100      	movs	r1, #0
 8009a00:	f001 fb96 	bl	800b130 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8009a04:	2200      	movs	r2, #0
 8009a06:	4611      	mov	r1, r2
 8009a08:	6820      	ldr	r0, [r4, #0]
 8009a0a:	f001 fb95 	bl	800b138 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 8009a0e:	8ae2      	ldrh	r2, [r4, #22]
 8009a10:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	f001 fb8f 	bl	800b138 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8009a1a:	8ae1      	ldrh	r1, [r4, #22]
 8009a1c:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 8009a1e:	4a04      	ldr	r2, [pc, #16]	; (8009a30 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8009a20:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 8009a24:	fba2 2303 	umull	r2, r3, r2, r3
 8009a28:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	81a3      	strh	r3, [r4, #12]
}
 8009a2e:	bd10      	pop	{r4, pc}
 8009a30:	10624dd3 	.word	0x10624dd3

08009a34 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 8009a34:	8983      	ldrh	r3, [r0, #12]
 8009a36:	b13b      	cbz	r3, 8009a48 <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29b      	uxth	r3, r3
{
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 8009a40:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 8009a42:	b11b      	cbz	r3, 8009a4c <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 8009a44:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 8009a46:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8009a48:	2001      	movs	r0, #1
}
 8009a4a:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 8009a4c:	7e03      	ldrb	r3, [r0, #24]
 8009a4e:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8009a52:	6880      	ldr	r0, [r0, #8]
 8009a54:	fb91 f1f3 	sdiv	r1, r1, r3
 8009a58:	f000 f948 	bl	8009cec <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	73a0      	strb	r0, [r4, #14]
}
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	bf00      	nop

08009a64 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 8009a64:	7b80      	ldrb	r0, [r0, #14]
 8009a66:	4770      	bx	lr

08009a68 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 8009a68:	73c1      	strb	r1, [r0, #15]
}
 8009a6a:	4770      	bx	lr

08009a6c <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 8009a6c:	7bc0      	ldrb	r0, [r0, #15]
 8009a6e:	4770      	bx	lr

08009a70 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 8009a70:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8009a72:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 8009a76:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8009a78:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8009a7a:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8009a7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009a82:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009a84:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8009a86:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8009a8a:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8009a8c:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8009a90:	6259      	str	r1, [r3, #36]	; 0x24
 8009a92:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8009a96:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8009a98:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8009a9a:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8009a9c:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8009aa0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009aa4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8009aa8:	619a      	str	r2, [r3, #24]
 8009aaa:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8009aac:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8009ab0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8009ab4:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009ab8:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8009abc:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009abe:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	f042 0201 	orr.w	r2, r2, #1
 8009ace:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8009ad0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8009ad4:	b13a      	cbz	r2, 8009ae6 <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8009ad6:	3a01      	subs	r2, #1
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	3201      	adds	r2, #1
  }
}
 8009adc:	bc70      	pop	{r4, r5, r6}
 8009ade:	0092      	lsls	r2, r2, #2
 8009ae0:	3028      	adds	r0, #40	; 0x28
 8009ae2:	f001 be29 	b.w	800b738 <memset>
 8009ae6:	bc70      	pop	{r4, r5, r6}
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop

08009aec <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 8009aec:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8009aee:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 8009af2:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8009af4:	b13a      	cbz	r2, 8009b06 <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8009af6:	3a01      	subs	r2, #1
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	3201      	adds	r2, #1
 8009afc:	0092      	lsls	r2, r2, #2
 8009afe:	2100      	movs	r1, #0
 8009b00:	3028      	adds	r0, #40	; 0x28
 8009b02:	f001 fe19 	bl	800b738 <memset>
  }
  pHandle->SensorIsReliable = true;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8009b0c:	bd10      	pop	{r4, pc}
 8009b0e:	bf00      	nop

08009b10 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8009b10:	6a01      	ldr	r1, [r0, #32]
 8009b12:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8009b14:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 8009b16:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8009b18:	b289      	uxth	r1, r1
 8009b1a:	fb02 f201 	mul.w	r2, r2, r1
{
 8009b1e:	4603      	mov	r3, r0
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	bfb8      	it	lt
 8009b24:	f64f 70ff 	movwlt	r0, #65535	; 0xffff

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8009b28:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8009b2c:	689c      	ldr	r4, [r3, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009b2e:	bfb8      	it	lt
 8009b30:	1812      	addlt	r2, r2, r0
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8009b32:	7858      	ldrb	r0, [r3, #1]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009b34:	1412      	asrs	r2, r2, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8009b36:	fb00 f002 	mul.w	r0, r0, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8009b3a:	1a51      	subs	r1, r2, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8009b3c:	b200      	sxth	r0, r0
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8009b3e:	fa04 f181 	sxtah	r1, r4, r1
  pHandle->_Super.hElAngle = elAngle;
 8009b42:	8098      	strh	r0, [r3, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 8009b44:	f85d 4b04 	ldr.w	r4, [sp], #4
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009b48:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8009b4a:	6099      	str	r1, [r3, #8]
}
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop

08009b50 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8009b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8009b52:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8009b54:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009b58:	68dc      	ldr	r4, [r3, #12]
 8009b5a:	f024 0401 	bic.w	r4, r4, #1
 8009b5e:	60dc      	str	r4, [r3, #12]
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
  pHandle->TimerOverflowNb = 0;
 8009b60:	2600      	movs	r6, #0
  return (uint32_t)(READ_REG(TIMx->CNT));
 8009b62:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  OverflowCntSample = pHandle->TimerOverflowNb;
 8009b64:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
 8009b68:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8009b6c:	681e      	ldr	r6, [r3, #0]
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 8009b6e:	0fef      	lsrs	r7, r5, #31
 8009b70:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009b74:	bf1c      	itt	ne
 8009b76:	f06f 0601 	mvnne.w	r6, #1
 8009b7a:	611e      	strne	r6, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009b7c:	68de      	ldr	r6, [r3, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 8009b7e:	b2a4      	uxth	r4, r4
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 8009b80:	443c      	add	r4, r7
 8009b82:	f046 0601 	orr.w	r6, r6, #1
 8009b86:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8009b8a:	60de      	str	r6, [r3, #12]
  {
    pHandle->TimerOverflowError = true;
 8009b8c:	bf8a      	itet	hi
 8009b8e:	2601      	movhi	r6, #1
 8009b90:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
 8009b94:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8009b98:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8009b9c:	f1bc 0f00 	cmp.w	ip, #0
 8009ba0:	f000 808d 	beq.w	8009cbe <ENC_CalcAvrgMecSpeedUnit+0x16e>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8009ba4:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009ba8:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8009bac:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8009bb0:	1aeb      	subs	r3, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009bb2:	f10c 0c0a 	add.w	ip, ip, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8009bb6:	fb07 3414 	mls	r4, r7, r4, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009bba:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bbe:	2a00      	cmp	r2, #0
 8009bc0:	f000 808d 	beq.w	8009cde <ENC_CalcAvrgMecSpeedUnit+0x18e>
 8009bc4:	2a01      	cmp	r2, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bc6:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bc8:	d939      	bls.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bcc:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bce:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bd0:	d035      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bd2:	6b04      	ldr	r4, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bd4:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bd6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bd8:	d031      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bda:	6b44      	ldr	r4, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bdc:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bde:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009be0:	d02d      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009be2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009be4:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009be6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009be8:	d029      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bec:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bee:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bf0:	d025      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bf2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bf4:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bf6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bf8:	d021      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bfa:	6c44      	ldr	r4, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009bfc:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009bfe:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c00:	d01d      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c02:	6c84      	ldr	r4, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c04:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c06:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c08:	d019      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c0a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c0c:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c0e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c10:	d015      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c12:	6d04      	ldr	r4, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c14:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c16:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c18:	d011      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c1a:	6d44      	ldr	r4, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c1c:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c1e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c20:	d00d      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c22:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c24:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c26:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c28:	d009      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c2a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c2c:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c2e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c30:	d005      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c32:	6e04      	ldr	r4, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c34:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c36:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c38:	d001      	beq.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c3a:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8009c3c:	4423      	add	r3, r4
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8009c3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8009c40:	fb07 f202 	mul.w	r2, r7, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8009c44:	fb04 f303 	mul.w	r3, r4, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8009c48:	fb93 f3f2 	sdiv	r3, r3, r2
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8009c4c:	b21f      	sxth	r7, r3
 8009c4e:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009c50:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 8009c54:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8009c58:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8009c5c:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8009c60:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009c62:	340a      	adds	r4, #10
  pHandle->DeltaCapturesIndex++;
 8009c64:	3201      	adds	r2, #1
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009c66:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8009c6a:	69c4      	ldr	r4, [r0, #28]
  pHandle->PreviousCapture = CntCapture;
 8009c6c:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 8009c70:	b2d2      	uxtb	r2, r2
 8009c72:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8009c76:	eba3 020c 	sub.w	r2, r3, ip
 8009c7a:	8242      	strh	r2, [r0, #18]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009c7c:	fb07 f30e 	mul.w	r3, r7, lr

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8009c80:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8009c84:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8009c88:	7845      	ldrb	r5, [r0, #1]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8009c8a:	42ba      	cmp	r2, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009c8c:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8009c90:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 8009c94:	fb93 f3f5 	sdiv	r3, r3, r5
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8009c98:	fb04 f403 	mul.w	r4, r4, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8009c9c:	8b43      	ldrh	r3, [r0, #26]
 8009c9e:	fb94 f4f3 	sdiv	r4, r4, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 8009ca2:	bf08      	it	eq
 8009ca4:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8009ca6:	81c4      	strh	r4, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8009ca8:	bf08      	it	eq
 8009caa:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8009cae:	b1c6      	cbz	r6, 8009ce2 <ENC_CalcAvrgMecSpeedUnit+0x192>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009cb0:	78c2      	ldrb	r2, [r0, #3]
 8009cb2:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8009cbe:	f8b0 c072 	ldrh.w	ip, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009cc2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8009cc6:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8009cca:	eba5 0c0c 	sub.w	ip, r5, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009cce:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8009cd0:	fb07 c404 	mla	r4, r7, r4, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009cd4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cd8:	2a00      	cmp	r2, #0
 8009cda:	f47f af73 	bne.w	8009bc4 <ENC_CalcAvrgMecSpeedUnit+0x74>
  int32_t wOverallAngleVariation = 0;
 8009cde:	4613      	mov	r3, r2
 8009ce0:	e7ad      	b.n	8009c3e <ENC_CalcAvrgMecSpeedUnit+0xee>
}
 8009ce2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8009ce6:	f001 b9bd 	b.w	800b064 <SPD_IsMecSpeedReliable>
 8009cea:	bf00      	nop

08009cec <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8009cec:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8009cee:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8009cf0:	fb03 f301 	mul.w	r3, r3, r1
 8009cf4:	8083      	strh	r3, [r0, #4]
  if ( hMecAngle < 0 )
 8009cf6:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8009cf8:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8009cfa:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8009cfc:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8009d00:	4905      	ldr	r1, [pc, #20]	; (8009d18 <ENC_SetMecAngle+0x2c>)
 8009d02:	bfbc      	itt	lt
 8009d04:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009d08:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8009d0a:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8009d0e:	fba1 1303 	umull	r1, r3, r1, r3
 8009d12:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8009d14:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8009d16:	4770      	bx	lr
 8009d18:	80008001 	.word	0x80008001

08009d1c <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8009d1c:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8009d1e:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8009d20:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8009d24:	3301      	adds	r3, #1
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop

08009d30 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8009d34:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8009d36:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8009d3a:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8009d3e:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009d42:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8009d46:	4770      	bx	lr

08009d48 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8009d48:	b120      	cbz	r0, 8009d54 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8009d4a:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8009d4e:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8009d50:	9b00      	ldr	r3, [sp, #0]
 8009d52:	60c3      	str	r3, [r0, #12]
  }
}
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop

08009d58 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8009d58:	b190      	cbz	r0, 8009d80 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8009d5a:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8009d5c:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8009d5e:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009d60:	b151      	cbz	r1, 8009d78 <FCP_CalcCRC+0x20>
 8009d62:	1c82      	adds	r2, r0, #2
 8009d64:	3901      	subs	r1, #1
 8009d66:	fa52 f181 	uxtab	r1, r2, r1
 8009d6a:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8009d6c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009d70:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009d72:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8009d74:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009d76:	d1f9      	bne.n	8009d6c <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8009d78:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8009d7c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop

08009d84 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8009d84:	b510      	push	{r4, lr}
 8009d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	f001 fcd3 	bl	800b738 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8009d92:	2300      	movs	r3, #0
 8009d94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8009d98:	bd10      	pop	{r4, pc}
 8009d9a:	bf00      	nop

08009d9c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8009d9c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8009da0:	1c53      	adds	r3, r2, #1
 8009da2:	b29b      	uxth	r3, r3
{
 8009da4:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8009da6:	2b7f      	cmp	r3, #127	; 0x7f
{
 8009da8:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8009daa:	bf88      	it	hi
 8009dac:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8009dae:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8009db2:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8009db4:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8009db8:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009dbc:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8009dc0:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8009dc2:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009dc4:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009dc8:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009dca:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009dcc:	d1fa      	bne.n	8009dc4 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8009dce:	2a00      	cmp	r2, #0
 8009dd0:	bfb8      	it	lt
 8009dd2:	327f      	addlt	r2, #127	; 0x7f
 8009dd4:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8009dd6:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8009dda:	bc70      	pop	{r4, r5, r6}
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop

08009de0 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8009de0:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop

08009de8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8009de8:	8a03      	ldrh	r3, [r0, #16]
 8009dea:	8b42      	ldrh	r2, [r0, #26]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d306      	bcc.n	8009dfe <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8009df0:	8b82      	ldrh	r2, [r0, #28]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d901      	bls.n	8009dfa <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8009df6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8009df8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8009dfa:	8ac0      	ldrh	r0, [r0, #22]
 8009dfc:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8009dfe:	2008      	movs	r0, #8
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop

08009e04 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8009e04:	2300      	movs	r3, #0
 8009e06:	8203      	strh	r3, [r0, #16]
}
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop

08009e0c <NTC_Init>:
{
 8009e0c:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8009e0e:	7803      	ldrb	r3, [r0, #0]
{
 8009e10:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8009e12:	b123      	cbz	r3, 8009e1e <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009e14:	8a43      	ldrh	r3, [r0, #18]
 8009e16:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8009e18:	2200      	movs	r2, #0
 8009e1a:	82c2      	strh	r2, [r0, #22]
}
 8009e1c:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8009e1e:	3004      	adds	r0, #4
 8009e20:	f7fa fa78 	bl	8004314 <RCM_RegisterRegConv>
 8009e24:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7ff ffeb 	bl	8009e04 <NTC_Clear>
}
 8009e2e:	bd10      	pop	{r4, pc}

08009e30 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8009e30:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009e32:	7803      	ldrb	r3, [r0, #0]
{
 8009e34:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8009e36:	b113      	cbz	r3, 8009e3e <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8009e38:	2000      	movs	r0, #0
 8009e3a:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8009e3c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009e3e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8009e42:	f7fa fb3b 	bl	80044bc <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8009e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e4a:	4298      	cmp	r0, r3
 8009e4c:	d007      	beq.n	8009e5e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8009e4e:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8009e50:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8009e52:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8009e54:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8009e58:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8009e5c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7ff ffc2 	bl	8009de8 <NTC_SetFaultState>
 8009e64:	82e0      	strh	r0, [r4, #22]
}
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009e68:	7803      	ldrb	r3, [r0, #0]
 8009e6a:	b983      	cbnz	r3, 8009e8e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8009e6c:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8009e6e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8009e70:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009e74:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8009e76:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8009e78:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfbc      	itt	lt
 8009e80:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8009e84:	33ff      	addlt	r3, #255	; 0xff
 8009e86:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8009e8a:	b200      	sxth	r0, r0
 8009e8c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8009e8e:	8a80      	ldrh	r0, [r0, #20]
}
 8009e90:	b200      	sxth	r0, r0
 8009e92:	4770      	bx	lr

08009e94 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8009e94:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8009e96:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009e98:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8009e9a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009e9c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8009e9e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8009ea0:	6283      	str	r3, [r0, #40]	; 0x28
}
 8009ea2:	4770      	bx	lr

08009ea4 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8009ea4:	8081      	strh	r1, [r0, #4]
}
 8009ea6:	4770      	bx	lr

08009ea8 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8009ea8:	80c1      	strh	r1, [r0, #6]
}
 8009eaa:	4770      	bx	lr

08009eac <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8009eac:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop

08009eb4 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8009eb4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop

08009ebc <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8009ebc:	6081      	str	r1, [r0, #8]

  return;
}
 8009ebe:	4770      	bx	lr

08009ec0 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8009ec0:	8b00      	ldrh	r0, [r0, #24]
 8009ec2:	4770      	bx	lr

08009ec4 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8009ec4:	8b40      	ldrh	r0, [r0, #26]
 8009ec6:	4770      	bx	lr

08009ec8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8009ec8:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8009eca:	4770      	bx	lr

08009ecc <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8009ecc:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop

08009ed4 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009ed4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8009ed8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8009edc:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009ede:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009ee2:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009ee6:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8009eea:	b162      	cbz	r2, 8009f06 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8009eec:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009eee:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8009ef2:	1872      	adds	r2, r6, r1
 8009ef4:	d420      	bmi.n	8009f38 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	db29      	blt.n	8009f4e <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8009efa:	68c1      	ldr	r1, [r0, #12]
 8009efc:	4291      	cmp	r1, r2
 8009efe:	db03      	blt.n	8009f08 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8009f00:	6901      	ldr	r1, [r0, #16]
 8009f02:	4291      	cmp	r1, r2
 8009f04:	dc00      	bgt.n	8009f08 <PI_Controller+0x34>
 8009f06:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8009f08:	8b86      	ldrh	r6, [r0, #28]
 8009f0a:	8bc2      	ldrh	r2, [r0, #30]
 8009f0c:	4133      	asrs	r3, r6
 8009f0e:	fa41 f202 	asr.w	r2, r1, r2
 8009f12:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8009f14:	429c      	cmp	r4, r3
 8009f16:	da05      	bge.n	8009f24 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8009f18:	1ae3      	subs	r3, r4, r3
 8009f1a:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8009f1c:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8009f1e:	4620      	mov	r0, r4
 8009f20:	bc70      	pop	{r4, r5, r6}
 8009f22:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8009f24:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8009f26:	bfc9      	itett	gt
 8009f28:	1aeb      	subgt	r3, r5, r3
 8009f2a:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8009f2c:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8009f2e:	18c9      	addgt	r1, r1, r3
 8009f30:	6081      	str	r1, [r0, #8]
}
 8009f32:	4620      	mov	r0, r4
 8009f34:	bc70      	pop	{r4, r5, r6}
 8009f36:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8009f38:	2e00      	cmp	r6, #0
 8009f3a:	ddde      	ble.n	8009efa <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	dddc      	ble.n	8009efa <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8009f40:	68c1      	ldr	r1, [r0, #12]
 8009f42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009f46:	4291      	cmp	r1, r2
 8009f48:	d1de      	bne.n	8009f08 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8009f4a:	460a      	mov	r2, r1
 8009f4c:	e7db      	b.n	8009f06 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8009f4e:	4e03      	ldr	r6, [pc, #12]	; (8009f5c <PI_Controller+0x88>)
 8009f50:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8009f54:	bf28      	it	cs
 8009f56:	4632      	movcs	r2, r6
 8009f58:	e7cf      	b.n	8009efa <PI_Controller+0x26>
 8009f5a:	bf00      	nop
 8009f5c:	80000001 	.word	0x80000001

08009f60 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8009f60:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009f62:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8009f66:	8b11      	ldrh	r1, [r2, #24]
 8009f68:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009f6a:	8995      	ldrh	r5, [r2, #12]
 8009f6c:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8009f6e:	fb13 f301 	smulbb	r3, r3, r1
{
 8009f72:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009f74:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009f78:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009f7c:	f7ff fcf0 	bl	8009960 <VBS_GetAvBusVoltage_V>
 8009f80:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8009f84:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009f86:	480e      	ldr	r0, [pc, #56]	; (8009fc0 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8009f88:	490e      	ldr	r1, [pc, #56]	; (8009fc4 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8009f8a:	bfb8      	it	lt
 8009f8c:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009f90:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8009f94:	bfb8      	it	lt
 8009f96:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009f98:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8009f9a:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009f9c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8009fa0:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8009fa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009fa8:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8009faa:	fb81 2103 	smull	r2, r1, r1, r3
 8009fae:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8009fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8009fba:	f7ff beef 	b.w	8009d9c <MPM_CalcElMotorPower>
 8009fbe:	bf00      	nop
 8009fc0:	1b4e81b5 	.word	0x1b4e81b5
 8009fc4:	66666667 	.word	0x66666667

08009fc8 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8009fc8:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8009fca:	4b18      	ldr	r3, [pc, #96]	; (800a02c <startTimers+0x64>)
 8009fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fce:	07d2      	lsls	r2, r2, #31
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	d415      	bmi.n	800a000 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009fd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fd6:	f042 0201 	orr.w	r2, r2, #1
 8009fda:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009fde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009fe2:	f002 0201 	and.w	r2, r2, #1
 8009fe6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8009fe8:	9a01      	ldr	r2, [sp, #4]
 8009fea:	694a      	ldr	r2, [r1, #20]
 8009fec:	f042 0201 	orr.w	r2, r2, #1
 8009ff0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8009ff2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ff4:	f022 0201 	bic.w	r2, r2, #1
 8009ff8:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8009ffa:	b002      	add	sp, #8
 8009ffc:	bc30      	pop	{r4, r5}
 8009ffe:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800a000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a004:	4c0a      	ldr	r4, [pc, #40]	; (800a030 <startTimers+0x68>)
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	6859      	ldr	r1, [r3, #4]
 800a00a:	4d0a      	ldr	r5, [pc, #40]	; (800a034 <startTimers+0x6c>)
 800a00c:	4021      	ands	r1, r4
 800a00e:	f041 0120 	orr.w	r1, r1, #32
 800a012:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a014:	6958      	ldr	r0, [r3, #20]
 800a016:	f040 0001 	orr.w	r0, r0, #1
 800a01a:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a01c:	6859      	ldr	r1, [r3, #4]
 800a01e:	402a      	ands	r2, r5
 800a020:	4021      	ands	r1, r4
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
}
 800a026:	b002      	add	sp, #8
 800a028:	bc30      	pop	{r4, r5}
 800a02a:	4770      	bx	lr
 800a02c:	40021000 	.word	0x40021000
 800a030:	fdffff8f 	.word	0xfdffff8f
 800a034:	02000070 	.word	0x02000070

0800a038 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 800a038:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 800a03a:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 800a03c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 800a040:	d11a      	bne.n	800a078 <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800a042:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800a044:	3201      	adds	r2, #1
 800a046:	0856      	lsrs	r6, r2, #1
 800a048:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a04a:	f06f 0702 	mvn.w	r7, #2
 800a04e:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800a050:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 800a052:	781c      	ldrb	r4, [r3, #0]
 800a054:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 800a056:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 800a05a:	d80b      	bhi.n	800a074 <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800a05c:	6904      	ldr	r4, [r0, #16]
 800a05e:	07a4      	lsls	r4, r4, #30
 800a060:	d5f7      	bpl.n	800a052 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 800a062:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800a064:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a066:	6107      	str	r7, [r0, #16]
 800a068:	d8f3      	bhi.n	800a052 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 800a06a:	781c      	ldrb	r4, [r3, #0]
 800a06c:	2c0f      	cmp	r4, #15
 800a06e:	d8f0      	bhi.n	800a052 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 800a070:	2301      	movs	r3, #1
 800a072:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 800a074:	bcf0      	pop	{r4, r5, r6, r7}
 800a076:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800a078:	2c60      	cmp	r4, #96	; 0x60
 800a07a:	d1e3      	bne.n	800a044 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800a07c:	3201      	adds	r2, #1
 800a07e:	0156      	lsls	r6, r2, #5
 800a080:	e7e3      	b.n	800a04a <waitForPolarizationEnd+0x12>
 800a082:	bf00      	nop

0800a084 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800a084:	6843      	ldr	r3, [r0, #4]
 800a086:	4718      	bx	r3

0800a088 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800a088:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a08a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a08e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 800a090:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a092:	140c      	asrs	r4, r1, #16
{
 800a094:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a096:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a09a:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a09c:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a0a0:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 800a0a4:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a0a8:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800a0ac:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a0b0:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800a0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a0b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800a0bc:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a0c0:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 800a0c4:	db77      	blt.n	800a1b6 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800a0c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a0ca:	db4e      	blt.n	800a16a <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a0cc:	1aad      	subs	r5, r5, r2
 800a0ce:	bf44      	itt	mi
 800a0d0:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a0d4:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	bfbc      	itt	lt
 800a0dc:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800a0e0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	bfb8      	it	lt
 800a0e8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a0ec:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a0f0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a0f4:	bfb8      	it	lt
 800a0f6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 800a0fa:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 800a0fc:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a100:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 800a104:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 800a108:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 800a10c:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a10e:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 800a110:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 800a114:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800a118:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a11c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a120:	b292      	uxth	r2, r2
 800a122:	b289      	uxth	r1, r1
 800a124:	b29b      	uxth	r3, r3
 800a126:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800a128:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 800a12a:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 800a12c:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 800a12e:	d118      	bne.n	800a162 <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800a130:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 800a134:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 800a138:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 800a13a:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 800a13e:	bfcc      	ite	gt
 800a140:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800a142:	1b12      	suble	r2, r2, r4
 800a144:	b292      	uxth	r2, r2
 800a146:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 800a148:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 800a14c:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 800a14e:	bfcc      	ite	gt
 800a150:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800a152:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 800a154:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800a156:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800a158:	bfcc      	ite	gt
 800a15a:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800a15c:	1b1b      	suble	r3, r3, r4
 800a15e:	8681      	strh	r1, [r0, #52]	; 0x34
 800a160:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800a162:	6983      	ldr	r3, [r0, #24]
}
 800a164:	b003      	add	sp, #12
 800a166:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800a168:	4718      	bx	r3
      if ( wX <= 0 )
 800a16a:	2c00      	cmp	r4, #0
 800a16c:	dd47      	ble.n	800a1fe <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a16e:	1aa5      	subs	r5, r4, r2
 800a170:	bf44      	itt	mi
 800a172:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a176:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800a17a:	2900      	cmp	r1, #0
 800a17c:	bfb8      	it	lt
 800a17e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 800a182:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 800a186:	bfb8      	it	lt
 800a188:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 800a18c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a190:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 800a192:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a194:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a198:	bfb8      	it	lt
 800a19a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800a19e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a1a2:	bfb8      	it	lt
 800a1a4:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800a1a8:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 800a1ac:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800a1b0:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a1b2:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800a1b4:	e7ac      	b.n	800a110 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 800a1b6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a1ba:	db69      	blt.n	800a290 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 800a1bc:	2c00      	cmp	r4, #0
 800a1be:	dd43      	ble.n	800a248 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a1c0:	1b2d      	subs	r5, r5, r4
 800a1c2:	bf48      	it	mi
 800a1c4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800a1c8:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a1cc:	bf48      	it	mi
 800a1ce:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bfb8      	it	lt
 800a1d6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800a1da:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a1de:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a1e2:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 800a1e6:	bfb8      	it	lt
 800a1e8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 800a1ec:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800a1f0:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 800a1f4:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a1f6:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a1f8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800a1fc:	e788      	b.n	800a110 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a1fe:	1b2d      	subs	r5, r5, r4
 800a200:	bf44      	itt	mi
 800a202:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a206:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bfb8      	it	lt
 800a20e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 800a212:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 800a216:	bfb8      	it	lt
 800a218:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 800a21c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 800a220:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a222:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a226:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800a22a:	bfb8      	it	lt
 800a22c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800a230:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800a234:	bfb8      	it	lt
 800a236:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800a23a:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 800a23e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800a242:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a244:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800a246:	e763      	b.n	800a110 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a248:	1aa5      	subs	r5, r4, r2
 800a24a:	bf44      	itt	mi
 800a24c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a250:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800a254:	2900      	cmp	r1, #0
 800a256:	bfb8      	it	lt
 800a258:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 800a25c:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 800a260:	bfb8      	it	lt
 800a262:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800a266:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a26a:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 800a26c:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a26e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a272:	bfb8      	it	lt
 800a274:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800a278:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a27c:	bfb8      	it	lt
 800a27e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800a282:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800a286:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a288:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a28a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800a28e:	e73f      	b.n	800a110 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a290:	1aad      	subs	r5, r5, r2
 800a292:	bf44      	itt	mi
 800a294:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a298:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800a29c:	2900      	cmp	r1, #0
 800a29e:	bfbc      	itt	lt
 800a2a0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800a2a4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bfb8      	it	lt
 800a2ac:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a2b0:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a2b4:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a2b8:	bfb8      	it	lt
 800a2ba:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800a2be:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 800a2c0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a2c4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 800a2c8:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 800a2cc:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a2ce:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800a2d0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800a2d4:	e71c      	b.n	800a110 <PWMC_SetPhaseVoltage+0x88>
 800a2d6:	bf00      	nop

0800a2d8 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 800a2d8:	6883      	ldr	r3, [r0, #8]
 800a2da:	4718      	bx	r3

0800a2dc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4604      	mov	r4, r0
 800a2e0:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800a2e2:	b199      	cbz	r1, 800a30c <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800a2e4:	2901      	cmp	r1, #1
 800a2e6:	d002      	beq.n	800a2ee <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 800a2e8:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800a2ea:	b002      	add	sp, #8
 800a2ec:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800a2ee:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800a2f2:	b1cb      	cbz	r3, 800a328 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	9101      	str	r1, [sp, #4]
 800a2fa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1f2      	bne.n	800a2e8 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800a302:	6903      	ldr	r3, [r0, #16]
 800a304:	4798      	blx	r3
        retVal = true;
 800a306:	9901      	ldr	r1, [sp, #4]
 800a308:	4608      	mov	r0, r1
 800a30a:	e7ee      	b.n	800a2ea <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 800a30c:	f7ff ffe4 	bl	800a2d8 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800a310:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800a314:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 800a31c:	4620      	mov	r0, r4
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	4798      	blx	r3
      retVal = true;
 800a322:	2001      	movs	r0, #1
}
 800a324:	b002      	add	sp, #8
 800a326:	bd10      	pop	{r4, pc}
      retVal = true;
 800a328:	4608      	mov	r0, r1
}
 800a32a:	b002      	add	sp, #8
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	bf00      	nop

0800a330 <PWMC_TurnOnLowSides>:
  *
  * @param  pHandle: handle on the target instance of the PWMC component
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle )
{
  pHandle->pFctTurnOnLowSides( pHandle );
 800a330:	6943      	ldr	r3, [r0, #20]
 800a332:	4718      	bx	r3

0800a334 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800a334:	69c3      	ldr	r3, [r0, #28]
 800a336:	4718      	bx	r3

0800a338 <PWMC_GetTurnOnLowSidesAction>:
 *         controlled by the @p pHandle PWMC component: true if it
 *         is active, false otherwise*/
__weak bool PWMC_GetTurnOnLowSidesAction( PWMC_Handle_t * pHandle )
{
  return pHandle->TurnOnLowSidesAction;
}
 800a338:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop

0800a340 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a340:	6883      	ldr	r3, [r0, #8]
 800a342:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a346:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a34a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a34c:	6883      	ldr	r3, [r0, #8]
 800a34e:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 800a350:	b082      	sub	sp, #8
 800a352:	d418      	bmi.n	800a386 <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800a354:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 800a356:	6882      	ldr	r2, [r0, #8]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4924      	ldr	r1, [pc, #144]	; (800a3ec <R3_2_ADCxInit+0xac>)
 800a35c:	099b      	lsrs	r3, r3, #6
 800a35e:	fba1 1303 	umull	r1, r3, r1, r3
 800a362:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800a366:	099b      	lsrs	r3, r3, #6
 800a368:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a372:	6082      	str	r2, [r0, #8]
 800a374:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	b12b      	cbz	r3, 800a386 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1f9      	bne.n	800a37a <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800a386:	6883      	ldr	r3, [r0, #8]
 800a388:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a38c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a394:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a396:	6883      	ldr	r3, [r0, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	dbfc      	blt.n	800a396 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a39c:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800a39e:	07da      	lsls	r2, r3, #31
 800a3a0:	d408      	bmi.n	800a3b4 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800a3a2:	4a13      	ldr	r2, [pc, #76]	; (800a3f0 <R3_2_ADCxInit+0xb0>)
 800a3a4:	6883      	ldr	r3, [r0, #8]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	f043 0301 	orr.w	r3, r3, #1
 800a3ac:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a3ae:	6803      	ldr	r3, [r0, #0]
 800a3b0:	07db      	lsls	r3, r3, #31
 800a3b2:	d5f7      	bpl.n	800a3a4 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 800a3b4:	6882      	ldr	r2, [r0, #8]
 800a3b6:	490e      	ldr	r1, [pc, #56]	; (800a3f0 <R3_2_ADCxInit+0xb0>)
 800a3b8:	400a      	ands	r2, r1
 800a3ba:	f042 0208 	orr.w	r2, r2, #8
 800a3be:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a3c0:	6882      	ldr	r2, [r0, #8]
 800a3c2:	400a      	ands	r2, r1
 800a3c4:	f042 0220 	orr.w	r2, r2, #32
 800a3c8:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800a3ca:	68c3      	ldr	r3, [r0, #12]
 800a3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3d8:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 800a3da:	6883      	ldr	r3, [r0, #8]
 800a3dc:	400b      	ands	r3, r1
 800a3de:	f043 0304 	orr.w	r3, r3, #4
 800a3e2:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 800a3e4:	b002      	add	sp, #8
 800a3e6:	4770      	bx	lr
 800a3e8:	20000db8 	.word	0x20000db8
 800a3ec:	053e2d63 	.word	0x053e2d63
 800a3f0:	7fffffc0 	.word	0x7fffffc0

0800a3f4 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800a3f4:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a3f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800a3f8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 800a3fc:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800a400:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a404:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800a406:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a408:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800a40a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800a40c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800a40e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a410:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800a412:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a414:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a416:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a418:	4904      	ldr	r1, [pc, #16]	; (800a42c <R3_2_SetADCSampPointPolarization+0x38>)
 800a41a:	685b      	ldr	r3, [r3, #4]
}
 800a41c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a420:	420b      	tst	r3, r1
}
 800a422:	bf14      	ite	ne
 800a424:	2001      	movne	r0, #1
 800a426:	2000      	moveq	r0, #0
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	02000070 	.word	0x02000070

0800a430 <R3_2_SetADCSampPointSectX>:
{
 800a430:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800a432:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 800a436:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800a438:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800a43a:	1aca      	subs	r2, r1, r3
 800a43c:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 800a440:	b292      	uxth	r2, r2
 800a442:	42b2      	cmp	r2, r6
 800a444:	d914      	bls.n	800a470 <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800a446:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 800a448:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800a44a:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 800a44c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a450:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800a452:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800a454:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800a456:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a458:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a45a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a45c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a45e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a460:	6852      	ldr	r2, [r2, #4]
 800a462:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <R3_2_SetADCSampPointSectX+0x70>)
 800a464:	421a      	tst	r2, r3
}
 800a466:	bf14      	ite	ne
 800a468:	2001      	movne	r0, #1
 800a46a:	2000      	moveq	r0, #0
 800a46c:	bc70      	pop	{r4, r5, r6}
 800a46e:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800a470:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 800a472:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800a474:	b2ad      	uxth	r5, r5
 800a476:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 800a47a:	d904      	bls.n	800a486 <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800a47c:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	e7e4      	b.n	800a450 <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800a486:	4433      	add	r3, r6
 800a488:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800a48a:	4299      	cmp	r1, r3
 800a48c:	d8e0      	bhi.n	800a450 <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800a48e:	43db      	mvns	r3, r3
 800a490:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800a494:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800a498:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800a49a:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800a49e:	e7d7      	b.n	800a450 <R3_2_SetADCSampPointSectX+0x20>
 800a4a0:	02000070 	.word	0x02000070

0800a4a4 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800a4a4:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a4a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a4a8:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 800a4ac:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800a4ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800a4b6:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a4b8:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a4ba:	6853      	ldr	r3, [r2, #4]
 800a4bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a4c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c4:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800a4c6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800a4ca:	2b0f      	cmp	r3, #15
 800a4cc:	d80b      	bhi.n	800a4e6 <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 800a4ce:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800a4d2:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 800a4d6:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 800a4d8:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 800a4da:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 800a4dc:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800a4e6:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800a4e8:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 800a4ea:	600b      	str	r3, [r1, #0]
}
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop

0800a4f0 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a4f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800a4f2:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a4f4:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a4f8:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a4fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a500:	681c      	ldr	r4, [r3, #0]
 800a502:	6853      	ldr	r3, [r2, #4]
 800a504:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50c:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800a50e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800a512:	2b0f      	cmp	r3, #15
 800a514:	d808      	bhi.n	800a528 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 800a516:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800a51a:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800a51c:	3301      	adds	r3, #1
 800a51e:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800a520:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800a522:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800a526:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800a528:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800a52a:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 800a52e:	600b      	str	r3, [r1, #0]
}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop

0800a534 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a534:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 800a536:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a538:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800a53a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a53e:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a540:	f06f 0001 	mvn.w	r0, #1
 800a544:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a546:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a548:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a54a:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a54c:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800a54e:	07db      	lsls	r3, r3, #31
 800a550:	d5fc      	bpl.n	800a54c <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a552:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a558:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a55a:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d000      	beq.n	800a564 <R3_2_TurnOnLowSides+0x30>
 800a562:	4770      	bx	lr
{
 800a564:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a566:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a56a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a56c:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a570:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a574:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a578:	61ae      	str	r6, [r5, #24]
 800a57a:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800a57c:	bc70      	pop	{r4, r5, r6}
 800a57e:	619a      	str	r2, [r3, #24]
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop

0800a584 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a584:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800a586:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a58a:	688b      	ldr	r3, [r1, #8]
{
 800a58c:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 800a58e:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a590:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 800a592:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a596:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800a59a:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a59e:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800a5a2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a5a4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a5a6:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a5a8:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a5ac:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a5ae:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800a5b0:	07d2      	lsls	r2, r2, #31
 800a5b2:	d5fc      	bpl.n	800a5ae <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a5b4:	f06f 0201 	mvn.w	r2, #1
 800a5b8:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800a5ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5c0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a5c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5c8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a5ca:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800a5ce:	2a02      	cmp	r2, #2
 800a5d0:	d008      	beq.n	800a5e4 <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a5d2:	f06f 0201 	mvn.w	r2, #1
 800a5d6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 800a5de:	bc30      	pop	{r4, r5}
 800a5e0:	60da      	str	r2, [r3, #12]
 800a5e2:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a5e4:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a5e6:	6a0c      	ldr	r4, [r1, #32]
 800a5e8:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a5ec:	f240 5255 	movw	r2, #1365	; 0x555
 800a5f0:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a5f2:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a5f6:	d007      	beq.n	800a608 <R3_2_SwitchOnPWM+0x84>
 800a5f8:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a5fa:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a5fe:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800a602:	6184      	str	r4, [r0, #24]
 800a604:	6191      	str	r1, [r2, #24]
}
 800a606:	e7e4      	b.n	800a5d2 <R3_2_SwitchOnPWM+0x4e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800a608:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a60a:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a60e:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800a612:	6284      	str	r4, [r0, #40]	; 0x28
 800a614:	6291      	str	r1, [r2, #40]	; 0x28
}
 800a616:	e7dc      	b.n	800a5d2 <R3_2_SwitchOnPWM+0x4e>

0800a618 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a618:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800a61a:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a61c:	68d3      	ldr	r3, [r2, #12]
 800a61e:	f023 0301 	bic.w	r3, r3, #1
{
 800a622:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 800a624:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800a628:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a62a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a62c:	2500      	movs	r5, #0
 800a62e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a632:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800a636:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 800a638:	b91c      	cbnz	r4, 800a642 <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a63a:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d00d      	beq.n	800a65e <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a642:	f06f 0301 	mvn.w	r3, #1
 800a646:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a648:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800a64a:	07db      	lsls	r3, r3, #31
 800a64c:	d5fc      	bpl.n	800a648 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a64e:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 800a652:	2300      	movs	r3, #0
 800a654:	6111      	str	r1, [r2, #16]
}
 800a656:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 800a658:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 800a65c:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a65e:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a662:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800a666:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a668:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a66a:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a66e:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800a672:	62a5      	str	r5, [r4, #40]	; 0x28
 800a674:	6299      	str	r1, [r3, #40]	; 0x28
}
 800a676:	e7e4      	b.n	800a642 <R3_2_SwitchOffPWM+0x2a>

0800a678 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800a678:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a67a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800a67c:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a67e:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a680:	686a      	ldr	r2, [r5, #4]
 800a682:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800a686:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a68a:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800a68c:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800a690:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800a692:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800a696:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a698:	6800      	ldr	r0, [r0, #0]
 800a69a:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 800a69c:	4293      	cmp	r3, r2
 800a69e:	db05      	blt.n	800a6ac <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 800a6a0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	dc0a      	bgt.n	800a6be <R3_2_RLGetPhaseCurrents+0x46>
 800a6a8:	b21b      	sxth	r3, r3
 800a6aa:	e000      	b.n	800a6ae <R3_2_RLGetPhaseCurrents+0x36>
 800a6ac:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <R3_2_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f363 020f 	bfi	r2, r3, #0, #16
 800a6b4:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 800a6b8:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 800a6ba:	600a      	str	r2, [r1, #0]
}
 800a6bc:	4770      	bx	lr
 800a6be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800a6c2:	e7f4      	b.n	800a6ae <R3_2_RLGetPhaseCurrents+0x36>
 800a6c4:	ffff8002 	.word	0xffff8002
 800a6c8:	ffff8001 	.word	0xffff8001

0800a6cc <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a6cc:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 800a6ce:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a6d0:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 800a6d2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a6d6:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a6d8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a6dc:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a6de:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a6e0:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d5fc      	bpl.n	800a6e0 <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a6e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a6e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ec:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a6ee:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d000      	beq.n	800a6f8 <R3_2_RLTurnOnLowSides+0x2c>
 800a6f6:	4770      	bx	lr
{
 800a6f8:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a6fa:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a6fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a700:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a704:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a708:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a70c:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a70e:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 800a710:	bc70      	pop	{r4, r5, r6}
 800a712:	629a      	str	r2, [r3, #40]	; 0x28
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop

0800a718 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a718:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 800a71a:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a71c:	688b      	ldr	r3, [r1, #8]
{
 800a71e:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800a720:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 800a724:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a728:	f06f 0201 	mvn.w	r2, #1
 800a72c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a72e:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800a730:	07d6      	lsls	r6, r2, #31
 800a732:	d5fc      	bpl.n	800a72e <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 800a734:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a738:	f06f 0701 	mvn.w	r7, #1
 800a73c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a73e:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a740:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a742:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a744:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a746:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800a748:	07d2      	lsls	r2, r2, #31
 800a74a:	d5fc      	bpl.n	800a746 <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a74c:	68da      	ldr	r2, [r3, #12]
 800a74e:	f042 0201 	orr.w	r2, r2, #1
 800a752:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a75a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a75e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a762:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a764:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800a768:	2a02      	cmp	r2, #2
 800a76a:	d00f      	beq.n	800a78c <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800a76c:	2303      	movs	r3, #3
 800a76e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 800a772:	68aa      	ldr	r2, [r5, #8]
 800a774:	4913      	ldr	r1, [pc, #76]	; (800a7c4 <R3_2_RLSwitchOnPWM+0xac>)
 800a776:	400a      	ands	r2, r1
 800a778:	f042 0208 	orr.w	r2, r2, #8
 800a77c:	60aa      	str	r2, [r5, #8]
 800a77e:	68a3      	ldr	r3, [r4, #8]
 800a780:	400b      	ands	r3, r1
 800a782:	f043 0308 	orr.w	r3, r3, #8
 800a786:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 800a788:	bcf0      	pop	{r4, r5, r6, r7}
 800a78a:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a78c:	6a1a      	ldr	r2, [r3, #32]
 800a78e:	f240 5355 	movw	r3, #1365	; 0x555
 800a792:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a794:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a798:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a79c:	d008      	beq.n	800a7b0 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a79e:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a7a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a7a2:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a7a6:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800a7aa:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a7ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a7ae:	e7dd      	b.n	800a76c <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 800a7b0:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a7b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a7b4:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a7b8:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800a7bc:	62b7      	str	r7, [r6, #40]	; 0x28
 800a7be:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a7c0:	e7d4      	b.n	800a76c <R3_2_RLSwitchOnPWM+0x54>
 800a7c2:	bf00      	nop
 800a7c4:	7fffffc0 	.word	0x7fffffc0

0800a7c8 <R3_2_SetAOReferenceVoltage>:
{
 800a7c8:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800a7ca:	0c84      	lsrs	r4, r0, #18
 800a7cc:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 800a7d0:	f101 0508 	add.w	r5, r1, #8
 800a7d4:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800a7d6:	5963      	ldr	r3, [r4, r5]
 800a7d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7e0:	431a      	orrs	r2, r3
 800a7e2:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 800a7e4:	684a      	ldr	r2, [r1, #4]
 800a7e6:	f000 0303 	and.w	r3, r0, #3
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800a7ee:	680a      	ldr	r2, [r1, #0]
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f000 0010 	and.w	r0, r0, #16
 800a7f6:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800a7fa:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a7fe:	4b15      	ldr	r3, [pc, #84]	; (800a854 <R3_2_SetAOReferenceVoltage+0x8c>)
 800a800:	d014      	beq.n	800a82c <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4c14      	ldr	r4, [pc, #80]	; (800a858 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 800a806:	680a      	ldr	r2, [r1, #0]
 800a808:	fba4 4303 	umull	r4, r3, r4, r3
 800a80c:	0cdb      	lsrs	r3, r3, #19
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4310      	orrs	r0, r2
 800a812:	6008      	str	r0, [r1, #0]
 800a814:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800a816:	9b00      	ldr	r3, [sp, #0]
 800a818:	b12b      	cbz	r3, 800a826 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a81a:	9b00      	ldr	r3, [sp, #0]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800a820:	9b00      	ldr	r3, [sp, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f9      	bne.n	800a81a <R3_2_SetAOReferenceVoltage+0x52>
}
 800a826:	b002      	add	sp, #8
 800a828:	bc30      	pop	{r4, r5}
 800a82a:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a82c:	4a0a      	ldr	r2, [pc, #40]	; (800a858 <R3_2_SetAOReferenceVoltage+0x90>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	fba2 2303 	umull	r2, r3, r2, r3
 800a834:	0cdb      	lsrs	r3, r3, #19
 800a836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a83a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a83c:	9b01      	ldr	r3, [sp, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0f1      	beq.n	800a826 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	3b01      	subs	r3, #1
 800a846:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f9      	bne.n	800a842 <R3_2_SetAOReferenceVoltage+0x7a>
}
 800a84e:	b002      	add	sp, #8
 800a850:	bc30      	pop	{r4, r5}
 800a852:	4770      	bx	lr
 800a854:	20000db8 	.word	0x20000db8
 800a858:	431bde83 	.word	0x431bde83

0800a85c <R3_2_Init>:
{
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	4607      	mov	r7, r0
 800a862:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 800a866:	f8df e284 	ldr.w	lr, [pc, #644]	; 800aaec <R3_2_Init+0x290>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800a86a:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 800a86c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a86e:	686a      	ldr	r2, [r5, #4]
 800a870:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a874:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a876:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a878:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a87a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a87e:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a880:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800a884:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800a888:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a88a:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a88c:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a890:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 800a894:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a896:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a898:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a89a:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a89c:	f022 0220 	bic.w	r2, r2, #32
 800a8a0:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a8a2:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a8a4:	6872      	ldr	r2, [r6, #4]
 800a8a6:	f022 0204 	bic.w	r2, r2, #4
 800a8aa:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a8ac:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a8ae:	6872      	ldr	r2, [r6, #4]
 800a8b0:	f022 0220 	bic.w	r2, r2, #32
 800a8b4:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a8b6:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a8b8:	498b      	ldr	r1, [pc, #556]	; (800aae8 <R3_2_Init+0x28c>)
 800a8ba:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 800a8bc:	4574      	cmp	r4, lr
 800a8be:	bf0c      	ite	eq
 800a8c0:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800a8c4:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 800a8c8:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 800a8ca:	f1bc 0f00 	cmp.w	ip, #0
 800a8ce:	d014      	beq.n	800a8fa <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 800a8d0:	f8dc 2000 	ldr.w	r2, [ip]
 800a8d4:	b11a      	cbz	r2, 800a8de <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800a8d6:	6811      	ldr	r1, [r2, #0]
 800a8d8:	f041 0101 	orr.w	r1, r1, #1
 800a8dc:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800a8de:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800a8e2:	b11a      	cbz	r2, 800a8ec <R3_2_Init+0x90>
 800a8e4:	6811      	ldr	r1, [r2, #0]
 800a8e6:	f041 0101 	orr.w	r1, r1, #1
 800a8ea:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800a8ec:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800a8f0:	b11a      	cbz	r2, 800a8fa <R3_2_Init+0x9e>
 800a8f2:	6811      	ldr	r1, [r2, #0]
 800a8f4:	f041 0101 	orr.w	r1, r1, #1
 800a8f8:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 800a8fa:	f1bb 0f00 	cmp.w	fp, #0
 800a8fe:	d017      	beq.n	800a930 <R3_2_Init+0xd4>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 800a900:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 800a904:	2a01      	cmp	r2, #1
 800a906:	d007      	beq.n	800a918 <R3_2_Init+0xbc>
 800a908:	9a00      	ldr	r2, [sp, #0]
 800a90a:	b12a      	cbz	r2, 800a918 <R3_2_Init+0xbc>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800a90c:	4611      	mov	r1, r2
 800a90e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a910:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800a914:	f7ff ff58 	bl	800a7c8 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a918:	f8db 3000 	ldr.w	r3, [fp]
 800a91c:	f043 0301 	orr.w	r3, r3, #1
 800a920:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a924:	f8db 3000 	ldr.w	r3, [fp]
 800a928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a92c:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 800a930:	f1ba 0f00 	cmp.w	sl, #0
 800a934:	d018      	beq.n	800a968 <R3_2_Init+0x10c>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 800a936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a938:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 800a93c:	2a01      	cmp	r2, #1
 800a93e:	d007      	beq.n	800a950 <R3_2_Init+0xf4>
 800a940:	9a01      	ldr	r2, [sp, #4]
 800a942:	b12a      	cbz	r2, 800a950 <R3_2_Init+0xf4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800a944:	4611      	mov	r1, r2
 800a946:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a948:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800a94c:	f7ff ff3c 	bl	800a7c8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a950:	f8da 3000 	ldr.w	r3, [sl]
 800a954:	f043 0301 	orr.w	r3, r3, #1
 800a958:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a95c:	f8da 3000 	ldr.w	r3, [sl]
 800a960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a964:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 800a968:	f1b9 0f00 	cmp.w	r9, #0
 800a96c:	d018      	beq.n	800a9a0 <R3_2_Init+0x144>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 800a96e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a970:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 800a974:	2a01      	cmp	r2, #1
 800a976:	d007      	beq.n	800a988 <R3_2_Init+0x12c>
 800a978:	9a02      	ldr	r2, [sp, #8]
 800a97a:	b12a      	cbz	r2, 800a988 <R3_2_Init+0x12c>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800a97c:	4611      	mov	r1, r2
 800a97e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800a980:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800a984:	f7ff ff20 	bl	800a7c8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a988:	f8d9 3000 	ldr.w	r3, [r9]
 800a98c:	f043 0301 	orr.w	r3, r3, #1
 800a990:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a994:	f8d9 3000 	ldr.w	r3, [r9]
 800a998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 800a9a0:	f1b8 0f00 	cmp.w	r8, #0
 800a9a4:	d018      	beq.n	800a9d8 <R3_2_Init+0x17c>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 800a9a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9a8:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 800a9ac:	2a01      	cmp	r2, #1
 800a9ae:	d007      	beq.n	800a9c0 <R3_2_Init+0x164>
 800a9b0:	9a03      	ldr	r2, [sp, #12]
 800a9b2:	b12a      	cbz	r2, 800a9c0 <R3_2_Init+0x164>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a9b8:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 800a9bc:	f7ff ff04 	bl	800a7c8 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a9c0:	f8d8 3000 	ldr.w	r3, [r8]
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a9cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9d4:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a9d8:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 800a9da:	07d8      	lsls	r0, r3, #31
 800a9dc:	d56c      	bpl.n	800aab8 <R3_2_Init+0x25c>
 800a9de:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800a9e0:	07d9      	lsls	r1, r3, #31
 800a9e2:	d575      	bpl.n	800aad0 <R3_2_Init+0x274>
  volatile uint32_t Brk2Timeout = 1000;
 800a9e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9e8:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a9ea:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800a9ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a9ee:	f023 0301 	bic.w	r3, r3, #1
 800a9f2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a9f4:	6863      	ldr	r3, [r4, #4]
 800a9f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9fe:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800aa00:	69a3      	ldr	r3, [r4, #24]
 800aa02:	f043 0308 	orr.w	r3, r3, #8
 800aa06:	61a3      	str	r3, [r4, #24]
 800aa08:	69a3      	ldr	r3, [r4, #24]
 800aa0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa0e:	61a3      	str	r3, [r4, #24]
 800aa10:	69e3      	ldr	r3, [r4, #28]
 800aa12:	f043 0308 	orr.w	r3, r3, #8
 800aa16:	61e3      	str	r3, [r4, #28]
 800aa18:	69e3      	ldr	r3, [r4, #28]
 800aa1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa1e:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800aa20:	6963      	ldr	r3, [r4, #20]
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	6163      	str	r3, [r4, #20]
 800aa28:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d029      	beq.n	800aa84 <R3_2_Init+0x228>
    if ( pHandle->_Super.Motor == M1 )
 800aa30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800aa34:	b92b      	cbnz	r3, 800aa42 <R3_2_Init+0x1e6>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800aa36:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d030      	beq.n	800aaa0 <R3_2_Init+0x244>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d04a      	beq.n	800aad8 <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800aa42:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800aa46:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800aa48:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 800aa4c:	b16b      	cbz	r3, 800aa6a <R3_2_Init+0x20e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	05da      	lsls	r2, r3, #23
 800aa52:	d50a      	bpl.n	800aa6a <R3_2_Init+0x20e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800aa54:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800aa58:	9b05      	ldr	r3, [sp, #20]
 800aa5a:	b133      	cbz	r3, 800aa6a <R3_2_Init+0x20e>
 800aa5c:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 800aa5e:	9b05      	ldr	r3, [sp, #20]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	05db      	lsls	r3, r3, #23
 800aa68:	d4f6      	bmi.n	800aa58 <R3_2_Init+0x1fc>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800aa6a:	68e3      	ldr	r3, [r4, #12]
 800aa6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa70:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 800aa72:	6a23      	ldr	r3, [r4, #32]
 800aa74:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800aa78:	f043 0305 	orr.w	r3, r3, #5
 800aa7c:	6223      	str	r3, [r4, #32]
}
 800aa7e:	b007      	add	sp, #28
 800aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800aa84:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d109      	bne.n	800aaa0 <R3_2_Init+0x244>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800aa8c:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 800aa90:	2903      	cmp	r1, #3
 800aa92:	d105      	bne.n	800aaa0 <R3_2_Init+0x244>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800aa94:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800aa96:	6963      	ldr	r3, [r4, #20]
 800aa98:	f043 0301 	orr.w	r3, r3, #1
 800aa9c:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800aa9e:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800aaa0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800aaa4:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800aaa6:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800aaa8:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800aaac:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800aaae:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1cb      	bne.n	800aa4e <R3_2_Init+0x1f2>
 800aab6:	e7d8      	b.n	800aa6a <R3_2_Init+0x20e>
      R3_2_ADCxInit (ADCx_1);
 800aab8:	4628      	mov	r0, r5
 800aaba:	f7ff fc41 	bl	800a340 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800aabe:	2340      	movs	r3, #64	; 0x40
 800aac0:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800aac2:	686b      	ldr	r3, [r5, #4]
 800aac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac8:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800aaca:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800aacc:	07d9      	lsls	r1, r3, #31
 800aace:	d489      	bmi.n	800a9e4 <R3_2_Init+0x188>
      R3_2_ADCxInit (ADCx_2);
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7ff fc35 	bl	800a340 <R3_2_ADCxInit>
 800aad6:	e785      	b.n	800a9e4 <R3_2_Init+0x188>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800aad8:	2101      	movs	r1, #1
 800aada:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800aadc:	6961      	ldr	r1, [r4, #20]
 800aade:	f041 0101 	orr.w	r1, r1, #1
 800aae2:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800aae4:	6323      	str	r3, [r4, #48]	; 0x30
}
 800aae6:	e7ac      	b.n	800aa42 <R3_2_Init+0x1e6>
 800aae8:	e0042000 	.word	0xe0042000
 800aaec:	40012c00 	.word	0x40012c00

0800aaf0 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800aaf0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800aaf2:	4946      	ldr	r1, [pc, #280]	; (800ac0c <R3_2_CurrentReadingPolarization+0x11c>)
{
 800aaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->PhaseAOffset = 0u;
 800aaf6:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800aaf8:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800aafa:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 800aafe:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 800ab02:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 800ab04:	65c2      	str	r2, [r0, #92]	; 0x5c
 800ab06:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800ab0a:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800ab0e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 800ab12:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800ab14:	4b3e      	ldr	r3, [pc, #248]	; (800ac10 <R3_2_CurrentReadingPolarization+0x120>)
 800ab16:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800ab18:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 800ab1a:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800ab1c:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
{
 800ab20:	b083      	sub	sp, #12
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800ab22:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 800ab24:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 800ab28:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 800ab2c:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800ab2e:	f7ff fd29 	bl	800a584 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800ab32:	4a38      	ldr	r2, [pc, #224]	; (800ac14 <R3_2_CurrentReadingPolarization+0x124>)
 800ab34:	686b      	ldr	r3, [r5, #4]
 800ab36:	4013      	ands	r3, r2
 800ab38:	2b70      	cmp	r3, #112	; 0x70
 800ab3a:	d1fb      	bne.n	800ab34 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	4936      	ldr	r1, [pc, #216]	; (800ac18 <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 800ab40:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ab42:	400a      	ands	r2, r1
 800ab44:	f042 0208 	orr.w	r2, r2, #8
 800ab48:	60ba      	str	r2, [r7, #8]
 800ab4a:	68b3      	ldr	r3, [r6, #8]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ab4c:	4f33      	ldr	r7, [pc, #204]	; (800ac1c <R3_2_CurrentReadingPolarization+0x12c>)
 800ab4e:	400b      	ands	r3, r1
 800ab50:	f043 0308 	orr.w	r3, r3, #8
 800ab54:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 800ab56:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800ab5a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800ab5e:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 800ab62:	4628      	mov	r0, r5
 800ab64:	e9cd 3100 	strd	r3, r1, [sp]
 800ab68:	f7ff fa66 	bl	800a038 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7ff fd53 	bl	800a618 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 800ab72:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800ab74:	4a2a      	ldr	r2, [pc, #168]	; (800ac20 <R3_2_CurrentReadingPolarization+0x130>)
 800ab76:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800ab78:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 800ab7a:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 800ab7e:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 800ab82:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800ab86:	f7ff fcfd 	bl	800a584 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800ab8a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800ab8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ab90:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 800ab94:	4628      	mov	r0, r5
 800ab96:	f7ff fa4f 	bl	800a038 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7ff fd3c 	bl	800a618 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800aba0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800aba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800aba6:	481f      	ldr	r0, [pc, #124]	; (800ac24 <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800aba8:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800abaa:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800abac:	0912      	lsrs	r2, r2, #4
 800abae:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800abb2:	091b      	lsrs	r3, r3, #4
 800abb4:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800abb6:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800abb8:	61a0      	str	r0, [r4, #24]
 800abba:	f023 0308 	bic.w	r3, r3, #8
 800abbe:	61ab      	str	r3, [r5, #24]
 800abc0:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800abc2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800abc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abca:	61aa      	str	r2, [r5, #24]
 800abcc:	69ea      	ldr	r2, [r5, #28]
 800abce:	f022 0208 	bic.w	r2, r2, #8
 800abd2:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800abd4:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800abd6:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800abd8:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800abda:	69ab      	ldr	r3, [r5, #24]
 800abdc:	f043 0308 	orr.w	r3, r3, #8
 800abe0:	61ab      	str	r3, [r5, #24]
 800abe2:	69ab      	ldr	r3, [r5, #24]
 800abe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abe8:	61ab      	str	r3, [r5, #24]
 800abea:	69eb      	ldr	r3, [r5, #28]
 800abec:	f043 0308 	orr.w	r3, r3, #8
 800abf0:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800abf2:	6a2b      	ldr	r3, [r5, #32]
 800abf4:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800abf8:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 800abfc:	2204      	movs	r2, #4
 800abfe:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 800ac00:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
  pHandle->_Super.Sector=SECTOR_5;
 800ac04:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
}
 800ac08:	b003      	add	sp, #12
 800ac0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0c:	0800a4a5 	.word	0x0800a4a5
 800ac10:	0800a3f5 	.word	0x0800a3f5
 800ac14:	02000070 	.word	0x02000070
 800ac18:	7fffffc0 	.word	0x7fffffc0
 800ac1c:	080014bd 	.word	0x080014bd
 800ac20:	0800a4f1 	.word	0x0800a4f1
 800ac24:	0800a431 	.word	0x0800a431

0800ac28 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ac28:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ac30:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800ac34:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d033      	beq.n	800aca4 <R3_2_TIMx_UP_IRQHandler+0x7c>
    while (ADCx_1->JSQR != 0x0u)
 800ac3c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1fc      	bne.n	800ac3c <R3_2_TIMx_UP_IRQHandler+0x14>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800ac42:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 800ac46:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 800ac4a:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 800ac4c:	b12f      	cbz	r7, 800ac5a <R3_2_TIMx_UP_IRQHandler+0x32>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800ac4e:	6838      	ldr	r0, [r7, #0]
 800ac50:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800ac52:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 800ac56:	4330      	orrs	r0, r6
 800ac58:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800ac5a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 800ac5c:	b13f      	cbz	r7, 800ac6e <R3_2_TIMx_UP_IRQHandler+0x46>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800ac5e:	6838      	ldr	r0, [r7, #0]
 800ac60:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 800ac64:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 800ac68:	ea43 030e 	orr.w	r3, r3, lr
 800ac6c:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ac6e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ac72:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac76:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ac78:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ac7c:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ac7e:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ac80:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ac82:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ac86:	686b      	ldr	r3, [r5, #4]
 800ac88:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ac8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac90:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ac94:	2280      	movs	r2, #128	; 0x80
 800ac96:	606b      	str	r3, [r5, #4]
}
 800ac98:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ac9c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 800aca8:	e7e1      	b.n	800ac6e <R3_2_TIMx_UP_IRQHandler+0x46>
 800acaa:	bf00      	nop

0800acac <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 800acac:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800acb0:	b923      	cbnz	r3, 800acbc <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800acb2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800acb4:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 800acb8:	2a02      	cmp	r2, #2
 800acba:	d004      	beq.n	800acc6 <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 800acbc:	2301      	movs	r3, #1
 800acbe:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 800acc2:	3046      	adds	r0, #70	; 0x46
 800acc4:	4770      	bx	lr
{
 800acc6:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800acc8:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800accc:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800acd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 800acd2:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800acd4:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800acd8:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800acdc:	628c      	str	r4, [r1, #40]	; 0x28
 800acde:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 800ace0:	2301      	movs	r3, #1
 800ace2:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 800ace6:	bc30      	pop	{r4, r5}
 800ace8:	3046      	adds	r0, #70	; 0x46
 800acea:	4770      	bx	lr

0800acec <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800acec:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800acee:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800acf0:	6890      	ldr	r0, [r2, #8]
 800acf2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800acf4:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800acf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800acfa:	6442      	str	r2, [r0, #68]	; 0x44
}
 800acfc:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 800ad00:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 800ad04:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop

0800ad0c <R3_2_IsOverCurrentOccurred>:
{
 800ad0c:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 800ad0e:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 800ad12:	b160      	cbz	r0, 800ad2e <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 800ad1a:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 800ad1c:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 800ad1e:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 800ad22:	b11a      	cbz	r2, 800ad2c <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 800ad24:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 800ad26:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 800ad28:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 800ad2c:	4770      	bx	lr
 800ad2e:	2140      	movs	r1, #64	; 0x40
 800ad30:	e7f5      	b.n	800ad1e <R3_2_IsOverCurrentOccurred+0x12>
 800ad32:	bf00      	nop

0800ad34 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 800ad34:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 800ad38:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 800ad3a:	2900      	cmp	r1, #0
 800ad3c:	d13c      	bne.n	800adb8 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ad3e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800ad40:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad42:	699a      	ldr	r2, [r3, #24]
 800ad44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad48:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ad4c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ad50:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ad52:	6a1a      	ldr	r2, [r3, #32]
 800ad54:	f042 0201 	orr.w	r2, r2, #1
 800ad58:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ad5a:	6a1a      	ldr	r2, [r3, #32]
 800ad5c:	f022 0204 	bic.w	r2, r2, #4
 800ad60:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ad62:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800ad64:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800ad68:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ad6a:	f103 0118 	add.w	r1, r3, #24
 800ad6e:	d031      	beq.n	800add4 <R3_2_RLDetectionModeEnable+0xa0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800ad70:	2a02      	cmp	r2, #2
 800ad72:	d10f      	bne.n	800ad94 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad74:	699a      	ldr	r2, [r3, #24]
 800ad76:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ad7a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800ad7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad82:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ad84:	6a1a      	ldr	r2, [r3, #32]
 800ad86:	f042 0210 	orr.w	r2, r2, #16
 800ad8a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ad8c:	6a1a      	ldr	r2, [r3, #32]
 800ad8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad92:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad94:	684a      	ldr	r2, [r1, #4]
 800ad96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad9a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ad9e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800ada2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ada4:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800ada6:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800ada8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adac:	621a      	str	r2, [r3, #32]
 800adae:	6a1a      	ldr	r2, [r3, #32]
 800adb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adb4:	621a      	str	r2, [r3, #32]
 800adb6:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800adb8:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800adba:	4910      	ldr	r1, [pc, #64]	; (800adfc <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800adbc:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800adbe:	4c11      	ldr	r4, [pc, #68]	; (800ae04 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800adc0:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 800adc2:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800adc4:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800adc6:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800adca:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800adce:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800add2:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800add4:	699a      	ldr	r2, [r3, #24]
 800add6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800adda:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800adde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ade2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ade4:	6a1a      	ldr	r2, [r3, #32]
 800ade6:	f022 0210 	bic.w	r2, r2, #16
 800adea:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800adec:	6a1a      	ldr	r2, [r3, #32]
 800adee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adf2:	621a      	str	r2, [r3, #32]
}
 800adf4:	e7ce      	b.n	800ad94 <R3_2_RLDetectionModeEnable+0x60>
 800adf6:	bf00      	nop
 800adf8:	0800a679 	.word	0x0800a679
 800adfc:	0800a719 	.word	0x0800a719
 800ae00:	0800a619 	.word	0x0800a619
 800ae04:	0800a6cd 	.word	0x0800a6cd

0800ae08 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 800ae08:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d059      	beq.n	800aec4 <R3_2_RLDetectionModeDisable+0xbc>
{
 800ae10:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ae12:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800ae14:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ae16:	699a      	ldr	r2, [r3, #24]
 800ae18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae1c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ae20:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ae24:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ae26:	6a1a      	ldr	r2, [r3, #32]
 800ae28:	f042 0201 	orr.w	r2, r2, #1
 800ae2c:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800ae2e:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800ae32:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ae34:	f103 0518 	add.w	r5, r3, #24
 800ae38:	d045      	beq.n	800aec6 <R3_2_RLDetectionModeDisable+0xbe>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800ae3a:	2a02      	cmp	r2, #2
 800ae3c:	d103      	bne.n	800ae46 <R3_2_RLDetectionModeDisable+0x3e>
  CLEAR_BIT(TIMx->CCER, Channels);
 800ae3e:	6a1a      	ldr	r2, [r3, #32]
 800ae40:	f022 0204 	bic.w	r2, r2, #4
 800ae44:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800ae46:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 800ae4a:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ae4c:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ae54:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800ae58:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800ae5c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ae5e:	6a1a      	ldr	r2, [r3, #32]
 800ae60:	f042 0210 	orr.w	r2, r2, #16
 800ae64:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800ae66:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800ae6a:	2a01      	cmp	r2, #1
 800ae6c:	d035      	beq.n	800aeda <R3_2_RLDetectionModeDisable+0xd2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800ae6e:	2a02      	cmp	r2, #2
 800ae70:	d103      	bne.n	800ae7a <R3_2_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 800ae72:	6a1a      	ldr	r2, [r3, #32]
 800ae74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae78:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ae7a:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ae7c:	686a      	ldr	r2, [r5, #4]
 800ae7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae82:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ae86:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ae8a:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 800ae8c:	6a1a      	ldr	r2, [r3, #32]
 800ae8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae92:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800ae94:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800ae98:	2a01      	cmp	r2, #1
 800ae9a:	d019      	beq.n	800aed0 <R3_2_RLDetectionModeDisable+0xc8>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800ae9c:	2a02      	cmp	r2, #2
 800ae9e:	d103      	bne.n	800aea8 <R3_2_RLDetectionModeDisable+0xa0>
  CLEAR_BIT(TIMx->CCER, Channels);
 800aea0:	6a1a      	ldr	r2, [r3, #32]
 800aea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aea6:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800aea8:	4c0e      	ldr	r4, [pc, #56]	; (800aee4 <R3_2_RLDetectionModeDisable+0xdc>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800aeaa:	4a0f      	ldr	r2, [pc, #60]	; (800aee8 <R3_2_RLDetectionModeDisable+0xe0>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aeac:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800aeae:	4e0f      	ldr	r6, [pc, #60]	; (800aeec <R3_2_RLDetectionModeDisable+0xe4>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800aeb0:	4d0f      	ldr	r5, [pc, #60]	; (800aef0 <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800aeb2:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 800aeb4:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800aeb6:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800aeba:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800aebc:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800aec0:	bc70      	pop	{r4, r5, r6}
 800aec2:	4770      	bx	lr
 800aec4:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800aec6:	6a1a      	ldr	r2, [r3, #32]
 800aec8:	f042 0204 	orr.w	r2, r2, #4
 800aecc:	621a      	str	r2, [r3, #32]
}
 800aece:	e7ba      	b.n	800ae46 <R3_2_RLDetectionModeDisable+0x3e>
  SET_BIT(TIMx->CCER, Channels);
 800aed0:	6a1a      	ldr	r2, [r3, #32]
 800aed2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aed6:	621a      	str	r2, [r3, #32]
}
 800aed8:	e7e6      	b.n	800aea8 <R3_2_RLDetectionModeDisable+0xa0>
  SET_BIT(TIMx->CCER, Channels);
 800aeda:	6a1a      	ldr	r2, [r3, #32]
 800aedc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aee0:	621a      	str	r2, [r3, #32]
}
 800aee2:	e7ca      	b.n	800ae7a <R3_2_RLDetectionModeDisable+0x72>
 800aee4:	0800a585 	.word	0x0800a585
 800aee8:	0800a619 	.word	0x0800a619
 800aeec:	080014bd 	.word	0x080014bd
 800aef0:	0800a535 	.word	0x0800a535

0800aef4 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800aef4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800aef6:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800aef8:	69da      	ldr	r2, [r3, #28]
{
 800aefa:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800aefc:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800af00:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
 800af04:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800af08:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 800af0c:	2501      	movs	r5, #1
 800af0e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800af12:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800af16:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 800af18:	f8b0 5058 	ldrh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800af1c:	8641      	strh	r1, [r0, #50]	; 0x32
 800af1e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800af22:	1ba4      	subs	r4, r4, r6
 800af24:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800af26:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800af28:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800af2a:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800af2c:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800af2e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800af30:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800af34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800af38:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 800af3c:	2403      	movs	r4, #3
 800af3e:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800af40:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 800af42:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800af46:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800af48:	d007      	beq.n	800af5a <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800af4a:	4a06      	ldr	r2, [pc, #24]	; (800af64 <R3_2_RLDetectionModeSetDuty+0x70>)
 800af4c:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 800af4e:	bf14      	ite	ne
 800af50:	2101      	movne	r1, #1
 800af52:	2100      	moveq	r1, #0
}
 800af54:	4608      	mov	r0, r1
 800af56:	bc70      	pop	{r4, r5, r6}
 800af58:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 800af5a:	2300      	movs	r3, #0
 800af5c:	8703      	strh	r3, [r0, #56]	; 0x38
}
 800af5e:	bc70      	pop	{r4, r5, r6}
 800af60:	4608      	mov	r0, r1
 800af62:	4770      	bx	lr
 800af64:	02000070 	.word	0x02000070

0800af68 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800af68:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800af6a:	8b82      	ldrh	r2, [r0, #28]
 800af6c:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800af6e:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800af70:	4414      	add	r4, r2
 800af72:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800af74:	b14b      	cbz	r3, 800af8a <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 800af76:	6a05      	ldr	r5, [r0, #32]
 800af78:	2300      	movs	r3, #0
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	3301      	adds	r3, #1
 800af7e:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800af82:	8b01      	ldrh	r1, [r0, #24]
 800af84:	b29a      	uxth	r2, r3
 800af86:	4291      	cmp	r1, r2
 800af88:	d8f7      	bhi.n	800af7a <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 800af8a:	2300      	movs	r3, #0
 800af8c:	f364 030f 	bfi	r3, r4, #0, #16
 800af90:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 800af94:	2200      	movs	r2, #0
}
 800af96:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 800af98:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 800af9a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800af9e:	4770      	bx	lr

0800afa0 <RVBS_Init>:
{
 800afa0:	b510      	push	{r4, lr}
 800afa2:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800afa4:	300c      	adds	r0, #12
 800afa6:	f7f9 f9b5 	bl	8004314 <RCM_RegisterRegConv>
 800afaa:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800afae:	4620      	mov	r0, r4
 800afb0:	f7ff ffda 	bl	800af68 <RVBS_Clear>
}
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	bf00      	nop

0800afb8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800afb8:	88c3      	ldrh	r3, [r0, #6]
 800afba:	8b42      	ldrh	r2, [r0, #26]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d305      	bcc.n	800afcc <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800afc0:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800afc2:	4298      	cmp	r0, r3
 800afc4:	bf8c      	ite	hi
 800afc6:	2004      	movhi	r0, #4
 800afc8:	2000      	movls	r0, #0
 800afca:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800afcc:	2002      	movs	r0, #2
  }
  return fault;
}
 800afce:	4770      	bx	lr

0800afd0 <RVBS_CalcAvVbus>:
{
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800afd4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800afd8:	f7f9 fa70 	bl	80044bc <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800afdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afe0:	4298      	cmp	r0, r3
 800afe2:	d01c      	beq.n	800b01e <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 800afe4:	6a2f      	ldr	r7, [r5, #32]
 800afe6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800afea:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800afee:	8b2e      	ldrh	r6, [r5, #24]
 800aff0:	b1d6      	cbz	r6, 800b028 <RVBS_CalcAvVbus+0x58>
 800aff2:	2300      	movs	r3, #0
    wtemp = 0;
 800aff4:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800aff6:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800affa:	3301      	adds	r3, #1
 800affc:	b2d9      	uxtb	r1, r3
 800affe:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 800b000:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800b002:	460b      	mov	r3, r1
 800b004:	d3f7      	bcc.n	800aff6 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 800b006:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800b00a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800b00e:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800b010:	3e01      	subs	r6, #1
 800b012:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 800b014:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800b016:	da09      	bge.n	800b02c <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 800b018:	3301      	adds	r3, #1
 800b01a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800b01e:	4628      	mov	r0, r5
 800b020:	f7ff ffca 	bl	800afb8 <RVBS_CheckFaultState>
 800b024:	8128      	strh	r0, [r5, #8]
}
 800b026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800b028:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 800b02a:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800b032:	4628      	mov	r0, r5
 800b034:	f7ff ffc0 	bl	800afb8 <RVBS_CheckFaultState>
 800b038:	8128      	strh	r0, [r5, #8]
}
 800b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b03c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800b03c:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800b03e:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 800b040:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800b044:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800b048:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800b04a:	4770      	bx	lr

0800b04c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800b04c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop

0800b054 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 800b054:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop

0800b05c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800b05c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop

0800b064 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800b064:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800b068:	8a81      	ldrh	r1, [r0, #20]
{
 800b06a:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 800b06c:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800b06e:	bfb8      	it	lt
 800b070:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800b072:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800b074:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800b076:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800b078:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800b07a:	429d      	cmp	r5, r3
 800b07c:	d817      	bhi.n	800b0ae <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800b07e:	4299      	cmp	r1, r3
 800b080:	bf2c      	ite	cs
 800b082:	2300      	movcs	r3, #0
 800b084:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800b086:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800b08a:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 800b08c:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800b08e:	bfb8      	it	lt
 800b090:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800b092:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800b094:	428d      	cmp	r5, r1
 800b096:	d300      	bcc.n	800b09a <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800b098:	b15b      	cbz	r3, 800b0b2 <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800b09a:	4294      	cmp	r4, r2
 800b09c:	d901      	bls.n	800b0a2 <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 800b09e:	3201      	adds	r2, #1
 800b0a0:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b0a2:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800b0a4:	1b10      	subs	r0, r2, r4
 800b0a6:	bf18      	it	ne
 800b0a8:	2001      	movne	r0, #1
 800b0aa:	bc30      	pop	{r4, r5}
 800b0ac:	4770      	bx	lr
    SpeedError = true;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e7e9      	b.n	800b086 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800b0b2:	4294      	cmp	r4, r2
 800b0b4:	bf88      	it	hi
 800b0b6:	2200      	movhi	r2, #0
 800b0b8:	e7f3      	b.n	800b0a2 <SPD_IsMecSpeedReliable+0x3e>
 800b0ba:	bf00      	nop

0800b0bc <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 800b0bc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800b0c0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800b0c4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800b0c8:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800b0cc:	b200      	sxth	r0, r0
 800b0ce:	4770      	bx	lr

0800b0d0 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800b0d0:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800b0d2:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800b0d6:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 800b0da:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800b0de:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800b0e0:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800b0e2:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 800b0e4:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800b0e6:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 800b0ea:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 800b0ec:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800b0ee:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 800b0f0:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800b0f2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800b0f4:	6183      	str	r3, [r0, #24]
}
 800b0f6:	4770      	bx	lr

0800b0f8 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 800b0f8:	6141      	str	r1, [r0, #20]
}
 800b0fa:	4770      	bx	lr

0800b0fc <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800b0fc:	6940      	ldr	r0, [r0, #20]
 800b0fe:	4770      	bx	lr

0800b100 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800b100:	7803      	ldrb	r3, [r0, #0]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d000      	beq.n	800b108 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 800b106:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800b108:	6900      	ldr	r0, [r0, #16]
 800b10a:	2100      	movs	r1, #0
 800b10c:	f7fe bed6 	b.w	8009ebc <PID_SetIntegralTerm>

0800b110 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800b110:	6840      	ldr	r0, [r0, #4]
 800b112:	2800      	cmp	r0, #0
 800b114:	bfbc      	itt	lt
 800b116:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800b11a:	30ff      	addlt	r0, #255	; 0xff
}
 800b11c:	1400      	asrs	r0, r0, #16
 800b11e:	4770      	bx	lr

0800b120 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800b120:	6880      	ldr	r0, [r0, #8]
 800b122:	2800      	cmp	r0, #0
 800b124:	bfbc      	itt	lt
 800b126:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800b12a:	30ff      	addlt	r0, #255	; 0xff
}
 800b12c:	1400      	asrs	r0, r0, #16
 800b12e:	4770      	bx	lr

0800b130 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800b130:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800b132:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800b134:	60c3      	str	r3, [r0, #12]
}
 800b136:	4770      	bx	lr

0800b138 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800b13a:	7806      	ldrb	r6, [r0, #0]
{
 800b13c:	4604      	mov	r4, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800b142:	b326      	cbz	r6, 800b18e <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800b144:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800b146:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800b148:	2800      	cmp	r0, #0
 800b14a:	bfbc      	itt	lt
 800b14c:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800b150:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800b152:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800b154:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800b158:	dd01      	ble.n	800b15e <STC_ExecRamp+0x26>
      AllowedRange = false;
 800b15a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800b15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800b15e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800b162:	42a9      	cmp	r1, r5
 800b164:	dcf9      	bgt.n	800b15a <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800b166:	8c23      	ldrh	r3, [r4, #32]
 800b168:	429d      	cmp	r5, r3
 800b16a:	da03      	bge.n	800b174 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800b16c:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800b170:	42ab      	cmp	r3, r5
 800b172:	dbf2      	blt.n	800b15a <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 800b174:	b9af      	cbnz	r7, 800b1a2 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 800b176:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800b178:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 800b17a:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 800b17c:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800b180:	bf0c      	ite	eq
 800b182:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800b184:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800b186:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800b188:	61a3      	str	r3, [r4, #24]
 800b18a:	2001      	movs	r0, #1
}
 800b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800b18e:	f7ff ffc7 	bl	800b120 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800b192:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 800b194:	42b5      	cmp	r5, r6
 800b196:	dce0      	bgt.n	800b15a <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800b198:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800b19c:	42ab      	cmp	r3, r5
 800b19e:	dcdc      	bgt.n	800b15a <STC_ExecRamp+0x22>
 800b1a0:	e7e8      	b.n	800b174 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800b1a2:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800b1a4:	4a07      	ldr	r2, [pc, #28]	; (800b1c4 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 800b1a6:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800b1a8:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 800b1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b0:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800b1b2:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800b1b4:	1a2d      	subs	r5, r5, r0
 800b1b6:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 800b1b8:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800b1ba:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800b1be:	2001      	movs	r0, #1
 800b1c0:	61a5      	str	r5, [r4, #24]
}
 800b1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c4:	10624dd3 	.word	0x10624dd3

0800b1c8 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800b1cc:	6183      	str	r3, [r0, #24]
}
 800b1ce:	4770      	bx	lr

0800b1d0 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b1d0:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800b1d2:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800b1d6:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800b1d8:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	bf08      	it	eq
 800b1de:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800b1e0:	2b01      	cmp	r3, #1
{
 800b1e2:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800b1e4:	d90c      	bls.n	800b200 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800b1e6:	6981      	ldr	r1, [r0, #24]
 800b1e8:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	2e00      	cmp	r6, #0
 800b1ee:	60c3      	str	r3, [r0, #12]
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	db09      	blt.n	800b208 <STC_CalcTorqueReference+0x38>
 800b1f4:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800b1f6:	2a01      	cmp	r2, #1
 800b1f8:	d00a      	beq.n	800b210 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800b1fa:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800b1fc:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800b200:	d012      	beq.n	800b228 <STC_CalcTorqueReference+0x58>
 800b202:	2e00      	cmp	r6, #0
 800b204:	4630      	mov	r0, r6
 800b206:	daf5      	bge.n	800b1f4 <STC_CalcTorqueReference+0x24>
 800b208:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800b20c:	30ff      	adds	r0, #255	; 0xff
 800b20e:	e7f1      	b.n	800b1f4 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800b210:	6960      	ldr	r0, [r4, #20]
 800b212:	f7ff ff1f 	bl	800b054 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800b216:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800b218:	b201      	sxth	r1, r0
 800b21a:	6920      	ldr	r0, [r4, #16]
 800b21c:	f7fe fe5a 	bl	8009ed4 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800b220:	0403      	lsls	r3, r0, #16
 800b222:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800b226:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800b228:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800b22c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800b22e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800b230:	60c3      	str	r3, [r0, #12]
 800b232:	e7e0      	b.n	800b1f6 <STC_CalcTorqueReference+0x26>

0800b234 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800b234:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop

0800b23c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800b23c:	8bc0      	ldrh	r0, [r0, #30]
 800b23e:	4770      	bx	lr

0800b240 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 800b240:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop

0800b248 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800b248:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800b24c:	2200      	movs	r2, #0
 800b24e:	b299      	uxth	r1, r3
 800b250:	f361 020f 	bfi	r2, r1, #0, #16
 800b254:	0c1b      	lsrs	r3, r3, #16
 800b256:	f363 421f 	bfi	r2, r3, #16, #16
{
 800b25a:	b082      	sub	sp, #8
}
 800b25c:	4610      	mov	r0, r2
 800b25e:	b002      	add	sp, #8
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop

0800b264 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b264:	b510      	push	{r4, lr}
 800b266:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800b268:	6940      	ldr	r0, [r0, #20]
 800b26a:	f7ff fef3 	bl	800b054 <SPD_GetAvrgMecSpeedUnit>
 800b26e:	0400      	lsls	r0, r0, #16
 800b270:	6060      	str	r0, [r4, #4]
}
 800b272:	bd10      	pop	{r4, pc}

0800b274 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800b274:	2300      	movs	r3, #0
 800b276:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800b278:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop

0800b280 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800b280:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800b282:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800b284:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 800b286:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800b288:	430b      	orrs	r3, r1
 800b28a:	ea23 0202 	bic.w	r2, r3, r2
 800b28e:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800b290:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800b292:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800b294:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800b296:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 800b298:	d008      	beq.n	800b2ac <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800b29a:	b912      	cbnz	r2, 800b2a2 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800b29c:	4620      	mov	r0, r4
 800b29e:	bc30      	pop	{r4, r5}
 800b2a0:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800b2a2:	240a      	movs	r4, #10
 800b2a4:	7004      	strb	r4, [r0, #0]
}
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	bc30      	pop	{r4, r5}
 800b2aa:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800b2ac:	2a00      	cmp	r2, #0
 800b2ae:	d1f5      	bne.n	800b29c <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800b2b0:	240b      	movs	r4, #11
 800b2b2:	7004      	strb	r4, [r0, #0]
}
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	bc30      	pop	{r4, r5}
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop

0800b2bc <STM_NextState>:
{
 800b2bc:	b508      	push	{r3, lr}
 800b2be:	7803      	ldrb	r3, [r0, #0]
 800b2c0:	2b14      	cmp	r3, #20
 800b2c2:	d810      	bhi.n	800b2e6 <STM_NextState+0x2a>
 800b2c4:	e8df f003 	tbb	[pc, r3]
 800b2c8:	240d545e 	.word	0x240d545e
 800b2cc:	390d352e 	.word	0x390d352e
 800b2d0:	0f0f3f3c 	.word	0x0f0f3f3c
 800b2d4:	47650b44 	.word	0x47650b44
 800b2d8:	504d1b4a 	.word	0x504d1b4a
 800b2dc:	5b          	.byte	0x5b
 800b2dd:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800b2de:	290e      	cmp	r1, #14
 800b2e0:	d013      	beq.n	800b30a <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 800b2e2:	2907      	cmp	r1, #7
 800b2e4:	d011      	beq.n	800b30a <STM_NextState+0x4e>
 800b2e6:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d018      	beq.n	800b320 <STM_NextState+0x64>
 800b2ee:	2907      	cmp	r1, #7
 800b2f0:	d016      	beq.n	800b320 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2180      	movs	r1, #128	; 0x80
 800b2f6:	f7ff ffc3 	bl	800b280 <STM_FaultProcessing>
 800b2fa:	2000      	movs	r0, #0
}
 800b2fc:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800b2fe:	2914      	cmp	r1, #20
 800b300:	d8f1      	bhi.n	800b2e6 <STM_NextState+0x2a>
 800b302:	4b26      	ldr	r3, [pc, #152]	; (800b39c <STM_NextState+0xe0>)
 800b304:	40cb      	lsrs	r3, r1
 800b306:	07db      	lsls	r3, r3, #31
 800b308:	d5ed      	bpl.n	800b2e6 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800b30a:	7001      	strb	r1, [r0, #0]
 800b30c:	2001      	movs	r0, #1
}
 800b30e:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800b310:	2911      	cmp	r1, #17
 800b312:	d8ee      	bhi.n	800b2f2 <STM_NextState+0x36>
 800b314:	4b22      	ldr	r3, [pc, #136]	; (800b3a0 <STM_NextState+0xe4>)
 800b316:	40cb      	lsrs	r3, r1
 800b318:	07da      	lsls	r2, r3, #31
 800b31a:	d4f6      	bmi.n	800b30a <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b31c:	2903      	cmp	r1, #3
 800b31e:	d1e8      	bne.n	800b2f2 <STM_NextState+0x36>
 800b320:	2000      	movs	r0, #0
}
 800b322:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800b324:	2913      	cmp	r1, #19
 800b326:	d0f0      	beq.n	800b30a <STM_NextState+0x4e>
 800b328:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800b32c:	2b05      	cmp	r3, #5
 800b32e:	d1dc      	bne.n	800b2ea <STM_NextState+0x2e>
 800b330:	e7eb      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800b332:	1f8b      	subs	r3, r1, #6
 800b334:	2b01      	cmp	r3, #1
 800b336:	d8d6      	bhi.n	800b2e6 <STM_NextState+0x2a>
 800b338:	e7e7      	b.n	800b30a <STM_NextState+0x4e>
      if ( bState == STOP )
 800b33a:	2908      	cmp	r1, #8
 800b33c:	d1d3      	bne.n	800b2e6 <STM_NextState+0x2a>
 800b33e:	e7e4      	b.n	800b30a <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 800b340:	2909      	cmp	r1, #9
 800b342:	d1d0      	bne.n	800b2e6 <STM_NextState+0x2a>
 800b344:	e7e1      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800b346:	2900      	cmp	r1, #0
 800b348:	d0df      	beq.n	800b30a <STM_NextState+0x4e>
 800b34a:	290c      	cmp	r1, #12
 800b34c:	d1cb      	bne.n	800b2e6 <STM_NextState+0x2a>
 800b34e:	e7dc      	b.n	800b30a <STM_NextState+0x4e>
      if ( bState == IDLE )
 800b350:	2900      	cmp	r1, #0
 800b352:	d0da      	beq.n	800b30a <STM_NextState+0x4e>
 800b354:	e7c7      	b.n	800b2e6 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800b356:	2902      	cmp	r1, #2
 800b358:	d1c3      	bne.n	800b2e2 <STM_NextState+0x26>
 800b35a:	e7d6      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800b35c:	2911      	cmp	r1, #17
 800b35e:	d1c0      	bne.n	800b2e2 <STM_NextState+0x26>
 800b360:	e7d3      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800b362:	2904      	cmp	r1, #4
 800b364:	d1bd      	bne.n	800b2e2 <STM_NextState+0x26>
 800b366:	e7d0      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800b368:	1f0b      	subs	r3, r1, #4
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d8b9      	bhi.n	800b2e2 <STM_NextState+0x26>
 800b36e:	e7cc      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800b370:	2907      	cmp	r1, #7
 800b372:	d0ca      	beq.n	800b30a <STM_NextState+0x4e>
 800b374:	f1a1 030d 	sub.w	r3, r1, #13
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d8b4      	bhi.n	800b2e6 <STM_NextState+0x2a>
 800b37c:	e7c5      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800b37e:	2912      	cmp	r1, #18
 800b380:	d1af      	bne.n	800b2e2 <STM_NextState+0x26>
 800b382:	e7c2      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b384:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d0be      	beq.n	800b30a <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 800b38c:	290c      	cmp	r1, #12
 800b38e:	d1ae      	bne.n	800b2ee <STM_NextState+0x32>
 800b390:	e7bb      	b.n	800b30a <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800b392:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800b396:	2b07      	cmp	r3, #7
 800b398:	d1a5      	bne.n	800b2e6 <STM_NextState+0x2a>
 800b39a:	e7b6      	b.n	800b30a <STM_NextState+0x4e>
 800b39c:	00140080 	.word	0x00140080
 800b3a0:	00030092 	.word	0x00030092

0800b3a4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 800b3a4:	7800      	ldrb	r0, [r0, #0]
 800b3a6:	4770      	bx	lr

0800b3a8 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800b3a8:	7803      	ldrb	r3, [r0, #0]
 800b3aa:	2b0b      	cmp	r3, #11
 800b3ac:	d001      	beq.n	800b3b2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800b3ae:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800b3b0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800b3b2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800b3b4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800b3b6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800b3b8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800b3ba:	2001      	movs	r0, #1
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop

0800b3c0 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800b3c0:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800b3c2:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 800b3c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop

0800b3cc <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800b3cc:	f7fe bcb0 	b.w	8009d30 <FCP_Init>

0800b3d0 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800b3d0:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 800b3d4:	b16a      	cbz	r2, 800b3f2 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800b3d6:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 800b3da:	4603      	mov	r3, r0
 800b3dc:	b1a2      	cbz	r2, 800b408 <UFCP_TX_IRQ_Handler+0x38>
 800b3de:	2a01      	cmp	r2, #1
 800b3e0:	d108      	bne.n	800b3f4 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800b3e2:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b3e4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800b3e8:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 800b3ea:	3201      	adds	r2, #1
 800b3ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800b3f0:	4770      	bx	lr
 800b3f2:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b3f4:	7d41      	ldrb	r1, [r0, #21]
 800b3f6:	3101      	adds	r1, #1
 800b3f8:	428a      	cmp	r2, r1
 800b3fa:	dc07      	bgt.n	800b40c <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800b3fc:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b3fe:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 800b402:	7d09      	ldrb	r1, [r1, #20]
 800b404:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b406:	e7f0      	b.n	800b3ea <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800b408:	7d01      	ldrb	r1, [r0, #20]
        break;
 800b40a:	e7eb      	b.n	800b3e4 <UFCP_TX_IRQ_Handler+0x14>
{
 800b40c:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b40e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800b412:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 800b416:	6291      	str	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b418:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b41a:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800b41e:	2500      	movs	r5, #0
 800b420:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b424:	6011      	str	r1, [r2, #0]
 800b426:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b42a:	4623      	mov	r3, r4
}
 800b42c:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b42e:	4718      	bx	r3

0800b430 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800b430:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800b434:	b10b      	cbz	r3, 800b43a <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b436:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800b438:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800b43a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800b43e:	2301      	movs	r3, #1
 800b440:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b444:	6813      	ldr	r3, [r2, #0]
 800b446:	f043 0320 	orr.w	r3, r3, #32
 800b44a:	6013      	str	r3, [r2, #0]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800b44c:	2002      	movs	r0, #2
 800b44e:	4770      	bx	lr

0800b450 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800b454:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 800b458:	b108      	cbz	r0, 800b45e <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b45a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800b45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 800b45e:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800b460:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800b462:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 800b464:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800b466:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 800b46a:	b34b      	cbz	r3, 800b4c0 <UFCP_Send+0x70>
 800b46c:	f104 011a 	add.w	r1, r4, #26
 800b470:	1d17      	adds	r7, r2, #4
 800b472:	45bc      	cmp	ip, r7
 800b474:	bf38      	it	cc
 800b476:	428a      	cmpcc	r2, r1
 800b478:	d336      	bcc.n	800b4e8 <UFCP_Send+0x98>
 800b47a:	2807      	cmp	r0, #7
 800b47c:	d934      	bls.n	800b4e8 <UFCP_Send+0x98>
 800b47e:	0899      	lsrs	r1, r3, #2
 800b480:	3901      	subs	r1, #1
 800b482:	b2c9      	uxtb	r1, r1
 800b484:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 800b488:	4665      	mov	r5, ip
 800b48a:	4611      	mov	r1, r2
 800b48c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b490:	f845 6b04 	str.w	r6, [r5], #4
 800b494:	42b9      	cmp	r1, r7
 800b496:	d1f9      	bne.n	800b48c <UFCP_Send+0x3c>
 800b498:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 800b49c:	1a40      	subs	r0, r0, r1
 800b49e:	428b      	cmp	r3, r1
 800b4a0:	b2c0      	uxtb	r0, r0
 800b4a2:	eb02 0601 	add.w	r6, r2, r1
 800b4a6:	eb0c 0501 	add.w	r5, ip, r1
 800b4aa:	d009      	beq.n	800b4c0 <UFCP_Send+0x70>
 800b4ac:	5c53      	ldrb	r3, [r2, r1]
 800b4ae:	f80c 3001 	strb.w	r3, [ip, r1]
 800b4b2:	b128      	cbz	r0, 800b4c0 <UFCP_Send+0x70>
 800b4b4:	7873      	ldrb	r3, [r6, #1]
 800b4b6:	706b      	strb	r3, [r5, #1]
 800b4b8:	2801      	cmp	r0, #1
 800b4ba:	d001      	beq.n	800b4c0 <UFCP_Send+0x70>
 800b4bc:	78b3      	ldrb	r3, [r6, #2]
 800b4be:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800b4c0:	f104 0014 	add.w	r0, r4, #20
 800b4c4:	f7fe fc48 	bl	8009d58 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800b4c8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800b4cc:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800b4d0:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800b4d2:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 800b4d4:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800b4d8:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b4dc:	6813      	ldr	r3, [r2, #0]
 800b4de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	2002      	movs	r0, #2
}
 800b4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	4410      	add	r0, r2
 800b4ec:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 800b4f0:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b4f4:	f803 1f01 	strb.w	r1, [r3, #1]!
 800b4f8:	4282      	cmp	r2, r0
 800b4fa:	d1f9      	bne.n	800b4f0 <UFCP_Send+0xa0>
 800b4fc:	e7e0      	b.n	800b4c0 <UFCP_Send+0x70>
 800b4fe:	bf00      	nop

0800b500 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800b500:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800b504:	b90b      	cbnz	r3, 800b50a <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b506:	482c      	ldr	r0, [pc, #176]	; (800b5b8 <UFCP_RX_IRQ_Handler+0xb8>)
}
 800b508:	4770      	bx	lr
{
 800b50a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800b50c:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 800b510:	b083      	sub	sp, #12
 800b512:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 800b514:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 800b516:	b1d3      	cbz	r3, 800b54e <UFCP_RX_IRQ_Handler+0x4e>
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d00d      	beq.n	800b538 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800b51c:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 800b520:	3101      	adds	r1, #1
 800b522:	428b      	cmp	r3, r1
 800b524:	dc1d      	bgt.n	800b562 <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800b526:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b528:	4823      	ldr	r0, [pc, #140]	; (800b5b8 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800b52a:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 800b52e:	3301      	adds	r3, #1
 800b530:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800b534:	b003      	add	sp, #12
 800b536:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800b538:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 800b53a:	bf54      	ite	pl
 800b53c:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 800b53e:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 800b540:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 800b544:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b548:	481b      	ldr	r0, [pc, #108]	; (800b5b8 <UFCP_RX_IRQ_Handler+0xb8>)
}
 800b54a:	b003      	add	sp, #12
 800b54c:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800b54e:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 800b550:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 800b554:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800b556:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 800b558:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800b55c:	4817      	ldr	r0, [pc, #92]	; (800b5bc <UFCP_RX_IRQ_Handler+0xbc>)
}
 800b55e:	b003      	add	sp, #12
 800b560:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800b562:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800b566:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b56a:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 800b56c:	2200      	movs	r2, #0
 800b56e:	f023 0320 	bic.w	r3, r3, #32
 800b572:	8242      	strh	r2, [r0, #18]
 800b574:	600b      	str	r3, [r1, #0]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800b576:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b578:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800b57c:	f7fe fbec 	bl	8009d58 <FCP_CalcCRC>
 800b580:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800b584:	4283      	cmp	r3, r0
 800b586:	d10a      	bne.n	800b59e <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800b588:	6820      	ldr	r0, [r4, #0]
 800b58a:	68a5      	ldr	r5, [r4, #8]
 800b58c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800b590:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800b594:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 800b598:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800b59a:	4809      	ldr	r0, [pc, #36]	; (800b5c0 <UFCP_RX_IRQ_Handler+0xc0>)
 800b59c:	e7d5      	b.n	800b54a <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b59e:	4620      	mov	r0, r4
 800b5a0:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 800b5a2:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b5a4:	f10d 0207 	add.w	r2, sp, #7
 800b5a8:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 800b5aa:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b5ae:	f7ff ff4f 	bl	800b450 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800b5b2:	4803      	ldr	r0, [pc, #12]	; (800b5c0 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800b5b4:	e7c9      	b.n	800b54a <UFCP_RX_IRQ_Handler+0x4a>
 800b5b6:	bf00      	nop
 800b5b8:	0800b8a8 	.word	0x0800b8a8
 800b5bc:	0800b8aa 	.word	0x0800b8aa
 800b5c0:	0800b8ac 	.word	0x0800b8ac

0800b5c4 <UFCP_OVR_IRQ_Handler>:
{
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 800b5c8:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f10d 0207 	add.w	r2, sp, #7
 800b5d0:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 800b5d2:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b5d6:	f7ff ff3b 	bl	800b450 <UFCP_Send>
}
 800b5da:	b002      	add	sp, #8
 800b5dc:	bd10      	pop	{r4, pc}
 800b5de:	bf00      	nop

0800b5e0 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800b5e6:	4770      	bx	lr

0800b5e8 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800b5e8:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b5ea:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800b5ec:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 800b5ee:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800b5f2:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 800b5f4:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b5f6:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800b5f8:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 800b5fa:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 800b5fc:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 800b5fe:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop

0800b604 <VSS_Init>:
{
 800b604:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800b606:	f7ff ffef 	bl	800b5e8 <VSS_Clear>
}
 800b60a:	bd08      	pop	{r3, pc}

0800b60c <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800b60c:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 800b60e:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 800b610:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800b612:	fb91 f1f3 	sdiv	r1, r1, r3
 800b616:	80c1      	strh	r1, [r0, #6]
}
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop

0800b61c <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800b61c:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800b61e:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800b622:	b984      	cbnz	r4, 800b646 <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 800b624:	b98a      	cbnz	r2, 800b64a <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b626:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800b628:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800b62a:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800b62c:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b62e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b632:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800b634:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b638:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800b63c:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 800b640:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b642:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800b644:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800b646:	bc70      	pop	{r4, r5, r6}
 800b648:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800b64a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800b64c:	4d11      	ldr	r5, [pc, #68]	; (800b694 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b64e:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800b650:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b654:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800b656:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800b65a:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b65e:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800b660:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800b662:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b666:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b66a:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b66c:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 800b670:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800b672:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b676:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800b67a:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 800b67c:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800b67e:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800b680:	0412      	lsls	r2, r2, #16
 800b682:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800b686:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800b68a:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 800b68e:	8503      	strh	r3, [r0, #40]	; 0x28
}
 800b690:	bc70      	pop	{r4, r5, r6}
 800b692:	4770      	bx	lr
 800b694:	10624dd3 	.word	0x10624dd3

0800b698 <RUC_SetPhaseDurationms>:
 800b698:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b69c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6a0:	818a      	strh	r2, [r1, #12]
 800b6a2:	4770      	bx	lr

0800b6a4 <RUC_SetPhaseFinalMecSpeedUnit>:
 800b6a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b6a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6ac:	81ca      	strh	r2, [r1, #14]
 800b6ae:	4770      	bx	lr

0800b6b0 <RUC_SetPhaseFinalTorque>:
 800b6b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b6b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6b8:	820a      	strh	r2, [r1, #16]
 800b6ba:	4770      	bx	lr

0800b6bc <RUC_GetPhaseDurationms>:
 800b6bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b6c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6c4:	8988      	ldrh	r0, [r1, #12]
 800b6c6:	4770      	bx	lr

0800b6c8 <RUC_GetPhaseFinalMecSpeedUnit>:
 800b6c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b6cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6d0:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop

0800b6d8 <RUC_GetPhaseFinalTorque>:
 800b6d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b6dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6e0:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop

0800b6e8 <RUC_GetNumberOfPhases>:
 800b6e8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop

0800b6f0 <__libc_init_array>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	4d0d      	ldr	r5, [pc, #52]	; (800b728 <__libc_init_array+0x38>)
 800b6f4:	4c0d      	ldr	r4, [pc, #52]	; (800b72c <__libc_init_array+0x3c>)
 800b6f6:	1b64      	subs	r4, r4, r5
 800b6f8:	10a4      	asrs	r4, r4, #2
 800b6fa:	2600      	movs	r6, #0
 800b6fc:	42a6      	cmp	r6, r4
 800b6fe:	d109      	bne.n	800b714 <__libc_init_array+0x24>
 800b700:	4d0b      	ldr	r5, [pc, #44]	; (800b730 <__libc_init_array+0x40>)
 800b702:	4c0c      	ldr	r4, [pc, #48]	; (800b734 <__libc_init_array+0x44>)
 800b704:	f000 f820 	bl	800b748 <_init>
 800b708:	1b64      	subs	r4, r4, r5
 800b70a:	10a4      	asrs	r4, r4, #2
 800b70c:	2600      	movs	r6, #0
 800b70e:	42a6      	cmp	r6, r4
 800b710:	d105      	bne.n	800b71e <__libc_init_array+0x2e>
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	f855 3b04 	ldr.w	r3, [r5], #4
 800b718:	4798      	blx	r3
 800b71a:	3601      	adds	r6, #1
 800b71c:	e7ee      	b.n	800b6fc <__libc_init_array+0xc>
 800b71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b722:	4798      	blx	r3
 800b724:	3601      	adds	r6, #1
 800b726:	e7f2      	b.n	800b70e <__libc_init_array+0x1e>
 800b728:	0800b8b8 	.word	0x0800b8b8
 800b72c:	0800b8b8 	.word	0x0800b8b8
 800b730:	0800b8b8 	.word	0x0800b8b8
 800b734:	0800b8bc 	.word	0x0800b8bc

0800b738 <memset>:
 800b738:	4402      	add	r2, r0
 800b73a:	4603      	mov	r3, r0
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d100      	bne.n	800b742 <memset+0xa>
 800b740:	4770      	bx	lr
 800b742:	f803 1b01 	strb.w	r1, [r3], #1
 800b746:	e7f9      	b.n	800b73c <memset+0x4>

0800b748 <_init>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	bf00      	nop
 800b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74e:	bc08      	pop	{r3}
 800b750:	469e      	mov	lr, r3
 800b752:	4770      	bx	lr

0800b754 <_fini>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	bf00      	nop
 800b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75a:	bc08      	pop	{r3}
 800b75c:	469e      	mov	lr, r3
 800b75e:	4770      	bx	lr
