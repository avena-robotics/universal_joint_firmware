
universal_joint_2.2_MC547_RI80.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b650  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b978  0800b978  00020dfc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b980  0800b980  00020dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b984  0800b984  0001b984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000dfc  20000000  0800b988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000dfc  0800c784  00020dfc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015ec  0800c784  000215ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020dfc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004f669  00000000  00000000  00020e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0008c169  00000000  00000000  00070495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a9f9  00000000  00000000  000fc5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021c8  00000000  00000000  00106ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00101fab  00000000  00000000  001091c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005480  00000000  00000000  0020b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00029b4f  00000000  00000000  002105f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002eb45  00000000  00000000  0023a13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  00268c84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000684c  00000000  00000000  00268d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000dfc 	.word	0x20000dfc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b810 	.word	0x0800b810

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000e00 	.word	0x20000e00
 8000214:	0800b810 	.word	0x0800b810

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96e 	b.w	8000d98 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	4604      	mov	r4, r0
 8000adc:	468c      	mov	ip, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8083 	bne.w	8000bea <__udivmoddi4+0x116>
 8000ae4:	428a      	cmp	r2, r1
 8000ae6:	4617      	mov	r7, r2
 8000ae8:	d947      	bls.n	8000b7a <__udivmoddi4+0xa6>
 8000aea:	fab2 f282 	clz	r2, r2
 8000aee:	b142      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000af0:	f1c2 0020 	rsb	r0, r2, #32
 8000af4:	fa24 f000 	lsr.w	r0, r4, r0
 8000af8:	4091      	lsls	r1, r2
 8000afa:	4097      	lsls	r7, r2
 8000afc:	ea40 0c01 	orr.w	ip, r0, r1
 8000b00:	4094      	lsls	r4, r2
 8000b02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b06:	0c23      	lsrs	r3, r4, #16
 8000b08:	fbbc f6f8 	udiv	r6, ip, r8
 8000b0c:	fa1f fe87 	uxth.w	lr, r7
 8000b10:	fb08 c116 	mls	r1, r8, r6, ip
 8000b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b18:	fb06 f10e 	mul.w	r1, r6, lr
 8000b1c:	4299      	cmp	r1, r3
 8000b1e:	d909      	bls.n	8000b34 <__udivmoddi4+0x60>
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b26:	f080 8119 	bcs.w	8000d5c <__udivmoddi4+0x288>
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	f240 8116 	bls.w	8000d5c <__udivmoddi4+0x288>
 8000b30:	3e02      	subs	r6, #2
 8000b32:	443b      	add	r3, r7
 8000b34:	1a5b      	subs	r3, r3, r1
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b48:	45a6      	cmp	lr, r4
 8000b4a:	d909      	bls.n	8000b60 <__udivmoddi4+0x8c>
 8000b4c:	193c      	adds	r4, r7, r4
 8000b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b52:	f080 8105 	bcs.w	8000d60 <__udivmoddi4+0x28c>
 8000b56:	45a6      	cmp	lr, r4
 8000b58:	f240 8102 	bls.w	8000d60 <__udivmoddi4+0x28c>
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	443c      	add	r4, r7
 8000b60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b64:	eba4 040e 	sub.w	r4, r4, lr
 8000b68:	2600      	movs	r6, #0
 8000b6a:	b11d      	cbz	r5, 8000b74 <__udivmoddi4+0xa0>
 8000b6c:	40d4      	lsrs	r4, r2
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e9c5 4300 	strd	r4, r3, [r5]
 8000b74:	4631      	mov	r1, r6
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	b902      	cbnz	r2, 8000b7e <__udivmoddi4+0xaa>
 8000b7c:	deff      	udf	#255	; 0xff
 8000b7e:	fab2 f282 	clz	r2, r2
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	d150      	bne.n	8000c28 <__udivmoddi4+0x154>
 8000b86:	1bcb      	subs	r3, r1, r7
 8000b88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8c:	fa1f f887 	uxth.w	r8, r7
 8000b90:	2601      	movs	r6, #1
 8000b92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b96:	0c21      	lsrs	r1, r4, #16
 8000b98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0xe4>
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0xe2>
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	f200 80e9 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	1ac9      	subs	r1, r1, r3
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc8:	fb08 f800 	mul.w	r8, r8, r0
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x10c>
 8000bd0:	193c      	adds	r4, r7, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x10a>
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	f200 80d9 	bhi.w	8000d90 <__udivmoddi4+0x2bc>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 0408 	sub.w	r4, r4, r8
 8000be4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be8:	e7bf      	b.n	8000b6a <__udivmoddi4+0x96>
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0x12e>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	f000 80b1 	beq.w	8000d56 <__udivmoddi4+0x282>
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f683 	clz	r6, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d14a      	bne.n	8000ca0 <__udivmoddi4+0x1cc>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0x140>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80b8 	bhi.w	8000d84 <__udivmoddi4+0x2b0>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0103 	sbc.w	r1, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	468c      	mov	ip, r1
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d0a8      	beq.n	8000b74 <__udivmoddi4+0xa0>
 8000c22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0xa0>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c30:	4097      	lsls	r7, r2
 8000c32:	fa01 f002 	lsl.w	r0, r1, r2
 8000c36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3a:	40d9      	lsrs	r1, r3
 8000c3c:	4330      	orrs	r0, r6
 8000c3e:	0c03      	lsrs	r3, r0, #16
 8000c40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb06 f108 	mul.w	r1, r6, r8
 8000c54:	4299      	cmp	r1, r3
 8000c56:	fa04 f402 	lsl.w	r4, r4, r2
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x19c>
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c62:	f080 808d 	bcs.w	8000d80 <__udivmoddi4+0x2ac>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 808a 	bls.w	8000d80 <__udivmoddi4+0x2ac>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	443b      	add	r3, r7
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b281      	uxth	r1, r0
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c80:	fb00 f308 	mul.w	r3, r0, r8
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x1c4>
 8000c88:	1879      	adds	r1, r7, r1
 8000c8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c8e:	d273      	bcs.n	8000d78 <__udivmoddi4+0x2a4>
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d971      	bls.n	8000d78 <__udivmoddi4+0x2a4>
 8000c94:	3802      	subs	r0, #2
 8000c96:	4439      	add	r1, r7
 8000c98:	1acb      	subs	r3, r1, r3
 8000c9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c9e:	e778      	b.n	8000b92 <__udivmoddi4+0xbe>
 8000ca0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ca4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cac:	431c      	orrs	r4, r3
 8000cae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cbe:	431f      	orrs	r7, r3
 8000cc0:	0c3b      	lsrs	r3, r7, #16
 8000cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc6:	fa1f f884 	uxth.w	r8, r4
 8000cca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000cd6:	458a      	cmp	sl, r1
 8000cd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x220>
 8000ce2:	1861      	adds	r1, r4, r1
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	d248      	bcs.n	8000d7c <__udivmoddi4+0x2a8>
 8000cea:	458a      	cmp	sl, r1
 8000cec:	d946      	bls.n	8000d7c <__udivmoddi4+0x2a8>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4421      	add	r1, r4
 8000cf4:	eba1 010a 	sub.w	r1, r1, sl
 8000cf8:	b2bf      	uxth	r7, r7
 8000cfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d06:	fb00 f808 	mul.w	r8, r0, r8
 8000d0a:	45b8      	cmp	r8, r7
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0x24a>
 8000d0e:	19e7      	adds	r7, r4, r7
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d22e      	bcs.n	8000d74 <__udivmoddi4+0x2a0>
 8000d16:	45b8      	cmp	r8, r7
 8000d18:	d92c      	bls.n	8000d74 <__udivmoddi4+0x2a0>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4427      	add	r7, r4
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	eba7 0708 	sub.w	r7, r7, r8
 8000d26:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2a:	454f      	cmp	r7, r9
 8000d2c:	46c6      	mov	lr, r8
 8000d2e:	4649      	mov	r1, r9
 8000d30:	d31a      	bcc.n	8000d68 <__udivmoddi4+0x294>
 8000d32:	d017      	beq.n	8000d64 <__udivmoddi4+0x290>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x27a>
 8000d36:	ebb3 020e 	subs.w	r2, r3, lr
 8000d3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d42:	40f2      	lsrs	r2, r6
 8000d44:	ea4c 0202 	orr.w	r2, ip, r2
 8000d48:	40f7      	lsrs	r7, r6
 8000d4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	462e      	mov	r6, r5
 8000d58:	4628      	mov	r0, r5
 8000d5a:	e70b      	b.n	8000b74 <__udivmoddi4+0xa0>
 8000d5c:	4606      	mov	r6, r0
 8000d5e:	e6e9      	b.n	8000b34 <__udivmoddi4+0x60>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e6fd      	b.n	8000b60 <__udivmoddi4+0x8c>
 8000d64:	4543      	cmp	r3, r8
 8000d66:	d2e5      	bcs.n	8000d34 <__udivmoddi4+0x260>
 8000d68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d70:	3801      	subs	r0, #1
 8000d72:	e7df      	b.n	8000d34 <__udivmoddi4+0x260>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7d2      	b.n	8000d1e <__udivmoddi4+0x24a>
 8000d78:	4660      	mov	r0, ip
 8000d7a:	e78d      	b.n	8000c98 <__udivmoddi4+0x1c4>
 8000d7c:	4681      	mov	r9, r0
 8000d7e:	e7b9      	b.n	8000cf4 <__udivmoddi4+0x220>
 8000d80:	4666      	mov	r6, ip
 8000d82:	e775      	b.n	8000c70 <__udivmoddi4+0x19c>
 8000d84:	4630      	mov	r0, r6
 8000d86:	e74a      	b.n	8000c1e <__udivmoddi4+0x14a>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	4439      	add	r1, r7
 8000d8e:	e713      	b.n	8000bb8 <__udivmoddi4+0xe4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	e724      	b.n	8000be0 <__udivmoddi4+0x10c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da2:	490e      	ldr	r1, [pc, #56]	; (8000ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <LoopForever+0xe>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <LoopForever+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dc6:	f004 fc19 	bl	80055fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f00a fcf5 	bl	800b7b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f001 fed9 	bl	8002b84 <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   r0, =_estack
 8000dd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	20000dfc 	.word	0x20000dfc
  ldr r2, =_sidata
 8000de0:	0800b988 	.word	0x0800b988
  ldr r2, =_sbss
 8000de4:	20000dfc 	.word	0x20000dfc
  ldr r4, =_ebss
 8000de8:	200015ec 	.word	0x200015ec

08000dec <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <BusFault_Handler>
	...

08000df0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000df0:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000df2:	2400      	movs	r4, #0
{
 8000df4:	b09d      	sub	sp, #116	; 0x74
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000df6:	4621      	mov	r1, r4
 8000df8:	223c      	movs	r2, #60	; 0x3c
 8000dfa:	a80c      	add	r0, sp, #48	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8000dfc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000e00:	9403      	str	r4, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e02:	f00a fcfd 	bl	800b800 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	4621      	mov	r1, r4
 8000e08:	2220      	movs	r2, #32
 8000e0a:	a804      	add	r0, sp, #16
 8000e0c:	f00a fcf8 	bl	800b800 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e10:	4838      	ldr	r0, [pc, #224]	; (8000ef4 <MX_ADC1_Init+0x104>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8000e16:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e1a:	e9c0 5300 	strd	r5, r3, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e22:	2301      	movs	r3, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e24:	2204      	movs	r2, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e26:	8384      	strh	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e28:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e2c:	e9c0 3205 	strd	r3, r2, [r0, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e30:	6084      	str	r4, [r0, #8]
  hadc1.Init.GainCompensation = 0;
 8000e32:	6104      	str	r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e34:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e38:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e3c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e3e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e42:	60c1      	str	r1, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e44:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e46:	f004 fc2b 	bl	80056a0 <HAL_ADC_Init>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d142      	bne.n	8000ed4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e4e:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e50:	4828      	ldr	r0, [pc, #160]	; (8000ef4 <MX_ADC1_Init+0x104>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e52:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e54:	a901      	add	r1, sp, #4
 8000e56:	f005 fa97 	bl	8006388 <HAL_ADCEx_MultiModeConfigChannel>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d147      	bne.n	8000eee <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000e5e:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <MX_ADC1_Init+0x108>)
 8000e60:	2109      	movs	r1, #9
 8000e62:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8000e66:	2001      	movs	r0, #1
 8000e68:	217f      	movs	r1, #127	; 0x7f
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedNbrOfConversion = 2;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e6a:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000e6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e70:	2202      	movs	r2, #2
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000e72:	2004      	movs	r0, #4
 8000e74:	2100      	movs	r1, #0
 8000e76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e7a:	9214      	str	r2, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e7c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e80:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e84:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e8c:	4819      	ldr	r0, [pc, #100]	; (8000ef4 <MX_ADC1_Init+0x104>)
 8000e8e:	a90c      	add	r1, sp, #48	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000e90:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e94:	f004 ff74 	bl	8005d80 <HAL_ADCEx_InjectedConfigChannel>
 8000e98:	bb30      	cbnz	r0, 8000ee8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <MX_ADC1_Init+0x10c>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e9c:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <MX_ADC1_Init+0x104>)
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000e9e:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ea2:	a90c      	add	r1, sp, #48	; 0x30
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000ea4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ea8:	f004 ff6a 	bl	8005d80 <HAL_ADCEx_InjectedConfigChannel>
 8000eac:	b9c8      	cbnz	r0, 8000ee2 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <MX_ADC1_Init+0x110>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <MX_ADC1_Init+0x104>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000eb8:	2404      	movs	r4, #4
 8000eba:	257f      	movs	r5, #127	; 0x7f
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8000ec6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	f004 fcef 	bl	80058ac <HAL_ADC_ConfigChannel>
 8000ece:	b920      	cbnz	r0, 8000eda <MX_ADC1_Init+0xea>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed0:	b01d      	add	sp, #116	; 0x74
 8000ed2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000ed4:	f001 fe00 	bl	8002ad8 <Error_Handler>
 8000ed8:	e7b9      	b.n	8000e4e <MX_ADC1_Init+0x5e>
    Error_Handler();
 8000eda:	f001 fdfd 	bl	8002ad8 <Error_Handler>
}
 8000ede:	b01d      	add	sp, #116	; 0x74
 8000ee0:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000ee2:	f001 fdf9 	bl	8002ad8 <Error_Handler>
 8000ee6:	e7e2      	b.n	8000eae <MX_ADC1_Init+0xbe>
    Error_Handler();
 8000ee8:	f001 fdf6 	bl	8002ad8 <Error_Handler>
 8000eec:	e7d5      	b.n	8000e9a <MX_ADC1_Init+0xaa>
    Error_Handler();
 8000eee:	f001 fdf3 	bl	8002ad8 <Error_Handler>
 8000ef2:	e7b4      	b.n	8000e5e <MX_ADC1_Init+0x6e>
 8000ef4:	20000fd0 	.word	0x20000fd0
 8000ef8:	08600004 	.word	0x08600004
 8000efc:	3ac04000 	.word	0x3ac04000
 8000f00:	04300002 	.word	0x04300002

08000f04 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	b099      	sub	sp, #100	; 0x64

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f08:	223c      	movs	r2, #60	; 0x3c
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	a808      	add	r0, sp, #32
 8000f0e:	f00a fc77 	bl	800b800 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	2220      	movs	r2, #32
 8000f14:	2100      	movs	r1, #0
 8000f16:	4668      	mov	r0, sp
 8000f18:	f00a fc72 	bl	800b800 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f1c:	4833      	ldr	r0, [pc, #204]	; (8000fec <MX_ADC2_Init+0xe8>)
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <MX_ADC2_Init+0xec>)
 8000f20:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f26:	2204      	movs	r2, #4
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000f28:	60c3      	str	r3, [r0, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2a:	2300      	movs	r3, #0
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f2c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f30:	6182      	str	r2, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f32:	8383      	strh	r3, [r0, #28]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f34:	2201      	movs	r2, #1
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f36:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f3a:	6041      	str	r1, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	6083      	str	r3, [r0, #8]
  hadc2.Init.GainCompensation = 0;
 8000f3e:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f40:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f44:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f48:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f4e:	6142      	str	r2, [r0, #20]
  hadc2.Init.NbrOfConversion = 1;
 8000f50:	6202      	str	r2, [r0, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f52:	f004 fba5 	bl	80056a0 <HAL_ADC_Init>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d13a      	bne.n	8000fd0 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <MX_ADC2_Init+0xf0>)
 8000f5c:	2109      	movs	r1, #9
 8000f5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000f62:	2001      	movs	r0, #1
 8000f64:	217f      	movs	r1, #127	; 0x7f
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedNbrOfConversion = 2;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f66:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000f68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f6c:	2202      	movs	r2, #2
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000f6e:	2004      	movs	r0, #4
 8000f70:	2100      	movs	r1, #0
 8000f72:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f76:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f78:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f7c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f80:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f88:	4818      	ldr	r0, [pc, #96]	; (8000fec <MX_ADC2_Init+0xe8>)
 8000f8a:	a908      	add	r1, sp, #32
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000f8c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f90:	f004 fef6 	bl	8005d80 <HAL_ADCEx_InjectedConfigChannel>
 8000f94:	bb30      	cbnz	r0, 8000fe4 <MX_ADC2_Init+0xe0>
  {
    Error_Handler();
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_ADC2_Init+0xf4>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f98:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_ADC2_Init+0xe8>)
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f9a:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f9e:	a908      	add	r1, sp, #32
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000fa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000fa4:	f004 feec 	bl	8005d80 <HAL_ADCEx_InjectedConfigChannel>
 8000fa8:	b9c8      	cbnz	r0, 8000fde <MX_ADC2_Init+0xda>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <MX_ADC2_Init+0xf8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fac:	480f      	ldr	r0, [pc, #60]	; (8000fec <MX_ADC2_Init+0xe8>)
  sConfig.Channel = ADC_CHANNEL_13;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e9cd 2300 	strd	r2, r3, [sp]
 8000fb4:	2404      	movs	r4, #4
 8000fb6:	257f      	movs	r5, #127	; 0x7f
 8000fb8:	2204      	movs	r2, #4
 8000fba:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fbc:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_13;
 8000fbe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fc6:	f004 fc71 	bl	80058ac <HAL_ADC_ConfigChannel>
 8000fca:	b920      	cbnz	r0, 8000fd6 <MX_ADC2_Init+0xd2>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fcc:	b019      	add	sp, #100	; 0x64
 8000fce:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fd0:	f001 fd82 	bl	8002ad8 <Error_Handler>
 8000fd4:	e7c1      	b.n	8000f5a <MX_ADC2_Init+0x56>
    Error_Handler();
 8000fd6:	f001 fd7f 	bl	8002ad8 <Error_Handler>
}
 8000fda:	b019      	add	sp, #100	; 0x64
 8000fdc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fde:	f001 fd7b 	bl	8002ad8 <Error_Handler>
 8000fe2:	e7e2      	b.n	8000faa <MX_ADC2_Init+0xa6>
    Error_Handler();
 8000fe4:	f001 fd78 	bl	8002ad8 <Error_Handler>
 8000fe8:	e7d5      	b.n	8000f96 <MX_ADC2_Init+0x92>
 8000fea:	bf00      	nop
 8000fec:	20000f64 	.word	0x20000f64
 8000ff0:	50000100 	.word	0x50000100
 8000ff4:	3ac04000 	.word	0x3ac04000
 8000ff8:	0c900008 	.word	0x0c900008
 8000ffc:	36902000 	.word	0x36902000

08001000 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8001002:	6802      	ldr	r2, [r0, #0]
{
 8001004:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8001008:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001010:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8001014:	930a      	str	r3, [sp, #40]	; 0x28
  if(adcHandle->Instance==ADC1)
 8001016:	d034      	beq.n	8001082 <HAL_ADC_MspInit+0x82>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_ADC_MspInit+0xf0>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d001      	beq.n	8001022 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800101e:	b00d      	add	sp, #52	; 0x34
 8001020:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <HAL_ADC_MspInit+0xf4>)
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001028:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800102a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800102c:	d054      	beq.n	80010d8 <HAL_ADC_MspInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 8001030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	64da      	str	r2, [r3, #76]	; 0x4c
 8001038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800103a:	f002 0201 	and.w	r2, r2, #1
 800103e:	9204      	str	r2, [sp, #16]
 8001040:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001044:	f042 0202 	orr.w	r2, r2, #2
 8001048:	64da      	str	r2, [r3, #76]	; 0x4c
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	9305      	str	r3, [sp, #20]
 8001052:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_CURR_AMPL_W_Pin;
 8001054:	2260      	movs	r2, #96	; 0x60
 8001056:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	a906      	add	r1, sp, #24
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_CURR_AMPL_W_Pin;
 8001060:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f006 f91f 	bl	80072a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800106a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106e:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001070:	4822      	ldr	r0, [pc, #136]	; (80010fc <HAL_ADC_MspInit+0xfc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001074:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8001076:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800107a:	f006 f915 	bl	80072a8 <HAL_GPIO_Init>
}
 800107e:	b00d      	add	sp, #52	; 0x34
 8001080:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_ADC_MspInit+0xf4>)
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001088:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800108a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800108c:	d019      	beq.n	80010c2 <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 8001090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	64da      	str	r2, [r3, #76]	; 0x4c
 8001098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800109a:	f002 0201 	and.w	r2, r2, #1
 800109e:	9201      	str	r2, [sp, #4]
 80010a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010a4:	f042 0202 	orr.w	r2, r2, #2
 80010a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 80010b4:	2203      	movs	r2, #3
 80010b6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	a906      	add	r1, sp, #24
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	e7ce      	b.n	8001060 <HAL_ADC_MspInit+0x60>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	e7da      	b.n	800108e <HAL_ADC_MspInit+0x8e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_ADC_MspInit+0xf8>)
 80010da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e8:	9303      	str	r3, [sp, #12]
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	e79f      	b.n	800102e <HAL_ADC_MspInit+0x2e>
 80010ee:	bf00      	nop
 80010f0:	50000100 	.word	0x50000100
 80010f4:	20000e18 	.word	0x20000e18
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000400 	.word	0x48000400

08001100 <MX_CORDIC_Init>:
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_CORDIC_Init+0x18>)
{
 8001102:	b508      	push	{r3, lr}
  hcordic.Instance = CORDIC;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <MX_CORDIC_Init+0x1c>)
 8001106:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001108:	f005 f9a4 	bl	8006454 <HAL_CORDIC_Init>
 800110c:	b900      	cbnz	r0, 8001110 <MX_CORDIC_Init+0x10>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800110e:	bd08      	pop	{r3, pc}
 8001110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001114:	f001 bce0 	b.w	8002ad8 <Error_Handler>
 8001118:	2000103c 	.word	0x2000103c
 800111c:	40020c00 	.word	0x40020c00

08001120 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{

  if(cordicHandle->Instance==CORDIC)
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_CORDIC_MspInit+0x2c>)
 8001122:	6802      	ldr	r2, [r0, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d000      	beq.n	800112a <HAL_CORDIC_MspInit+0xa>
 8001128:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800112a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 800112e:	f042 0208 	orr.w	r2, r2, #8
 8001132:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8001136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800113a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800113c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8001146:	b002      	add	sp, #8
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40020c00 	.word	0x40020c00

08001150 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_DMA_Init+0x50>)
{
 8001152:	b500      	push	{lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001156:	f042 0204 	orr.w	r2, r2, #4
 800115a:	649a      	str	r2, [r3, #72]	; 0x48
 800115c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 800115e:	b083      	sub	sp, #12
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001160:	f002 0204 	and.w	r2, r2, #4
 8001164:	9200      	str	r2, [sp, #0]
 8001166:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	649a      	str	r2, [r3, #72]	; 0x48
 8001170:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001174:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001178:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800117c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001180:	f005 f996 	bl	80064b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001184:	200b      	movs	r0, #11
 8001186:	f005 f9cb 	bl	8006520 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	4611      	mov	r1, r2
 800118e:	200c      	movs	r0, #12
 8001190:	f005 f98e 	bl	80064b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001194:	200c      	movs	r0, #12

}
 8001196:	b003      	add	sp, #12
 8001198:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800119c:	f005 b9c0 	b.w	8006520 <HAL_NVIC_EnableIRQ>
 80011a0:	40021000 	.word	0x40021000

080011a4 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_FDCAN1_Init+0x4c>)
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_FDCAN1_Init+0x50>)
{
 80011a8:	b510      	push	{r4, lr}
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80011aa:	2101      	movs	r1, #1
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80011ac:	f240 1201 	movw	r2, #257	; 0x101
  hfdcan1.Init.TransmitPause = ENABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 5;
 80011b0:	2405      	movs	r4, #5
  hfdcan1.Instance = FDCAN1;
 80011b2:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80011b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b8:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80011ba:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011bc:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80011be:	2202      	movs	r2, #2
  hfdcan1.Init.NominalPrescaler = 5;
 80011c0:	6144      	str	r4, [r0, #20]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 80011c2:	6041      	str	r1, [r0, #4]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 80011c4:	240c      	movs	r4, #12
  hfdcan1.Init.NominalTimeSeg2 = 4;
  hfdcan1.Init.DataPrescaler = 1;
 80011c6:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80011c8:	2104      	movs	r1, #4
  hfdcan1.Init.DataSyncJumpWidth = 2;
  hfdcan1.Init.DataTimeSeg1 = 12;
  hfdcan1.Init.DataTimeSeg2 = 4;
  hfdcan1.Init.StdFiltersNbr = 2;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011ca:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011ce:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 80011d0:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80011d2:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80011d4:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.StdFiltersNbr = 2;
 80011d6:	6342      	str	r2, [r0, #52]	; 0x34
  hfdcan1.Init.NominalTimeSeg1 = 12;
 80011d8:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.DataTimeSeg1 = 12;
 80011da:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80011dc:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 4;
 80011de:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011e0:	f005 faf2 	bl	80067c8 <HAL_FDCAN_Init>
 80011e4:	b900      	cbnz	r0, 80011e8 <MX_FDCAN1_Init+0x44>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80011e6:	bd10      	pop	{r4, pc}
 80011e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80011ec:	f001 bc74 	b.w	8002ad8 <Error_Handler>
 80011f0:	20001064 	.word	0x20001064
 80011f4:	40006400 	.word	0x40006400

080011f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80011f8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(fdcanHandle->Instance==FDCAN1)
 80011fa:	6802      	ldr	r2, [r0, #0]
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_FDCAN_MspInit+0x78>)
{
 80011fe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	2400      	movs	r4, #0
  if(fdcanHandle->Instance==FDCAN1)
 8001202:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001208:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800120c:	9406      	str	r4, [sp, #24]
  if(fdcanHandle->Instance==FDCAN1)
 800120e:	d001      	beq.n	8001214 <HAL_FDCAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001210:	b008      	add	sp, #32
 8001212:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001214:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	a902      	add	r1, sp, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800121a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800121c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001220:	659a      	str	r2, [r3, #88]	; 0x58
 8001222:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001224:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	64da      	str	r2, [r3, #76]	; 0x4c
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800123c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001240:	2302      	movs	r3, #2
 8001242:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001246:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001248:	2300      	movs	r3, #0
 800124a:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001250:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001256:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f006 f826 	bl	80072a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 6, 0);
 800125c:	4622      	mov	r2, r4
 800125e:	2106      	movs	r1, #6
 8001260:	2015      	movs	r0, #21
 8001262:	f005 f925 	bl	80064b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001266:	2015      	movs	r0, #21
 8001268:	f005 f95a 	bl	8006520 <HAL_NVIC_EnableIRQ>
}
 800126c:	b008      	add	sp, #32
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	40006400 	.word	0x40006400

08001274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001274:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	2400      	movs	r4, #0
{
 8001278:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800127e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_GPIO_Init+0xa8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 8001288:	4d25      	ldr	r5, [pc, #148]	; (8001320 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	f042 0204 	orr.w	r2, r2, #4
 800128e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001292:	f002 0204 	and.w	r2, r2, #4
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800129a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800129c:	f042 0220 	orr.w	r2, r2, #32
 80012a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012a4:	f002 0220 	and.w	r2, r2, #32
 80012a8:	9201      	str	r2, [sp, #4]
 80012aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b6:	f002 0201 	and.w	r2, r2, #1
 80012ba:	9202      	str	r2, [sp, #8]
 80012bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c0:	f042 0202 	orr.w	r2, r2, #2
 80012c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80012ce:	4622      	mov	r2, r4
 80012d0:	4628      	mov	r0, r5
 80012d2:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80012d6:	f006 f8e1 	bl	800749c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = DIP2_Pin|DIP1_Pin;
 80012dc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80012e0:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <MX_GPIO_Init+0xb0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = DIP2_Pin|DIP1_Pin;
 80012e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f005 ffdd 	bl	80072a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MA730_CS_Pin;
 80012ee:	2204      	movs	r2, #4
 80012f0:	2301      	movs	r3, #1
 80012f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MA730_CS_GPIO_Port, &GPIO_InitStruct);
 80012f6:	a904      	add	r1, sp, #16
 80012f8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MA730_CS_Pin;
 80012fa:	2200      	movs	r2, #0
 80012fc:	2300      	movs	r3, #0
 80012fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(MA730_CS_GPIO_Port, &GPIO_InitStruct);
 8001302:	f005 ffd1 	bl	80072a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIP4_Pin|DIP3_Pin;
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	a904      	add	r1, sp, #16
 800130c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DIP4_Pin|DIP3_Pin;
 800130e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f005 ffc8 	bl	80072a8 <HAL_GPIO_Init>

}
 8001318:	b00b      	add	sp, #44	; 0x2c
 800131a:	bd30      	pop	{r4, r5, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400
 8001324:	48000800 	.word	0x48000800

08001328 <get_sector_number_from_calibration>:
// l - poczatek, r - koniec, x - szukane, arr - lista
// l - lewy sektor, r - prawy sektor, x - ma730, o - offset
#pragma GCC push_options
#pragma GCC optimize ("O0")
int16_t get_sector_number_from_calibration(uint16_t left_index, uint16_t right_index, uint16_t ma730_value, uint16_t offset)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	80fb      	strh	r3, [r7, #6]
 800133a:	4603      	mov	r3, r0
 800133c:	80bb      	strh	r3, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]
 8001342:	4613      	mov	r3, r2
 8001344:	803b      	strh	r3, [r7, #0]
    if (right_index >= left_index) {
 8001346:	88ba      	ldrh	r2, [r7, #4]
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	429a      	cmp	r2, r3
 800134c:	d366      	bcc.n	800141c <get_sector_number_from_calibration+0xf4>
    	int16_t mid = left_index + (right_index - left_index) / 2; // srodek
 800134e:	88ba      	ldrh	r2, [r7, #4]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	0fda      	lsrs	r2, r3, #31
 8001356:	4413      	add	r3, r2
 8001358:	105b      	asrs	r3, r3, #1
 800135a:	b29a      	uxth	r2, r3
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4413      	add	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	817b      	strh	r3, [r7, #10]

    	uint32_t mid_left_value  = g_joint_configuration.calibration_table_1[mid];    // wartosc lewego brzegu sektora
 8001364:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001368:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <get_sector_number_from_calibration+0x100>)
 800136a:	330c      	adds	r3, #12
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001374:	b29b      	uxth	r3, r3
 8001376:	617b      	str	r3, [r7, #20]
    	uint32_t mid_right_value = g_joint_configuration.calibration_table_2[mid];    // wartosc prawego brzegu sektora
 8001378:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800137c:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <get_sector_number_from_calibration+0x100>)
 800137e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800138a:	b29b      	uxth	r3, r3
 800138c:	613b      	str	r3, [r7, #16]
    	uint32_t searched_value  = ma730_value; // wartosc szukana
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	60fb      	str	r3, [r7, #12]

    	// Przesuniecie wartosci o offset, by funkcja byla w całej długości ciągła
    	if (mid_left_value <= offset)
 8001392:	883b      	ldrh	r3, [r7, #0]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	429a      	cmp	r2, r3
 8001398:	d803      	bhi.n	80013a2 <get_sector_number_from_calibration+0x7a>
    	{
    		mid_left_value += 16384;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013a0:	617b      	str	r3, [r7, #20]
    	}

    	if (mid_right_value <= offset)
 80013a2:	883b      	ldrh	r3, [r7, #0]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d803      	bhi.n	80013b2 <get_sector_number_from_calibration+0x8a>
    	{
    		mid_right_value += 16384;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013b0:	613b      	str	r3, [r7, #16]
    	}

    	if (searched_value <= offset)
 80013b2:	883b      	ldrh	r3, [r7, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d803      	bhi.n	80013c2 <get_sector_number_from_calibration+0x9a>
    	{
    		searched_value += 16384;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80013c0:	60fb      	str	r3, [r7, #12]
    	}

        // If the element is present at the middle
        // itself
		if (searched_value >= mid_left_value && searched_value <= mid_right_value ) // czy jest w sektorze srodkowym - jezeli tak, to koniec
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d306      	bcc.n	80013d8 <get_sector_number_from_calibration+0xb0>
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d802      	bhi.n	80013d8 <get_sector_number_from_calibration+0xb0>
		{
			return mid; // dobry sektor
 80013d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013d6:	e023      	b.n	8001420 <get_sector_number_from_calibration+0xf8>
		}

    	if (left_index == right_index) {
 80013d8:	88fa      	ldrh	r2, [r7, #6]
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d102      	bne.n	80013e6 <get_sector_number_from_calibration+0xbe>
    		return -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	e01c      	b.n	8001420 <get_sector_number_from_calibration+0xf8>
    	}

        // If element is smaller than mid, then
        // it can only be present in left subarray
        if (mid_left_value > searched_value) // element jest mniejszsy niz srodkowy
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d90c      	bls.n	8001408 <get_sector_number_from_calibration+0xe0>
        {
			uint16_t index = get_sector_number_from_calibration(left_index, mid - 1, ma730_value, offset); // szukaj z lewej strony
 80013ee:	897b      	ldrh	r3, [r7, #10]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b299      	uxth	r1, r3
 80013f4:	883b      	ldrh	r3, [r7, #0]
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	88f8      	ldrh	r0, [r7, #6]
 80013fa:	f7ff ff95 	bl	8001328 <get_sector_number_from_calibration>
 80013fe:	4603      	mov	r3, r0
 8001400:	813b      	strh	r3, [r7, #8]
			return index;
 8001402:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001406:	e00b      	b.n	8001420 <get_sector_number_from_calibration+0xf8>
        }

        // Else the element can only be present
        // in right subarray
        return get_sector_number_from_calibration(mid + 1, right_index, ma730_value, offset);  // szukaj z prawej strony
 8001408:	897b      	ldrh	r3, [r7, #10]
 800140a:	3301      	adds	r3, #1
 800140c:	b298      	uxth	r0, r3
 800140e:	883b      	ldrh	r3, [r7, #0]
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	88b9      	ldrh	r1, [r7, #4]
 8001414:	f7ff ff88 	bl	8001328 <get_sector_number_from_calibration>
 8001418:	4603      	mov	r3, r0
 800141a:	e001      	b.n	8001420 <get_sector_number_from_calibration+0xf8>
    }

    // We reach here when element is not
    // present in array
    return -1; // element poza sektorami
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	20000000 	.word	0x20000000

0800142c <Read_MC_Encoder_1kHz>:

void Read_MC_Encoder_1kHz() // odczyt danych enkdera i sprawdzanie obrotow
{
	// READ POSITION
	g_joint_status.mc_previous_motor_position = g_joint_status.mc_current_motor_position; // store old position
	g_joint_status.mc_current_motor_position = ENCODER_M1.PreviousCapture; // 0 ... 14336 - 1 mechanical motor rotation
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <Read_MC_Encoder_1kHz+0x98>)
	g_joint_status.mc_previous_motor_position = g_joint_status.mc_current_motor_position; // store old position
 800142e:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <Read_MC_Encoder_1kHz+0x9c>)
	g_joint_status.mc_current_motor_position = ENCODER_M1.PreviousCapture; // 0 ... 14336 - 1 mechanical motor rotation
 8001430:	f8b3 1072 	ldrh.w	r1, [r3, #114]	; 0x72
	g_joint_status.mc_previous_motor_position = g_joint_status.mc_current_motor_position; // store old position
 8001434:	8e50      	ldrh	r0, [r2, #50]	; 0x32
{
 8001436:	b470      	push	{r4, r5, r6}

	if (g_joint_status.mc_previous_motor_position > ENCODER_M1.PulseNumber - ENCODER_M1.PulseNumber / 4 && g_joint_status.mc_current_motor_position  < ENCODER_M1.PulseNumber / 4)
 8001438:	f8b3 506e 	ldrh.w	r5, [r3, #110]	; 0x6e
	g_joint_status.mc_current_motor_position = ENCODER_M1.PreviousCapture; // 0 ... 14336 - 1 mechanical motor rotation
 800143c:	8651      	strh	r1, [r2, #50]	; 0x32
	if (g_joint_status.mc_previous_motor_position > ENCODER_M1.PulseNumber - ENCODER_M1.PulseNumber / 4 && g_joint_status.mc_current_motor_position  < ENCODER_M1.PulseNumber / 4)
 800143e:	eba5 0495 	sub.w	r4, r5, r5, lsr #2
 8001442:	42a0      	cmp	r0, r4
	{
		g_joint_status.mc_current_motor_rotation++;
 8001444:	f8d2 302a 	ldr.w	r3, [r2, #42]	; 0x2a
	g_joint_status.mc_previous_motor_position = g_joint_status.mc_current_motor_position; // store old position
 8001448:	8690      	strh	r0, [r2, #52]	; 0x34
	if (g_joint_status.mc_previous_motor_position > ENCODER_M1.PulseNumber - ENCODER_M1.PulseNumber / 4 && g_joint_status.mc_current_motor_position  < ENCODER_M1.PulseNumber / 4)
 800144a:	ea4f 0695 	mov.w	r6, r5, lsr #2
 800144e:	dd04      	ble.n	800145a <Read_MC_Encoder_1kHz+0x2e>
 8001450:	42b1      	cmp	r1, r6
		g_joint_status.mc_current_motor_rotation++;
 8001452:	bf3c      	itt	cc
 8001454:	3301      	addcc	r3, #1
 8001456:	f8c2 302a 	strcc.w	r3, [r2, #42]	; 0x2a
	}
	if (g_joint_status.mc_current_motor_position  > ENCODER_M1.PulseNumber - ENCODER_M1.PulseNumber / 4 && g_joint_status.mc_previous_motor_position < ENCODER_M1.PulseNumber / 4)
 800145a:	428c      	cmp	r4, r1
 800145c:	da05      	bge.n	800146a <Read_MC_Encoder_1kHz+0x3e>
 800145e:	42b0      	cmp	r0, r6
	{
		g_joint_status.mc_current_motor_rotation--;
 8001460:	bf3c      	itt	cc
 8001462:	f103 33ff 	addcc.w	r3, r3, #4294967295
 8001466:	f8c2 302a 	strcc.w	r3, [r2, #42]	; 0x2a
	}

	g_joint_status.mc_current_motor_position_multiturn = g_joint_status.mc_current_motor_position + g_joint_status.mc_current_motor_rotation * ENCODER_M1.PulseNumber;

	// READ SPEED
	if (g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position > ENCODER_M1.PulseNumber / 2)
 800146a:	1a44      	subs	r4, r0, r1
	g_joint_status.mc_current_motor_position_multiturn = g_joint_status.mc_current_motor_position + g_joint_status.mc_current_motor_rotation * ENCODER_M1.PulseNumber;
 800146c:	fb03 1305 	mla	r3, r3, r5, r1
	if (g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position > ENCODER_M1.PulseNumber / 2)
 8001470:	ebb4 0f55 	cmp.w	r4, r5, lsr #1
	g_joint_status.mc_current_motor_position_multiturn = g_joint_status.mc_current_motor_position + g_joint_status.mc_current_motor_rotation * ENCODER_M1.PulseNumber;
 8001474:	f8c2 302e 	str.w	r3, [r2, #46]	; 0x2e
	if (g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position > ENCODER_M1.PulseNumber / 2)
 8001478:	dd15      	ble.n	80014a6 <Read_MC_Encoder_1kHz+0x7a>
	{
		g_joint_status._current_speed_data[g_joint_status._current_speed_index++] = g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position - ENCODER_M1.PulseNumber;
 800147a:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 800147e:	4429      	add	r1, r5
	}
	else if (g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position < -1 * ENCODER_M1.PulseNumber / 2)
	{
		g_joint_status._current_speed_data[g_joint_status._current_speed_index++] = g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position + ENCODER_M1.PulseNumber;
 8001480:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001484:	1a41      	subs	r1, r0, r1
 8001486:	3301      	adds	r3, #1
 8001488:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
 800148c:	b2db      	uxtb	r3, r3
	}
	else
	{
		g_joint_status._current_speed_data[g_joint_status._current_speed_index++] = g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position;
	}
	g_joint_status._current_speed_index %= CURRENT_SPEED_DATA_SIZE;
 800148e:	490f      	ldr	r1, [pc, #60]	; (80014cc <Read_MC_Encoder_1kHz+0xa0>)
 8001490:	fba1 0103 	umull	r0, r1, r1, r3
 8001494:	08c9      	lsrs	r1, r1, #3
 8001496:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800149a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800149e:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

}
 80014a2:	bc70      	pop	{r4, r5, r6}
 80014a4:	4770      	bx	lr
	else if (g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position < -1 * ENCODER_M1.PulseNumber / 2)
 80014a6:	086b      	lsrs	r3, r5, #1
 80014a8:	425b      	negs	r3, r3
 80014aa:	429c      	cmp	r4, r3
		g_joint_status._current_speed_data[g_joint_status._current_speed_index++] = g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position + ENCODER_M1.PulseNumber;
 80014ac:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
	else if (g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position < -1 * ENCODER_M1.PulseNumber / 2)
 80014b0:	da01      	bge.n	80014b6 <Read_MC_Encoder_1kHz+0x8a>
		g_joint_status._current_speed_data[g_joint_status._current_speed_index++] = g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position + ENCODER_M1.PulseNumber;
 80014b2:	4428      	add	r0, r5
 80014b4:	e7e4      	b.n	8001480 <Read_MC_Encoder_1kHz+0x54>
		g_joint_status._current_speed_data[g_joint_status._current_speed_index++] = g_joint_status.mc_previous_motor_position - g_joint_status.mc_current_motor_position;
 80014b6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80014ba:	3301      	adds	r3, #1
 80014bc:	f822 4011 	strh.w	r4, [r2, r1, lsl #1]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e7e4      	b.n	800148e <Read_MC_Encoder_1kHz+0x62>
 80014c4:	2000090c 	.word	0x2000090c
 80014c8:	20000ea4 	.word	0x20000ea4
 80014cc:	cccccccd 	.word	0xcccccccd

080014d0 <Update_Data_From_MC>:
//	g_joint_status.mc_position_control_status 	= MC_GetControlPositionStatusMotor1();
	g_joint_status.f_current_motor_temperature 	= (uint8_t) NTC_GetAvTemp_C(&TempSensorParamsM1);
}

void Update_Data_From_MC()
{
 80014d0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	// POSITION
	g_joint_status.f_current_motor_position = ((double) g_joint_status.mc_current_motor_position_multiturn / ENCODER_M1.PulseNumber) * M_TWOPI;
 80014d4:	4b96      	ldr	r3, [pc, #600]	; (8001730 <Update_Data_From_MC+0x260>)
 80014d6:	4c97      	ldr	r4, [pc, #604]	; (8001734 <Update_Data_From_MC+0x264>)
 80014d8:	f8b3 006e 	ldrh.w	r0, [r3, #110]	; 0x6e
{
 80014dc:	ed2d 8b02 	vpush	{d8}
	g_joint_status.f_current_motor_position = ((double) g_joint_status.mc_current_motor_position_multiturn / ENCODER_M1.PulseNumber) * M_TWOPI;
 80014e0:	f7fe ffec 	bl	80004bc <__aeabi_i2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	2000      	movs	r0, #0
 80014ea:	4993      	ldr	r1, [pc, #588]	; (8001738 <Update_Data_From_MC+0x268>)
	for (int i = 0; i < CURRENT_SPEED_DATA_SIZE; i++)
	{
		temp_speed += (float) g_joint_status._current_speed_data[i];
	}

	g_joint_status.mc_current_motor_speed	= temp_speed / CURRENT_SPEED_DATA_SIZE; // impulses per 1ms
 80014ec:	eddf 8a93 	vldr	s17, [pc, #588]	; 800173c <Update_Data_From_MC+0x26c>
 80014f0:	f7ff f978 	bl	80007e4 <__aeabi_ddiv>
 80014f4:	4680      	mov	r8, r0
	g_joint_status.f_current_motor_position = ((double) g_joint_status.mc_current_motor_position_multiturn / ENCODER_M1.PulseNumber) * M_TWOPI;
 80014f6:	f8d4 002e 	ldr.w	r0, [r4, #46]	; 0x2e
 80014fa:	4689      	mov	r9, r1
 80014fc:	f7fe ffde 	bl	80004bc <__aeabi_i2d>
 8001500:	a387      	add	r3, pc, #540	; (adr r3, 8001720 <Update_Data_From_MC+0x250>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f843 	bl	8000590 <__aeabi_dmul>
 800150a:	464b      	mov	r3, r9
 800150c:	4642      	mov	r2, r8
 800150e:	f7ff f83f 	bl	8000590 <__aeabi_dmul>
 8001512:	f7ff fa77 	bl	8000a04 <__aeabi_d2f>
	g_joint_status.f_current_joint_position = (double) g_joint_status.f_current_motor_position / g_joint_configuration.gear_ratio + g_joint_status.f_current_encoder_position_offset;
 8001516:	4a8a      	ldr	r2, [pc, #552]	; (8001740 <Update_Data_From_MC+0x270>)
	g_joint_status.f_current_motor_position = ((double) g_joint_status.mc_current_motor_position_multiturn / ENCODER_M1.PulseNumber) * M_TWOPI;
 8001518:	f8c4 0006 	str.w	r0, [r4, #6]
	g_joint_status.f_current_joint_position = (double) g_joint_status.f_current_motor_position / g_joint_configuration.gear_ratio + g_joint_status.f_current_encoder_position_offset;
 800151c:	7855      	ldrb	r5, [r2, #1]
 800151e:	f7fe ffdf 	bl	80004e0 <__aeabi_f2d>
 8001522:	4682      	mov	sl, r0
 8001524:	4628      	mov	r0, r5
 8001526:	468b      	mov	fp, r1
 8001528:	f7fe ffc8 	bl	80004bc <__aeabi_i2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4650      	mov	r0, sl
 8001532:	4659      	mov	r1, fp
 8001534:	f7ff f956 	bl	80007e4 <__aeabi_ddiv>
 8001538:	f8d4 3002 	ldr.w	r3, [r4, #2]
 800153c:	4682      	mov	sl, r0
 800153e:	4618      	mov	r0, r3
 8001540:	468b      	mov	fp, r1
 8001542:	f7fe ffcd 	bl	80004e0 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4650      	mov	r0, sl
 800154c:	4659      	mov	r1, fp
 800154e:	f7fe fe69 	bl	8000224 <__adddf3>
 8001552:	f7ff fa57 	bl	8000a04 <__aeabi_d2f>
		temp_speed += (float) g_joint_status._current_speed_data[i];
 8001556:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8001562:	ee06 3a10 	vmov	s12, r3
 8001566:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800156a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156e:	ee05 3a10 	vmov	s10, r3
 8001572:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001576:	f9b4 305e 	ldrsh.w	r3, [r4, #94]	; 0x5e
 800157a:	ee37 6a86 	vadd.f32	s12, s15, s12
 800157e:	ee05 3a90 	vmov	s11, r3
 8001582:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8001586:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 800158a:	ee35 5a06 	vadd.f32	s10, s10, s12
 800158e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001592:	ee06 3a10 	vmov	s12, r3
 8001596:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 800159a:	ee75 5a85 	vadd.f32	s11, s11, s10
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80015a6:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 80015aa:	ee36 6a25 	vadd.f32	s12, s12, s11
 80015ae:	ee06 3a90 	vmov	s13, r3
 80015b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b6:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 80015ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80015be:	ee07 3a10 	vmov	s14, r3
 80015c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80015c6:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 80015ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 80015da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80015de:	ee08 3a10 	vmov	s16, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80015ea:	ee77 7a87 	vadd.f32	s15, s15, s14
	g_joint_status.f_current_joint_position = (double) g_joint_status.f_current_motor_position / g_joint_configuration.gear_ratio + g_joint_status.f_current_encoder_position_offset;
 80015ee:	4606      	mov	r6, r0
		temp_speed += (float) g_joint_status._current_speed_data[i];
 80015f0:	ee38 8a27 	vadd.f32	s16, s16, s15
	g_joint_status.f_current_motor_speed 	= ((float) temp_speed / CURRENT_SPEED_DATA_SIZE * 1000.0 / ENCODER_M1.PulseNumber) * M_TWOPI;
 80015f4:	a34c      	add	r3, pc, #304	; (adr r3, 8001728 <Update_Data_From_MC+0x258>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
	g_joint_status.mc_current_motor_speed	= temp_speed / CURRENT_SPEED_DATA_SIZE; // impulses per 1ms
 80015fa:	ee28 8a28 	vmul.f32	s16, s16, s17
	g_joint_status.f_current_motor_speed 	= ((float) temp_speed / CURRENT_SPEED_DATA_SIZE * 1000.0 / ENCODER_M1.PulseNumber) * M_TWOPI;
 80015fe:	4640      	mov	r0, r8
	g_joint_status.mc_current_motor_speed	= temp_speed / CURRENT_SPEED_DATA_SIZE; // impulses per 1ms
 8001600:	eefd 7ac8 	vcvt.s32.f32	s15, s16
	g_joint_status.f_current_motor_speed 	= ((float) temp_speed / CURRENT_SPEED_DATA_SIZE * 1000.0 / ENCODER_M1.PulseNumber) * M_TWOPI;
 8001604:	4649      	mov	r1, r9
	g_joint_status.mc_current_motor_speed	= temp_speed / CURRENT_SPEED_DATA_SIZE; // impulses per 1ms
 8001606:	ee17 ca90 	vmov	ip, s15
	g_joint_status.f_current_joint_position = (double) g_joint_status.f_current_motor_position / g_joint_configuration.gear_ratio + g_joint_status.f_current_encoder_position_offset;
 800160a:	f8c4 600a 	str.w	r6, [r4, #10]
	g_joint_status.mc_current_motor_speed	= temp_speed / CURRENT_SPEED_DATA_SIZE; // impulses per 1ms
 800160e:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	g_joint_status.f_current_motor_speed 	= ((float) temp_speed / CURRENT_SPEED_DATA_SIZE * 1000.0 / ENCODER_M1.PulseNumber) * M_TWOPI;
 8001612:	f7fe ffbd 	bl	8000590 <__aeabi_dmul>
 8001616:	4680      	mov	r8, r0
 8001618:	ee18 0a10 	vmov	r0, s16
 800161c:	4689      	mov	r9, r1
 800161e:	f7fe ff5f 	bl	80004e0 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4640      	mov	r0, r8
 8001628:	4649      	mov	r1, r9
 800162a:	f7fe ffb1 	bl	8000590 <__aeabi_dmul>
 800162e:	f7ff f9e9 	bl	8000a04 <__aeabi_d2f>
	g_joint_status.f_current_joint_speed 	= g_joint_status.f_current_motor_speed / g_joint_configuration.gear_ratio;
 8001632:	ee07 5a90 	vmov	s15, r5
	g_joint_status.f_current_motor_speed 	= ((float) temp_speed / CURRENT_SPEED_DATA_SIZE * 1000.0 / ENCODER_M1.PulseNumber) * M_TWOPI;
 8001636:	ee07 0a10 	vmov	s14, r0
	g_joint_status.f_current_joint_speed 	= g_joint_status.f_current_motor_speed / g_joint_configuration.gear_ratio;
 800163a:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
	g_joint_status.f_current_motor_speed 	= ((float) temp_speed / CURRENT_SPEED_DATA_SIZE * 1000.0 / ENCODER_M1.PulseNumber) * M_TWOPI;
 800163e:	f8c4 000e 	str.w	r0, [r4, #14]
	g_joint_status.f_current_joint_speed 	= g_joint_status.f_current_motor_speed / g_joint_configuration.gear_ratio;
 8001642:	eec7 7a03 	vdiv.f32	s15, s14, s6
	{
		temp_torque += (float) g_joint_status._current_torque_data[i];
	}

	g_joint_status.mc_current_motor_torque			= temp_torque / CURRENT_TORQUE_DATA_SIZE;
	g_joint_status.f_current_motor_torque			= (((float) (temp_torque / CURRENT_TORQUE_DATA_SIZE)) / INT16_MAX) * MAX_READABLE_CURRENT * KT;
 8001646:	eddf 2a3f 	vldr	s5, [pc, #252]	; 8001744 <Update_Data_From_MC+0x274>
	g_joint_status.f_current_joint_speed 	= g_joint_status.f_current_motor_speed / g_joint_configuration.gear_ratio;
 800164a:	ee17 2a90 	vmov	r2, s15
 800164e:	f8c4 2012 	str.w	r2, [r4, #18]
		temp_torque += (float) g_joint_status._current_torque_data[i];
 8001652:	f9b4 3045 	ldrsh.w	r3, [r4, #69]	; 0x45
 8001656:	f9b4 2047 	ldrsh.w	r2, [r4, #71]	; 0x47
 800165a:	ee04 3a10 	vmov	s8, r3
 800165e:	f9b4 3043 	ldrsh.w	r3, [r4, #67]	; 0x43
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	ee04 2a90 	vmov	s9, r2
 800166a:	eef8 3ac4 	vcvt.f32.s32	s7, s8
 800166e:	f9b4 2049 	ldrsh.w	r2, [r4, #73]	; 0x49
 8001672:	f9b4 3053 	ldrsh.w	r3, [r4, #83]	; 0x53
 8001676:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 800167a:	ee05 2a10 	vmov	s10, r2
 800167e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8001682:	f9b4 204b 	ldrsh.w	r2, [r4, #75]	; 0x4b
 8001686:	ee33 4a84 	vadd.f32	s8, s7, s8
 800168a:	ee05 2a90 	vmov	s11, r2
 800168e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8001692:	f9b4 204d 	ldrsh.w	r2, [r4, #77]	; 0x4d
 8001696:	ee74 4a84 	vadd.f32	s9, s9, s8
 800169a:	ee07 2a10 	vmov	s14, r2
 800169e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80016a2:	f9b4 204f 	ldrsh.w	r2, [r4, #79]	; 0x4f
 80016a6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80016aa:	ee06 2a10 	vmov	s12, r2
 80016ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016b2:	f9b4 2051 	ldrsh.w	r2, [r4, #81]	; 0x51
 80016b6:	ee75 5a85 	vadd.f32	s11, s11, s10
 80016ba:	ee06 2a90 	vmov	s13, r2
 80016be:	ee37 7a25 	vadd.f32	s14, s14, s11
 80016c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80016c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80016ca:	ee36 6a07 	vadd.f32	s12, s12, s14
 80016ce:	ee07 3a10 	vmov	s14, r3
 80016d2:	f9b4 3055 	ldrsh.w	r3, [r4, #85]	; 0x55
 80016d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80016ea:	ee77 7a87 	vadd.f32	s15, s15, s14
	g_joint_status.mc_current_motor_torque			= temp_torque / CURRENT_TORQUE_DATA_SIZE;
 80016ee:	ee67 8aa8 	vmul.f32	s17, s15, s17
	g_joint_status.f_current_motor_torque			= (((float) (temp_torque / CURRENT_TORQUE_DATA_SIZE)) / INT16_MAX) * MAX_READABLE_CURRENT * KT;
 80016f2:	ee67 7aa2 	vmul.f32	s15, s15, s5
	g_joint_status.mc_current_motor_torque			= temp_torque / CURRENT_TORQUE_DATA_SIZE;
 80016f6:	eefd 8ae8 	vcvt.s32.f32	s17, s17
	g_joint_status.f_current_motor_torque			= (((float) (temp_torque / CURRENT_TORQUE_DATA_SIZE)) / INT16_MAX) * MAX_READABLE_CURRENT * KT;
 80016fa:	ee17 3a90 	vmov	r3, s15
	g_joint_status.mc_current_motor_torque			= temp_torque / CURRENT_TORQUE_DATA_SIZE;
 80016fe:	ee18 2a90 	vmov	r2, s17
	g_joint_status.f_current_joint_torque			= g_joint_status.f_current_motor_torque * g_joint_configuration.gear_ratio;

}
 8001702:	ecbd 8b02 	vpop	{d8}
	g_joint_status.f_current_joint_torque			= g_joint_status.f_current_motor_torque * g_joint_configuration.gear_ratio;
 8001706:	ee63 7a27 	vmul.f32	s15, s6, s15
	g_joint_status.f_current_motor_torque			= (((float) (temp_torque / CURRENT_TORQUE_DATA_SIZE)) / INT16_MAX) * MAX_READABLE_CURRENT * KT;
 800170a:	f8c4 3016 	str.w	r3, [r4, #22]
	g_joint_status.f_current_joint_torque			= g_joint_status.f_current_motor_torque * g_joint_configuration.gear_ratio;
 800170e:	ee17 3a90 	vmov	r3, s15
	g_joint_status.mc_current_motor_torque			= temp_torque / CURRENT_TORQUE_DATA_SIZE;
 8001712:	84e2      	strh	r2, [r4, #38]	; 0x26
	g_joint_status.f_current_joint_torque			= g_joint_status.f_current_motor_torque * g_joint_configuration.gear_ratio;
 8001714:	f8c4 301a 	str.w	r3, [r4, #26]
}
 8001718:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800171c:	f3af 8000 	nop.w
 8001720:	54442d18 	.word	0x54442d18
 8001724:	401921fb 	.word	0x401921fb
 8001728:	704a9409 	.word	0x704a9409
 800172c:	40b88b2f 	.word	0x40b88b2f
 8001730:	2000090c 	.word	0x2000090c
 8001734:	20000ea4 	.word	0x20000ea4
 8001738:	3ff00000 	.word	0x3ff00000
 800173c:	3dcccccd 	.word	0x3dcccccd
 8001740:	20000000 	.word	0x20000000
 8001744:	376c8d1d 	.word	0x376c8d1d

08001748 <CheckErrorsAndWarnings>:
void CheckErrorsAndWarnings()
{
	bool error = false;

	// MOTOR CONTROL ERROR REACTION
	if ((g_joint_status.mc_current_faults_motor > 0 || g_joint_status.mc_occured_faults_motor > 0) && FSM_Get_State() != FSM_TRANSITION_FAULT_TO_INIT) {
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <CheckErrorsAndWarnings+0xec>)
 800174a:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 800174e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001752:	430a      	orrs	r2, r1
 8001754:	d14c      	bne.n	80017f0 <CheckErrorsAndWarnings+0xa8>
		g_joint_status.errors =  g_joint_status.errors | JOINT_MC_FAILED;
		error = true;
	}
	else
	{
		g_joint_status.errors = g_joint_status.errors & (0xFF ^ JOINT_MC_FAILED);
 8001756:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	bool error = false;
 800175a:	2000      	movs	r0, #0
		g_joint_status.errors = g_joint_status.errors & (0xFF ^ JOINT_MC_FAILED);
 800175c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
	}

	// OVERSPEED ERROR REACTION
	if ((fabs(g_joint_status.f_current_joint_speed) > JOINT_SPEED_LIMIT) && FSM_Get_State() != FSM_TRANSITION_FAULT_TO_INIT) {
 8001760:	f8d3 1012 	ldr.w	r1, [r3, #18]
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001768:	ee07 1a90 	vmov	s15, r1
 800176c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001770:	eef0 7ae7 	vabs.f32	s15, s15
 8001774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	dd08      	ble.n	8001790 <CheckErrorsAndWarnings+0x48>
}


FSM_State_t FSM_Get_State(void)
{
	return g_fsm_status.state;
 800177e:	492e      	ldr	r1, [pc, #184]	; (8001838 <CheckErrorsAndWarnings+0xf0>)
 8001780:	7809      	ldrb	r1, [r1, #0]
	if ((fabs(g_joint_status.f_current_joint_speed) > JOINT_SPEED_LIMIT) && FSM_Get_State() != FSM_TRANSITION_FAULT_TO_INIT) {
 8001782:	290f      	cmp	r1, #15
 8001784:	d004      	beq.n	8001790 <CheckErrorsAndWarnings+0x48>
		g_joint_status.errors =  g_joint_status.errors | JOINT_JOINT_SPEED_TO_HIGH;
 8001786:	f042 0204 	orr.w	r2, r2, #4
 800178a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		error = true;
 800178e:	2001      	movs	r0, #1
	if (g_joint_status.f_current_joint_position < -1 * g_joint_configuration.joint_working_area && g_joint_configuration.working_area_constrain_enabled)
 8001790:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8001794:	4a29      	ldr	r2, [pc, #164]	; (800183c <CheckErrorsAndWarnings+0xf4>)
 8001796:	ee07 1a90 	vmov	s15, r1
 800179a:	f8d2 1015 	ldr.w	r1, [r2, #21]
 800179e:	ee07 1a10 	vmov	s14, r1
 80017a2:	eeb1 7a47 	vneg.f32	s14, s14
 80017a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	d529      	bpl.n	8001804 <CheckErrorsAndWarnings+0xbc>
 80017b0:	7a52      	ldrb	r2, [r2, #9]
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d137      	bne.n	8001826 <CheckErrorsAndWarnings+0xde>
		g_joint_status.warnings = g_joint_status.warnings & (0xFF ^ JOINT_OUTSIDE_WORKING_AREA);
 80017b6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
		g_joint_status.current_joint_position = POSITION_IN_WORKING_AREA;
 80017ba:	2100      	movs	r1, #0
		g_joint_status.warnings = g_joint_status.warnings & (0xFF ^ JOINT_OUTSIDE_WORKING_AREA);
 80017bc:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
		g_joint_status.current_joint_position = POSITION_IN_WORKING_AREA;
 80017c0:	7019      	strb	r1, [r3, #0]
	if (g_joint_status.encoder_position_state != POSITION_ACCURATE)
 80017c2:	7859      	ldrb	r1, [r3, #1]
 80017c4:	2902      	cmp	r1, #2
		g_joint_status.warnings = g_joint_status.warnings | JOINT_POSITION_NOT_ACCURATE;
 80017c6:	bf14      	ite	ne
 80017c8:	f042 0201 	orrne.w	r2, r2, #1
		g_joint_status.warnings = g_joint_status.warnings & (0xFF ^ JOINT_POSITION_NOT_ACCURATE);
 80017cc:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
 80017d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (error == true && FSM_Get_State() != FSM_FAULT && FSM_Get_State() != FSM_FAULT_REACTION_ACTIVE && FSM_Get_State() != FSM_TRANSITION_FAULT_REACTION_ACTIVE_TO_FAULT)
 80017d4:	b158      	cbz	r0, 80017ee <CheckErrorsAndWarnings+0xa6>
	return g_fsm_status.state;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <CheckErrorsAndWarnings+0xf0>)
 80017d8:	781a      	ldrb	r2, [r3, #0]
	if (error == true && FSM_Get_State() != FSM_FAULT && FSM_Get_State() != FSM_FAULT_REACTION_ACTIVE && FSM_Get_State() != FSM_TRANSITION_FAULT_REACTION_ACTIVE_TO_FAULT)
 80017da:	2aff      	cmp	r2, #255	; 0xff
 80017dc:	d007      	beq.n	80017ee <CheckErrorsAndWarnings+0xa6>
	return g_fsm_status.state;
 80017de:	781a      	ldrb	r2, [r3, #0]
	if (error == true && FSM_Get_State() != FSM_FAULT && FSM_Get_State() != FSM_FAULT_REACTION_ACTIVE && FSM_Get_State() != FSM_TRANSITION_FAULT_REACTION_ACTIVE_TO_FAULT)
 80017e0:	2afe      	cmp	r2, #254	; 0xfe
 80017e2:	d004      	beq.n	80017ee <CheckErrorsAndWarnings+0xa6>
	return g_fsm_status.state;
 80017e4:	781a      	ldrb	r2, [r3, #0]
	if (error == true && FSM_Get_State() != FSM_FAULT && FSM_Get_State() != FSM_FAULT_REACTION_ACTIVE && FSM_Get_State() != FSM_TRANSITION_FAULT_REACTION_ACTIVE_TO_FAULT)
 80017e6:	2a0e      	cmp	r2, #14
	g_fsm_status.state = new_state;
 80017e8:	bf1c      	itt	ne
 80017ea:	22fe      	movne	r2, #254	; 0xfe
 80017ec:	701a      	strbne	r2, [r3, #0]
}
 80017ee:	4770      	bx	lr
	return g_fsm_status.state;
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <CheckErrorsAndWarnings+0xf0>)
 80017f2:	7812      	ldrb	r2, [r2, #0]
	if ((g_joint_status.mc_current_faults_motor > 0 || g_joint_status.mc_occured_faults_motor > 0) && FSM_Get_State() != FSM_TRANSITION_FAULT_TO_INIT) {
 80017f4:	2a0f      	cmp	r2, #15
 80017f6:	d0ae      	beq.n	8001756 <CheckErrorsAndWarnings+0xe>
		g_joint_status.errors =  g_joint_status.errors | JOINT_MC_FAILED;
 80017f8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
		error = true;
 80017fc:	2001      	movs	r0, #1
		g_joint_status.errors =  g_joint_status.errors | JOINT_MC_FAILED;
 80017fe:	f042 0202 	orr.w	r2, r2, #2
		error = true;
 8001802:	e7ad      	b.n	8001760 <CheckErrorsAndWarnings+0x18>
	else if(g_joint_status.f_current_joint_position > g_joint_configuration.joint_working_area && g_joint_configuration.working_area_constrain_enabled)
 8001804:	ee07 1a10 	vmov	s14, r1
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	ddd1      	ble.n	80017b6 <CheckErrorsAndWarnings+0x6e>
 8001812:	7a52      	ldrb	r2, [r2, #9]
 8001814:	2a00      	cmp	r2, #0
 8001816:	d0ce      	beq.n	80017b6 <CheckErrorsAndWarnings+0x6e>
		g_joint_status.warnings = g_joint_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 8001818:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
		g_joint_status.current_joint_position = POSITION_OVER_WORKING_AREA;
 800181c:	2101      	movs	r1, #1
		g_joint_status.warnings = g_joint_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 800181e:	f042 0202 	orr.w	r2, r2, #2
		g_joint_status.current_joint_position = POSITION_OVER_WORKING_AREA;
 8001822:	7019      	strb	r1, [r3, #0]
		g_joint_status.warnings = g_joint_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 8001824:	e7cd      	b.n	80017c2 <CheckErrorsAndWarnings+0x7a>
		g_joint_status.warnings = g_joint_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 8001826:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
		g_joint_status.current_joint_position = POSITION_UNDER_WORKING_AREA;
 800182a:	21ff      	movs	r1, #255	; 0xff
		g_joint_status.warnings = g_joint_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 800182c:	f042 0202 	orr.w	r2, r2, #2
		g_joint_status.current_joint_position = POSITION_UNDER_WORKING_AREA;
 8001830:	7019      	strb	r1, [r3, #0]
		g_joint_status.warnings = g_joint_status.warnings | JOINT_OUTSIDE_WORKING_AREA;
 8001832:	e7c6      	b.n	80017c2 <CheckErrorsAndWarnings+0x7a>
 8001834:	20000ea4 	.word	0x20000ea4
 8001838:	20000ea0 	.word	0x20000ea0
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_SPI_TxRxCpltCallback>:
{
 8001840:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 8001842:	4811      	ldr	r0, [pc, #68]	; (8001888 <HAL_SPI_TxRxCpltCallback+0x48>)
	g_ma730.angle = (g_spi_rx_data >> 2) & 0b0011111111111111;
 8001844:	4c11      	ldr	r4, [pc, #68]	; (800188c <HAL_SPI_TxRxCpltCallback+0x4c>)
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2104      	movs	r1, #4
 800184a:	f005 fe27 	bl	800749c <HAL_GPIO_WritePin>
	g_counters.spi_txrx_counter++;
 800184e:	4810      	ldr	r0, [pc, #64]	; (8001890 <HAL_SPI_TxRxCpltCallback+0x50>)
	g_ma730.angle = (g_spi_rx_data >> 2) & 0b0011111111111111;
 8001850:	8823      	ldrh	r3, [r4, #0]
	g_counters.spi_txrx_counter++;
 8001852:	69c2      	ldr	r2, [r0, #28]
	g_ma730.angle = (g_spi_rx_data >> 2) & 0b0011111111111111;
 8001854:	490f      	ldr	r1, [pc, #60]	; (8001894 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001856:	f3c3 038f 	ubfx	r3, r3, #2, #16
	g_counters.spi_txrx_counter++;
 800185a:	3201      	adds	r2, #1
 800185c:	61c2      	str	r2, [r0, #28]
	g_ma730.angle = (g_spi_rx_data >> 2) & 0b0011111111111111;
 800185e:	f8a1 3001 	strh.w	r3, [r1, #1]
	if (g_ma730.started)
 8001862:	780b      	ldrb	r3, [r1, #0]
 8001864:	b903      	cbnz	r3, 8001868 <HAL_SPI_TxRxCpltCallback+0x28>
}
 8001866:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 8001868:	4807      	ldr	r0, [pc, #28]	; (8001888 <HAL_SPI_TxRxCpltCallback+0x48>)
 800186a:	2200      	movs	r2, #0
 800186c:	2104      	movs	r1, #4
 800186e:	f005 fe15 	bl	800749c <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t * ) &g_spi_tx_data, (uint8_t * ) &g_spi_rx_data, 1) != HAL_OK)
 8001872:	4909      	ldr	r1, [pc, #36]	; (8001898 <HAL_SPI_TxRxCpltCallback+0x58>)
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <HAL_SPI_TxRxCpltCallback+0x5c>)
 8001876:	4622      	mov	r2, r4
 8001878:	2301      	movs	r3, #1
 800187a:	f006 fd53 	bl	8008324 <HAL_SPI_TransmitReceive_IT>
 800187e:	2800      	cmp	r0, #0
 8001880:	d0f1      	beq.n	8001866 <HAL_SPI_TxRxCpltCallback+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001882:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <HAL_SPI_TxRxCpltCallback+0x44>
 8001886:	bf00      	nop
 8001888:	48000400 	.word	0x48000400
 800188c:	20000f30 	.word	0x20000f30
 8001890:	20000e78 	.word	0x20000e78
 8001894:	20000f14 	.word	0x20000f14
 8001898:	20000f32 	.word	0x20000f32
 800189c:	20001254 	.word	0x20001254

080018a0 <HAL_TIM_PeriodElapsedCallback>:
{
 80018a0:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
	if(htim->Instance == TIM6) 	// 10kHz (5,0) - fast recalculation
 80018a4:	4a8c      	ldr	r2, [pc, #560]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80018a6:	6803      	ldr	r3, [r0, #0]
{
 80018a8:	ed2d 8b02 	vpush	{d8}
	if(htim->Instance == TIM6) 	// 10kHz (5,0) - fast recalculation
 80018ac:	4293      	cmp	r3, r2
{
 80018ae:	b091      	sub	sp, #68	; 0x44
	if(htim->Instance == TIM6) 	// 10kHz (5,0) - fast recalculation
 80018b0:	d007      	beq.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x22>
	if(htim->Instance == TIM7) 	// 1kHz - FSM_Tasks
 80018b2:	4a8a      	ldr	r2, [pc, #552]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d052      	beq.n	800195e <HAL_TIM_PeriodElapsedCallback+0xbe>
}
 80018b8:	b011      	add	sp, #68	; 0x44
 80018ba:	ecbd 8b02 	vpop	{d8}
 80018be:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
	g_joint_status.mc_previous_electric_position = g_joint_status.mc_current_electric_position; // store old position
 80018c2:	4d87      	ldr	r5, [pc, #540]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x240>)
	g_joint_status.mc_current_electric_position = ENCODER_M1._Super.hElAngle;
 80018c4:	4987      	ldr	r1, [pc, #540]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x244>)
	g_joint_status.mc_previous_electric_position = g_joint_status.mc_current_electric_position; // store old position
 80018c6:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
	g_joint_status.mc_current_electric_position = ENCODER_M1._Super.hElAngle;
 80018ca:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
	g_joint_status.mc_previous_electric_position = g_joint_status.mc_current_electric_position; // store old position
 80018ce:	87aa      	strh	r2, [r5, #60]	; 0x3c
 80018d0:	4604      	mov	r4, r0
		g_counters.timer6++;
 80018d2:	4885      	ldr	r0, [pc, #532]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x248>)
	g_joint_status.mc_current_electric_position = ENCODER_M1._Super.hElAngle;
 80018d4:	8769      	strh	r1, [r5, #58]	; 0x3a
		g_counters.timer6++;
 80018d6:	6843      	ldr	r3, [r0, #4]
	if (g_joint_status.mc_previous_electric_position > 28000 && g_joint_status.mc_current_electric_position < - 28000)
 80018d8:	f646 5660 	movw	r6, #28000	; 0x6d60
		g_counters.timer6++;
 80018dc:	3301      	adds	r3, #1
	if (g_joint_status.mc_previous_electric_position > 28000 && g_joint_status.mc_current_electric_position < - 28000)
 80018de:	42b2      	cmp	r2, r6
		g_counters.timer6++;
 80018e0:	6043      	str	r3, [r0, #4]
	if (g_joint_status.mc_previous_electric_position > 28000 && g_joint_status.mc_current_electric_position < - 28000)
 80018e2:	f340 80d4 	ble.w	8001a8e <HAL_TIM_PeriodElapsedCallback+0x1ee>
 80018e6:	4b81      	ldr	r3, [pc, #516]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80018e8:	4299      	cmp	r1, r3
 80018ea:	da04      	bge.n	80018f6 <HAL_TIM_PeriodElapsedCallback+0x56>
		g_joint_status.mc_current_electric_rotation++;
 80018ec:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 80018f0:	3301      	adds	r3, #1
 80018f2:	f8c5 3036 	str.w	r3, [r5, #54]	; 0x36
	g_joint_status._current_torque_data[g_joint_status._current_torque_index++] = MC_GetPhaseCurrentAmplitudeMotor1();
 80018f6:	f895 6057 	ldrb.w	r6, [r5, #87]	; 0x57
 80018fa:	1c73      	adds	r3, r6, #1
 80018fc:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
 8001900:	f001 f9f8 	bl	8002cf4 <MC_GetPhaseCurrentAmplitudeMotor1>
 8001904:	eb05 0646 	add.w	r6, r5, r6, lsl #1
	g_joint_status._current_torque_index %= CURRENT_TORQUE_DATA_SIZE;
 8001908:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x250>)
	g_joint_status._current_torque_data[g_joint_status._current_torque_index++] = MC_GetPhaseCurrentAmplitudeMotor1();
 800190a:	f8a6 0043 	strh.w	r0, [r6, #67]	; 0x43
	g_joint_status._current_torque_index %= CURRENT_TORQUE_DATA_SIZE;
 800190e:	f895 2057 	ldrb.w	r2, [r5, #87]	; 0x57
 8001912:	fba3 1302 	umull	r1, r3, r3, r2
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800191c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8001920:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
	g_joint_status.stm_state_motor 				= MC_GetSTMStateMotor1();
 8001924:	f001 f9fe 	bl	8002d24 <MC_GetSTMStateMotor1>
 8001928:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
	g_joint_status.mc_current_faults_motor 		= (uint8_t) MC_GetCurrentFaultsMotor1();
 800192c:	f001 f9f4 	bl	8002d18 <MC_GetCurrentFaultsMotor1>
 8001930:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
	g_joint_status.mc_occured_faults_motor 		= (uint8_t) MC_GetOccurredFaultsMotor1();
 8001934:	f001 f9ea 	bl	8002d0c <MC_GetOccurredFaultsMotor1>
 8001938:	4603      	mov	r3, r0
	g_joint_status.f_current_motor_temperature 	= (uint8_t) NTC_GetAvTemp_C(&TempSensorParamsM1);
 800193a:	486e      	ldr	r0, [pc, #440]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x254>)
	g_joint_status.mc_occured_faults_motor 		= (uint8_t) MC_GetOccurredFaultsMotor1();
 800193c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
	g_joint_status.f_current_motor_temperature 	= (uint8_t) NTC_GetAvTemp_C(&TempSensorParamsM1);
 8001940:	f008 faf6 	bl	8009f30 <NTC_GetAvTemp_C>
 8001944:	b2c0      	uxtb	r0, r0
 8001946:	ee07 0a90 	vmov	s15, r0
 800194a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194e:	6823      	ldr	r3, [r4, #0]
	if(htim->Instance == TIM7) 	// 1kHz - FSM_Tasks
 8001950:	4a62      	ldr	r2, [pc, #392]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x23c>)
	g_joint_status.f_current_motor_temperature 	= (uint8_t) NTC_GetAvTemp_C(&TempSensorParamsM1);
 8001952:	ee17 0a90 	vmov	r0, s15
	if(htim->Instance == TIM7) 	// 1kHz - FSM_Tasks
 8001956:	4293      	cmp	r3, r2
	g_joint_status.f_current_motor_temperature 	= (uint8_t) NTC_GetAvTemp_C(&TempSensorParamsM1);
 8001958:	f8c5 001e 	str.w	r0, [r5, #30]
	if(htim->Instance == TIM7) 	// 1kHz - FSM_Tasks
 800195c:	d1ac      	bne.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x18>
		if (g_joint_configuration.ma730_enabled == true && g_joint_configuration.calibration_state == JOINT_CALIBRATED && g_ma730.started == true)
 800195e:	4c66      	ldr	r4, [pc, #408]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x258>)
		Read_MC_Encoder_1kHz();
 8001960:	f7ff fd64 	bl	800142c <Read_MC_Encoder_1kHz>
		CheckErrorsAndWarnings();
 8001964:	f7ff fef0 	bl	8001748 <CheckErrorsAndWarnings>
		Update_Data_From_MC();
 8001968:	f7ff fdb2 	bl	80014d0 <Update_Data_From_MC>
		if (g_joint_configuration.ma730_enabled == true && g_joint_configuration.calibration_state == JOINT_CALIBRATED && g_ma730.started == true)
 800196c:	7a23      	ldrb	r3, [r4, #8]
 800196e:	b11b      	cbz	r3, 8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8001970:	7aa6      	ldrb	r6, [r4, #10]
 8001972:	2e01      	cmp	r6, #1
 8001974:	f000 8419 	beq.w	80021aa <HAL_TIM_PeriodElapsedCallback+0x90a>
	return g_fsm_status.state;
 8001978:	4e60      	ldr	r6, [pc, #384]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800197a:	7832      	ldrb	r2, [r6, #0]
		switch (FSM_Get_State()) {
 800197c:	2a6e      	cmp	r2, #110	; 0x6e
	return g_fsm_status.state;
 800197e:	b2d3      	uxtb	r3, r2
		switch (FSM_Get_State()) {
 8001980:	d873      	bhi.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8001982:	2b6e      	cmp	r3, #110	; 0x6e
 8001984:	f200 80a5 	bhi.w	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x232>
 8001988:	e8df f013 	tbh	[pc, r3, lsl #1]
 800198c:	008e00bc 	.word	0x008e00bc
 8001990:	03ef0074 	.word	0x03ef0074
 8001994:	00a300a3 	.word	0x00a300a3
 8001998:	00a300a3 	.word	0x00a300a3
 800199c:	00a300a3 	.word	0x00a300a3
 80019a0:	040c03ec 	.word	0x040c03ec
 80019a4:	03c60382 	.word	0x03c60382
 80019a8:	03e30385 	.word	0x03e30385
 80019ac:	00a300a3 	.word	0x00a300a3
 80019b0:	00a300a3 	.word	0x00a300a3
 80019b4:	00a300a3 	.word	0x00a300a3
 80019b8:	00a300a3 	.word	0x00a300a3
 80019bc:	00a300a3 	.word	0x00a300a3
 80019c0:	00a300a3 	.word	0x00a300a3
 80019c4:	00a300a3 	.word	0x00a300a3
 80019c8:	00a300a3 	.word	0x00a300a3
 80019cc:	00a300a3 	.word	0x00a300a3
 80019d0:	00a300a3 	.word	0x00a300a3
 80019d4:	00a300a3 	.word	0x00a300a3
 80019d8:	00a300a3 	.word	0x00a300a3
 80019dc:	00a300a3 	.word	0x00a300a3
 80019e0:	00a300a3 	.word	0x00a300a3
 80019e4:	00a300a3 	.word	0x00a300a3
 80019e8:	00a300a3 	.word	0x00a300a3
 80019ec:	00a300a3 	.word	0x00a300a3
 80019f0:	00a300a3 	.word	0x00a300a3
 80019f4:	00a300a3 	.word	0x00a300a3
 80019f8:	00a300a3 	.word	0x00a300a3
 80019fc:	00a300a3 	.word	0x00a300a3
 8001a00:	00a300a3 	.word	0x00a300a3
 8001a04:	00a300a3 	.word	0x00a300a3
 8001a08:	00a300a3 	.word	0x00a300a3
 8001a0c:	00a300a3 	.word	0x00a300a3
 8001a10:	00a300a3 	.word	0x00a300a3
 8001a14:	00a300a3 	.word	0x00a300a3
 8001a18:	00a300a3 	.word	0x00a300a3
 8001a1c:	00a300a3 	.word	0x00a300a3
 8001a20:	00a300a3 	.word	0x00a300a3
 8001a24:	00a300a3 	.word	0x00a300a3
 8001a28:	00a300a3 	.word	0x00a300a3
 8001a2c:	00a300a3 	.word	0x00a300a3
 8001a30:	00a300a3 	.word	0x00a300a3
 8001a34:	00a300a3 	.word	0x00a300a3
 8001a38:	00a300a3 	.word	0x00a300a3
 8001a3c:	00a300a3 	.word	0x00a300a3
 8001a40:	00a300a3 	.word	0x00a300a3
 8001a44:	00a300a3 	.word	0x00a300a3
 8001a48:	00a300a3 	.word	0x00a300a3
 8001a4c:	00a300a3 	.word	0x00a300a3
 8001a50:	00a300a3 	.word	0x00a300a3
 8001a54:	032702d9 	.word	0x032702d9
 8001a58:	034302f7 	.word	0x034302f7
 8001a5c:	021e026f 	.word	0x021e026f
 8001a60:	00a30190 	.word	0x00a30190
 8001a64:	00a300a3 	.word	0x00a300a3
 8001a68:	018d      	.short	0x018d
 8001a6a:	2bfe      	cmp	r3, #254	; 0xfe
 8001a6c:	f000 8440 	beq.w	80022f0 <HAL_TIM_PeriodElapsedCallback+0xa50>
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d12e      	bne.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x232>
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f8c3 2043 	str.w	r2, [r3, #67]	; 0x43
 8001a7c:	f8c3 2047 	str.w	r2, [r3, #71]	; 0x47
 8001a80:	f8c3 204b 	str.w	r2, [r3, #75]	; 0x4b
 8001a84:	f8c3 204f 	str.w	r2, [r3, #79]	; 0x4f
 8001a88:	f8c3 2053 	str.w	r2, [r3, #83]	; 0x53
 8001a8c:	e352      	b.n	8002134 <HAL_TIM_PeriodElapsedCallback+0x894>
	if (g_joint_status.mc_current_electric_position > 28000  && g_joint_status.mc_previous_electric_position < - 28000)
 8001a8e:	42b1      	cmp	r1, r6
 8001a90:	f77f af31 	ble.w	80018f6 <HAL_TIM_PeriodElapsedCallback+0x56>
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a96:	429a      	cmp	r2, r3
 8001a98:	f6bf af2d 	bge.w	80018f6 <HAL_TIM_PeriodElapsedCallback+0x56>
		g_joint_status.mc_current_electric_rotation--;
 8001a9c:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	f8c5 3036 	str.w	r3, [r5, #54]	; 0x36
}
 8001aa6:	e726      	b.n	80018f6 <HAL_TIM_PeriodElapsedCallback+0x56>
				if (g_joint_configuration.ma730_enabled == true && g_ma730.started == false)
 8001aa8:	7a23      	ldrb	r3, [r4, #8]
 8001aaa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001b00 <HAL_TIM_PeriodElapsedCallback+0x260>
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 847d 	bne.w	80023ae <HAL_TIM_PeriodElapsedCallback+0xb0e>
				if (g_joint_configuration.ma730_enabled == false && g_ma730.started == true)
 8001ab4:	f898 3000 	ldrb.w	r3, [r8]
 8001ab8:	b113      	cbz	r3, 8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
					g_ma730.started = false;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f888 3000 	strb.w	r3, [r8]
		g_counters.timer7++;
 8001ac0:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ac2:	6893      	ldr	r3, [r2, #8]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	6093      	str	r3, [r2, #8]
}
 8001ac8:	b011      	add	sp, #68	; 0x44
 8001aca:	ecbd 8b02 	vpop	{d8}
 8001ace:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
	g_fsm_status.state = new_state;
 8001ad2:	23fe      	movs	r3, #254	; 0xfe
 8001ad4:	7033      	strb	r3, [r6, #0]
	return true;
 8001ad6:	e7f3      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
 8001ad8:	40001000 	.word	0x40001000
 8001adc:	40001400 	.word	0x40001400
 8001ae0:	20000ea4 	.word	0x20000ea4
 8001ae4:	2000090c 	.word	0x2000090c
 8001ae8:	20000e78 	.word	0x20000e78
 8001aec:	ffff92a0 	.word	0xffff92a0
 8001af0:	cccccccd 	.word	0xcccccccd
 8001af4:	20000c2c 	.word	0x20000c2c
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000ea0 	.word	0x20000ea0
 8001b00:	20000f14 	.word	0x20000f14
				HAL_TIM_Base_Stop_IT(&htim6); // Enable 10 kHz timer
 8001b04:	48a7      	ldr	r0, [pc, #668]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001b06:	f006 ffcf 	bl	8008aa8 <HAL_TIM_Base_Stop_IT>
				g_joint_configuration.pole_pairs = POLE_PAIRS;
 8001b0a:	2207      	movs	r2, #7
				g_joint_configuration.gear_ratio = GEAR_RATIO;
 8001b0c:	2379      	movs	r3, #121	; 0x79
				g_joint_configuration.dip1 = (HAL_GPIO_ReadPin(GPIOC, DIP1_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b12:	48a5      	ldr	r0, [pc, #660]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x508>)
				g_joint_configuration.pole_pairs = POLE_PAIRS;
 8001b14:	70a2      	strb	r2, [r4, #2]
				g_joint_configuration.gear_ratio = GEAR_RATIO;
 8001b16:	7063      	strb	r3, [r4, #1]
				g_joint_configuration.dip1 = (HAL_GPIO_ReadPin(GPIOC, DIP1_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b18:	f005 fcba 	bl	8007490 <HAL_GPIO_ReadPin>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	bf18      	it	ne
 8001b20:	2301      	movne	r3, #1
				g_joint_configuration.dip2 = (HAL_GPIO_ReadPin(GPIOC, DIP2_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b26:	48a0      	ldr	r0, [pc, #640]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x508>)
				g_joint_configuration.dip1 = (HAL_GPIO_ReadPin(GPIOC, DIP1_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b28:	7123      	strb	r3, [r4, #4]
				g_joint_configuration.dip2 = (HAL_GPIO_ReadPin(GPIOC, DIP2_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b2a:	f005 fcb1 	bl	8007490 <HAL_GPIO_ReadPin>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	bf18      	it	ne
 8001b32:	2301      	movne	r3, #1
				g_joint_configuration.dip3 = (HAL_GPIO_ReadPin(GPIOB, DIP3_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b34:	2120      	movs	r1, #32
 8001b36:	489d      	ldr	r0, [pc, #628]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x50c>)
				g_joint_configuration.dip2 = (HAL_GPIO_ReadPin(GPIOC, DIP2_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b38:	7163      	strb	r3, [r4, #5]
				g_joint_configuration.dip3 = (HAL_GPIO_ReadPin(GPIOB, DIP3_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b3a:	f005 fca9 	bl	8007490 <HAL_GPIO_ReadPin>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	bf18      	it	ne
 8001b42:	2301      	movne	r3, #1
				g_joint_configuration.dip4 = (HAL_GPIO_ReadPin(GPIOB, DIP4_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b44:	2110      	movs	r1, #16
 8001b46:	4899      	ldr	r0, [pc, #612]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x50c>)
				g_joint_configuration.dip3 = (HAL_GPIO_ReadPin(GPIOB, DIP3_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b48:	71a3      	strb	r3, [r4, #6]
				g_joint_configuration.dip4 = (HAL_GPIO_ReadPin(GPIOB, DIP4_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b4a:	f005 fca1 	bl	8007490 <HAL_GPIO_ReadPin>
				g_joint_configuration.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001b4e:	79a3      	ldrb	r3, [r4, #6]
 8001b50:	7962      	ldrb	r2, [r4, #5]
				g_joint_configuration.dip4 = (HAL_GPIO_ReadPin(GPIOB, DIP4_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b52:	4605      	mov	r5, r0
 8001b54:	3d00      	subs	r5, #0
				g_joint_configuration.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001b56:	ea4f 0343 	mov.w	r3, r3, lsl #1
				g_joint_configuration.dip4 = (HAL_GPIO_ReadPin(GPIOB, DIP4_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b5a:	bf18      	it	ne
 8001b5c:	2501      	movne	r5, #1
				g_joint_configuration.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001b5e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8001b62:	432b      	orrs	r3, r5
				HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 10, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	210a      	movs	r1, #10
 8001b68:	4891      	ldr	r0, [pc, #580]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
				g_joint_configuration.can_node_id = (uint8_t) (g_joint_configuration.dip2 << 2 | g_joint_configuration.dip3 << 1 | g_joint_configuration.dip4);
 8001b6a:	7023      	strb	r3, [r4, #0]
				g_joint_configuration.dip4 = (HAL_GPIO_ReadPin(GPIOB, DIP4_Pin) == GPIO_PIN_RESET) ? (0) : (1);
 8001b6c:	71e5      	strb	r5, [r4, #7]
				HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 10, 0);
 8001b6e:	f004 ff6d 	bl	8006a4c <HAL_FDCAN_ConfigTxDelayCompensation>
				HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 8001b72:	488f      	ldr	r0, [pc, #572]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001b74:	f004 ff7a 	bl	8006a6c <HAL_FDCAN_EnableTxDelayCompensation>
				can_filter_config_0.IdType = FDCAN_STANDARD_ID;
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b80:	f04f 0802 	mov.w	r8, #2
 8001b84:	f04f 0901 	mov.w	r9, #1
 8001b88:	22f0      	movs	r2, #240	; 0xf0
 8001b8a:	f240 730f 	movw	r3, #1807	; 0x70f
				HAL_FDCAN_ConfigFilter(&hfdcan1, &can_filter_config_0); //Initialize CAN Filter
 8001b8e:	a904      	add	r1, sp, #16
 8001b90:	4887      	ldr	r0, [pc, #540]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
				can_filter_config_0.IdType = FDCAN_STANDARD_ID;
 8001b92:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001b96:	e9cd 2308 	strd	r2, r3, [sp, #32]
				HAL_FDCAN_ConfigFilter(&hfdcan1, &can_filter_config_0); //Initialize CAN Filter
 8001b9a:	f004 ff05 	bl	80069a8 <HAL_FDCAN_ConfigFilter>
				can_filter_config_1.FilterID1 = 0x100 + g_joint_configuration.can_node_id;
 8001b9e:	7823      	ldrb	r3, [r4, #0]
				HAL_FDCAN_ConfigFilter(&hfdcan1, &can_filter_config_1); //Initialize CAN Filter
 8001ba0:	4883      	ldr	r0, [pc, #524]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
				can_filter_config_1.IdType = FDCAN_STANDARD_ID;
 8001ba2:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
				can_filter_config_1.FilterID1 = 0x100 + g_joint_configuration.can_node_id;
 8001ba6:	f503 7380 	add.w	r3, r3, #256	; 0x100
				can_filter_config_1.FilterID2 = 0x70F;
 8001baa:	f240 720f 	movw	r2, #1807	; 0x70f
				HAL_FDCAN_ConfigFilter(&hfdcan1, &can_filter_config_1); //Initialize CAN Filter
 8001bae:	a90a      	add	r1, sp, #40	; 0x28
				can_filter_config_1.IdType = FDCAN_STANDARD_ID;
 8001bb0:	f04f 0800 	mov.w	r8, #0
 8001bb4:	f04f 0901 	mov.w	r9, #1
				can_filter_config_1.FilterID1 = 0x100 + g_joint_configuration.can_node_id;
 8001bb8:	930e      	str	r3, [sp, #56]	; 0x38
				can_filter_config_1.FilterID2 = 0x70F;
 8001bba:	920f      	str	r2, [sp, #60]	; 0x3c
				HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3, 3, FDCAN_FILTER_REMOTE, FDCAN_REJECT_REMOTE);
 8001bbc:	2501      	movs	r5, #1
				can_filter_config_1.IdType = FDCAN_STANDARD_ID;
 8001bbe:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
				HAL_FDCAN_ConfigFilter(&hfdcan1, &can_filter_config_1); //Initialize CAN Filter
 8001bc2:	f004 fef1 	bl	80069a8 <HAL_FDCAN_ConfigFilter>
				HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3, 3, FDCAN_FILTER_REMOTE, FDCAN_REJECT_REMOTE);
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4878      	ldr	r0, [pc, #480]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001bce:	9500      	str	r5, [sp, #0]
 8001bd0:	f004 ff1c 	bl	8006a0c <HAL_FDCAN_ConfigGlobalFilter>
				HAL_FDCAN_Start(&hfdcan1); //Initialize CAN Bus
 8001bd4:	4876      	ldr	r0, [pc, #472]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001bd6:	f004 ff6d 	bl	8006ab4 <HAL_FDCAN_Start>
				HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);// Initialize CAN Bus Rx Interrupt
 8001bda:	4629      	mov	r1, r5
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4874      	ldr	r0, [pc, #464]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001be0:	f005 f866 	bl	8006cb0 <HAL_FDCAN_ActivateNotification>
				HAL_FDCAN_EnableISOMode(&hfdcan1);
 8001be4:	4872      	ldr	r0, [pc, #456]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001be6:	f004 ff53 	bl	8006a90 <HAL_FDCAN_EnableISOMode>
				Flash_Read_Data(g_flash_address_configuration, (uint32_t *) g_calibration_config, 8);
 8001bea:	4a72      	ldr	r2, [pc, #456]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x514>)
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001bec:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x518>)
				Flash_Read_Data(g_flash_address_configuration, (uint32_t *) g_calibration_config, 8);
 8001bee:	6812      	ldr	r2, [r2, #0]
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	6019      	str	r1, [r3, #0]
 8001bf4:	6851      	ldr	r1, [r2, #4]
 8001bf6:	6059      	str	r1, [r3, #4]
 8001bf8:	6891      	ldr	r1, [r2, #8]
 8001bfa:	6099      	str	r1, [r3, #8]
 8001bfc:	68d1      	ldr	r1, [r2, #12]
 8001bfe:	60d9      	str	r1, [r3, #12]
 8001c00:	6911      	ldr	r1, [r2, #16]
 8001c02:	6119      	str	r1, [r3, #16]
 8001c04:	6951      	ldr	r1, [r2, #20]
 8001c06:	6159      	str	r1, [r3, #20]
 8001c08:	6991      	ldr	r1, [r2, #24]
 8001c0a:	6199      	str	r1, [r3, #24]
 8001c0c:	69d0      	ldr	r0, [r2, #28]
				g_joint_configuration.calibration_table_size 			= g_calibration_config[8]; // FIXME !!!!
 8001c0e:	8a19      	ldrh	r1, [r3, #16]
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001c10:	61d8      	str	r0, [r3, #28]
 8001c12:	6a12      	ldr	r2, [r2, #32]
 8001c14:	621a      	str	r2, [r3, #32]
				if (g_joint_configuration.calibration_table_size > 0 && g_joint_configuration.calibration_table_size < 65535) {
 8001c16:	1e48      	subs	r0, r1, #1
 8001c18:	b282      	uxth	r2, r0
 8001c1a:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8001c1e:	4282      	cmp	r2, r0
				g_joint_configuration.calibration_table_size 			= g_calibration_config[8]; // FIXME !!!!
 8001c20:	f8a4 101b 	strh.w	r1, [r4, #27]
				if (g_joint_configuration.calibration_table_size > 0 && g_joint_configuration.calibration_table_size < 65535) {
 8001c24:	d836      	bhi.n	8001c94 <HAL_TIM_PeriodElapsedCallback+0x3f4>
						Flash_Read_Data (g_flash_address_calibration_table + i * 8, (uint32_t *) g_data, 1);
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x51c>)
					g_joint_configuration.pole_pairs 						= g_calibration_config[0];
 8001c28:	8818      	ldrh	r0, [r3, #0]
					g_joint_configuration.calibration_sector_size 			= g_calibration_config[4];
 8001c2a:	f8b3 8008 	ldrh.w	r8, [r3, #8]
					g_joint_configuration.reachable_electrical_rotations	= g_calibration_config[5];
 8001c2e:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
					g_joint_configuration.zero_electric_position 			= (uint8_t) g_calibration_config[12];
 8001c32:	7e1d      	ldrb	r5, [r3, #24]
						Flash_Read_Data (g_flash_address_calibration_table + i * 8, (uint32_t *) g_data, 1);
 8001c34:	f8d2 c000 	ldr.w	ip, [r2]
					g_joint_configuration.number_of_sectors 				= g_calibration_config[8];
 8001c38:	f8a4 100f 	strh.w	r1, [r4, #15]
					g_joint_configuration.gear_ratio 						= g_calibration_config[1];
 8001c3c:	885a      	ldrh	r2, [r3, #2]
					g_joint_configuration.zero_electric_rotation 			= g_calibration_config[13];
 8001c3e:	8b5b      	ldrh	r3, [r3, #26]
 8001c40:	f8a4 3013 	strh.w	r3, [r4, #19]
 8001c44:	f101 0901 	add.w	r9, r1, #1
 8001c48:	495d      	ldr	r1, [pc, #372]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x520>)
					g_joint_configuration.pole_pairs 						= g_calibration_config[0];
 8001c4a:	70a0      	strb	r0, [r4, #2]
					g_joint_configuration.gear_ratio 						= g_calibration_config[1];
 8001c4c:	7062      	strb	r2, [r4, #1]
					g_joint_configuration.calibration_sector_size 			= g_calibration_config[4];
 8001c4e:	f8a4 8019 	strh.w	r8, [r4, #25]
					g_joint_configuration.reachable_electrical_rotations	= g_calibration_config[5];
 8001c52:	f8a4 e00d 	strh.w	lr, [r4, #13]
					g_joint_configuration.zero_electric_position 			= (uint8_t) g_calibration_config[12];
 8001c56:	f8a4 5011 	strh.w	r5, [r4, #17]
					for (int i = 0; i <= g_joint_configuration.calibration_table_size; i++) {
 8001c5a:	2300      	movs	r3, #0
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001c5c:	f8dc 5000 	ldr.w	r5, [ip]
 8001c60:	600d      	str	r5, [r1, #0]
 8001c62:	f8dc a004 	ldr.w	sl, [ip, #4]
 8001c66:	f8c1 a004 	str.w	sl, [r1, #4]
						g_joint_configuration.calibration_table_1[i]	= g_data[0] >> 16;
 8001c6a:	eb04 0843 	add.w	r8, r4, r3, lsl #1
					for (int i = 0; i <= g_joint_configuration.calibration_table_size; i++) {
 8001c6e:	3301      	adds	r3, #1
						g_joint_configuration.calibration_table_1[i]	= g_data[0] >> 16;
 8001c70:	f3c5 4a0f 	ubfx	sl, r5, #16, #16
					for (int i = 0; i <= g_joint_configuration.calibration_table_size; i++) {
 8001c74:	454b      	cmp	r3, r9
 8001c76:	f10c 0c08 	add.w	ip, ip, #8
						g_joint_configuration.calibration_table_1[i]	= g_data[0] >> 16;
 8001c7a:	f8a8 a01d 	strh.w	sl, [r8, #29]
						g_joint_configuration.calibration_table_2[i] 	= g_data[0];
 8001c7e:	f8a8 541d 	strh.w	r5, [r8, #1053]	; 0x41d
					for (int i = 0; i <= g_joint_configuration.calibration_table_size; i++) {
 8001c82:	d1eb      	bne.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x3bc>
					g_joint_configuration.maximum_electrical_rotations = g_joint_configuration.gear_ratio * g_joint_configuration.pole_pairs;
 8001c84:	b2d3      	uxtb	r3, r2
 8001c86:	b2c0      	uxtb	r0, r0
 8001c88:	fb13 f300 	smulbb	r3, r3, r0
					g_joint_configuration.calibration_state = JOINT_CALIBRATED;
 8001c8c:	2201      	movs	r2, #1
					g_joint_configuration.maximum_electrical_rotations = g_joint_configuration.gear_ratio * g_joint_configuration.pole_pairs;
 8001c8e:	f8a4 300b 	strh.w	r3, [r4, #11]
					g_joint_configuration.calibration_state = JOINT_CALIBRATED;
 8001c92:	72a2      	strb	r2, [r4, #10]
				g_joint_configuration.joint_working_area = M_PI * 165.0 / 180.0;
 8001c94:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8001c96:	f8c4 3015 	str.w	r3, [r4, #21]
	g_fsm_status.state = new_transition;
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	7033      	strb	r3, [r6, #0]
				HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer
 8001c9e:	4841      	ldr	r0, [pc, #260]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001ca0:	f006 fec8 	bl	8008a34 <HAL_TIM_Base_Start_IT>
				break;
 8001ca4:	e70c      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
	g_fsm_status.state = new_state;
 8001ca6:	2364      	movs	r3, #100	; 0x64
 8001ca8:	7033      	strb	r3, [r6, #0]
	return true;
 8001caa:	e709      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 8001cac:	4d41      	ldr	r5, [pc, #260]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x514>)
				HAL_TIM_Base_Stop_IT(&htim6); // Disable 10 kHz timer
 8001cae:	483d      	ldr	r0, [pc, #244]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001cb0:	f006 fefa 	bl	8008aa8 <HAL_TIM_Base_Stop_IT>
				HAL_FLASH_Unlock();
 8001cb4:	f005 f9f8 	bl	80070a8 <HAL_FLASH_Unlock>
				EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 8001cb8:	682b      	ldr	r3, [r5, #0]
				EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8001cba:	f04f 0800 	mov.w	r8, #0
 8001cbe:	f04f 0901 	mov.w	r9, #1
				EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 8001cc2:	f3c3 23cf 	ubfx	r3, r3, #11, #16
				EraseInitStruct.NbPages 	= 2; // 1 - 2kB
 8001cc6:	2202      	movs	r2, #2
				if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001cc8:	a904      	add	r1, sp, #16
 8001cca:	a80a      	add	r0, sp, #40	; 0x28
				EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8001ccc:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
				EraseInitStruct.Page 		= (g_flash_address_configuration & 0x07FFFFFF) / FLASH_PAGE_SIZE;
 8001cd0:	930c      	str	r3, [sp, #48]	; 0x30
				EraseInitStruct.NbPages 	= 2; // 1 - 2kB
 8001cd2:	920d      	str	r2, [sp, #52]	; 0x34
				if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001cd4:	f005 fa38 	bl	8007148 <HAL_FLASHEx_Erase>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	f040 841b 	bne.w	8002514 <HAL_TIM_PeriodElapsedCallback+0xc74>
				data = (g_joint_configuration.gear_ratio << 16) | g_joint_configuration.pole_pairs;
 8001cde:	7863      	ldrb	r3, [r4, #1]
 8001ce0:	78a2      	ldrb	r2, [r4, #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration, data) != HAL_OK)
 8001ce2:	6829      	ldr	r1, [r5, #0]
				data = (g_joint_configuration.gear_ratio << 16) | g_joint_configuration.pole_pairs;
 8001ce4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration, data) != HAL_OK)
 8001ce8:	17d3      	asrs	r3, r2, #31
 8001cea:	2000      	movs	r0, #0
 8001cec:	f005 f92e 	bl	8006f4c <HAL_FLASH_Program>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f040 840a 	bne.w	800250a <HAL_TIM_PeriodElapsedCallback+0xc6a>
				data = (g_joint_configuration.reachable_electrical_rotations << 16) | g_joint_configuration.calibration_sector_size;
 8001cf6:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 8001cfa:	f8b4 2019 	ldrh.w	r2, [r4, #25]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 8, data) != HAL_OK)
 8001cfe:	6829      	ldr	r1, [r5, #0]
				data = (g_joint_configuration.reachable_electrical_rotations << 16) | g_joint_configuration.calibration_sector_size;
 8001d00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 8, data) != HAL_OK)
 8001d04:	17d3      	asrs	r3, r2, #31
 8001d06:	3108      	adds	r1, #8
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f005 f91f 	bl	8006f4c <HAL_FLASH_Program>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	f040 8409 	bne.w	8002526 <HAL_TIM_PeriodElapsedCallback+0xc86>
				data = (g_joint_configuration.calibration_sector_size << 16) | g_joint_configuration.number_of_sectors;
 8001d14:	f8b4 3019 	ldrh.w	r3, [r4, #25]
 8001d18:	f8b4 200f 	ldrh.w	r2, [r4, #15]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 16, data) != HAL_OK)
 8001d1c:	6829      	ldr	r1, [r5, #0]
				data = (g_joint_configuration.calibration_sector_size << 16) | g_joint_configuration.number_of_sectors;
 8001d1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 16, data) != HAL_OK)
 8001d22:	17d3      	asrs	r3, r2, #31
 8001d24:	3110      	adds	r1, #16
 8001d26:	2000      	movs	r0, #0
 8001d28:	f005 f910 	bl	8006f4c <HAL_FLASH_Program>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	f040 83f6 	bne.w	800251e <HAL_TIM_PeriodElapsedCallback+0xc7e>
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 24, data) != HAL_OK)
 8001d32:	6829      	ldr	r1, [r5, #0]
				data = (g_joint_configuration.zero_electric_rotation << 16) | (* temp) ;
 8001d34:	f8d4 2011 	ldr.w	r2, [r4, #17]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_configuration + 24, data) != HAL_OK)
 8001d38:	3118      	adds	r1, #24
 8001d3a:	17d3      	asrs	r3, r2, #31
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f005 f905 	bl	8006f4c <HAL_FLASH_Program>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	f040 83f4 	bne.w	8002530 <HAL_TIM_PeriodElapsedCallback+0xc90>
				for(int i = 0; i < g_joint_configuration.number_of_sectors; i++ )
 8001d48:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 8001d4c:	b303      	cbz	r3, 8001d90 <HAL_TIM_PeriodElapsedCallback+0x4f0>
 8001d4e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8001dbc <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001d52:	2500      	movs	r5, #0
					data = g_joint_configuration.calibration_table_1[i] << 16 | g_joint_configuration.calibration_table_2[i];
 8001d54:	f105 020c 	add.w	r2, r5, #12
 8001d58:	f505 7303 	add.w	r3, r5, #524	; 0x20c
 8001d5c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8001d60:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001d64:	f8b2 0005 	ldrh.w	r0, [r2, #5]
 8001d68:	f8b3 2005 	ldrh.w	r2, [r3, #5]
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_calibration_table + i * 8, data) != HAL_OK)
 8001d6c:	f8d8 1000 	ldr.w	r1, [r8]
					data = g_joint_configuration.calibration_table_1[i] << 16 | g_joint_configuration.calibration_table_2[i];
 8001d70:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, g_flash_address_calibration_table + i * 8, data) != HAL_OK)
 8001d74:	17d3      	asrs	r3, r2, #31
 8001d76:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f005 f8e6 	bl	8006f4c <HAL_FLASH_Program>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	f040 82ab 	bne.w	80022dc <HAL_TIM_PeriodElapsedCallback+0xa3c>
				for(int i = 0; i < g_joint_configuration.number_of_sectors; i++ )
 8001d86:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 8001d8a:	3501      	adds	r5, #1
 8001d8c:	42ab      	cmp	r3, r5
 8001d8e:	dce1      	bgt.n	8001d54 <HAL_TIM_PeriodElapsedCallback+0x4b4>
				HAL_FLASH_Lock();
 8001d90:	f005 f99e 	bl	80070d0 <HAL_FLASH_Lock>
				g_joint_configuration.calibration_state = JOINT_CALIBRATED;
 8001d94:	2301      	movs	r3, #1
 8001d96:	72a3      	strb	r3, [r4, #10]
				HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x504>)
	g_fsm_status.state = new_state;
 8001d9a:	7033      	strb	r3, [r6, #0]
				HAL_TIM_Base_Start_IT(&htim6); // Enable 10 kHz timer
 8001d9c:	f006 fe4a 	bl	8008a34 <HAL_TIM_Base_Start_IT>
				break;
 8001da0:	e68e      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
 8001da2:	bf00      	nop
 8001da4:	200013c4 	.word	0x200013c4
 8001da8:	48000800 	.word	0x48000800
 8001dac:	48000400 	.word	0x48000400
 8001db0:	20001064 	.word	0x20001064
 8001db4:	20000850 	.word	0x20000850
 8001db8:	20000e4c 	.word	0x20000e4c
 8001dbc:	2000084c 	.word	0x2000084c
 8001dc0:	20000e98 	.word	0x20000e98
 8001dc4:	40384e88 	.word	0x40384e88
				if (motor_in_position(g_center_encoder_position))
 8001dc8:	4bc2      	ldr	r3, [pc, #776]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x834>)
	if (abs(g_joint_status.mc_current_motor_position_multiturn - position) < CALIBRATION_ZERO_POSITION_OFFSET) return true;
 8001dca:	4dc3      	ldr	r5, [pc, #780]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x838>)
				if (motor_in_position(g_center_encoder_position))
 8001dcc:	681a      	ldr	r2, [r3, #0]
	if (abs(g_joint_status.mc_current_motor_position_multiturn - position) < CALIBRATION_ZERO_POSITION_OFFSET) return true;
 8001dce:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bfb8      	it	lt
 8001dd8:	425b      	neglt	r3, r3
 8001dda:	2b09      	cmp	r3, #9
 8001ddc:	f340 8320 	ble.w	8002420 <HAL_TIM_PeriodElapsedCallback+0xb80>
					motor_start(SPEED_MODE, g_calibration_speed);
 8001de0:	4bbe      	ldr	r3, [pc, #760]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x83c>)
	g_app_command.working_mode = mode;
 8001de2:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8002108 <HAL_TIM_PeriodElapsedCallback+0x868>
					motor_start(SPEED_MODE, g_calibration_speed);
 8001de6:	8818      	ldrh	r0, [r3, #0]
			g_app_command._motor_speed = goal;
 8001de8:	f8a8 001b 	strh.w	r0, [r8, #27]
	g_app_command.working_mode = mode;
 8001dec:	2302      	movs	r3, #2
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001dee:	b200      	sxth	r0, r0
 8001df0:	2100      	movs	r1, #0
	g_app_command.working_mode = mode;
 8001df2:	f888 3000 	strb.w	r3, [r8]
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001df6:	f000 ff6d 	bl	8002cd4 <MC_ProgramSpeedRampMotor1>
			MC_StartMotor1();
 8001dfa:	f000 ff5f 	bl	8002cbc <MC_StartMotor1>
	if (g_joint_status.mc_current_motor_torque > g_calibration_torque_limit && g_joint_status.stm_state_motor == RUN) return true;
 8001dfe:	4bb8      	ldr	r3, [pc, #736]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001e00:	f9b5 2026 	ldrsh.w	r2, [r5, #38]	; 0x26
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f77f ae59 	ble.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
 8001e0e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	f47f ae54 	bne.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
			g_app_command._motor_speed = goal;
 8001e18:	2400      	movs	r4, #0
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001e1a:	4621      	mov	r1, r4
	g_app_command.working_mode = mode;
 8001e1c:	2302      	movs	r3, #2
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001e1e:	4620      	mov	r0, r4
	g_app_command.working_mode = mode;
 8001e20:	f888 3000 	strb.w	r3, [r8]
			g_app_command._motor_speed = goal;
 8001e24:	f888 401b 	strb.w	r4, [r8, #27]
 8001e28:	f888 401c 	strb.w	r4, [r8, #28]
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001e2c:	f000 ff52 	bl	8002cd4 <MC_ProgramSpeedRampMotor1>
			MC_StartMotor1();
 8001e30:	f000 ff44 	bl	8002cbc <MC_StartMotor1>
	for (int i = 0; i < CURRENT_TORQUE_DATA_SIZE; i++)
 8001e34:	4bab      	ldr	r3, [pc, #684]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001e36:	f8c5 4043 	str.w	r4, [r5, #67]	; 0x43
	g_app_command.motor_torque = 0;
 8001e3a:	f04f 0c00 	mov.w	ip, #0
 8001e3e:	605c      	str	r4, [r3, #4]
 8001e40:	609c      	str	r4, [r3, #8]
 8001e42:	60dc      	str	r4, [r3, #12]
 8001e44:	611c      	str	r4, [r3, #16]
	g_app_command._motor_torque = 0;
 8001e46:	f8c8 4019 	str.w	r4, [r8, #25]
	g_app_command.motor_torque = 0;
 8001e4a:	f8c8 c005 	str.w	ip, [r8, #5]
	g_app_command.joint_torque = 0;
 8001e4e:	f8c8 c001 	str.w	ip, [r8, #1]
	g_app_command.motor_speed = 0;
 8001e52:	f8c8 c00d 	str.w	ip, [r8, #13]
	g_app_command.joint_speed = 0;
 8001e56:	f8c8 c009 	str.w	ip, [r8, #9]
	MC_StopMotor1();
 8001e5a:	f000 ff35 	bl	8002cc8 <MC_StopMotor1>
					g_calibration_state = MISSED_CENTER_POSITION;
 8001e5e:	4aa2      	ldr	r2, [pc, #648]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001e60:	2164      	movs	r1, #100	; 0x64
	g_fsm_status.state = new_state;
 8001e62:	23fe      	movs	r3, #254	; 0xfe
					g_calibration_state = MISSED_CENTER_POSITION;
 8001e64:	7011      	strb	r1, [r2, #0]
	g_fsm_status.state = new_state;
 8001e66:	7033      	strb	r3, [r6, #0]
	return true;
 8001e68:	e62a      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				if (!check_calibration_data_cw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size) ||
 8001e6a:	49a0      	ldr	r1, [pc, #640]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x84c>)
	g_calibration_data_1_errors = 0;
 8001e6c:	f8df c29c 	ldr.w	ip, [pc, #668]	; 800210c <HAL_TIM_PeriodElapsedCallback+0x86c>
				if (!check_calibration_data_cw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size) ||
 8001e70:	880d      	ldrh	r5, [r1, #0]
 8001e72:	f8b4 0019 	ldrh.w	r0, [r4, #25]
	g_calibration_data_1_errors = 0;
 8001e76:	2300      	movs	r3, #0
				if (!check_calibration_data_cw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size) ||
 8001e78:	b22d      	sxth	r5, r5
 8001e7a:	fb95 f5f0 	sdiv	r5, r5, r0
	for (int i = 0; i < size; i++) {
 8001e7e:	429d      	cmp	r5, r3
	g_calibration_data_1_errors = 0;
 8001e80:	f8ac 3000 	strh.w	r3, [ip]
	for (int i = 0; i < size; i++) {
 8001e84:	dd0f      	ble.n	8001ea6 <HAL_TIM_PeriodElapsedCallback+0x606>
		if (g_joint_configuration.calibration_table_1[i] == 0) g_calibration_data_1_errors++;
 8001e86:	f103 020c 	add.w	r2, r3, #12
 8001e8a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (int i = 0; i < size; i++) {
 8001e8e:	3301      	adds	r3, #1
		if (g_joint_configuration.calibration_table_1[i] == 0) g_calibration_data_1_errors++;
 8001e90:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8001e94:	b92a      	cbnz	r2, 8001ea2 <HAL_TIM_PeriodElapsedCallback+0x602>
 8001e96:	f8bc 2000 	ldrh.w	r2, [ip]
 8001e9a:	3201      	adds	r2, #1
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	f8ac 2000 	strh.w	r2, [ip]
	for (int i = 0; i < size; i++) {
 8001ea2:	429d      	cmp	r5, r3
 8001ea4:	d1ef      	bne.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x5e6>
	if (g_calibration_data_1_errors > 0) return false;
 8001ea6:	f8bc 3000 	ldrh.w	r3, [ip]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 8277 	bne.w	80023a0 <HAL_TIM_PeriodElapsedCallback+0xb00>
					!check_calibration_data_ccw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size))
 8001eb2:	880d      	ldrh	r5, [r1, #0]
	g_calibration_data_2_errors = 0;
 8001eb4:	f8df c258 	ldr.w	ip, [pc, #600]	; 8002110 <HAL_TIM_PeriodElapsedCallback+0x870>
					!check_calibration_data_ccw(g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size))
 8001eb8:	b22d      	sxth	r5, r5
 8001eba:	fb95 f5f0 	sdiv	r5, r5, r0
	for (int i = 0; i < size; i++) {
 8001ebe:	2d00      	cmp	r5, #0
	g_calibration_data_2_errors = 0;
 8001ec0:	f8ac 3000 	strh.w	r3, [ip]
	for (int i = 0; i < size; i++) {
 8001ec4:	dd0f      	ble.n	8001ee6 <HAL_TIM_PeriodElapsedCallback+0x646>
		if (g_joint_configuration.calibration_table_2[i] == 0) g_calibration_data_2_errors++;
 8001ec6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8001eca:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (int i = 0; i < size; i++) {
 8001ece:	3301      	adds	r3, #1
		if (g_joint_configuration.calibration_table_2[i] == 0) g_calibration_data_2_errors++;
 8001ed0:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8001ed4:	b92a      	cbnz	r2, 8001ee2 <HAL_TIM_PeriodElapsedCallback+0x642>
 8001ed6:	f8bc 2000 	ldrh.w	r2, [ip]
 8001eda:	3201      	adds	r2, #1
 8001edc:	b292      	uxth	r2, r2
 8001ede:	f8ac 2000 	strh.w	r2, [ip]
	for (int i = 0; i < size; i++) {
 8001ee2:	429d      	cmp	r5, r3
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x626>
	if (g_calibration_data_2_errors > 0) return false;
 8001ee6:	f8bc 3000 	ldrh.w	r3, [ip]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 8257 	bne.w	80023a0 <HAL_TIM_PeriodElapsedCallback+0xb00>
					g_max_electric_rotation_ccw = g_joint_status.mc_current_electric_rotation; // Should be 0 right now
 8001ef2:	4b79      	ldr	r3, [pc, #484]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001ef4:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8002114 <HAL_TIM_PeriodElapsedCallback+0x874>
 8001ef8:	f8d3 3036 	ldr.w	r3, [r3, #54]	; 0x36
					g_center_encoder_position = (g_max_encoder_position - g_min_encoder_position + 1) / 2 + g_min_encoder_position;
 8001efc:	4d7c      	ldr	r5, [pc, #496]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001efe:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x854>)
					g_max_electric_rotation_ccw = g_joint_status.mc_current_electric_rotation; // Should be 0 right now
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	f8ac 3000 	strh.w	r3, [ip]
					g_center_encoder_position = (g_max_encoder_position - g_min_encoder_position + 1) / 2 + g_min_encoder_position;
 8001f06:	682b      	ldr	r3, [r5, #0]
 8001f08:	f8d2 c000 	ldr.w	ip, [r2]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	4d71      	ldr	r5, [pc, #452]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001f10:	eba3 030c 	sub.w	r3, r3, ip
 8001f14:	3301      	adds	r3, #1
 8001f16:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f1a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f1e:	602b      	str	r3, [r5, #0]
					g_joint_configuration.number_of_sectors = (uint16_t) (g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size);
 8001f20:	880b      	ldrh	r3, [r1, #0]
					g_calibration_state = CALIBRATION_OK;
 8001f22:	4d71      	ldr	r5, [pc, #452]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x848>)
					g_joint_configuration.reachable_electrical_rotations = g_max_electric_rotation_cw;
 8001f24:	880a      	ldrh	r2, [r1, #0]
 8001f26:	f8a4 200d 	strh.w	r2, [r4, #13]
					g_calibration_state = CALIBRATION_OK;
 8001f2a:	21ff      	movs	r1, #255	; 0xff
					g_fsm_status.state = FSM_CALIBRATION_PHASE_5;
 8001f2c:	2269      	movs	r2, #105	; 0x69
					g_joint_configuration.number_of_sectors = (uint16_t) (g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size);
 8001f2e:	b21b      	sxth	r3, r3
					g_calibration_state = CALIBRATION_OK;
 8001f30:	7029      	strb	r1, [r5, #0]
					g_joint_configuration.number_of_sectors = (uint16_t) (g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size);
 8001f32:	fb93 f0f0 	sdiv	r0, r3, r0
					g_fsm_status.state = FSM_CALIBRATION_PHASE_5;
 8001f36:	7032      	strb	r2, [r6, #0]
					g_joint_configuration.number_of_sectors = (uint16_t) (g_max_electric_rotation_cw / g_joint_configuration.calibration_sector_size);
 8001f38:	f8a4 000f 	strh.w	r0, [r4, #15]
					g_fsm_status.state = FSM_CALIBRATION_PHASE_5;
 8001f3c:	e5c0      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				g_joint_configuration.pole_pairs = POLE_PAIRS;
 8001f3e:	2007      	movs	r0, #7
				g_joint_configuration.gear_ratio = GEAR_RATIO;
 8001f40:	2379      	movs	r3, #121	; 0x79
				g_joint_configuration.number_of_sectors = 0;
 8001f42:	2500      	movs	r5, #0
				g_joint_configuration.calibration_sector_size = SECTOR_SIZE;
 8001f44:	4a6c      	ldr	r2, [pc, #432]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x858>)
				g_joint_configuration.pole_pairs = POLE_PAIRS;
 8001f46:	70a0      	strb	r0, [r4, #2]
				g_joint_configuration.gear_ratio = GEAR_RATIO;
 8001f48:	7063      	strb	r3, [r4, #1]
				g_joint_configuration.calibration_state = JOINT_NOT_CALIBRATED;
 8001f4a:	f44f 409e 	mov.w	r0, #20224	; 0x4f00
				g_joint_configuration.maximum_electrical_rotations = g_joint_configuration.gear_ratio * g_joint_configuration.pole_pairs;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	60e3      	str	r3, [r4, #12]
 8001f52:	4629      	mov	r1, r5
				g_joint_configuration.calibration_sector_size = SECTOR_SIZE;
 8001f54:	f8c4 2019 	str.w	r2, [r4, #25]
				g_joint_configuration.calibration_state = JOINT_NOT_CALIBRATED;
 8001f58:	8160      	strh	r0, [r4, #10]
 8001f5a:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8001f5e:	4867      	ldr	r0, [pc, #412]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x85c>)
				g_joint_configuration.number_of_sectors = 0;
 8001f60:	6125      	str	r5, [r4, #16]
				g_joint_configuration.zero_electric_rotation = 0;
 8001f62:	7525      	strb	r5, [r4, #20]
 8001f64:	f009 fc4c 	bl	800b800 <memset>
 8001f68:	4865      	ldr	r0, [pc, #404]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8001f70:	f009 fc46 	bl	800b800 <memset>
				g_fsm_status.state = FSM_CALIBRATION_PHASE_1;
 8001f74:	2365      	movs	r3, #101	; 0x65
 8001f76:	7033      	strb	r3, [r6, #0]
				break;
 8001f78:	e5a2      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				if (g_joint_status.mc_current_electric_rotation % g_joint_configuration.calibration_sector_size == (0) &&
 8001f7a:	4d57      	ldr	r5, [pc, #348]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001f7c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
 8001f80:	f8d5 1036 	ldr.w	r1, [r5, #54]	; 0x36
 8001f84:	fb91 f2f3 	sdiv	r2, r1, r3
 8001f88:	fb03 1312 	mls	r3, r3, r2, r1
 8001f8c:	b95b      	cbnz	r3, 8001fa6 <HAL_TIM_PeriodElapsedCallback+0x706>
						g_joint_configuration.calibration_table_1[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] == 0)
 8001f8e:	f102 030c 	add.w	r3, r2, #12
 8001f92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				if (g_joint_status.mc_current_electric_rotation % g_joint_configuration.calibration_sector_size == (0) &&
 8001f96:	f8b3 2005 	ldrh.w	r2, [r3, #5]
 8001f9a:	b922      	cbnz	r2, 8001fa6 <HAL_TIM_PeriodElapsedCallback+0x706>
					g_joint_configuration.calibration_table_1[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_ma730.angle;
 8001f9c:	4a59      	ldr	r2, [pc, #356]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8001f9e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8001fa2:	f8a3 2005 	strh.w	r2, [r3, #5]
	if (g_joint_status.mc_current_motor_torque > g_calibration_torque_limit && g_joint_status.stm_state_motor == RUN) return true;
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001fa8:	f9b5 2026 	ldrsh.w	r2, [r5, #38]	; 0x26
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dd04      	ble.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x71e>
 8001fb4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8001fb8:	2b06      	cmp	r3, #6
 8001fba:	f000 82e1 	beq.w	8002580 <HAL_TIM_PeriodElapsedCallback+0xce0>
					motor_start(SPEED_MODE, g_calibration_speed);
 8001fbe:	4a47      	ldr	r2, [pc, #284]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x83c>)
	g_app_command.working_mode = mode;
 8001fc0:	4b51      	ldr	r3, [pc, #324]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x868>)
					motor_start(SPEED_MODE, g_calibration_speed);
 8001fc2:	8810      	ldrh	r0, [r2, #0]
			g_app_command._motor_speed = goal;
 8001fc4:	f8a3 001b 	strh.w	r0, [r3, #27]
	g_app_command.working_mode = mode;
 8001fc8:	2202      	movs	r2, #2
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	b200      	sxth	r0, r0
	g_app_command.working_mode = mode;
 8001fce:	701a      	strb	r2, [r3, #0]
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001fd0:	f000 fe80 	bl	8002cd4 <MC_ProgramSpeedRampMotor1>
			MC_StartMotor1();
 8001fd4:	f000 fe72 	bl	8002cbc <MC_StartMotor1>
			break;
 8001fd8:	e572      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
	if (g_joint_status.mc_current_motor_torque > g_calibration_torque_limit && g_joint_status.stm_state_motor == RUN) return true;
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001fdc:	4c3e      	ldr	r4, [pc, #248]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dd04      	ble.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0x754>
 8001fea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	f000 82a2 	beq.w	8002538 <HAL_TIM_PeriodElapsedCallback+0xc98>
					motor_start(SPEED_MODE, -1 * g_calibration_speed);
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x83c>)
	g_app_command.working_mode = mode;
 8001ff6:	4a44      	ldr	r2, [pc, #272]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x868>)
					motor_start(SPEED_MODE, -1 * g_calibration_speed);
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	425b      	negs	r3, r3
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8001ffc:	b218      	sxth	r0, r3
	g_app_command.working_mode = mode;
 8001ffe:	2402      	movs	r4, #2
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8002000:	2100      	movs	r1, #0
			g_app_command._motor_speed = goal;
 8002002:	f8a2 301b 	strh.w	r3, [r2, #27]
	g_app_command.working_mode = mode;
 8002006:	7014      	strb	r4, [r2, #0]
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8002008:	f000 fe64 	bl	8002cd4 <MC_ProgramSpeedRampMotor1>
			MC_StartMotor1();
 800200c:	f000 fe56 	bl	8002cbc <MC_StartMotor1>
			break;
 8002010:	e556      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				if (g_joint_status.mc_current_electric_rotation % g_joint_configuration.calibration_sector_size == (g_joint_configuration.calibration_sector_size - 1) &&
 8002012:	4d31      	ldr	r5, [pc, #196]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8002014:	f8b4 3019 	ldrh.w	r3, [r4, #25]
 8002018:	f8d5 2036 	ldr.w	r2, [r5, #54]	; 0x36
 800201c:	fb92 f1f3 	sdiv	r1, r2, r3
 8002020:	fb03 2211 	mls	r2, r3, r1, r2
 8002024:	3b01      	subs	r3, #1
 8002026:	429a      	cmp	r2, r3
 8002028:	f000 824e 	beq.w	80024c8 <HAL_TIM_PeriodElapsedCallback+0xc28>
	if (g_joint_status.mc_current_motor_torque > g_calibration_torque_limit && g_joint_status.stm_state_motor == RUN) return true;
 800202c:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x840>)
 800202e:	f9b5 2026 	ldrsh.w	r2, [r5, #38]	; 0x26
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	429a      	cmp	r2, r3
 8002038:	dddc      	ble.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0x754>
 800203a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800203e:	2b06      	cmp	r3, #6
 8002040:	d1d8      	bne.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0x754>
	g_app_command.motor_torque = 0;
 8002042:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8002044:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8002046:	2300      	movs	r3, #0
	g_app_command.joint_torque = 0;
 8002048:	4618      	mov	r0, r3
	g_app_command.motor_torque = 0;
 800204a:	f8c2 3005 	str.w	r3, [r2, #5]
 800204e:	2300      	movs	r3, #0
 8002050:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
	g_app_command._motor_torque = 0;
 8002054:	f8c2 3019 	str.w	r3, [r2, #25]
 8002058:	604b      	str	r3, [r1, #4]
 800205a:	608b      	str	r3, [r1, #8]
 800205c:	60cb      	str	r3, [r1, #12]
 800205e:	610b      	str	r3, [r1, #16]
	g_app_command.joint_torque = 0;
 8002060:	f8c2 0001 	str.w	r0, [r2, #1]
	g_app_command.motor_speed = 0;
 8002064:	f8c2 000d 	str.w	r0, [r2, #13]
	g_app_command.joint_speed = 0;
 8002068:	f8c2 0009 	str.w	r0, [r2, #9]
	MC_StopMotor1();
 800206c:	f000 fe2c 	bl	8002cc8 <MC_StopMotor1>
					g_joint_configuration.calibration_table_1[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_ma730.angle;
 8002070:	4a24      	ldr	r2, [pc, #144]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8002072:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 8002076:	f8b4 1019 	ldrh.w	r1, [r4, #25]
 800207a:	fb93 f3f1 	sdiv	r3, r3, r1
 800207e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8002082:	f8b2 3001 	ldrh.w	r3, [r2, #1]
 8002086:	f8a4 301d 	strh.w	r3, [r4, #29]
					g_fsm_status.state = FSM_CALIBRATION_PHASE_4;
 800208a:	2368      	movs	r3, #104	; 0x68
 800208c:	7033      	strb	r3, [r6, #0]
 800208e:	e517      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
	g_fsm_status.state = new_state;
 8002090:	2303      	movs	r3, #3
 8002092:	7033      	strb	r3, [r6, #0]
	return true;
 8002094:	e514      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
	g_app_command.motor_torque = 0;
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8002098:	490f      	ldr	r1, [pc, #60]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 800209a:	2300      	movs	r3, #0
	g_app_command.joint_torque = 0;
 800209c:	461d      	mov	r5, r3
	g_app_command.motor_torque = 0;
 800209e:	f8c2 3005 	str.w	r3, [r2, #5]
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8c1 3043 	str.w	r3, [r1, #67]	; 0x43
 80020a8:	f8c1 3047 	str.w	r3, [r1, #71]	; 0x47
 80020ac:	f8c1 304b 	str.w	r3, [r1, #75]	; 0x4b
 80020b0:	f8c1 304f 	str.w	r3, [r1, #79]	; 0x4f
 80020b4:	f8c1 3053 	str.w	r3, [r1, #83]	; 0x53
	g_app_command._motor_torque = 0;
 80020b8:	f8c2 3019 	str.w	r3, [r2, #25]
	g_app_command.joint_torque = 0;
 80020bc:	f8c2 5001 	str.w	r5, [r2, #1]
	g_app_command.motor_speed = 0;
 80020c0:	f8c2 500d 	str.w	r5, [r2, #13]
	g_app_command.joint_speed = 0;
 80020c4:	f8c2 5009 	str.w	r5, [r2, #9]
	MC_StopMotor1();
 80020c8:	f000 fdfe 	bl	8002cc8 <MC_StopMotor1>
	g_fsm_status.state = new_state;
 80020cc:	23ff      	movs	r3, #255	; 0xff
 80020ce:	7033      	strb	r3, [r6, #0]
	return true;
 80020d0:	e4f6      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
 80020d2:	bf00      	nop
 80020d4:	20000e74 	.word	0x20000e74
 80020d8:	20000ea4 	.word	0x20000ea4
 80020dc:	20000842 	.word	0x20000842
 80020e0:	20000844 	.word	0x20000844
 80020e4:	20000ee7 	.word	0x20000ee7
 80020e8:	20000e70 	.word	0x20000e70
 80020ec:	20000f26 	.word	0x20000f26
 80020f0:	20000f28 	.word	0x20000f28
 80020f4:	20000f2c 	.word	0x20000f2c
 80020f8:	00a90005 	.word	0x00a90005
 80020fc:	2000001d 	.word	0x2000001d
 8002100:	2000041d 	.word	0x2000041d
 8002104:	20000f14 	.word	0x20000f14
 8002108:	20000820 	.word	0x20000820
 800210c:	20000e6c 	.word	0x20000e6c
 8002110:	20000e6e 	.word	0x20000e6e
 8002114:	20000f24 	.word	0x20000f24
	g_fsm_status.state = new_state;
 8002118:	4bdd      	ldr	r3, [pc, #884]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800211a:	2200      	movs	r2, #0
 800211c:	2102      	movs	r1, #2
 800211e:	f8c3 2043 	str.w	r2, [r3, #67]	; 0x43
 8002122:	f8c3 2047 	str.w	r2, [r3, #71]	; 0x47
 8002126:	f8c3 204b 	str.w	r2, [r3, #75]	; 0x4b
 800212a:	f8c3 204f 	str.w	r2, [r3, #79]	; 0x4f
 800212e:	f8c3 2053 	str.w	r2, [r3, #83]	; 0x53
 8002132:	7031      	strb	r1, [r6, #0]
	g_app_command.motor_torque = 0;
 8002134:	4bd7      	ldr	r3, [pc, #860]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
	g_app_command.joint_torque = 0;
 8002136:	2400      	movs	r4, #0
	g_app_command._motor_torque = 0;
 8002138:	f8c3 4019 	str.w	r4, [r3, #25]
	g_app_command.joint_torque = 0;
 800213c:	f8c3 4001 	str.w	r4, [r3, #1]
	g_app_command.motor_speed = 0;
 8002140:	f8c3 400d 	str.w	r4, [r3, #13]
	g_app_command.joint_speed = 0;
 8002144:	f8c3 4009 	str.w	r4, [r3, #9]
	g_app_command.motor_torque = 0;
 8002148:	f8c3 4005 	str.w	r4, [r3, #5]
	MC_StopMotor1();
 800214c:	f000 fdbc 	bl	8002cc8 <MC_StopMotor1>
}
 8002150:	e4b6      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				MC_AcknowledgeFaultMotor1();
 8002152:	f000 fdd5 	bl	8002d00 <MC_AcknowledgeFaultMotor1>
				g_joint_status.errors = 0;
 8002156:	4ace      	ldr	r2, [pc, #824]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002158:	2100      	movs	r1, #0
	g_fsm_status.state = new_state;
 800215a:	2301      	movs	r3, #1
				g_joint_status.errors = 0;
 800215c:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
	g_fsm_status.state = new_state;
 8002160:	7033      	strb	r3, [r6, #0]
	return true;
 8002162:	e4ad      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
	g_fsm_status.state = new_state;
 8002164:	2301      	movs	r3, #1
 8002166:	7033      	strb	r3, [r6, #0]
	return true;
 8002168:	e4aa      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				switch (g_app_command.working_mode)
 800216a:	4aca      	ldr	r2, [pc, #808]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800216c:	7813      	ldrb	r3, [r2, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	f000 813c 	beq.w	80023ec <HAL_TIM_PeriodElapsedCallback+0xb4c>
 8002174:	2b02      	cmp	r3, #2
 8002176:	f000 81b6 	beq.w	80024e6 <HAL_TIM_PeriodElapsedCallback+0xc46>
				if (g_joint_configuration.working_area_constrain_enabled)
 800217a:	7a62      	ldrb	r2, [r4, #9]
 800217c:	2a00      	cmp	r2, #0
 800217e:	f000 8230 	beq.w	80025e2 <HAL_TIM_PeriodElapsedCallback+0xd42>
					switch (g_joint_status.current_joint_position)
 8002182:	4ac3      	ldr	r2, [pc, #780]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002184:	f992 2000 	ldrsb.w	r2, [r2]
 8002188:	2a00      	cmp	r2, #0
 800218a:	f000 822a 	beq.w	80025e2 <HAL_TIM_PeriodElapsedCallback+0xd42>
 800218e:	2a01      	cmp	r2, #1
 8002190:	d002      	beq.n	8002198 <HAL_TIM_PeriodElapsedCallback+0x8f8>
 8002192:	3201      	adds	r2, #1
 8002194:	f47f ac94 	bne.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				int16_t goal = 0;
 8002198:	2000      	movs	r0, #0
								motor_start(g_app_command.working_mode, goal);
 800219a:	4601      	mov	r1, r0
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fd49 	bl	8002c34 <motor_start>
 80021a2:	e48d      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
	g_fsm_status.state = new_state;
 80021a4:	2302      	movs	r3, #2
 80021a6:	7033      	strb	r3, [r6, #0]
	return true;
 80021a8:	e48a      	b.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
		if (g_joint_configuration.ma730_enabled == true && g_joint_configuration.calibration_state == JOINT_CALIBRATED && g_ma730.started == true)
 80021aa:	f8df 8314 	ldr.w	r8, [pc, #788]	; 80024c0 <HAL_TIM_PeriodElapsedCallback+0xc20>
 80021ae:	f898 3000 	ldrb.w	r3, [r8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f43f abe0 	beq.w	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
			switch (g_joint_status.encoder_position_state)
 80021b8:	4db5      	ldr	r5, [pc, #724]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80021ba:	7868      	ldrb	r0, [r5, #1]
 80021bc:	2800      	cmp	r0, #0
 80021be:	f000 80b6 	beq.w	800232e <HAL_TIM_PeriodElapsedCallback+0xa8e>
 80021c2:	2801      	cmp	r0, #1
 80021c4:	f47f abd8 	bne.w	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
					g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_ma730.angle, g_joint_configuration.calibration_table_1[0]);
 80021c8:	f8b4 100f 	ldrh.w	r1, [r4, #15]
 80021cc:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 80021d0:	f8b8 2001 	ldrh.w	r2, [r8, #1]
					if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 80021d4:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 80024c4 <HAL_TIM_PeriodElapsedCallback+0xc24>
					g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_ma730.angle, g_joint_configuration.calibration_table_1[0]);
 80021d8:	3901      	subs	r1, #1
 80021da:	b289      	uxth	r1, r1
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff f8a3 	bl	8001328 <get_sector_number_from_calibration>
					if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 80021e2:	f9ba 9000 	ldrsh.w	r9, [sl]
					g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_ma730.angle, g_joint_configuration.calibration_table_1[0]);
 80021e6:	4bac      	ldr	r3, [pc, #688]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
					if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 80021e8:	4548      	cmp	r0, r9
					g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_ma730.angle, g_joint_configuration.calibration_table_1[0]);
 80021ea:	4606      	mov	r6, r0
 80021ec:	8018      	strh	r0, [r3, #0]
					if (g_current_sector_number != g_previous_sector_number && g_previous_sector_number != -1 && g_current_sector_number != -1) // pass 1 time, to load previous and current
 80021ee:	f000 80f8 	beq.w	80023e2 <HAL_TIM_PeriodElapsedCallback+0xb42>
 80021f2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80021f6:	f000 80f4 	beq.w	80023e2 <HAL_TIM_PeriodElapsedCallback+0xb42>
 80021fa:	1c42      	adds	r2, r0, #1
 80021fc:	f43f abbc 	beq.w	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
						float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 8002200:	f894 8002 	ldrb.w	r8, [r4, #2]
 8002204:	7860      	ldrb	r0, [r4, #1]
 8002206:	fb00 f008 	mul.w	r0, r0, r8
 800220a:	f7fe f957 	bl	80004bc <__aeabi_i2d>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	a19d      	add	r1, pc, #628	; (adr r1, 8002488 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8002214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002218:	f7fe fae4 	bl	80007e4 <__aeabi_ddiv>
 800221c:	f7fe fbf2 	bl	8000a04 <__aeabi_d2f>
						if (g_current_sector_number - g_previous_sector_number > 0)
 8002220:	eba6 0309 	sub.w	r3, r6, r9
 8002224:	2b00      	cmp	r3, #0
						float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 8002226:	ee08 0a10 	vmov	s16, r0
							l_current_electric_rotation = (g_current_sector_number) * g_joint_configuration.calibration_sector_size;
 800222a:	f8b4 3019 	ldrh.w	r3, [r4, #25]
						int32_t l_diff_electric_position = g_joint_configuration.zero_electric_position - g_joint_status.mc_current_motor_position_multiturn;
 800222e:	f8d5 002e 	ldr.w	r0, [r5, #46]	; 0x2e
 8002232:	f9b4 1011 	ldrsh.w	r1, [r4, #17]
						float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 8002236:	eddf 6a99 	vldr	s13, [pc, #612]	; 800249c <HAL_TIM_PeriodElapsedCallback+0xbfc>
							l_current_electric_rotation = (g_current_sector_number + 1) * g_joint_configuration.calibration_sector_size - 1;
 800223a:	bfdc      	itt	le
 800223c:	1c72      	addle	r2, r6, #1
 800223e:	fb13 f302 	smulbble	r3, r3, r2
						float l_encoder_offset_to_current_in_rad = -1 * ((float) g_joint_status.mc_current_motor_position_multiturn / (ENCODER_M1.PulseNumber / g_joint_configuration.pole_pairs)) * electric_rotation_width;
 8002242:	ee07 0a90 	vmov	s15, r0
 8002246:	4a96      	ldr	r2, [pc, #600]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8002248:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800224c:	f8b2 206e 	ldrh.w	r2, [r2, #110]	; 0x6e
 8002250:	fbb2 f2f8 	udiv	r2, r2, r8
 8002254:	ee07 2a90 	vmov	s15, r2
 8002258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 800225c:	f8b4 2013 	ldrh.w	r2, [r4, #19]
							l_current_electric_rotation = (g_current_sector_number) * g_joint_configuration.calibration_sector_size;
 8002260:	bfcc      	ite	gt
 8002262:	fb13 f306 	smulbbgt	r3, r3, r6
							l_current_electric_rotation = (g_current_sector_number + 1) * g_joint_configuration.calibration_sector_size - 1;
 8002266:	f103 33ff 	addle.w	r3, r3, #4294967295
						int32_t l_diff_electric_position = g_joint_configuration.zero_electric_position - g_joint_status.mc_current_motor_position_multiturn;
 800226a:	1a09      	subs	r1, r1, r0
						float l_encoder_offset_to_current_in_rad = -1 * ((float) g_joint_status.mc_current_motor_position_multiturn / (ENCODER_M1.PulseNumber / g_joint_configuration.pole_pairs)) * electric_rotation_width;
 800226c:	eec6 8a27 	vdiv.f32	s17, s12, s15
							l_current_electric_rotation = (g_current_sector_number + 1) * g_joint_configuration.calibration_sector_size - 1;
 8002270:	b29b      	uxth	r3, r3
						g_joint_status.mc_current_electric_rotation = l_current_electric_rotation;
 8002272:	f8c5 3036 	str.w	r3, [r5, #54]	; 0x36
						float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	ee07 1a90 	vmov	s15, r1
 800227c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_joint_status.f_current_encoder_position_offset = l_electric_offset_to_zero_in_rad + l_encoder_offset_to_current_in_rad;
 8002288:	eef1 8a68 	vneg.f32	s17, s17
						float l_electric_offset_to_zero_in_rad   = -1 * ((g_joint_configuration.zero_electric_rotation - l_current_electric_rotation) + ((float) l_diff_electric_position / 65536) - 1.0) * electric_rotation_width;
 800228c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8002290:	ee17 0a90 	vmov	r0, s15
 8002294:	f7fe f924 	bl	80004e0 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	2000      	movs	r0, #0
 800229e:	4981      	ldr	r1, [pc, #516]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 80022a0:	f7fd ffbe 	bl	8000220 <__aeabi_dsub>
 80022a4:	4680      	mov	r8, r0
 80022a6:	ee18 0a10 	vmov	r0, s16
 80022aa:	4689      	mov	r9, r1
 80022ac:	f7fe f918 	bl	80004e0 <__aeabi_f2d>
 80022b0:	460b      	mov	r3, r1
 80022b2:	4602      	mov	r2, r0
 80022b4:	4649      	mov	r1, r9
 80022b6:	4640      	mov	r0, r8
 80022b8:	f7fe f96a 	bl	8000590 <__aeabi_dmul>
 80022bc:	f7fe fba2 	bl	8000a04 <__aeabi_d2f>
						g_joint_status.f_current_encoder_position_offset = l_electric_offset_to_zero_in_rad + l_encoder_offset_to_current_in_rad;
 80022c0:	ee07 0a90 	vmov	s15, r0
 80022c4:	eee8 7a88 	vfma.f32	s15, s17, s16
						g_joint_status.encoder_position_state = POSITION_ACCURATE;
 80022c8:	2302      	movs	r3, #2
 80022ca:	706b      	strb	r3, [r5, #1]
						g_joint_status.f_current_encoder_position_offset = l_electric_offset_to_zero_in_rad + l_encoder_offset_to_current_in_rad;
 80022cc:	ee17 0a90 	vmov	r0, s15
 80022d0:	f8c5 0002 	str.w	r0, [r5, #2]
						g_previous_sector_number = g_current_sector_number;
 80022d4:	f8aa 6000 	strh.w	r6, [sl]
 80022d8:	f7ff bb4e 	b.w	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
						error = HAL_FLASH_GetError ();
 80022dc:	f004 ff04 	bl	80070e8 <HAL_FLASH_GetError>
				for(int i = 0; i < g_joint_configuration.number_of_sectors; i++ )
 80022e0:	f8b4 300f 	ldrh.w	r3, [r4, #15]
						error = HAL_FLASH_GetError ();
 80022e4:	9003      	str	r0, [sp, #12]
				for(int i = 0; i < g_joint_configuration.number_of_sectors; i++ )
 80022e6:	3501      	adds	r5, #1
 80022e8:	429d      	cmp	r5, r3
 80022ea:	f6ff ad33 	blt.w	8001d54 <HAL_TIM_PeriodElapsedCallback+0x4b4>
 80022ee:	e54f      	b.n	8001d90 <HAL_TIM_PeriodElapsedCallback+0x4f0>
	g_app_command.motor_torque = 0;
 80022f0:	4a68      	ldr	r2, [pc, #416]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 80022f2:	4967      	ldr	r1, [pc, #412]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80022f4:	2300      	movs	r3, #0
	g_app_command.joint_torque = 0;
 80022f6:	461d      	mov	r5, r3
	g_app_command.motor_torque = 0;
 80022f8:	f8c2 3005 	str.w	r3, [r2, #5]
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c1 3043 	str.w	r3, [r1, #67]	; 0x43
 8002302:	f8c1 3047 	str.w	r3, [r1, #71]	; 0x47
 8002306:	f8c1 304b 	str.w	r3, [r1, #75]	; 0x4b
 800230a:	f8c1 304f 	str.w	r3, [r1, #79]	; 0x4f
 800230e:	f8c1 3053 	str.w	r3, [r1, #83]	; 0x53
	g_app_command._motor_torque = 0;
 8002312:	f8c2 3019 	str.w	r3, [r2, #25]
	g_app_command.joint_torque = 0;
 8002316:	f8c2 5001 	str.w	r5, [r2, #1]
	g_app_command.motor_speed = 0;
 800231a:	f8c2 500d 	str.w	r5, [r2, #13]
	g_app_command.joint_speed = 0;
 800231e:	f8c2 5009 	str.w	r5, [r2, #9]
	MC_StopMotor1();
 8002322:	f000 fcd1 	bl	8002cc8 <MC_StopMotor1>
	g_fsm_status.state = new_transition;
 8002326:	230e      	movs	r3, #14
 8002328:	7033      	strb	r3, [r6, #0]
	return true;
 800232a:	f7ff bbc9 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
					g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_ma730.angle, g_joint_configuration.calibration_table_1[0]);
 800232e:	f8b4 100f 	ldrh.w	r1, [r4, #15]
 8002332:	f8b8 2001 	ldrh.w	r2, [r8, #1]
 8002336:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 800233a:	3901      	subs	r1, #1
 800233c:	b289      	uxth	r1, r1
 800233e:	f7fe fff3 	bl	8001328 <get_sector_number_from_calibration>
 8002342:	4b55      	ldr	r3, [pc, #340]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
					if (g_current_sector_number != -1)
 8002344:	f1b0 3fff 	cmp.w	r0, #4294967295
					g_current_sector_number = get_sector_number_from_calibration(0, g_joint_configuration.number_of_sectors - 1, g_ma730.angle, g_joint_configuration.calibration_table_1[0]);
 8002348:	4680      	mov	r8, r0
 800234a:	8018      	strh	r0, [r3, #0]
					if (g_current_sector_number != -1)
 800234c:	f43f ab14 	beq.w	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
						float electric_rotation_width = M_TWOPI / (g_joint_configuration.pole_pairs * g_joint_configuration.gear_ratio);
 8002350:	7863      	ldrb	r3, [r4, #1]
 8002352:	78a0      	ldrb	r0, [r4, #2]
 8002354:	fb00 f003 	mul.w	r0, r0, r3
 8002358:	f7fe f8b0 	bl	80004bc <__aeabi_i2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	a149      	add	r1, pc, #292	; (adr r1, 8002488 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8002362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002366:	f7fe fa3d 	bl	80007e4 <__aeabi_ddiv>
 800236a:	f7fe fb4b 	bl	8000a04 <__aeabi_d2f>
						g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 800236e:	f8b4 2019 	ldrh.w	r2, [r4, #25]
						g_joint_status.f_current_encoder_position_offset = -1 * (g_joint_configuration.zero_electric_rotation - g_current_estimated_electric_rotation) * electric_rotation_width;
 8002372:	f8b4 3013 	ldrh.w	r3, [r4, #19]
						g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 8002376:	494c      	ldr	r1, [pc, #304]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0xc08>)
						g_joint_status.encoder_position_state = POSITION_APROXIMATED;
 8002378:	706e      	strb	r6, [r5, #1]
						g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 800237a:	fb12 f208 	smulbb	r2, r2, r8
 800237e:	b212      	sxth	r2, r2
						g_joint_status.f_current_encoder_position_offset = -1 * (g_joint_configuration.zero_electric_rotation - g_current_estimated_electric_rotation) * electric_rotation_width;
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	ee07 0a10 	vmov	s14, r0
 800238a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_current_estimated_electric_rotation = g_current_sector_number *  g_joint_configuration.calibration_sector_size; // center current sector
 800238e:	800a      	strh	r2, [r1, #0]
						g_joint_status.f_current_encoder_position_offset = -1 * (g_joint_configuration.zero_electric_rotation - g_current_estimated_electric_rotation) * electric_rotation_width;
 8002390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002394:	ee17 3a90 	vmov	r3, s15
 8002398:	f8c5 3002 	str.w	r3, [r5, #2]
						g_joint_status.encoder_position_state = POSITION_APROXIMATED;
 800239c:	f7ff baec 	b.w	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
					g_calibration_state = CALIBRATION_TABLE_CONTAINS_ZEROES;
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0xc0c>)
					g_fsm_status.state = FSM_CALIBRATION_PHASE_2;
 80023a2:	2166      	movs	r1, #102	; 0x66
					g_calibration_state = CALIBRATION_TABLE_CONTAINS_ZEROES;
 80023a4:	2204      	movs	r2, #4
					g_fsm_status.state = FSM_CALIBRATION_PHASE_2;
 80023a6:	7031      	strb	r1, [r6, #0]
					g_calibration_state = CALIBRATION_TABLE_CONTAINS_ZEROES;
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	f7ff bb89 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
				if (g_joint_configuration.ma730_enabled == true && g_ma730.started == false)
 80023ae:	f898 3000 	ldrb.w	r3, [r8]
 80023b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f47f ab82 	bne.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
					HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80023bc:	483c      	ldr	r0, [pc, #240]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0xc10>)
					g_ma730.started = true;
 80023be:	2501      	movs	r5, #1
					HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80023c0:	2104      	movs	r1, #4
					g_ma730.started = true;
 80023c2:	f888 5000 	strb.w	r5, [r8]
					HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80023c6:	f005 f869 	bl	800749c <HAL_GPIO_WritePin>
					HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t * ) &g_spi_tx_data, (uint8_t * ) &g_spi_rx_data, 1);
 80023ca:	462b      	mov	r3, r5
 80023cc:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80023ce:	493a      	ldr	r1, [pc, #232]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80023d0:	483a      	ldr	r0, [pc, #232]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80023d2:	f005 ffa7 	bl	8008324 <HAL_SPI_TransmitReceive_IT>
				if (g_joint_configuration.ma730_enabled == false && g_ma730.started == true)
 80023d6:	7a23      	ldrb	r3, [r4, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f ab71 	bne.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
 80023de:	f7ff bb69 	b.w	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x214>
					if (g_current_sector_number != -1)
 80023e2:	1c73      	adds	r3, r6, #1
 80023e4:	f47f af76 	bne.w	80022d4 <HAL_TIM_PeriodElapsedCallback+0xa34>
 80023e8:	f7ff bac6 	b.w	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
				if (g_joint_configuration.working_area_constrain_enabled)
 80023ec:	7a61      	ldrb	r1, [r4, #9]
						goal = g_app_command._motor_torque;
 80023ee:	f9b2 4019 	ldrsh.w	r4, [r2, #25]
 80023f2:	b220      	sxth	r0, r4
				if (g_joint_configuration.working_area_constrain_enabled)
 80023f4:	2900      	cmp	r1, #0
 80023f6:	f000 80f8 	beq.w	80025ea <HAL_TIM_PeriodElapsedCallback+0xd4a>
					switch (g_joint_status.current_joint_position)
 80023fa:	4925      	ldr	r1, [pc, #148]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80023fc:	f991 1000 	ldrsb.w	r1, [r1]
 8002400:	2900      	cmp	r1, #0
 8002402:	f000 80f2 	beq.w	80025ea <HAL_TIM_PeriodElapsedCallback+0xd4a>
 8002406:	2901      	cmp	r1, #1
 8002408:	f000 80f7 	beq.w	80025fa <HAL_TIM_PeriodElapsedCallback+0xd5a>
 800240c:	3101      	adds	r1, #1
 800240e:	f47f ab57 	bne.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
							if (goal < 0)
 8002412:	2800      	cmp	r0, #0
 8002414:	f6bf aec1 	bge.w	800219a <HAL_TIM_PeriodElapsedCallback+0x8fa>
								motor_stop();
 8002418:	f000 fc2e 	bl	8002c78 <motor_stop>
 800241c:	f7ff bb50 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
			g_app_command._motor_speed = goal;
 8002420:	f04f 0900 	mov.w	r9, #0
	g_app_command.working_mode = mode;
 8002424:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002494 <HAL_TIM_PeriodElapsedCallback+0xbf4>
 8002428:	2202      	movs	r2, #2
					g_fsm_status.state = FSM_CALIBRATION_PHASE_6;
 800242a:	236a      	movs	r3, #106	; 0x6a
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 800242c:	4649      	mov	r1, r9
 800242e:	4648      	mov	r0, r9
	g_app_command.working_mode = mode;
 8002430:	f888 2000 	strb.w	r2, [r8]
					g_fsm_status.state = FSM_CALIBRATION_PHASE_6;
 8002434:	7033      	strb	r3, [r6, #0]
			g_app_command._motor_speed = goal;
 8002436:	f888 901b 	strb.w	r9, [r8, #27]
 800243a:	f888 901c 	strb.w	r9, [r8, #28]
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 800243e:	f000 fc49 	bl	8002cd4 <MC_ProgramSpeedRampMotor1>
			MC_StartMotor1();
 8002442:	f000 fc3b 	bl	8002cbc <MC_StartMotor1>
	g_app_command.motor_torque = 0;
 8002446:	2000      	movs	r0, #0
 8002448:	f8c5 9043 	str.w	r9, [r5, #67]	; 0x43
 800244c:	f8c5 9047 	str.w	r9, [r5, #71]	; 0x47
 8002450:	f8c5 904b 	str.w	r9, [r5, #75]	; 0x4b
 8002454:	f8c5 904f 	str.w	r9, [r5, #79]	; 0x4f
 8002458:	f8c5 9053 	str.w	r9, [r5, #83]	; 0x53
	g_app_command._motor_torque = 0;
 800245c:	f8c8 9019 	str.w	r9, [r8, #25]
	g_app_command.motor_torque = 0;
 8002460:	f8c8 0005 	str.w	r0, [r8, #5]
	g_app_command.joint_torque = 0;
 8002464:	f8c8 0001 	str.w	r0, [r8, #1]
	g_app_command.motor_speed = 0;
 8002468:	f8c8 000d 	str.w	r0, [r8, #13]
	g_app_command.joint_speed = 0;
 800246c:	f8c8 0009 	str.w	r0, [r8, #9]
	MC_StopMotor1();
 8002470:	f000 fc2a 	bl	8002cc8 <MC_StopMotor1>
					g_joint_configuration.zero_electric_rotation = g_joint_status.mc_current_electric_rotation;
 8002474:	f8d5 2036 	ldr.w	r2, [r5, #54]	; 0x36
					g_joint_configuration.zero_electric_position = (int16_t) (g_joint_status.mc_current_electric_position);
 8002478:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
					g_joint_configuration.zero_electric_rotation = g_joint_status.mc_current_electric_rotation;
 800247a:	f8a4 2013 	strh.w	r2, [r4, #19]
					g_joint_configuration.zero_electric_position = (int16_t) (g_joint_status.mc_current_electric_position);
 800247e:	f8a4 3011 	strh.w	r3, [r4, #17]
 8002482:	e4bc      	b.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x55e>
 8002484:	f3af 8000 	nop.w
 8002488:	54442d18 	.word	0x54442d18
 800248c:	401921fb 	.word	0x401921fb
 8002490:	20000ea4 	.word	0x20000ea4
 8002494:	20000820 	.word	0x20000820
 8002498:	20000848 	.word	0x20000848
 800249c:	37800000 	.word	0x37800000
 80024a0:	2000090c 	.word	0x2000090c
 80024a4:	3ff00000 	.word	0x3ff00000
 80024a8:	20000846 	.word	0x20000846
 80024ac:	20000e70 	.word	0x20000e70
 80024b0:	48000400 	.word	0x48000400
 80024b4:	20000f30 	.word	0x20000f30
 80024b8:	20000f32 	.word	0x20000f32
 80024bc:	20001254 	.word	0x20001254
 80024c0:	20000f14 	.word	0x20000f14
 80024c4:	20000854 	.word	0x20000854
						g_joint_configuration.calibration_table_2[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] == 0)
 80024c8:	f501 7303 	add.w	r3, r1, #524	; 0x20c
 80024cc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				if (g_joint_status.mc_current_electric_rotation % g_joint_configuration.calibration_sector_size == (g_joint_configuration.calibration_sector_size - 1) &&
 80024d0:	f8b3 2005 	ldrh.w	r2, [r3, #5]
 80024d4:	2a00      	cmp	r2, #0
 80024d6:	f47f ada9 	bne.w	800202c <HAL_TIM_PeriodElapsedCallback+0x78c>
					g_joint_configuration.calibration_table_2[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_ma730.angle;
 80024da:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80024dc:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80024e0:	f8a3 2005 	strh.w	r2, [r3, #5]
 80024e4:	e5a2      	b.n	800202c <HAL_TIM_PeriodElapsedCallback+0x78c>
				if (g_joint_configuration.working_area_constrain_enabled)
 80024e6:	7a61      	ldrb	r1, [r4, #9]
						goal = g_app_command._motor_speed;
 80024e8:	f9b2 401b 	ldrsh.w	r4, [r2, #27]
 80024ec:	b220      	sxth	r0, r4
				if (g_joint_configuration.working_area_constrain_enabled)
 80024ee:	b121      	cbz	r1, 80024fa <HAL_TIM_PeriodElapsedCallback+0xc5a>
					switch (g_joint_status.current_joint_position)
 80024f0:	4945      	ldr	r1, [pc, #276]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 80024f2:	f991 1000 	ldrsb.w	r1, [r1]
 80024f6:	2900      	cmp	r1, #0
 80024f8:	d185      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0xb66>
			g_app_command._motor_speed = goal;
 80024fa:	f8a2 401b 	strh.w	r4, [r2, #27]
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 80024fe:	f000 fbe9 	bl	8002cd4 <MC_ProgramSpeedRampMotor1>
			MC_StartMotor1();
 8002502:	f000 fbdb 	bl	8002cbc <MC_StartMotor1>
			break;
 8002506:	f7ff badb 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
					error = HAL_FLASH_GetError ();
 800250a:	f004 fded 	bl	80070e8 <HAL_FLASH_GetError>
 800250e:	9003      	str	r0, [sp, #12]
 8002510:	f7ff bbf1 	b.w	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x456>
					error = HAL_FLASH_GetError ();
 8002514:	f004 fde8 	bl	80070e8 <HAL_FLASH_GetError>
 8002518:	9003      	str	r0, [sp, #12]
 800251a:	f7ff bbe0 	b.w	8001cde <HAL_TIM_PeriodElapsedCallback+0x43e>
					error = HAL_FLASH_GetError ();
 800251e:	f004 fde3 	bl	80070e8 <HAL_FLASH_GetError>
 8002522:	9003      	str	r0, [sp, #12]
 8002524:	e405      	b.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0x492>
					error = HAL_FLASH_GetError ();
 8002526:	f004 fddf 	bl	80070e8 <HAL_FLASH_GetError>
 800252a:	9003      	str	r0, [sp, #12]
 800252c:	f7ff bbf2 	b.w	8001d14 <HAL_TIM_PeriodElapsedCallback+0x474>
					error = HAL_FLASH_GetError ();
 8002530:	f004 fdda 	bl	80070e8 <HAL_FLASH_GetError>
 8002534:	9003      	str	r0, [sp, #12]
 8002536:	e407      	b.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x4a8>
	g_app_command.motor_torque = 0;
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 800253a:	2500      	movs	r5, #0
	g_app_command.joint_torque = 0;
 800253c:	4628      	mov	r0, r5
	g_app_command.motor_torque = 0;
 800253e:	f8c3 5005 	str.w	r5, [r3, #5]
 8002542:	2500      	movs	r5, #0
	g_app_command._motor_torque = 0;
 8002544:	f8c3 5019 	str.w	r5, [r3, #25]
 8002548:	f8c4 5043 	str.w	r5, [r4, #67]	; 0x43
 800254c:	f8c4 5047 	str.w	r5, [r4, #71]	; 0x47
 8002550:	f8c4 504b 	str.w	r5, [r4, #75]	; 0x4b
 8002554:	f8c4 504f 	str.w	r5, [r4, #79]	; 0x4f
 8002558:	f8c4 5053 	str.w	r5, [r4, #83]	; 0x53
	g_app_command.joint_torque = 0;
 800255c:	f8c3 0001 	str.w	r0, [r3, #1]
	g_app_command.motor_speed = 0;
 8002560:	f8c3 000d 	str.w	r0, [r3, #13]
	g_app_command.joint_speed = 0;
 8002564:	f8c3 0009 	str.w	r0, [r3, #9]
	MC_StopMotor1();
 8002568:	f000 fbae 	bl	8002cc8 <MC_StopMotor1>
					g_min_encoder_position = g_joint_status.mc_current_motor_position_multiturn; // encoder value
 800256c:	4a28      	ldr	r2, [pc, #160]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0xd70>)
 800256e:	f8d4 102e 	ldr.w	r1, [r4, #46]	; 0x2e
					g_joint_status.mc_current_electric_rotation = 0; // zeroing electric rotation counter
 8002572:	86e5      	strh	r5, [r4, #54]	; 0x36
					g_fsm_status.state = FSM_CALIBRATION_PHASE_2;
 8002574:	2366      	movs	r3, #102	; 0x66
					g_joint_status.mc_current_electric_rotation = 0; // zeroing electric rotation counter
 8002576:	8725      	strh	r5, [r4, #56]	; 0x38
					g_min_encoder_position = g_joint_status.mc_current_motor_position_multiturn; // encoder value
 8002578:	6011      	str	r1, [r2, #0]
					g_fsm_status.state = FSM_CALIBRATION_PHASE_2;
 800257a:	7033      	strb	r3, [r6, #0]
 800257c:	f7ff baa0 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
	g_app_command.motor_torque = 0;
 8002580:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8002582:	4924      	ldr	r1, [pc, #144]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xd74>)
 8002584:	2300      	movs	r3, #0
	g_app_command.joint_torque = 0;
 8002586:	469c      	mov	ip, r3
	g_app_command.motor_torque = 0;
 8002588:	f8c2 3005 	str.w	r3, [r2, #5]
 800258c:	2300      	movs	r3, #0
 800258e:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
	g_app_command._motor_torque = 0;
 8002592:	f8c2 3019 	str.w	r3, [r2, #25]
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	608b      	str	r3, [r1, #8]
 800259a:	60cb      	str	r3, [r1, #12]
 800259c:	610b      	str	r3, [r1, #16]
	g_app_command.joint_torque = 0;
 800259e:	f8c2 c001 	str.w	ip, [r2, #1]
	g_app_command.motor_speed = 0;
 80025a2:	f8c2 c00d 	str.w	ip, [r2, #13]
	g_app_command.joint_speed = 0;
 80025a6:	f8c2 c009 	str.w	ip, [r2, #9]
	MC_StopMotor1();
 80025aa:	f000 fb8d 	bl	8002cc8 <MC_StopMotor1>
					g_joint_configuration.calibration_table_2[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_ma730.angle;
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0xd64>)
 80025b0:	f8d5 2036 	ldr.w	r2, [r5, #54]	; 0x36
					g_max_encoder_position = g_joint_status.mc_current_motor_position_multiturn; // max encoder value
 80025b4:	f8d5 002e 	ldr.w	r0, [r5, #46]	; 0x2e
					g_max_electric_rotation_cw 	= g_joint_status.mc_current_electric_rotation; // max electric rotation counter
 80025b8:	f8df c060 	ldr.w	ip, [pc, #96]	; 800261c <HAL_TIM_PeriodElapsedCallback+0xd7c>
					g_joint_configuration.calibration_table_2[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_ma730.angle;
 80025bc:	f8b3 5001 	ldrh.w	r5, [r3, #1]
					g_max_encoder_position = g_joint_status.mc_current_motor_position_multiturn; // max encoder value
 80025c0:	4915      	ldr	r1, [pc, #84]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0xd78>)
					g_joint_configuration.calibration_table_2[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_ma730.angle;
 80025c2:	f8b4 3019 	ldrh.w	r3, [r4, #25]
 80025c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80025ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					g_max_electric_rotation_cw 	= g_joint_status.mc_current_electric_rotation; // max electric rotation counter
 80025ce:	b212      	sxth	r2, r2
					g_fsm_status.state = FSM_CALIBRATION_PHASE_3;
 80025d0:	2367      	movs	r3, #103	; 0x67
					g_max_electric_rotation_cw 	= g_joint_status.mc_current_electric_rotation; // max electric rotation counter
 80025d2:	f8ac 2000 	strh.w	r2, [ip]
					g_joint_configuration.calibration_table_2[g_joint_status.mc_current_electric_rotation / g_joint_configuration.calibration_sector_size] = g_ma730.angle;
 80025d6:	f8a4 541d 	strh.w	r5, [r4, #1053]	; 0x41d
					g_max_encoder_position = g_joint_status.mc_current_motor_position_multiturn; // max encoder value
 80025da:	6008      	str	r0, [r1, #0]
					g_fsm_status.state = FSM_CALIBRATION_PHASE_3;
 80025dc:	7033      	strb	r3, [r6, #0]
 80025de:	f7ff ba6f 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
			MC_StopMotor1();
 80025e2:	f000 fb71 	bl	8002cc8 <MC_StopMotor1>
 80025e6:	f7ff ba6b 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
			g_app_command._motor_torque = goal;
 80025ea:	f8a2 4019 	strh.w	r4, [r2, #25]
			MC_ProgramTorqueRampMotor1(g_app_command._motor_torque, 0);
 80025ee:	f000 fb79 	bl	8002ce4 <MC_ProgramTorqueRampMotor1>
			MC_StartMotor1();
 80025f2:	f000 fb63 	bl	8002cbc <MC_StartMotor1>
}
 80025f6:	f7ff ba63 	b.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x220>
							if (goal > 0)
 80025fa:	2800      	cmp	r0, #0
 80025fc:	f73f af0c 	bgt.w	8002418 <HAL_TIM_PeriodElapsedCallback+0xb78>
 8002600:	e5cb      	b.n	800219a <HAL_TIM_PeriodElapsedCallback+0x8fa>
 8002602:	bf00      	nop
 8002604:	20000f14 	.word	0x20000f14
 8002608:	20000ea4 	.word	0x20000ea4
 800260c:	20000820 	.word	0x20000820
 8002610:	20000f2c 	.word	0x20000f2c
 8002614:	20000ee7 	.word	0x20000ee7
 8002618:	20000f28 	.word	0x20000f28
 800261c:	20000f26 	.word	0x20000f26

08002620 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8002620:	07cb      	lsls	r3, r1, #31
 8002622:	d400      	bmi.n	8002626 <HAL_FDCAN_RxFifo0Callback+0x6>
 8002624:	4770      	bx	lr
{
 8002626:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
		HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &can_rx_header, can_rx_data);
 800262a:	4e9b      	ldr	r6, [pc, #620]	; (8002898 <HAL_FDCAN_RxFifo0Callback+0x278>)
 800262c:	4b9b      	ldr	r3, [pc, #620]	; (800289c <HAL_FDCAN_RxFifo0Callback+0x27c>)
		can_tx_header.Identifier = can_rx_header.Identifier | g_joint_configuration.can_node_id | 0x01 << 9;
 800262e:	4c9c      	ldr	r4, [pc, #624]	; (80028a0 <HAL_FDCAN_RxFifo0Callback+0x280>)
		g_counters.can_rx_counter++;
 8002630:	f8df 928c 	ldr.w	r9, [pc, #652]	; 80028c0 <HAL_FDCAN_RxFifo0Callback+0x2a0>
		HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &can_rx_header, can_rx_data);
 8002634:	4632      	mov	r2, r6
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	4605      	mov	r5, r0
 800263a:	f004 fabb 	bl	8006bb4 <HAL_FDCAN_GetRxMessage>
		can_tx_header.Identifier = can_rx_header.Identifier | g_joint_configuration.can_node_id | 0x01 << 9;
 800263e:	f8df c284 	ldr.w	ip, [pc, #644]	; 80028c4 <HAL_FDCAN_RxFifo0Callback+0x2a4>
		uint8_t l_cmd 	= (can_rx_header.Identifier & 0x0F0) >> 4; // Ustalenie polecenie
 8002642:	6833      	ldr	r3, [r6, #0]
		can_tx_header.Identifier = can_rx_header.Identifier | g_joint_configuration.can_node_id | 0x01 << 9;
 8002644:	f89c 2000 	ldrb.w	r2, [ip]
		g_counters.can_rx_counter++;
 8002648:	f8d9 000c 	ldr.w	r0, [r9, #12]
		can_tx_header.Identifier = can_rx_header.Identifier | g_joint_configuration.can_node_id | 0x01 << 9;
 800264c:	ea42 0103 	orr.w	r1, r2, r3
 8002650:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002654:	6021      	str	r1, [r4, #0]
		can_tx_header.DataLength = FDCAN_DLC_BYTES_12;
 8002656:	f44f 2110 	mov.w	r1, #589824	; 0x90000
		uint8_t numer_w_szeregu = 0;
 800265a:	f413 7f80 	tst.w	r3, #256	; 0x100
		can_tx_header.DataLength = FDCAN_DLC_BYTES_12;
 800265e:	60e1      	str	r1, [r4, #12]
		uint8_t l_cmd 	= (can_rx_header.Identifier & 0x0F0) >> 4; // Ustalenie polecenie
 8002660:	f3c3 1303 	ubfx	r3, r3, #4, #4
		can_tx_header.FDFormat = FDCAN_FD_CAN;
 8002664:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002668:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 800266c:	e9c4 e105 	strd	lr, r1, [r4, #20]
		g_counters.can_rx_counter++;
 8002670:	f100 0001 	add.w	r0, r0, #1
		can_tx_header.IdType = FDCAN_STANDARD_ID;
 8002674:	f04f 0100 	mov.w	r1, #0
		uint8_t numer_w_szeregu = 0;
 8002678:	bf18      	it	ne
 800267a:	2200      	movne	r2, #0
		switch (l_cmd) {
 800267c:	2b01      	cmp	r3, #1
		can_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 800267e:	e9c4 1101 	strd	r1, r1, [r4, #4]
		can_tx_header.MessageMarker = 0;
 8002682:	e9c4 1107 	strd	r1, r1, [r4, #28]
		g_counters.can_rx_counter++;
 8002686:	f8c9 000c 	str.w	r0, [r9, #12]
		can_tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800268a:	6121      	str	r1, [r4, #16]
		switch (l_cmd) {
 800268c:	d01a      	beq.n	80026c4 <HAL_FDCAN_RxFifo0Callback+0xa4>
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f000 80cd 	beq.w	800282e <HAL_FDCAN_RxFifo0Callback+0x20e>
 8002694:	b383      	cbz	r3, 80026f8 <HAL_FDCAN_RxFifo0Callback+0xd8>
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 8002696:	4a83      	ldr	r2, [pc, #524]	; (80028a4 <HAL_FDCAN_RxFifo0Callback+0x284>)
 8002698:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800289c <HAL_FDCAN_RxFifo0Callback+0x27c>
 800269c:	4621      	mov	r1, r4
 800269e:	4628      	mov	r0, r5
 80026a0:	4616      	mov	r6, r2
 80026a2:	f004 fa1f 	bl	8006ae4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80026a6:	2300      	movs	r3, #0
 80026a8:	e9c6 3300 	strd	r3, r3, [r6]
 80026ac:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80026b0:	e9c6 3304 	strd	r3, r3, [r6, #16]
 80026b4:	e9c8 3300 	strd	r3, r3, [r8]
 80026b8:	e9c8 3302 	strd	r3, r3, [r8, #8]
 80026bc:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 80026c0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
				FSM_Set_State(can_rx_data[offset]);
 80026c4:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800289c <HAL_FDCAN_RxFifo0Callback+0x27c>
				can_tx_data[0] = FSM_Get_State();
 80026c8:	4e76      	ldr	r6, [pc, #472]	; (80028a4 <HAL_FDCAN_RxFifo0Callback+0x284>)
				FSM_Set_State(can_rx_data[offset]);
 80026ca:	f818 0002 	ldrb.w	r0, [r8, r2]
 80026ce:	f000 f8fd 	bl	80028cc <FSM_Set_State>
	return g_fsm_status.state;
 80026d2:	4b75      	ldr	r3, [pc, #468]	; (80028a8 <HAL_FDCAN_RxFifo0Callback+0x288>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
				can_tx_data[0] = FSM_Get_State();
 80026d6:	7033      	strb	r3, [r6, #0]
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 80026d8:	4628      	mov	r0, r5
				can_tx_header.DataLength = FDCAN_DLC_BYTES_1;
 80026da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 80026de:	4632      	mov	r2, r6
 80026e0:	4621      	mov	r1, r4
				can_tx_header.DataLength = FDCAN_DLC_BYTES_1;
 80026e2:	60e3      	str	r3, [r4, #12]
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 80026e4:	f004 f9fe 	bl	8006ae4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d1dc      	bne.n	80026a6 <HAL_FDCAN_RxFifo0Callback+0x86>
			g_counters.can_tx_counter++;
 80026ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80026f0:	3301      	adds	r3, #1
 80026f2:	f8c9 3010 	str.w	r3, [r9, #16]
 80026f6:	e7d6      	b.n	80026a6 <HAL_FDCAN_RxFifo0Callback+0x86>
				goal += can_rx_data[offset + 1];
 80026f8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800289c <HAL_FDCAN_RxFifo0Callback+0x27c>
				g_app_command.joint_torque = ((float) goal * MAX_TORQUE_THROUGH_CAN) / (float) INT16_MAX; // convert from int16 to float
 80026fc:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80028ac <HAL_FDCAN_RxFifo0Callback+0x28c>
				g_app_command._motor_torque	= (((float) g_app_command.motor_torque) * INT16_MAX) / (MAX_READABLE_CURRENT * KT);  // convert from float to s16A
 8002700:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80028b0 <HAL_FDCAN_RxFifo0Callback+0x290>
				g_app_command.joint_torque = ((float) goal * MAX_TORQUE_THROUGH_CAN) / (float) INT16_MAX; // convert from int16 to float
 8002704:	4e6b      	ldr	r6, [pc, #428]	; (80028b4 <HAL_FDCAN_RxFifo0Callback+0x294>)
				int32_t l_joint_position_in_s32degree = (int32_t) (g_joint_status.f_current_joint_position * (UINT32_MAX / M_TWOPI));
 8002706:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 80028c8 <HAL_FDCAN_RxFifo0Callback+0x2a8>
				uint8_t offset = dlugosc_danych_polecenia * numer_w_szeregu;
 800270a:	0053      	lsls	r3, r2, #1
				goal  = can_rx_data[offset] << 8;
 800270c:	b2db      	uxtb	r3, r3
				g_app_command.motor_torque = g_app_command.joint_torque / g_joint_configuration.gear_ratio;
 800270e:	f89c 2001 	ldrb.w	r2, [ip, #1]
				goal += can_rx_data[offset + 1];
 8002712:	eb08 0103 	add.w	r1, r8, r3
				g_app_command.motor_torque = g_app_command.joint_torque / g_joint_configuration.gear_ratio;
 8002716:	ee06 2a10 	vmov	s12, r2
				goal  = can_rx_data[offset] << 8;
 800271a:	f818 2003 	ldrb.w	r2, [r8, r3]
				goal += can_rx_data[offset + 1];
 800271e:	784b      	ldrb	r3, [r1, #1]
 8002720:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				g_app_command.joint_torque = ((float) goal * MAX_TORQUE_THROUGH_CAN) / (float) INT16_MAX; // convert from int16 to float
 8002724:	b21b      	sxth	r3, r3
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				g_app_command.motor_torque = g_app_command.joint_torque / g_joint_configuration.gear_ratio;
 800272e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
				g_app_command.joint_torque = ((float) goal * MAX_TORQUE_THROUGH_CAN) / (float) INT16_MAX; // convert from int16 to float
 8002732:	ee67 7aa6 	vmul.f32	s15, s15, s13
				g_app_command.motor_torque = g_app_command.joint_torque / g_joint_configuration.gear_ratio;
 8002736:	eec7 6a86 	vdiv.f32	s13, s15, s12
				g_app_command.joint_torque = ((float) goal * MAX_TORQUE_THROUGH_CAN) / (float) INT16_MAX; // convert from int16 to float
 800273a:	ee17 3a90 	vmov	r3, s15
				g_app_command._motor_torque	= (((float) g_app_command.motor_torque) * INT16_MAX) / (MAX_READABLE_CURRENT * KT);  // convert from float to s16A
 800273e:	ee66 7a87 	vmul.f32	s15, s13, s14
				g_app_command.motor_torque = g_app_command.joint_torque / g_joint_configuration.gear_ratio;
 8002742:	ee16 2a90 	vmov	r2, s13
				g_app_command._motor_torque	= (((float) g_app_command.motor_torque) * INT16_MAX) / (MAX_READABLE_CURRENT * KT);  // convert from float to s16A
 8002746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				g_app_command.joint_torque = ((float) goal * MAX_TORQUE_THROUGH_CAN) / (float) INT16_MAX; // convert from int16 to float
 800274a:	f8c6 3001 	str.w	r3, [r6, #1]
				g_app_command._motor_torque	= (((float) g_app_command.motor_torque) * INT16_MAX) / (MAX_READABLE_CURRENT * KT);  // convert from float to s16A
 800274e:	ee17 3a90 	vmov	r3, s15
				g_app_command.motor_torque = g_app_command.joint_torque / g_joint_configuration.gear_ratio;
 8002752:	f8c6 2005 	str.w	r2, [r6, #5]
				g_app_command._motor_torque	= (((float) g_app_command.motor_torque) * INT16_MAX) / (MAX_READABLE_CURRENT * KT);  // convert from float to s16A
 8002756:	f8a6 3019 	strh.w	r3, [r6, #25]
				Update_Data_From_MC();
 800275a:	f7fe feb9 	bl	80014d0 <Update_Data_From_MC>
				int32_t l_joint_position_in_s32degree = (int32_t) (g_joint_status.f_current_joint_position * (UINT32_MAX / M_TWOPI));
 800275e:	f8da 000a 	ldr.w	r0, [sl, #10]
 8002762:	f7fd febd 	bl	80004e0 <__aeabi_f2d>
 8002766:	a348      	add	r3, pc, #288	; (adr r3, 8002888 <HAL_FDCAN_RxFifo0Callback+0x268>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fd ff10 	bl	8000590 <__aeabi_dmul>
 8002770:	f7fe f920 	bl	80009b4 <__aeabi_d2iz>
 8002774:	4683      	mov	fp, r0
				int16_t l_speed_in_dpp = g_joint_status.f_current_joint_speed * (float) INT16_MAX / M_TWOPI;
 8002776:	f8da 0012 	ldr.w	r0, [sl, #18]
 800277a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80028b8 <HAL_FDCAN_RxFifo0Callback+0x298>
 800277e:	ee07 0a10 	vmov	s14, r0
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	fa9b fb8b 	rev.w	fp, fp
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd fea7 	bl	80004e0 <__aeabi_f2d>
 8002792:	a33f      	add	r3, pc, #252	; (adr r3, 8002890 <HAL_FDCAN_RxFifo0Callback+0x270>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd fefa 	bl	8000590 <__aeabi_dmul>
 800279c:	f7fe f90a 	bl	80009b4 <__aeabi_d2iz>
				int16_t l_current_torque_in_s16a = (g_joint_status.f_current_joint_torque / MAX_TORQUE_THROUGH_CAN) * (float) INT16_MAX;
 80027a0:	f8da 301a 	ldr.w	r3, [sl, #26]
 80027a4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80028bc <HAL_FDCAN_RxFifo0Callback+0x29c>
				if (g_app_command.motor_torque < 0)
 80027a8:	f8d6 1005 	ldr.w	r1, [r6, #5]
	return g_fsm_status.state;
 80027ac:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80028a8 <HAL_FDCAN_RxFifo0Callback+0x288>
				can_tx_data[0] 	= l_joint_position_in_s32degree >> 24;
 80027b0:	4e3c      	ldr	r6, [pc, #240]	; (80028a4 <HAL_FDCAN_RxFifo0Callback+0x284>)
				can_tx_data[10]	= g_joint_status.mc_current_faults_motor;
 80027b2:	f89a e041 	ldrb.w	lr, [sl, #65]	; 0x41
	return g_fsm_status.state;
 80027b6:	f89c c000 	ldrb.w	ip, [ip]
				int16_t l_current_torque_in_s16a = (g_joint_status.f_current_joint_torque / MAX_TORQUE_THROUGH_CAN) * (float) INT16_MAX;
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	ee67 7a87 	vmul.f32	s15, s15, s14
				int16_t l_speed_in_dpp = g_joint_status.f_current_joint_speed * (float) INT16_MAX / M_TWOPI;
 80027c2:	b200      	sxth	r0, r0
				int16_t l_current_torque_in_s16a = (g_joint_status.f_current_joint_torque / MAX_TORQUE_THROUGH_CAN) * (float) INT16_MAX;
 80027c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				can_tx_data[4] 	= l_speed_in_dpp >> 8;
 80027c8:	ba42      	rev16	r2, r0
				int16_t l_current_torque_in_s16a = (g_joint_status.f_current_joint_torque / MAX_TORQUE_THROUGH_CAN) * (float) INT16_MAX;
 80027ca:	ee17 3a90 	vmov	r3, s15
				if (g_app_command.motor_torque < 0)
 80027ce:	ee07 1a90 	vmov	s15, r1
				can_tx_data[8] 	= (uint8_t) g_joint_status.f_current_motor_temperature; // temp FIXME
 80027d2:	f8da 101e 	ldr.w	r1, [sl, #30]
				can_tx_data[4] 	= l_speed_in_dpp >> 8;
 80027d6:	80b2      	strh	r2, [r6, #4]
				if (g_app_command.motor_torque < 0)
 80027d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
				can_tx_data[8] 	= (uint8_t) g_joint_status.f_current_motor_temperature; // temp FIXME
 80027dc:	ee07 1a90 	vmov	s15, r1
				int16_t l_current_torque_in_s16a = (g_joint_status.f_current_joint_torque / MAX_TORQUE_THROUGH_CAN) * (float) INT16_MAX;
 80027e0:	b21b      	sxth	r3, r3
				if (g_app_command.motor_torque < 0)
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				can_tx_data[8] 	= (uint8_t) g_joint_status.f_current_motor_temperature; // temp FIXME
 80027e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
					l_current_torque_in_s16a = -l_current_torque_in_s16a;
 80027ea:	bf48      	it	mi
 80027ec:	425b      	negmi	r3, r3
				can_tx_data[8] 	= (uint8_t) g_joint_status.f_current_motor_temperature; // temp FIXME
 80027ee:	ee17 1a90 	vmov	r1, s15
					l_current_torque_in_s16a = -l_current_torque_in_s16a;
 80027f2:	bf48      	it	mi
 80027f4:	b21b      	sxthmi	r3, r3
				can_tx_data[6] 	= l_current_torque_in_s16a >> 8;
 80027f6:	ba5b      	rev16	r3, r3
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 80027f8:	4628      	mov	r0, r5
				can_tx_data[11] = g_joint_status.mc_occured_faults_motor;
 80027fa:	f89a 5042 	ldrb.w	r5, [sl, #66]	; 0x42
				can_tx_data[12] = g_joint_status.errors;
 80027fe:	f8ba a03e 	ldrh.w	sl, [sl, #62]	; 0x3e
				can_tx_data[6] 	= l_current_torque_in_s16a >> 8;
 8002802:	80f3      	strh	r3, [r6, #6]
				can_tx_data[8] 	= (uint8_t) g_joint_status.f_current_motor_temperature; // temp FIXME
 8002804:	7231      	strb	r1, [r6, #8]
				can_tx_header.DataLength = FDCAN_DLC_BYTES_16;
 8002806:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 800280a:	4925      	ldr	r1, [pc, #148]	; (80028a0 <HAL_FDCAN_RxFifo0Callback+0x280>)
				can_tx_data[0] 	= l_joint_position_in_s32degree >> 24;
 800280c:	f8c6 b000 	str.w	fp, [r6]
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 8002810:	4632      	mov	r2, r6
				can_tx_data[12] = g_joint_status.errors;
 8002812:	f8a6 a00c 	strh.w	sl, [r6, #12]
				can_tx_data[9] 	= FSM_Get_State(); // FSM
 8002816:	f886 c009 	strb.w	ip, [r6, #9]
				can_tx_data[10]	= g_joint_status.mc_current_faults_motor;
 800281a:	f886 e00a 	strb.w	lr, [r6, #10]
				can_tx_data[11] = g_joint_status.mc_occured_faults_motor;
 800281e:	72f5      	strb	r5, [r6, #11]
				can_tx_header.DataLength = FDCAN_DLC_BYTES_16;
 8002820:	60e3      	str	r3, [r4, #12]
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 8002822:	f004 f95f 	bl	8006ae4 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002826:	2800      	cmp	r0, #0
 8002828:	f47f af3d 	bne.w	80026a6 <HAL_FDCAN_RxFifo0Callback+0x86>
 800282c:	e75e      	b.n	80026ec <HAL_FDCAN_RxFifo0Callback+0xcc>
	return g_fsm_status.state;
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_FDCAN_RxFifo0Callback+0x288>)
 8002830:	781b      	ldrb	r3, [r3, #0]
				if (FSM_Get_State() == FSM_INIT) {
 8002832:	2b01      	cmp	r3, #1
	return g_fsm_status.state;
 8002834:	b2d8      	uxtb	r0, r3
				if (FSM_Get_State() == FSM_INIT) {
 8002836:	d00f      	beq.n	8002858 <HAL_FDCAN_RxFifo0Callback+0x238>
					can_tx_data[0] = 0;
 8002838:	4e1a      	ldr	r6, [pc, #104]	; (80028a4 <HAL_FDCAN_RxFifo0Callback+0x284>)
 800283a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800289c <HAL_FDCAN_RxFifo0Callback+0x27c>
 800283e:	7031      	strb	r1, [r6, #0]
				can_tx_header.DataLength = FDCAN_DLC_BYTES_1;
 8002840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 8002844:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <HAL_FDCAN_RxFifo0Callback+0x284>)
 8002846:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_FDCAN_RxFifo0Callback+0x280>)
				can_tx_header.DataLength = FDCAN_DLC_BYTES_1;
 8002848:	60e3      	str	r3, [r4, #12]
		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &can_tx_header, can_tx_data) == HAL_OK && l_send_response)
 800284a:	4628      	mov	r0, r5
 800284c:	f004 f94a 	bl	8006ae4 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002850:	2800      	cmp	r0, #0
 8002852:	f43f af4b 	beq.w	80026ec <HAL_FDCAN_RxFifo0Callback+0xcc>
 8002856:	e726      	b.n	80026a6 <HAL_FDCAN_RxFifo0Callback+0x86>
					g_app_command.working_mode = can_rx_data[offset];
 8002858:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800289c <HAL_FDCAN_RxFifo0Callback+0x27c>
					can_tx_data[0] = 1;
 800285c:	4e11      	ldr	r6, [pc, #68]	; (80028a4 <HAL_FDCAN_RxFifo0Callback+0x284>)
				uint8_t offset = dlugosc_danych_polecenia * numer_w_szeregu;
 800285e:	0053      	lsls	r3, r2, #1
					g_app_command.working_mode = can_rx_data[offset];
 8002860:	b2db      	uxtb	r3, r3
					g_joint_configuration.working_area_constrain_enabled = (can_rx_data[offset + 1] & 0x01);
 8002862:	eb08 0e03 	add.w	lr, r8, r3
					g_app_command.working_mode = can_rx_data[offset];
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_FDCAN_RxFifo0Callback+0x294>)
 8002868:	f818 1003 	ldrb.w	r1, [r8, r3]
					g_joint_configuration.working_area_constrain_enabled = (can_rx_data[offset + 1] & 0x01);
 800286c:	f89e 3001 	ldrb.w	r3, [lr, #1]
					g_app_command.working_mode = can_rx_data[offset];
 8002870:	7011      	strb	r1, [r2, #0]
					g_joint_configuration.working_area_constrain_enabled = (can_rx_data[offset + 1] & 0x01);
 8002872:	f003 0201 	and.w	r2, r3, #1
					g_joint_configuration.ma730_enabled = (can_rx_data[offset + 1] & 0x02) >> 1;
 8002876:	f3c3 0340 	ubfx	r3, r3, #1, #1
					g_joint_configuration.working_area_constrain_enabled = (can_rx_data[offset + 1] & 0x01);
 800287a:	f88c 2009 	strb.w	r2, [ip, #9]
					g_joint_configuration.ma730_enabled = (can_rx_data[offset + 1] & 0x02) >> 1;
 800287e:	f88c 3008 	strb.w	r3, [ip, #8]
					can_tx_data[0] = 1;
 8002882:	7030      	strb	r0, [r6, #0]
 8002884:	e7dc      	b.n	8002840 <HAL_FDCAN_RxFifo0Callback+0x220>
 8002886:	bf00      	nop
 8002888:	6db56952 	.word	0x6db56952
 800288c:	41c45f30 	.word	0x41c45f30
 8002890:	6dc9c883 	.word	0x6dc9c883
 8002894:	3fc45f30 	.word	0x3fc45f30
 8002898:	200010c8 	.word	0x200010c8
 800289c:	20000e1c 	.word	0x20000e1c
 80028a0:	200010f0 	.word	0x200010f0
 80028a4:	20000e34 	.word	0x20000e34
 80028a8:	20000ea0 	.word	0x20000ea0
 80028ac:	3c340168 	.word	0x3c340168
 80028b0:	45dda365 	.word	0x45dda365
 80028b4:	20000820 	.word	0x20000820
 80028b8:	46fffe00 	.word	0x46fffe00
 80028bc:	42b609f5 	.word	0x42b609f5
 80028c0:	20000e78 	.word	0x20000e78
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000ea4 	.word	0x20000ea4

080028cc <FSM_Set_State>:
	switch (new_state)
 80028cc:	2864      	cmp	r0, #100	; 0x64
 80028ce:	d028      	beq.n	8002922 <FSM_Set_State+0x56>
 80028d0:	d814      	bhi.n	80028fc <FSM_Set_State+0x30>
 80028d2:	2802      	cmp	r0, #2
 80028d4:	d02d      	beq.n	8002932 <FSM_Set_State+0x66>
 80028d6:	2803      	cmp	r0, #3
 80028d8:	d105      	bne.n	80028e6 <FSM_Set_State+0x1a>
	return g_fsm_status.state;
 80028da:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <FSM_Set_State+0x8c>)
 80028dc:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_READY_TO_OPERATE)
 80028de:	2a02      	cmp	r2, #2
 80028e0:	d011      	beq.n	8002906 <FSM_Set_State+0x3a>
	return false;
 80028e2:	2000      	movs	r0, #0
}
 80028e4:	4770      	bx	lr
	switch (new_state)
 80028e6:	2801      	cmp	r0, #1
 80028e8:	d1fb      	bne.n	80028e2 <FSM_Set_State+0x16>
	return g_fsm_status.state;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <FSM_Set_State+0x8c>)
 80028ec:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_START)
 80028ee:	b362      	cbz	r2, 800294a <FSM_Set_State+0x7e>
	return g_fsm_status.state;
 80028f0:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_FAULT)
 80028f2:	2aff      	cmp	r2, #255	; 0xff
 80028f4:	d1f5      	bne.n	80028e2 <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 80028f6:	220f      	movs	r2, #15
 80028f8:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_FAULT_TO_INIT);
 80028fa:	4770      	bx	lr
	switch (new_state)
 80028fc:	28fe      	cmp	r0, #254	; 0xfe
 80028fe:	d006      	beq.n	800290e <FSM_Set_State+0x42>
 8002900:	28ff      	cmp	r0, #255	; 0xff
 8002902:	d0ea      	beq.n	80028da <FSM_Set_State+0xe>
 8002904:	e7ed      	b.n	80028e2 <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 8002906:	220c      	movs	r2, #12
 8002908:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_READY_TO_OPERATE_TO_OPERATION_ENABLE);
 800290a:	2001      	movs	r0, #1
 800290c:	4770      	bx	lr
	return g_fsm_status.state;
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <FSM_Set_State+0x8c>)
 8002910:	7813      	ldrb	r3, [r2, #0]
			if (FSM_Get_State() != FSM_START)
 8002912:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0e4      	beq.n	80028e4 <FSM_Set_State+0x18>
	g_fsm_status.state = new_transition;
 800291a:	230e      	movs	r3, #14
 800291c:	7013      	strb	r3, [r2, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_FAULT_REACTION_ACTIVE_TO_FAULT);
 800291e:	2001      	movs	r0, #1
 8002920:	4770      	bx	lr
	return g_fsm_status.state;
 8002922:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <FSM_Set_State+0x8c>)
 8002924:	7813      	ldrb	r3, [r2, #0]
			if (FSM_Get_State() == FSM_INIT)
 8002926:	2b01      	cmp	r3, #1
	return g_fsm_status.state;
 8002928:	b2d8      	uxtb	r0, r3
			if (FSM_Get_State() == FSM_INIT)
 800292a:	d1da      	bne.n	80028e2 <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 800292c:	236e      	movs	r3, #110	; 0x6e
 800292e:	7013      	strb	r3, [r2, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_INIT_TO_CALIBRATION_PHASE_0);
 8002930:	4770      	bx	lr
	return g_fsm_status.state;
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <FSM_Set_State+0x8c>)
 8002934:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_INIT)
 8002936:	2a01      	cmp	r2, #1
	return g_fsm_status.state;
 8002938:	b2d0      	uxtb	r0, r2
			if (FSM_Get_State() == FSM_INIT)
 800293a:	d009      	beq.n	8002950 <FSM_Set_State+0x84>
	return g_fsm_status.state;
 800293c:	781a      	ldrb	r2, [r3, #0]
			if (FSM_Get_State() == FSM_OPERATION_ENABLE)
 800293e:	2a03      	cmp	r2, #3
 8002940:	d1cf      	bne.n	80028e2 <FSM_Set_State+0x16>
	g_fsm_status.state = new_transition;
 8002942:	220d      	movs	r2, #13
 8002944:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_OPERATION_ENABLE_TO_READY_TO_OPERATE);
 8002946:	2001      	movs	r0, #1
 8002948:	4770      	bx	lr
	g_fsm_status.state = new_transition;
 800294a:	220a      	movs	r2, #10
 800294c:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_START_TO_INIT);
 800294e:	4770      	bx	lr
	g_fsm_status.state = new_transition;
 8002950:	220b      	movs	r2, #11
 8002952:	701a      	strb	r2, [r3, #0]
				return FSM_Activate_Transition(FSM_TRANSITION_INIT_TO_READY_TO_OPERATE);
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000ea0 	.word	0x20000ea0

0800295c <R3_2_GetPhaseCurrents>:
{
 800295c:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800295e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8002960:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002964:	689d      	ldr	r5, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8002966:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800296a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800296c:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800296e:	6812      	ldr	r2, [r2, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8002970:	6836      	ldr	r6, [r6, #0]
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002972:	686b      	ldr	r3, [r5, #4]
 8002974:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	606b      	str	r3, [r5, #4]
  switch ( Sector )
 800297e:	2c05      	cmp	r4, #5
 8002980:	f200 80a1 	bhi.w	8002ac6 <R3_2_GetPhaseCurrents+0x16a>
 8002984:	e8df f004 	tbb	[pc, r4]
 8002988:	031f1f39 	.word	0x031f1f39
 800298c:	3903      	.short	0x3903
		Aux = (int32_t) (ADCDataReg1) - (int32_t) (pHandle->PhaseAOffset);
 800298e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <R3_2_GetPhaseCurrents+0x178>)
		Aux = (int32_t) (ADCDataReg1) - (int32_t) (pHandle->PhaseAOffset);
 8002992:	1b14      	subs	r4, r2, r4
      if ( Aux < -INT16_MAX )
 8002994:	429c      	cmp	r4, r3
 8002996:	da56      	bge.n	8002a46 <R3_2_GetPhaseCurrents+0xea>
        Iab->a = INT16_MAX;
 8002998:	800b      	strh	r3, [r1, #0]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseBOffset );
 800299a:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <R3_2_GetPhaseCurrents+0x178>)
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseBOffset );
 800299e:	1ab2      	subs	r2, r6, r2
      if ( Aux < -INT16_MAX )
 80029a0:	429a      	cmp	r2, r3
 80029a2:	da56      	bge.n	8002a52 <R3_2_GetPhaseCurrents+0xf6>
        Iab->b = -INT16_MAX;
 80029a4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80029a8:	804b      	strh	r3, [r1, #2]
 80029aa:	469c      	mov	ip, r3
 80029ac:	f248 0201 	movw	r2, #32769	; 0x8001
 80029b0:	b2ab      	uxth	r3, r5
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80029b2:	4413      	add	r3, r2
 80029b4:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 80029b6:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80029ba:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80029be:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ib = Iab->b;
 80029c0:	f8a0 c04a 	strh.w	ip, [r0, #74]	; 0x4a
}
 80029c4:	4770      	bx	lr
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseAOffset );
 80029c6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 80029c8:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <R3_2_GetPhaseCurrents+0x178>)
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseAOffset );
 80029ca:	1b14      	subs	r4, r2, r4
      if ( Aux < -INT16_MAX )
 80029cc:	429c      	cmp	r4, r3
 80029ce:	db34      	blt.n	8002a3a <R3_2_GetPhaseCurrents+0xde>
      else  if ( Aux > INT16_MAX )
 80029d0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80029d4:	db6f      	blt.n	8002ab6 <R3_2_GetPhaseCurrents+0x15a>
        Iab->a = INT16_MAX;
 80029d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80029da:	4613      	mov	r3, r2
 80029dc:	800a      	strh	r2, [r1, #0]
 80029de:	4614      	mov	r4, r2
 80029e0:	4615      	mov	r5, r2
      Aux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( ADCDataReg2 ); /* -Ic */
 80029e2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80029e4:	1b92      	subs	r2, r2, r6
      Aux -= ( int32_t )Iab->a;             /* Ib */
 80029e6:	1b14      	subs	r4, r2, r4
      if ( Aux > INT16_MAX )
 80029e8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80029ec:	db44      	blt.n	8002a78 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 80029ee:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80029f2:	4622      	mov	r2, r4
 80029f4:	804c      	strh	r4, [r1, #2]
 80029f6:	46a4      	mov	ip, r4
 80029f8:	e7db      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseBOffset );
 80029fa:	6e03      	ldr	r3, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 80029fc:	4d35      	ldr	r5, [pc, #212]	; (8002ad4 <R3_2_GetPhaseCurrents+0x178>)
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseBOffset );
 80029fe:	1ad4      	subs	r4, r2, r3
      if ( Aux < -INT16_MAX )
 8002a00:	42ac      	cmp	r4, r5
 8002a02:	db14      	blt.n	8002a2e <R3_2_GetPhaseCurrents+0xd2>
      else  if ( Aux > INT16_MAX )
 8002a04:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8002a08:	db46      	blt.n	8002a98 <R3_2_GetPhaseCurrents+0x13c>
        Iab->b = INT16_MAX;
 8002a0a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a0e:	461a      	mov	r2, r3
 8002a10:	804b      	strh	r3, [r1, #2]
 8002a12:	461c      	mov	r4, r3
 8002a14:	469c      	mov	ip, r3
      Aux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( ADCDataReg2 ); /* Ic reversed */
 8002a16:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002a18:	1b9b      	subs	r3, r3, r6
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8002a1a:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8002a1c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8002a20:	db23      	blt.n	8002a6a <R3_2_GetPhaseCurrents+0x10e>
        Iab->a = INT16_MAX;
 8002a22:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8002a26:	4623      	mov	r3, r4
 8002a28:	800c      	strh	r4, [r1, #0]
 8002a2a:	4625      	mov	r5, r4
 8002a2c:	e7c1      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 8002a2e:	462c      	mov	r4, r5
 8002a30:	804d      	strh	r5, [r1, #2]
 8002a32:	46ac      	mov	ip, r5
 8002a34:	f248 0201 	movw	r2, #32769	; 0x8001
 8002a38:	e7ed      	b.n	8002a16 <R3_2_GetPhaseCurrents+0xba>
        Iab->a = -INT16_MAX;
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	800b      	strh	r3, [r1, #0]
 8002a3e:	461d      	mov	r5, r3
 8002a40:	f248 0301 	movw	r3, #32769	; 0x8001
 8002a44:	e7cd      	b.n	80029e2 <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 8002a46:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8002a4a:	db1d      	blt.n	8002a88 <R3_2_GetPhaseCurrents+0x12c>
        Iab->a = INT16_MAX;
 8002a4c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a50:	e7a2      	b.n	8002998 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 8002a52:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a56:	db25      	blt.n	8002aa4 <R3_2_GetPhaseCurrents+0x148>
        Iab->b = INT16_MAX;
 8002a58:	f9b1 5000 	ldrsh.w	r5, [r1]
 8002a5c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a60:	804b      	strh	r3, [r1, #2]
 8002a62:	461a      	mov	r2, r3
 8002a64:	469c      	mov	ip, r3
 8002a66:	b2ab      	uxth	r3, r5
 8002a68:	e7a3      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8002a6a:	4d1a      	ldr	r5, [pc, #104]	; (8002ad4 <R3_2_GetPhaseCurrents+0x178>)
 8002a6c:	42ac      	cmp	r4, r5
 8002a6e:	da26      	bge.n	8002abe <R3_2_GetPhaseCurrents+0x162>
        Iab->a = -INT16_MAX;
 8002a70:	800d      	strh	r5, [r1, #0]
 8002a72:	f248 0301 	movw	r3, #32769	; 0x8001
 8002a76:	e79c      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <R3_2_GetPhaseCurrents+0x178>)
 8002a7a:	4294      	cmp	r4, r2
 8002a7c:	da06      	bge.n	8002a8c <R3_2_GetPhaseCurrents+0x130>
        Iab->b = -INT16_MAX;
 8002a7e:	804a      	strh	r2, [r1, #2]
 8002a80:	4694      	mov	ip, r2
 8002a82:	f248 0201 	movw	r2, #32769	; 0x8001
 8002a86:	e794      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8002a88:	800c      	strh	r4, [r1, #0]
 8002a8a:	e786      	b.n	800299a <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 8002a8c:	fa0f fc84 	sxth.w	ip, r4
 8002a90:	f8a1 c002 	strh.w	ip, [r1, #2]
 8002a94:	b2a2      	uxth	r2, r4
 8002a96:	e78c      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 8002a98:	fa0f fc84 	sxth.w	ip, r4
 8002a9c:	f8a1 c002 	strh.w	ip, [r1, #2]
 8002aa0:	b2a2      	uxth	r2, r4
 8002aa2:	e7b8      	b.n	8002a16 <R3_2_GetPhaseCurrents+0xba>
        Iab->b = ( int16_t )Aux;
 8002aa4:	f9b1 5000 	ldrsh.w	r5, [r1]
 8002aa8:	fa0f fc82 	sxth.w	ip, r2
 8002aac:	b2ab      	uxth	r3, r5
 8002aae:	f8a1 c002 	strh.w	ip, [r1, #2]
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	e77d      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8002ab6:	b225      	sxth	r5, r4
 8002ab8:	800d      	strh	r5, [r1, #0]
 8002aba:	b2a3      	uxth	r3, r4
 8002abc:	e791      	b.n	80029e2 <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 8002abe:	b225      	sxth	r5, r4
 8002ac0:	800d      	strh	r5, [r1, #0]
 8002ac2:	b2a3      	uxth	r3, r4
 8002ac4:	e775      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
 8002ac6:	f9b1 5000 	ldrsh.w	r5, [r1]
 8002aca:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8002ace:	880b      	ldrh	r3, [r1, #0]
 8002ad0:	884a      	ldrh	r2, [r1, #2]
 8002ad2:	e76e      	b.n	80029b2 <R3_2_GetPhaseCurrents+0x56>
 8002ad4:	ffff8001 	.word	0xffff8001

08002ad8 <Error_Handler>:
 8002ad8:	b672      	cpsid	i
  while (1)
 8002ada:	e7fe      	b.n	8002ada <Error_Handler+0x2>

08002adc <SystemClock_Config>:
{
 8002adc:	e92d 4330 	stmdb	sp!, {r4, r5, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae0:	2100      	movs	r1, #0
{
 8002ae2:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae4:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae6:	2238      	movs	r2, #56	; 0x38
 8002ae8:	a806      	add	r0, sp, #24
 8002aea:	f008 fe89 	bl	800b800 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aee:	4621      	mov	r1, r4
 8002af0:	2244      	movs	r2, #68	; 0x44
 8002af2:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af4:	e9cd 4400 	strd	r4, r4, [sp]
 8002af8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002afc:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002afe:	f008 fe7f 	bl	800b800 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002b02:	4620      	mov	r0, r4
 8002b04:	f004 fcd0 	bl	80074a8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002b08:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b0a:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b0c:	f04f 0801 	mov.w	r8, #1
 8002b10:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b14:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002b16:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8002b18:	2208      	movs	r2, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b1c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b20:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002b24:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8002b28:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b2c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2e:	f004 fd41 	bl	80075b4 <HAL_RCC_OscConfig>
 8002b32:	b108      	cbz	r0, 8002b38 <SystemClock_Config+0x5c>
 8002b34:	b672      	cpsid	i
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b38:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b3a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b3c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b42:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b44:	240f      	movs	r4, #15
 8002b46:	2503      	movs	r5, #3
 8002b48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b4c:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b50:	f004 ffaa 	bl	8007aa8 <HAL_RCC_ClockConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	b108      	cbz	r0, 8002b5c <SystemClock_Config+0x80>
 8002b58:	b672      	cpsid	i
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8002b5c:	f249 0402 	movw	r4, #36866	; 0x9002
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002b60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b68:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b6a:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8002b6c:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002b6e:	9121      	str	r1, [sp, #132]	; 0x84
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002b70:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b72:	f005 f8cd 	bl	8007d10 <HAL_RCCEx_PeriphCLKConfig>
 8002b76:	b108      	cbz	r0, 8002b7c <SystemClock_Config+0xa0>
 8002b78:	b672      	cpsid	i
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <SystemClock_Config+0x9e>
}
 8002b7c:	b027      	add	sp, #156	; 0x9c
 8002b7e:	e8bd 8330 	ldmia.w	sp!, {r4, r5, r8, r9, pc}
 8002b82:	bf00      	nop

08002b84 <main>:
{
 8002b84:	b508      	push	{r3, lr}
  HAL_Init();
 8002b86:	f002 fd69 	bl	800565c <HAL_Init>
  SystemClock_Config();
 8002b8a:	f7ff ffa7 	bl	8002adc <SystemClock_Config>
  MX_GPIO_Init();
 8002b8e:	f7fe fb71 	bl	8001274 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b92:	f7fe f92d 	bl	8000df0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002b96:	f7fe f9b5 	bl	8000f04 <MX_ADC2_Init>
  MX_CORDIC_Init();
 8002b9a:	f7fe fab1 	bl	8001100 <MX_CORDIC_Init>
  MX_TIM1_Init();
 8002b9e:	f002 f80d 	bl	8004bbc <MX_TIM1_Init>
  MX_TIM4_Init();
 8002ba2:	f001 fea3 	bl	80048ec <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002ba6:	f002 f933 	bl	8004e10 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002baa:	f7fe fad1 	bl	8001150 <MX_DMA_Init>
  MX_SPI2_Init();
 8002bae:	f001 fcf1 	bl	8004594 <MX_SPI2_Init>
  MX_MotorControl_Init();
 8002bb2:	f001 fa93 	bl	80040dc <MX_MotorControl_Init>
  MX_FDCAN1_Init();
 8002bb6:	f7fe faf5 	bl	80011a4 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8002bba:	f001 fed1 	bl	8004960 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002bbe:	f001 fef9 	bl	80049b4 <MX_TIM7_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	2018      	movs	r0, #24
 8002bc8:	f003 fc72 	bl	80064b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002bcc:	2018      	movs	r0, #24
 8002bce:	f003 fca7 	bl	8006520 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	2019      	movs	r0, #25
 8002bd8:	f003 fc6a 	bl	80064b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002bdc:	2019      	movs	r0, #25
 8002bde:	f003 fc9f 	bl	8006520 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2102      	movs	r1, #2
 8002be6:	2012      	movs	r0, #18
 8002be8:	f003 fc62 	bl	80064b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002bec:	2012      	movs	r0, #18
 8002bee:	f003 fc97 	bl	8006520 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	201e      	movs	r0, #30
 8002bf8:	f003 fc5a 	bl	80064b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bfc:	201e      	movs	r0, #30
 8002bfe:	f003 fc8f 	bl	8006520 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8002c02:	2201      	movs	r2, #1
 8002c04:	2103      	movs	r1, #3
 8002c06:	2026      	movs	r0, #38	; 0x26
 8002c08:	f003 fc52 	bl	80064b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c0c:	2026      	movs	r0, #38	; 0x26
 8002c0e:	f003 fc87 	bl	8006520 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim6); 	// Enable 10 kHz timer for fast calculation
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <main+0xa4>)
 8002c14:	f005 ff0e 	bl	8008a34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);  	// Enable  1 kHz timer for FSM
 8002c18:	4804      	ldr	r0, [pc, #16]	; (8002c2c <main+0xa8>)
 8002c1a:	f005 ff0b 	bl	8008a34 <HAL_TIM_Base_Start_IT>
 8002c1e:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <main+0xac>)
	  g_counters.main++;
 8002c20:	6813      	ldr	r3, [r2, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	6013      	str	r3, [r2, #0]
  while (1)
 8002c26:	e7fb      	b.n	8002c20 <main+0x9c>
 8002c28:	200013c4 	.word	0x200013c4
 8002c2c:	2000145c 	.word	0x2000145c
 8002c30:	20000e78 	.word	0x20000e78

08002c34 <motor_start>:
	g_app_command.working_mode = mode;
 8002c34:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <motor_start+0x40>)
	switch (g_app_command.working_mode)
 8002c36:	2801      	cmp	r0, #1
{
 8002c38:	b508      	push	{r3, lr}
 8002c3a:	460b      	mov	r3, r1
	g_app_command.working_mode = mode;
 8002c3c:	7010      	strb	r0, [r2, #0]
	switch (g_app_command.working_mode)
 8002c3e:	d005      	beq.n	8002c4c <motor_start+0x18>
 8002c40:	2802      	cmp	r0, #2
 8002c42:	d00d      	beq.n	8002c60 <motor_start+0x2c>
}
 8002c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			MC_StopMotor1();
 8002c48:	f000 b83e 	b.w	8002cc8 <MC_StopMotor1>
			MC_ProgramTorqueRampMotor1(g_app_command._motor_torque, 0);
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	2100      	movs	r1, #0
			g_app_command._motor_torque = goal;
 8002c50:	f8a2 3019 	strh.w	r3, [r2, #25]
			MC_ProgramTorqueRampMotor1(g_app_command._motor_torque, 0);
 8002c54:	f000 f846 	bl	8002ce4 <MC_ProgramTorqueRampMotor1>
}
 8002c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			MC_StartMotor1();
 8002c5c:	f000 b82e 	b.w	8002cbc <MC_StartMotor1>
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8002c60:	4608      	mov	r0, r1
 8002c62:	2100      	movs	r1, #0
			g_app_command._motor_speed = goal;
 8002c64:	f8a2 301b 	strh.w	r3, [r2, #27]
			MC_ProgramSpeedRampMotor1(g_app_command._motor_speed, 0);
 8002c68:	f000 f834 	bl	8002cd4 <MC_ProgramSpeedRampMotor1>
}
 8002c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			MC_StartMotor1();
 8002c70:	f000 b824 	b.w	8002cbc <MC_StartMotor1>
 8002c74:	20000820 	.word	0x20000820

08002c78 <motor_stop>:
{
 8002c78:	b430      	push	{r4, r5}
	g_app_command.motor_torque = 0;
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <motor_stop+0x3c>)
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <motor_stop+0x40>)
 8002c7e:	2300      	movs	r3, #0
	g_app_command.joint_torque = 0;
 8002c80:	461d      	mov	r5, r3
	g_app_command.motor_torque = 0;
 8002c82:	f8c2 3005 	str.w	r3, [r2, #5]
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c1 3043 	str.w	r3, [r1, #67]	; 0x43
 8002c8c:	f8c1 3047 	str.w	r3, [r1, #71]	; 0x47
 8002c90:	f8c1 304b 	str.w	r3, [r1, #75]	; 0x4b
 8002c94:	f8c1 304f 	str.w	r3, [r1, #79]	; 0x4f
 8002c98:	f8c1 3053 	str.w	r3, [r1, #83]	; 0x53
	g_app_command.joint_torque = 0;
 8002c9c:	f8c2 5001 	str.w	r5, [r2, #1]
	g_app_command.motor_speed = 0;
 8002ca0:	f8c2 500d 	str.w	r5, [r2, #13]
	g_app_command.joint_speed = 0;
 8002ca4:	f8c2 5009 	str.w	r5, [r2, #9]
	g_app_command._motor_torque = 0;
 8002ca8:	f8c2 3019 	str.w	r3, [r2, #25]
}
 8002cac:	bc30      	pop	{r4, r5}
	MC_StopMotor1();
 8002cae:	f000 b80b 	b.w	8002cc8 <MC_StopMotor1>
 8002cb2:	bf00      	nop
 8002cb4:	20000820 	.word	0x20000820
 8002cb8:	20000ea4 	.word	0x20000ea4

08002cbc <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8002cbc:	4b01      	ldr	r3, [pc, #4]	; (8002cc4 <MC_StartMotor1+0x8>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f000 b864 	b.w	8002d8c <MCI_StartMotor>
 8002cc4:	200011f8 	.word	0x200011f8

08002cc8 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8002cc8:	4b01      	ldr	r3, [pc, #4]	; (8002cd0 <MC_StopMotor1+0x8>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	f000 b868 	b.w	8002da0 <MCI_StopMotor>
 8002cd0:	200011f8 	.word	0x200011f8

08002cd4 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8002cd4:	4b02      	ldr	r3, [pc, #8]	; (8002ce0 <MC_ProgramSpeedRampMotor1+0xc>)
{
 8002cd6:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8002cd8:	4601      	mov	r1, r0
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	f000 b836 	b.w	8002d4c <MCI_ExecSpeedRamp>
 8002ce0:	200011f8 	.word	0x200011f8

08002ce4 <MC_ProgramTorqueRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8002ce4:	4b02      	ldr	r3, [pc, #8]	; (8002cf0 <MC_ProgramTorqueRampMotor1+0xc>)
{
 8002ce6:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8002ce8:	4601      	mov	r1, r0
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f000 b83a 	b.w	8002d64 <MCI_ExecTorqueRamp>
 8002cf0:	200011f8 	.word	0x200011f8

08002cf4 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8002cf4:	4b01      	ldr	r3, [pc, #4]	; (8002cfc <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	f000 b91c 	b.w	8002f34 <MCI_GetPhaseCurrentAmplitude>
 8002cfc:	200011f8 	.word	0x200011f8

08002d00 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8002d00:	4b01      	ldr	r3, [pc, #4]	; (8002d08 <MC_AcknowledgeFaultMotor1+0x8>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	f000 b850 	b.w	8002da8 <MCI_FaultAcknowledged>
 8002d08:	200011f8 	.word	0x200011f8

08002d0c <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 8002d0c:	4b01      	ldr	r3, [pc, #4]	; (8002d14 <MC_GetOccurredFaultsMotor1+0x8>)
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	f000 b892 	b.w	8002e38 <MCI_GetOccurredFaults>
 8002d14:	200011f8 	.word	0x200011f8

08002d18 <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <MC_GetCurrentFaultsMotor1+0x8>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	f000 b892 	b.w	8002e44 <MCI_GetCurrentFaults>
 8002d20:	200011f8 	.word	0x200011f8

08002d24 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8002d24:	4b01      	ldr	r3, [pc, #4]	; (8002d2c <MC_GetSTMStateMotor1+0x8>)
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	f000 b882 	b.w	8002e30 <MCI_GetSTMState>
 8002d2c:	200011f8 	.word	0x200011f8

08002d30 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8002d30:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8002d32:	2400      	movs	r4, #0
 8002d34:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8002d36:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8002d38:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8002d3a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8002d3c:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8002d3e:	e9c0 1200 	strd	r1, r2, [r0]
}
 8002d42:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8002d46:	6083      	str	r3, [r0, #8]
}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop

08002d4c <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8002d4c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002d4e:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8002d52:	2401      	movs	r4, #1
 8002d54:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8002d56:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8002d58:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8002d5c:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002d5e:	8303      	strh	r3, [r0, #24]
}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop

08002d64 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8002d64:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002d66:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8002d68:	2402      	movs	r4, #2
 8002d6a:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8002d6c:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8002d72:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002d74:	8303      	strh	r3, [r0, #24]
}
 8002d76:	4770      	bx	lr

08002d78 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8002d78:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002d7a:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002d7c:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8002d7e:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002d82:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002d84:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002d86:	b002      	add	sp, #8
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop

08002d8c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8002d8c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8002d8e:	2103      	movs	r1, #3
{
 8002d90:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8002d92:	6800      	ldr	r0, [r0, #0]
 8002d94:	f008 faf6 	bl	800b384 <STM_NextState>

  if ( RetVal == true )
 8002d98:	b108      	cbz	r0, 8002d9e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8002d9e:	bd10      	pop	{r4, pc}

08002da0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8002da0:	6800      	ldr	r0, [r0, #0]
 8002da2:	2107      	movs	r1, #7
 8002da4:	f008 baee 	b.w	800b384 <STM_NextState>

08002da8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8002da8:	6800      	ldr	r0, [r0, #0]
 8002daa:	f008 bb61 	b.w	800b470 <STM_FaultAcknowledged>
 8002dae:	bf00      	nop

08002db0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8002db0:	6800      	ldr	r0, [r0, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	f008 bae6 	b.w	800b384 <STM_NextState>

08002db8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8002db8:	b178      	cbz	r0, 8002dda <MCI_ExecBufferedCommands+0x22>
{
 8002dba:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002dbc:	7e03      	ldrb	r3, [r0, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	d000      	beq.n	8002dc6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8002dc4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8002dc6:	7b01      	ldrb	r1, [r0, #12]
 8002dc8:	2902      	cmp	r1, #2
 8002dca:	d020      	beq.n	8002e0e <MCI_ExecBufferedCommands+0x56>
 8002dcc:	2903      	cmp	r1, #3
 8002dce:	d005      	beq.n	8002ddc <MCI_ExecBufferedCommands+0x24>
 8002dd0:	2901      	cmp	r1, #1
 8002dd2:	d00c      	beq.n	8002dee <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	7623      	strb	r3, [r4, #24]
}
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002ddc:	6882      	ldr	r2, [r0, #8]
 8002dde:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002de2:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8002de6:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8002de8:	2302      	movs	r3, #2
 8002dea:	7623      	strb	r3, [r4, #24]
}
 8002dec:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002dee:	6883      	ldr	r3, [r0, #8]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8002df6:	6840      	ldr	r0, [r0, #4]
 8002df8:	f008 f9fe 	bl	800b1f8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8002dfc:	8ae2      	ldrh	r2, [r4, #22]
 8002dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e02:	6860      	ldr	r0, [r4, #4]
 8002e04:	f008 f9fc 	bl	800b200 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d0e3      	beq.n	8002dd4 <MCI_ExecBufferedCommands+0x1c>
 8002e0c:	e7ec      	b.n	8002de8 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002e0e:	6883      	ldr	r3, [r0, #8]
 8002e10:	2100      	movs	r1, #0
 8002e12:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8002e16:	6840      	ldr	r0, [r0, #4]
 8002e18:	f008 f9ee 	bl	800b1f8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8002e1c:	8ae2      	ldrh	r2, [r4, #22]
 8002e1e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8002e22:	6860      	ldr	r0, [r4, #4]
 8002e24:	f008 f9ec 	bl	800b200 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d0d3      	beq.n	8002dd4 <MCI_ExecBufferedCommands+0x1c>
 8002e2c:	e7dc      	b.n	8002de8 <MCI_ExecBufferedCommands+0x30>
 8002e2e:	bf00      	nop

08002e30 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8002e30:	6800      	ldr	r0, [r0, #0]
 8002e32:	f008 bb1b 	b.w	800b46c <STM_GetState>
 8002e36:	bf00      	nop

08002e38 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8002e38:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 8002e3a:	6800      	ldr	r0, [r0, #0]
 8002e3c:	f008 fb24 	bl	800b488 <STM_GetFaultState>
}
 8002e40:	b280      	uxth	r0, r0
 8002e42:	bd08      	pop	{r3, pc}

08002e44 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8002e44:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8002e46:	6800      	ldr	r0, [r0, #0]
 8002e48:	f008 fb1e 	bl	800b488 <STM_GetFaultState>
}
 8002e4c:	0c00      	lsrs	r0, r0, #16
 8002e4e:	bd08      	pop	{r3, pc}

08002e50 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8002e50:	7e40      	ldrb	r0, [r0, #25]
 8002e52:	4770      	bx	lr

08002e54 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8002e54:	7b03      	ldrb	r3, [r0, #12]
 8002e56:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8002e58:	bf0c      	ite	eq
 8002e5a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8002e5e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop

08002e64 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8002e64:	6840      	ldr	r0, [r0, #4]
 8002e66:	f008 ba13 	b.w	800b290 <STC_StopRamp>
 8002e6a:	bf00      	nop

08002e6c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8002e6c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8002e6e:	6840      	ldr	r0, [r0, #4]
 8002e70:	f008 f9a8 	bl	800b1c4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8002e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8002e78:	f008 b950 	b.w	800b11c <SPD_GetAvrgMecSpeedUnit>

08002e7c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8002e7c:	6840      	ldr	r0, [r0, #4]
 8002e7e:	f008 b9ab 	b.w	800b1d8 <STC_GetMecSpeedRefUnit>
 8002e82:	bf00      	nop

08002e84 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8002e84:	6882      	ldr	r2, [r0, #8]
 8002e86:	6810      	ldr	r0, [r2, #0]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	b282      	uxth	r2, r0
 8002e8c:	f362 030f 	bfi	r3, r2, #0, #16
 8002e90:	0c00      	lsrs	r0, r0, #16
 8002e92:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002e96:	b082      	sub	sp, #8
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	b002      	add	sp, #8
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8002ea0:	6882      	ldr	r2, [r0, #8]
 8002ea2:	6850      	ldr	r0, [r2, #4]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	b282      	uxth	r2, r0
 8002ea8:	f362 030f 	bfi	r3, r2, #0, #16
 8002eac:	0c00      	lsrs	r0, r0, #16
 8002eae:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002eb2:	b082      	sub	sp, #8
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	b002      	add	sp, #8
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop

08002ebc <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8002ebc:	6882      	ldr	r2, [r0, #8]
 8002ebe:	68d0      	ldr	r0, [r2, #12]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	b282      	uxth	r2, r0
 8002ec4:	f362 030f 	bfi	r3, r2, #0, #16
 8002ec8:	0c00      	lsrs	r0, r0, #16
 8002eca:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002ece:	b082      	sub	sp, #8
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	b002      	add	sp, #8
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop

08002ed8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8002ed8:	6882      	ldr	r2, [r0, #8]
 8002eda:	6910      	ldr	r0, [r2, #16]
 8002edc:	2300      	movs	r3, #0
 8002ede:	b282      	uxth	r2, r0
 8002ee0:	f362 030f 	bfi	r3, r2, #0, #16
 8002ee4:	0c00      	lsrs	r0, r0, #16
 8002ee6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002eea:	b082      	sub	sp, #8
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	b002      	add	sp, #8
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8002ef4:	6882      	ldr	r2, [r0, #8]
 8002ef6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8002efa:	2300      	movs	r3, #0
 8002efc:	b282      	uxth	r2, r0
 8002efe:	f362 030f 	bfi	r3, r2, #0, #16
 8002f02:	0c00      	lsrs	r0, r0, #16
 8002f04:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002f08:	b082      	sub	sp, #8
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	b002      	add	sp, #8
 8002f0e:	4770      	bx	lr

08002f10 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8002f10:	6882      	ldr	r2, [r0, #8]
 8002f12:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8002f16:	2300      	movs	r3, #0
 8002f18:	b282      	uxth	r2, r0
 8002f1a:	f362 030f 	bfi	r3, r2, #0, #16
 8002f1e:	0c00      	lsrs	r0, r0, #16
 8002f20:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002f24:	b082      	sub	sp, #8
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	b002      	add	sp, #8
 8002f2a:	4770      	bx	lr

08002f2c <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8002f2c:	6883      	ldr	r3, [r0, #8]
}
 8002f2e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8002f32:	4770      	bx	lr

08002f34 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8002f34:	6882      	ldr	r2, [r0, #8]
{
 8002f36:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8002f38:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8002f3c:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8002f40:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8002f44:	fb00 3000 	mla	r0, r0, r0, r3
 8002f48:	f000 f8c0 	bl	80030cc <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8002f4c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002f50:	4298      	cmp	r0, r3
 8002f52:	bfa8      	it	ge
 8002f54:	4618      	movge	r0, r3
}
 8002f56:	b200      	sxth	r0, r0
 8002f58:	bd08      	pop	{r3, pc}
 8002f5a:	bf00      	nop

08002f5c <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6882      	ldr	r2, [r0, #8]
 8002f60:	f361 030f 	bfi	r3, r1, #0, #16
 8002f64:	f361 431f 	bfi	r3, r1, #16, #16
 8002f68:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop

08002f70 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8002f70:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8002f72:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8002f76:	f008 f9cb 	bl	800b310 <STC_GetDefaultIqdref>
 8002f7a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002f7e:	8220      	strh	r0, [r4, #16]
 8002f80:	8263      	strh	r3, [r4, #18]
}
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8002f84:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002f86:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8002f8a:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8002f8e:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002f92:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8002f96:	4250      	negs	r0, r2
 8002f98:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8002f9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8002fa0:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8002fa2:	da05      	bge.n	8002fb0 <MCM_Clarke+0x2c>
 8002fa4:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8002fa6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8002faa:	da0c      	bge.n	8002fc6 <MCM_Clarke+0x42>
 8002fac:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <MCM_Clarke+0x50>)
 8002fae:	e001      	b.n	8002fb4 <MCM_Clarke+0x30>
 8002fb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	f363 000f 	bfi	r0, r3, #0, #16
 8002fbe:	f362 401f 	bfi	r0, r2, #16, #16
}
 8002fc2:	b004      	add	sp, #16
 8002fc4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8002fc6:	4803      	ldr	r0, [pc, #12]	; (8002fd4 <MCM_Clarke+0x50>)
 8002fc8:	b20a      	sxth	r2, r1
 8002fca:	4282      	cmp	r2, r0
 8002fcc:	bfb8      	it	lt
 8002fce:	4602      	movlt	r2, r0
 8002fd0:	e7f0      	b.n	8002fb4 <MCM_Clarke+0x30>
 8002fd2:	bf00      	nop
 8002fd4:	ffff8001 	.word	0xffff8001

08002fd8 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MCM_Trig_Functions+0x28>)
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <MCM_Trig_Functions+0x2c>)
 8002fdc:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8002fde:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8002fe2:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8002fe6:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002fe8:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8002fea:	2000      	movs	r0, #0
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	f362 000f 	bfi	r0, r2, #0, #16
 8002ff2:	0c1b      	lsrs	r3, r3, #16
{
 8002ff4:	b082      	sub	sp, #8
  return (CosSin.Components);
 8002ff6:	f363 401f 	bfi	r0, r3, #16, #16

}
 8002ffa:	b002      	add	sp, #8
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40020c00 	.word	0x40020c00
 8003004:	00600040 	.word	0x00600040

08003008 <MCM_Park>:
{
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	4605      	mov	r5, r0
 800300e:	9001      	str	r0, [sp, #4]
 8003010:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8003012:	4608      	mov	r0, r1
 8003014:	f7ff ffe0 	bl	8002fd8 <MCM_Trig_Functions>
 8003018:	b22d      	sxth	r5, r5
 800301a:	b204      	sxth	r4, r0
 800301c:	1436      	asrs	r6, r6, #16
 800301e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8003020:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8003024:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8003028:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800302c:	da12      	bge.n	8003054 <MCM_Park+0x4c>
 800302e:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8003030:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003034:	4914      	ldr	r1, [pc, #80]	; (8003088 <MCM_Park+0x80>)
 8003036:	da21      	bge.n	800307c <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8003038:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 800303c:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8003040:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8003044:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8003048:	da07      	bge.n	800305a <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 800304a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800304e:	da0f      	bge.n	8003070 <MCM_Park+0x68>
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <MCM_Park+0x80>)
 8003052:	e004      	b.n	800305e <MCM_Park+0x56>
 8003054:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003058:	e7ee      	b.n	8003038 <MCM_Park+0x30>
 800305a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800305e:	b28a      	uxth	r2, r1
 8003060:	2000      	movs	r0, #0
 8003062:	b29b      	uxth	r3, r3
 8003064:	f362 000f 	bfi	r0, r2, #0, #16
 8003068:	f363 401f 	bfi	r0, r3, #16, #16
}
 800306c:	b004      	add	sp, #16
 800306e:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8003070:	4805      	ldr	r0, [pc, #20]	; (8003088 <MCM_Park+0x80>)
 8003072:	b213      	sxth	r3, r2
 8003074:	4283      	cmp	r3, r0
 8003076:	bfb8      	it	lt
 8003078:	4603      	movlt	r3, r0
 800307a:	e7f0      	b.n	800305e <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 800307c:	b21a      	sxth	r2, r3
 800307e:	4291      	cmp	r1, r2
 8003080:	bfb8      	it	lt
 8003082:	4611      	movlt	r1, r2
 8003084:	e7d8      	b.n	8003038 <MCM_Park+0x30>
 8003086:	bf00      	nop
 8003088:	ffff8001 	.word	0xffff8001

0800308c <MCM_Rev_Park>:
{
 800308c:	b530      	push	{r4, r5, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	4604      	mov	r4, r0
 8003092:	9001      	str	r0, [sp, #4]
 8003094:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8003096:	4608      	mov	r0, r1
 8003098:	f7ff ff9e 	bl	8002fd8 <MCM_Trig_Functions>
 800309c:	142d      	asrs	r5, r5, #16
 800309e:	1403      	asrs	r3, r0, #16
 80030a0:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80030a2:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80030a6:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80030a8:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80030ac:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80030b0:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80030b4:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80030b8:	2000      	movs	r0, #0
 80030ba:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80030be:	f362 000f 	bfi	r0, r2, #0, #16
 80030c2:	f363 401f 	bfi	r0, r3, #16, #16
}
 80030c6:	b005      	add	sp, #20
 80030c8:	bd30      	pop	{r4, r5, pc}
 80030ca:	bf00      	nop

080030cc <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 80030cc:	1e03      	subs	r3, r0, #0
 80030ce:	dd32      	ble.n	8003136 <MCM_Sqrt+0x6a>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if ( wInput <= ( int32_t )2097152 )
 80030d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 80030d4:	bfd4      	ite	le
 80030d6:	2080      	movle	r0, #128	; 0x80
 80030d8:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80030dc:	fb93 f2f0 	sdiv	r2, r3, r0
 80030e0:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80030e2:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80030e6:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80030ea:	d025      	beq.n	8003138 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80030ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80030f0:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80030f2:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80030f6:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80030fa:	d01d      	beq.n	8003138 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80030fc:	fb93 f2f0 	sdiv	r2, r3, r0
 8003100:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8003102:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003106:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800310a:	d015      	beq.n	8003138 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800310c:	fb93 f2f1 	sdiv	r2, r3, r1
 8003110:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8003112:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003116:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800311a:	d00d      	beq.n	8003138 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800311c:	fb93 f2f0 	sdiv	r2, r3, r0
 8003120:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8003122:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8003126:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800312a:	d005      	beq.n	8003138 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800312c:	fb93 f0f1 	sdiv	r0, r3, r1
 8003130:	4408      	add	r0, r1
 8003132:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 8003134:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 8003136:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop

0800313c <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <FOC_Clear+0x74>)
 8003144:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8003148:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 800314c:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 800314e:	2500      	movs	r5, #0
{
 8003150:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8003152:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003156:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8003158:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 800315a:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 800315e:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8003162:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8003166:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 800316a:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800316e:	4811      	ldr	r0, [pc, #68]	; (80031b4 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8003170:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8003172:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8003176:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800317a:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 800317c:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800317e:	50d5      	str	r5, [r2, r3]
 8003180:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8003184:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8003186:	f006 fefd 	bl	8009f84 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <FOC_Clear+0x7c>)
 800318c:	4629      	mov	r1, r5
 800318e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003192:	f006 fef7 	bl	8009f84 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <FOC_Clear+0x80>)
 8003198:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800319c:	f008 f814 	bl	800b1c8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <FOC_Clear+0x84>)
 80031a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80031a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80031aa:	f007 b8f9 	b.w	800a3a0 <PWMC_SwitchOffPWM>
 80031ae:	bf00      	nop
 80031b0:	20001140 	.word	0x20001140
 80031b4:	20001134 	.word	0x20001134
 80031b8:	200011f0 	.word	0x200011f0
 80031bc:	200011f4 	.word	0x200011f4
 80031c0:	20001128 	.word	0x20001128

080031c4 <MCboot>:
{
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 80031cc:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 80033c0 <MCboot+0x1fc>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80031d0:	4e63      	ldr	r6, [pc, #396]	; (8003360 <MCboot+0x19c>)
  ENC_Init (&ENCODER_M1);
 80031d2:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8003364 <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80031d6:	4d64      	ldr	r5, [pc, #400]	; (8003368 <MCboot+0x1a4>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80031d8:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80033c4 <MCboot+0x200>
 80031dc:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80033c8 <MCboot+0x204>
  PID_HandleInit(&PIDIqHandle_M1);
 80031e0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80033cc <MCboot+0x208>
  PID_HandleInit(&PIDIdHandle_M1);
 80031e4:	4f61      	ldr	r7, [pc, #388]	; (800336c <MCboot+0x1a8>)
{
 80031e6:	b085      	sub	sp, #20
 80031e8:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80031ea:	4658      	mov	r0, fp
{
 80031ec:	e9cd 3100 	strd	r3, r1, [sp]
  STM_Init(&STM[M1]);
 80031f0:	f008 f8a4 	bl	800b33c <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 80031f4:	4b5e      	ldr	r3, [pc, #376]	; (8003370 <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 80031f6:	495f      	ldr	r1, [pc, #380]	; (8003374 <MCboot+0x1b0>)
  pCLM[M1] = &CircleLimitationM1;
 80031f8:	4a5f      	ldr	r2, [pc, #380]	; (8003378 <MCboot+0x1b4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80031fa:	4860      	ldr	r0, [pc, #384]	; (800337c <MCboot+0x1b8>)
  pCLM[M1] = &CircleLimitationM1;
 80031fc:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 80031fe:	2400      	movs	r4, #0
 8003200:	700c      	strb	r4, [r1, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8003202:	6030      	str	r0, [r6, #0]
  R3_2_Init(&PWM_Handle_M1);
 8003204:	f007 fb8e 	bl	800a924 <R3_2_Init>
  startTimers();
 8003208:	f006 ff42 	bl	800a090 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800320c:	485c      	ldr	r0, [pc, #368]	; (8003380 <MCboot+0x1bc>)
 800320e:	f006 fea5 	bl	8009f5c <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8003212:	4a5c      	ldr	r2, [pc, #368]	; (8003384 <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8003214:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8003216:	495a      	ldr	r1, [pc, #360]	; (8003380 <MCboot+0x1bc>)
 8003218:	6011      	str	r1, [r2, #0]
  ENC_Init (&ENCODER_M1);
 800321a:	ee18 0a10 	vmov	r0, s16
  pSTC[M1] = &SpeednTorqCtrlM1;
 800321e:	602b      	str	r3, [r5, #0]
  ENC_Init (&ENCODER_M1);
 8003220:	f006 fc8a 	bl	8009b38 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8003224:	ee18 3a10 	vmov	r3, s16
 8003228:	6829      	ldr	r1, [r5, #0]
 800322a:	464a      	mov	r2, r9
 800322c:	4650      	mov	r0, sl
 800322e:	f006 fc33 	bl	8009a98 <EAC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8003232:	4a54      	ldr	r2, [pc, #336]	; (8003384 <MCboot+0x1c0>)
  pEAC[M1] = &EncAlignCtrlM1;
 8003234:	4b55      	ldr	r3, [pc, #340]	; (800338c <MCboot+0x1c8>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8003236:	6811      	ldr	r1, [r2, #0]
 8003238:	6828      	ldr	r0, [r5, #0]
  pEAC[M1] = &EncAlignCtrlM1;
 800323a:	f8c3 a000 	str.w	sl, [r3]
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 800323e:	ee18 2a10 	vmov	r2, s16
 8003242:	f007 ffa9 	bl	800b198 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8003246:	4648      	mov	r0, r9
 8003248:	f008 fa40 	bl	800b6cc <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 800324c:	4640      	mov	r0, r8
 800324e:	f006 fe85 	bl	8009f5c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8003252:	4638      	mov	r0, r7
 8003254:	f006 fe82 	bl	8009f5c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8003258:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <MCboot+0x1cc>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800325a:	484e      	ldr	r0, [pc, #312]	; (8003394 <MCboot+0x1d0>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 800325c:	f8c3 8000 	str.w	r8, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 8003260:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <MCboot+0x1d4>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8003262:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80033d0 <MCboot+0x20c>
  pPIDId[M1] = &PIDIdHandle_M1;
 8003266:	601f      	str	r7, [r3, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8003268:	4f4c      	ldr	r7, [pc, #304]	; (800339c <MCboot+0x1d8>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800326a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80033d4 <MCboot+0x210>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800326e:	6038      	str	r0, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8003270:	f007 fefa 	bl	800b068 <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8003274:	683a      	ldr	r2, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <MCboot+0x1dc>)
 8003278:	4f4a      	ldr	r7, [pc, #296]	; (80033a4 <MCboot+0x1e0>)
  NTC_Init(&TempSensorParamsM1);
 800327a:	484b      	ldr	r0, [pc, #300]	; (80033a8 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 800327c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8003280:	603b      	str	r3, [r7, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8003282:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8003286:	f006 fe25 	bl	8009ed4 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800328a:	4b48      	ldr	r3, [pc, #288]	; (80033ac <MCboot+0x1e8>)
 800328c:	4848      	ldr	r0, [pc, #288]	; (80033b0 <MCboot+0x1ec>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800328e:	4f46      	ldr	r7, [pc, #280]	; (80033a8 <MCboot+0x1e4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8003290:	6018      	str	r0, [r3, #0]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8003292:	f8c8 7000 	str.w	r7, [r8]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8003296:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 800329a:	f007 ff33 	bl	800b104 <REMNG_Init>
  FOC_Clear(M1);
 800329e:	4620      	mov	r0, r4
 80032a0:	f7ff ff4c 	bl	800313c <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80032a4:	f88a 9024 	strb.w	r9, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80032a8:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 80032aa:	4f42      	ldr	r7, [pc, #264]	; (80033b4 <MCboot+0x1f0>)
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80032ac:	f008 f830 	bl	800b310 <STC_GetDefaultIqdref>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80032b6:	f8aa 3010 	strh.w	r3, [sl, #16]
 80032ba:	f8aa 2012 	strh.w	r2, [sl, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80032be:	6828      	ldr	r0, [r5, #0]
 80032c0:	f008 f826 	bl	800b310 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 80032c4:	493c      	ldr	r1, [pc, #240]	; (80033b8 <MCboot+0x1f4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80032c6:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 80032c8:	6039      	str	r1, [r7, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80032ca:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80032ce:	4653      	mov	r3, sl
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80032d0:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80032d4:	4608      	mov	r0, r1
 80032d6:	4659      	mov	r1, fp
 80032d8:	f7ff fd2a 	bl	8002d30 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80032dc:	6828      	ldr	r0, [r5, #0]
 80032de:	f8d7 a000 	ldr.w	sl, [r7]
 80032e2:	f008 f80b 	bl	800b2fc <STC_GetMecSpeedRefUnitDefault>
 80032e6:	4622      	mov	r2, r4
 80032e8:	4601      	mov	r1, r0
 80032ea:	4650      	mov	r0, sl
 80032ec:	f7ff fd2e 	bl	8002d4c <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80032f0:	4a24      	ldr	r2, [pc, #144]	; (8003384 <MCboot+0x1c0>)
  pMCIList[M1] = oMCInterface[M1];
 80032f2:	f8d7 c000 	ldr.w	ip, [r7]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80032f6:	6817      	ldr	r7, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80032f8:	4a25      	ldr	r2, [pc, #148]	; (8003390 <MCboot+0x1cc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80032fa:	f8d8 e000 	ldr.w	lr, [r8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 80032fe:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8003300:	4a25      	ldr	r2, [pc, #148]	; (8003398 <MCboot+0x1d4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8003302:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <MCboot+0x1f8>)
  MCT[M1].pPIDId = pPIDId[M1];
 8003304:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8003306:	6832      	ldr	r2, [r6, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8003308:	4e24      	ldr	r6, [pc, #144]	; (800339c <MCboot+0x1d8>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800330a:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800330c:	f8d6 8000 	ldr.w	r8, [r6]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8003310:	4e24      	ldr	r6, [pc, #144]	; (80033a4 <MCboot+0x1e0>)
 8003312:	f8d6 a000 	ldr.w	sl, [r6]
  pMCIList[M1] = oMCInterface[M1];
 8003316:	9e00      	ldr	r6, [sp, #0]
 8003318:	f8c6 c000 	str.w	ip, [r6]
  MCT[M1].pPIDId = pPIDId[M1];
 800331c:	6099      	str	r1, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800331e:	e9c3 7000 	strd	r7, r0, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8003322:	e9c3 e80b 	strd	lr, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8003326:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 800332a:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 800332e:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8003332:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 8003336:	490f      	ldr	r1, [pc, #60]	; (8003374 <MCboot+0x1b0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8003338:	611a      	str	r2, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800333a:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800333c:	f8c3 a03c 	str.w	sl, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8003340:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8003342:	615c      	str	r4, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 8003344:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pStateMachine = &STM[M1];
 8003348:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 800334c:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 800334e:	9a01      	ldr	r2, [sp, #4]
 8003350:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8003352:	f881 9000 	strb.w	r9, [r1]
}
 8003356:	b005      	add	sp, #20
 8003358:	ecbd 8b02 	vpop	{d8}
 800335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003360:	20001128 	.word	0x20001128
 8003364:	2000090c 	.word	0x2000090c
 8003368:	200011f4 	.word	0x200011f4
 800336c:	200009a4 	.word	0x200009a4
 8003370:	200011bc 	.word	0x200011bc
 8003374:	20000f4c 	.word	0x20000f4c
 8003378:	20000858 	.word	0x20000858
 800337c:	20000b3c 	.word	0x20000b3c
 8003380:	200009fc 	.word	0x200009fc
 8003384:	2000112c 	.word	0x2000112c
 8003388:	20000bf8 	.word	0x20000bf8
 800338c:	20001130 	.word	0x20001130
 8003390:	20001134 	.word	0x20001134
 8003394:	20000bd0 	.word	0x20000bd0
 8003398:	200011f0 	.word	0x200011f0
 800339c:	200011c0 	.word	0x200011c0
 80033a0:	20000a28 	.word	0x20000a28
 80033a4:	200011ec 	.word	0x200011ec
 80033a8:	20000c2c 	.word	0x20000c2c
 80033ac:	200011e8 	.word	0x200011e8
 80033b0:	20000bb8 	.word	0x20000bb8
 80033b4:	20001138 	.word	0x20001138
 80033b8:	200011c4 	.word	0x200011c4
 80033bc:	20001168 	.word	0x20001168
 80033c0:	200011e0 	.word	0x200011e0
 80033c4:	20000c54 	.word	0x20000c54
 80033c8:	20000988 	.word	0x20000988
 80033cc:	200009d0 	.word	0x200009d0
 80033d0:	20001140 	.word	0x20001140
 80033d4:	20001124 	.word	0x20001124

080033d8 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop

080033dc <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80033dc:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <FOC_CalcCurrRef+0x24>)
 80033e0:	2426      	movs	r4, #38	; 0x26
 80033e2:	fb04 3400 	mla	r4, r4, r0, r3
 80033e6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80033ea:	b103      	cbz	r3, 80033ee <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80033ec:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <FOC_CalcCurrRef+0x28>)
 80033f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80033f4:	f007 ff50 	bl	800b298 <STC_CalcTorqueReference>
 80033f8:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80033fa:	8220      	strh	r0, [r4, #16]
}
 80033fc:	bd10      	pop	{r4, pc}
 80033fe:	bf00      	nop
 8003400:	20001140 	.word	0x20001140
 8003404:	200011f4 	.word	0x200011f4

08003408 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8003408:	4b01      	ldr	r3, [pc, #4]	; (8003410 <TSK_SetChargeBootCapDelayM1+0x8>)
 800340a:	8018      	strh	r0, [r3, #0]
}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000f4e 	.word	0x20000f4e

08003414 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8003416:	8818      	ldrh	r0, [r3, #0]
 8003418:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800341a:	fab0 f080 	clz	r0, r0
 800341e:	0940      	lsrs	r0, r0, #5
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000f4e 	.word	0x20000f4e

08003428 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8003428:	4b01      	ldr	r3, [pc, #4]	; (8003430 <TSK_SetStopPermanencyTimeM1+0x8>)
 800342a:	8018      	strh	r0, [r3, #0]
}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000f52 	.word	0x20000f52

08003434 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8003436:	8818      	ldrh	r0, [r3, #0]
 8003438:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800343a:	fab0 f080 	clz	r0, r0
 800343e:	0940      	lsrs	r0, r0, #5
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000f52 	.word	0x20000f52

08003448 <TSK_MediumFrequencyTaskM1>:
{
 8003448:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 800344a:	4c8e      	ldr	r4, [pc, #568]	; (8003684 <TSK_MediumFrequencyTaskM1+0x23c>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800344c:	488e      	ldr	r0, [pc, #568]	; (8003688 <TSK_MediumFrequencyTaskM1+0x240>)
{
 800344e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8003450:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8003452:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 8003456:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800345a:	f006 fbdd 	bl	8009c18 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	f006 fde2 	bl	800a028 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8003464:	4889      	ldr	r0, [pc, #548]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 8003466:	f008 f801 	bl	800b46c <STM_GetState>
  switch ( StateM1 )
 800346a:	2812      	cmp	r0, #18
 800346c:	d818      	bhi.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
 800346e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003472:	002a      	.short	0x002a
 8003474:	00440038 	.word	0x00440038
 8003478:	00620053 	.word	0x00620053
 800347c:	007a0067 	.word	0x007a0067
 8003480:	00950082 	.word	0x00950082
 8003484:	00170013 	.word	0x00170013
 8003488:	00170017 	.word	0x00170017
 800348c:	00ae009f 	.word	0x00ae009f
 8003490:	00cf00bb 	.word	0x00cf00bb
 8003494:	001900de 	.word	0x001900de
    STM_NextState( &STM[M1], IDLE );
 8003498:	487c      	ldr	r0, [pc, #496]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 800349a:	2100      	movs	r1, #0
 800349c:	f007 ff72 	bl	800b384 <STM_NextState>
}
 80034a0:	b002      	add	sp, #8
 80034a2:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 80034a4:	4878      	ldr	r0, [pc, #480]	; (8003688 <TSK_MediumFrequencyTaskM1+0x240>)
 80034a6:	f006 fb85 	bl	8009bb4 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80034aa:	4878      	ldr	r0, [pc, #480]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 80034ac:	2104      	movs	r1, #4
 80034ae:	f007 ff69 	bl	800b384 <STM_NextState>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d0f4      	beq.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7ff fe40 	bl	800313c <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80034bc:	4b74      	ldr	r3, [pc, #464]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	f007 f8c4 	bl	800a64c <R3_2_SwitchOnPWM>
 80034c4:	e7ec      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 80034c6:	4873      	ldr	r0, [pc, #460]	; (8003694 <TSK_MediumFrequencyTaskM1+0x24c>)
 80034c8:	f006 fb34 	bl	8009b34 <EAC_GetRestartState>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d0e7      	beq.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 80034d0:	4870      	ldr	r0, [pc, #448]	; (8003694 <TSK_MediumFrequencyTaskM1+0x24c>)
 80034d2:	2100      	movs	r1, #0
 80034d4:	f006 fb2c 	bl	8009b30 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 80034d8:	2103      	movs	r1, #3
 80034da:	486c      	ldr	r0, [pc, #432]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 80034dc:	f007 ff52 	bl	800b384 <STM_NextState>
 80034e0:	e7de      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80034e2:	4b6b      	ldr	r3, [pc, #428]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f007 f889 	bl	800a5fc <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80034ea:	2014      	movs	r0, #20
 80034ec:	f7ff ff8c 	bl	8003408 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 80034f0:	210d      	movs	r1, #13
 80034f2:	4866      	ldr	r0, [pc, #408]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 80034f4:	f007 ff46 	bl	800b384 <STM_NextState>
    break;
 80034f8:	e7d2      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 80034fa:	4866      	ldr	r0, [pc, #408]	; (8003694 <TSK_MediumFrequencyTaskM1+0x24c>)
 80034fc:	f006 fafe 	bl	8009afc <EAC_Exec>
 8003500:	4604      	mov	r4, r0
 8003502:	2800      	cmp	r0, #0
 8003504:	f040 80ac 	bne.w	8003660 <TSK_MediumFrequencyTaskM1+0x218>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 8003508:	4b63      	ldr	r3, [pc, #396]	; (8003698 <TSK_MediumFrequencyTaskM1+0x250>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	f007 fec4 	bl	800b298 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 8003510:	4b62      	ldr	r3, [pc, #392]	; (800369c <TSK_MediumFrequencyTaskM1+0x254>)
 8003512:	8258      	strh	r0, [r3, #18]
 8003514:	821c      	strh	r4, [r3, #16]
 8003516:	e7c3      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8003518:	485e      	ldr	r0, [pc, #376]	; (8003694 <TSK_MediumFrequencyTaskM1+0x24c>)
 800351a:	f006 fb07 	bl	8009b2c <EAC_IsAligned>
 800351e:	2800      	cmp	r0, #0
 8003520:	f040 8092 	bne.w	8003648 <TSK_MediumFrequencyTaskM1+0x200>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8003524:	485b      	ldr	r0, [pc, #364]	; (8003694 <TSK_MediumFrequencyTaskM1+0x24c>)
 8003526:	2101      	movs	r1, #1
 8003528:	f006 fb02 	bl	8009b30 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 800352c:	2101      	movs	r1, #1
 800352e:	4857      	ldr	r0, [pc, #348]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 8003530:	f007 ff28 	bl	800b384 <STM_NextState>
      break;
 8003534:	e7b4      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8003536:	2105      	movs	r1, #5
 8003538:	4854      	ldr	r0, [pc, #336]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 800353a:	f007 ff23 	bl	800b384 <STM_NextState>
    break;
 800353e:	e7af      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 8003540:	2000      	movs	r0, #0
 8003542:	f7ff ff49 	bl	80033d8 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8003546:	2000      	movs	r0, #0
 8003548:	f7ff ff48 	bl	80033dc <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800354c:	2106      	movs	r1, #6
 800354e:	484f      	ldr	r0, [pc, #316]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 8003550:	f007 ff18 	bl	800b384 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8003554:	4b50      	ldr	r3, [pc, #320]	; (8003698 <TSK_MediumFrequencyTaskM1+0x250>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	f007 fee8 	bl	800b32c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <TSK_MediumFrequencyTaskM1+0x258>)
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	f7ff fc2a 	bl	8002db8 <MCI_ExecBufferedCommands>
    break;
 8003564:	e79c      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8003566:	4b4e      	ldr	r3, [pc, #312]	; (80036a0 <TSK_MediumFrequencyTaskM1+0x258>)
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	f7ff fc25 	bl	8002db8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800356e:	2000      	movs	r0, #0
 8003570:	f7ff ff34 	bl	80033dc <FOC_CalcCurrRef>
    break;
 8003574:	e794      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	f007 f8b1 	bl	800a6e0 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 800357e:	2000      	movs	r0, #0
 8003580:	f7ff fddc 	bl	800313c <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	f006 fc61 	bl	8009e4c <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800358a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800358e:	f7ff ff4b 	bl	8003428 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8003592:	2108      	movs	r1, #8
 8003594:	483d      	ldr	r0, [pc, #244]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 8003596:	f007 fef5 	bl	800b384 <STM_NextState>
    break;
 800359a:	e781      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800359c:	f7ff ff4a 	bl	8003434 <TSK_StopPermanencyTimeHasElapsedM1>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	f43f af7d 	beq.w	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 80035a6:	2109      	movs	r1, #9
 80035a8:	4838      	ldr	r0, [pc, #224]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 80035aa:	f007 feeb 	bl	800b384 <STM_NextState>
 80035ae:	e777      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80035b0:	f7ff ff30 	bl	8003414 <TSK_ChargeBootCapDelayHasElapsedM1>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	f43f af73 	beq.w	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80035ba:	4b35      	ldr	r3, [pc, #212]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 80035bc:	2100      	movs	r1, #0
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	f006 fef0 	bl	800a3a4 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 80035c4:	210e      	movs	r1, #14
 80035c6:	4831      	ldr	r0, [pc, #196]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 80035c8:	f007 fedc 	bl	800b384 <STM_NextState>
 80035cc:	e768      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 80035d0:	2101      	movs	r1, #1
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	f006 fee6 	bl	800a3a4 <PWMC_CurrentReadingCalibr>
 80035d8:	2800      	cmp	r0, #0
 80035da:	f43f af61 	beq.w	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 80035de:	210f      	movs	r1, #15
 80035e0:	482a      	ldr	r0, [pc, #168]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 80035e2:	f007 fecf 	bl	800b384 <STM_NextState>
 80035e6:	e75b      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80035e8:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <TSK_MediumFrequencyTaskM1+0x250>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <TSK_MediumFrequencyTaskM1+0x254>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80035ec:	6810      	ldr	r0, [r2, #0]
 80035ee:	492d      	ldr	r1, [pc, #180]	; (80036a4 <TSK_MediumFrequencyTaskM1+0x25c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80035f6:	f007 fde3 	bl	800b1c0 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 80035fa:	4826      	ldr	r0, [pc, #152]	; (8003694 <TSK_MediumFrequencyTaskM1+0x24c>)
 80035fc:	f006 fa56 	bl	8009aac <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 8003600:	4822      	ldr	r0, [pc, #136]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 8003602:	2102      	movs	r1, #2
 8003604:	f007 febe 	bl	800b384 <STM_NextState>
 8003608:	2800      	cmp	r0, #0
 800360a:	f43f af49 	beq.w	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
 800360e:	e752      	b.n	80034b6 <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8003610:	f7ff ff00 	bl	8003414 <TSK_ChargeBootCapDelayHasElapsedM1>
 8003614:	2800      	cmp	r0, #0
 8003616:	f43f af43 	beq.w	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 800361c:	2100      	movs	r1, #0
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	f006 fec0 	bl	800a3a4 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8003624:	2111      	movs	r1, #17
 8003626:	4819      	ldr	r0, [pc, #100]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 8003628:	f007 feac 	bl	800b384 <STM_NextState>
 800362c:	e738      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 8003630:	2101      	movs	r1, #1
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	f006 feb6 	bl	800a3a4 <PWMC_CurrentReadingCalibr>
 8003638:	2800      	cmp	r0, #0
 800363a:	f43f af31 	beq.w	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 800363e:	2112      	movs	r1, #18
 8003640:	4812      	ldr	r0, [pc, #72]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 8003642:	f007 fe9f 	bl	800b384 <STM_NextState>
 8003646:	e72b      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	f006 ffd6 	bl	800a5fc <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8003650:	2014      	movs	r0, #20
 8003652:	f7ff fed9 	bl	8003408 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8003656:	2110      	movs	r1, #16
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 800365a:	f007 fe93 	bl	800b384 <STM_NextState>
    break;
 800365e:	e71f      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <TSK_MediumFrequencyTaskM1+0x248>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8003662:	4c0d      	ldr	r4, [pc, #52]	; (8003698 <TSK_MediumFrequencyTaskM1+0x250>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f007 f83b 	bl	800a6e0 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	2101      	movs	r1, #1
 800366e:	f007 fdc3 	bl	800b1f8 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 8003672:	6820      	ldr	r0, [r4, #0]
 8003674:	4904      	ldr	r1, [pc, #16]	; (8003688 <TSK_MediumFrequencyTaskM1+0x240>)
 8003676:	f007 fda3 	bl	800b1c0 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 800367a:	2107      	movs	r1, #7
 800367c:	4803      	ldr	r0, [pc, #12]	; (800368c <TSK_MediumFrequencyTaskM1+0x244>)
 800367e:	f007 fe81 	bl	800b384 <STM_NextState>
 8003682:	e70d      	b.n	80034a0 <TSK_MediumFrequencyTaskM1+0x58>
 8003684:	200011ec 	.word	0x200011ec
 8003688:	2000090c 	.word	0x2000090c
 800368c:	200011e0 	.word	0x200011e0
 8003690:	20001128 	.word	0x20001128
 8003694:	20000988 	.word	0x20000988
 8003698:	200011f4 	.word	0x200011f4
 800369c:	20001140 	.word	0x20001140
 80036a0:	20001138 	.word	0x20001138
 80036a4:	20000c54 	.word	0x20000c54

080036a8 <MC_Scheduler>:
{
 80036a8:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <MC_Scheduler+0x48>)
 80036ac:	781c      	ldrb	r4, [r3, #0]
 80036ae:	2c01      	cmp	r4, #1
 80036b0:	d000      	beq.n	80036b4 <MC_Scheduler+0xc>
}
 80036b2:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80036b4:	4d0f      	ldr	r5, [pc, #60]	; (80036f4 <MC_Scheduler+0x4c>)
 80036b6:	882b      	ldrh	r3, [r5, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	b1ab      	cbz	r3, 80036e8 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80036bc:	882b      	ldrh	r3, [r5, #0]
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <MC_Scheduler+0x50>)
 80036c6:	8813      	ldrh	r3, [r2, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	b11b      	cbz	r3, 80036d4 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80036cc:	8813      	ldrh	r3, [r2, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80036d4:	4a09      	ldr	r2, [pc, #36]	; (80036fc <MC_Scheduler+0x54>)
 80036d6:	8813      	ldrh	r3, [r2, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0e9      	beq.n	80036b2 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80036de:	8813      	ldrh	r3, [r2, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8013      	strh	r3, [r2, #0]
}
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80036e8:	f7ff feae 	bl	8003448 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80036ec:	802c      	strh	r4, [r5, #0]
 80036ee:	e7e9      	b.n	80036c4 <MC_Scheduler+0x1c>
 80036f0:	20000f4c 	.word	0x20000f4c
 80036f4:	20000f50 	.word	0x20000f50
 80036f8:	20000f4e 	.word	0x20000f4e
 80036fc:	20000f52 	.word	0x20000f52

08003700 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8003700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8003704:	4832      	ldr	r0, [pc, #200]	; (80037d0 <TSK_HighFrequencyTask+0xd0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003706:	4f33      	ldr	r7, [pc, #204]	; (80037d4 <TSK_HighFrequencyTask+0xd4>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003708:	4c33      	ldr	r4, [pc, #204]	; (80037d8 <TSK_HighFrequencyTask+0xd8>)
{
 800370a:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800370c:	f006 fa64 	bl	8009bd8 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <TSK_HighFrequencyTask+0xdc>)
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	f007 fd56 	bl	800b1c4 <STC_GetSpeedSensor>
 8003718:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800371a:	f007 fcfb 	bl	800b114 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800371e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8003720:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003722:	6838      	ldr	r0, [r7, #0]
 8003724:	f006 fd12 	bl	800a14c <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8003728:	f000 ff0e 	bl	8004548 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800372c:	f000 fec2 	bl	80044b4 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8003730:	9803      	ldr	r0, [sp, #12]
 8003732:	f7ff fc27 	bl	8002f84 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003736:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8003738:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800373a:	f7ff fc65 	bl	8003008 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800373e:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <TSK_HighFrequencyTask+0xe0>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003740:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003744:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003746:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003748:	1ac9      	subs	r1, r1, r3
 800374a:	6810      	ldr	r0, [r2, #0]
 800374c:	f006 fc26 	bl	8009f9c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003750:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <TSK_HighFrequencyTask+0xe4>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003756:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800375a:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800375c:	1a89      	subs	r1, r1, r2
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	f006 fc1c 	bl	8009f9c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003764:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <TSK_HighFrequencyTask+0xe8>)
 8003766:	f8ad 8008 	strh.w	r8, [sp, #8]
 800376a:	f8ad 000a 	strh.w	r0, [sp, #10]
 800376e:	9902      	ldr	r1, [sp, #8]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	f006 f95f 	bl	8009a34 <Circle_Limitation>
 8003776:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003778:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800377a:	fa0f f883 	sxth.w	r8, r3
 800377e:	141d      	asrs	r5, r3, #16
 8003780:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003782:	f007 fccf 	bl	800b124 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003786:	4631      	mov	r1, r6
 8003788:	9802      	ldr	r0, [sp, #8]
 800378a:	f7ff fc7f 	bl	800308c <MCM_Rev_Park>
 800378e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003790:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003792:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003794:	f006 fcdc 	bl	800a150 <PWMC_SetPhaseVoltage>
 8003798:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800379a:	9803      	ldr	r0, [sp, #12]
 800379c:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800379e:	9804      	ldr	r0, [sp, #16]
 80037a0:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80037a2:	9801      	ldr	r0, [sp, #4]
 80037a4:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 80037a6:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80037a8:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80037aa:	f8a4 8016 	strh.w	r8, [r4, #22]
 80037ae:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 80037b0:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80037b2:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80037b6:	d003      	beq.n	80037c0 <TSK_HighFrequencyTask+0xc0>
}
 80037b8:	2000      	movs	r0, #0
 80037ba:	b006      	add	sp, #24
 80037bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	480a      	ldr	r0, [pc, #40]	; (80037ec <TSK_HighFrequencyTask+0xec>)
 80037c4:	f007 fdc0 	bl	800b348 <STM_FaultProcessing>
}
 80037c8:	2000      	movs	r0, #0
 80037ca:	b006      	add	sp, #24
 80037cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d0:	2000090c 	.word	0x2000090c
 80037d4:	20001128 	.word	0x20001128
 80037d8:	20001140 	.word	0x20001140
 80037dc:	200011f4 	.word	0x200011f4
 80037e0:	20001134 	.word	0x20001134
 80037e4:	200011f0 	.word	0x200011f0
 80037e8:	200011bc 	.word	0x200011bc
 80037ec:	200011e0 	.word	0x200011e0

080037f0 <TSK_SafetyTask_LSON>:
  * @param  motor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_LSON(uint8_t bMotor)
{
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END TSK_SafetyTask_LSON 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  bool TurnOnLowSideAction;

  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 80037f4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80038f0 <TSK_SafetyTask_LSON+0x100>
{
 80037f8:	4604      	mov	r4, r0
  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 80037fa:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80037fe:	f006 fdff 	bl	800a400 <PWMC_GetTurnOnLowSidesAction>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 8003802:	4b36      	ldr	r3, [pc, #216]	; (80038dc <TSK_SafetyTask_LSON+0xec>)
  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 8003804:	4607      	mov	r7, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 8003806:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800380a:	f006 fb75 	bl	8009ef8 <NTC_CalcAvTemp>
 800380e:	4606      	mov	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003810:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8003814:	f006 fdf2 	bl	800a3fc <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 8003818:	f006 060e 	and.w	r6, r6, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800381c:	4330      	orrs	r0, r6
 800381e:	b285      	uxth	r5, r0
                                                                                (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  /* USER CODE BEGIN TSK_SafetyTask_LSON 1 */

  /* USER CODE END TSK_SafetyTask_LSON 1 */
  if(bMotor == M1)
 8003820:	2c00      	cmp	r4, #0
 8003822:	d039      	beq.n	8003898 <TSK_SafetyTask_LSON+0xa8>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(pBusSensorM1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8003824:	4e2e      	ldr	r6, [pc, #184]	; (80038e0 <TSK_SafetyTask_LSON+0xf0>)
 8003826:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800382a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800382e:	43ea      	mvns	r2, r5
 8003830:	4630      	mov	r0, r6
 8003832:	b292      	uxth	r2, r2
 8003834:	4629      	mov	r1, r5
 8003836:	f007 fd87 	bl	800b348 <STM_FaultProcessing>
  if (((CodeReturn & MC_OVER_VOLT) == MC_OVER_VOLT) && (TurnOnLowSideAction == false))
 800383a:	07ab      	lsls	r3, r5, #30
 800383c:	d51b      	bpl.n	8003876 <TSK_SafetyTask_LSON+0x86>
 800383e:	b14f      	cbz	r7, 8003854 <TSK_SafetyTask_LSON+0x64>
    /* USER CODE END TSK_SafetyTask_LSON 2 */
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
  }
  else
  {
    switch (STM_GetState(&STM[bMotor])) /* Is state equal to FAULT_NOW or FAULT_OVER */
 8003840:	4630      	mov	r0, r6
 8003842:	f007 fe13 	bl	800b46c <STM_GetState>
 8003846:	280a      	cmp	r0, #10
 8003848:	d002      	beq.n	8003850 <TSK_SafetyTask_LSON+0x60>
 800384a:	280b      	cmp	r0, #11
 800384c:	d000      	beq.n	8003850 <TSK_SafetyTask_LSON+0x60>
 800384e:	b1e8      	cbz	r0, 800388c <TSK_SafetyTask_LSON+0x9c>
    }
  }
  /* USER CODE BEGIN TSK_SafetyTask_LSON 6 */

  /* USER CODE END TSK_SafetyTask_LSON 6 */
}
 8003850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pEAC[bMotor] != MC_NULL)
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <TSK_SafetyTask_LSON+0xf4>)
 8003856:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800385a:	b110      	cbz	r0, 8003862 <TSK_SafetyTask_LSON+0x72>
      EAC_SetRestartState( pEAC[bMotor], false );
 800385c:	4639      	mov	r1, r7
 800385e:	f006 f967 	bl	8009b30 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]); /* Required before //PWMC_TurnOnLowSides */
 8003862:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8003866:	f006 fd9b 	bl	800a3a0 <PWMC_SwitchOffPWM>
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
 800386a:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
}
 800386e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
 8003872:	f006 bdc1 	b.w	800a3f8 <PWMC_TurnOnLowSides>
    switch (STM_GetState(&STM[bMotor])) /* Is state equal to FAULT_NOW or FAULT_OVER */
 8003876:	4630      	mov	r0, r6
 8003878:	f007 fdf8 	bl	800b46c <STM_GetState>
 800387c:	280a      	cmp	r0, #10
 800387e:	d013      	beq.n	80038a8 <TSK_SafetyTask_LSON+0xb8>
 8003880:	280b      	cmp	r0, #11
 8003882:	d028      	beq.n	80038d6 <TSK_SafetyTask_LSON+0xe6>
 8003884:	2800      	cmp	r0, #0
 8003886:	d1e3      	bne.n	8003850 <TSK_SafetyTask_LSON+0x60>
        if (TurnOnLowSideAction == true)
 8003888:	2f00      	cmp	r7, #0
 800388a:	d0e1      	beq.n	8003850 <TSK_SafetyTask_LSON+0x60>
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800388c:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
}
 8003890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003894:	f006 bd84 	b.w	800a3a0 <PWMC_SwitchOffPWM>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(pBusSensorM1);
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <TSK_SafetyTask_LSON+0xf8>)
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	f007 fbfc 	bl	800b098 <RVBS_CalcAvVbus>
 80038a0:	f000 000e 	and.w	r0, r0, #14
 80038a4:	4305      	orrs	r5, r0
 80038a6:	e7bd      	b.n	8003824 <TSK_SafetyTask_LSON+0x34>
        if (TurnOnLowSideAction == false)
 80038a8:	2f00      	cmp	r7, #0
 80038aa:	d1d1      	bne.n	8003850 <TSK_SafetyTask_LSON+0x60>
          if (pEAC[bMotor] != MC_NULL)
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <TSK_SafetyTask_LSON+0xf4>)
 80038ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80038b2:	b110      	cbz	r0, 80038ba <TSK_SafetyTask_LSON+0xca>
            EAC_SetRestartState( pEAC[bMotor], false );
 80038b4:	4639      	mov	r1, r7
 80038b6:	f006 f93b 	bl	8009b30 <EAC_SetRestartState>
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80038ba:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80038be:	f006 fd6f 	bl	800a3a0 <PWMC_SwitchOffPWM>
          FOC_Clear(bMotor);
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff fc3a 	bl	800313c <FOC_Clear>
          MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <TSK_SafetyTask_LSON+0xfc>)
 80038ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80038ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80038d2:	f006 babb 	b.w	8009e4c <MPM_Clear>
        if (TurnOnLowSideAction == false)
 80038d6:	2f00      	cmp	r7, #0
 80038d8:	d0d8      	beq.n	800388c <TSK_SafetyTask_LSON+0x9c>
 80038da:	e7b9      	b.n	8003850 <TSK_SafetyTask_LSON+0x60>
 80038dc:	20001124 	.word	0x20001124
 80038e0:	200011e0 	.word	0x200011e0
 80038e4:	20001130 	.word	0x20001130
 80038e8:	200011c0 	.word	0x200011c0
 80038ec:	200011ec 	.word	0x200011ec
 80038f0:	20001128 	.word	0x20001128

080038f4 <TSK_SafetyTask>:
{
 80038f4:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <TSK_SafetyTask+0x1c>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d000      	beq.n	8003900 <TSK_SafetyTask+0xc>
}
 80038fe:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_LSON(M1);
 8003900:	2000      	movs	r0, #0
 8003902:	f7ff ff75 	bl	80037f0 <TSK_SafetyTask_LSON>
}
 8003906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800390a:	f000 bda3 	b.w	8004454 <RCM_ExecUserConv>
 800390e:	bf00      	nop
 8003910:	20000f4c 	.word	0x20000f4c

08003914 <MC_RunMotorControlTasks>:
{
 8003914:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <MC_RunMotorControlTasks+0x1c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b903      	cbnz	r3, 800391e <MC_RunMotorControlTasks+0xa>
}
 800391c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800391e:	f7ff fec3 	bl	80036a8 <MC_Scheduler>
    TSK_SafetyTask();
 8003922:	f7ff ffe7 	bl	80038f4 <TSK_SafetyTask>
}
 8003926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800392a:	f001 ba43 	b.w	8004db4 <UI_Scheduler>
 800392e:	bf00      	nop
 8003930:	20000f4c 	.word	0x20000f4c

08003934 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8003934:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <TSK_HardwareFaultTask+0x18>)
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	f006 fed1 	bl	800a6e0 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800393e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8003942:	4803      	ldr	r0, [pc, #12]	; (8003950 <TSK_HardwareFaultTask+0x1c>)
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	f007 bcfe 	b.w	800b348 <STM_FaultProcessing>
 800394c:	20001128 	.word	0x20001128
 8003950:	200011e0 	.word	0x200011e0

08003954 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003958:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800395c:	4a43      	ldr	r2, [pc, #268]	; (8003a6c <mc_lock_pins+0x118>)
 800395e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003960:	2120      	movs	r1, #32
 8003962:	61d9      	str	r1, [r3, #28]
 8003964:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003966:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	920d      	str	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800396c:	4940      	ldr	r1, [pc, #256]	; (8003a70 <mc_lock_pins+0x11c>)
  (void) temp;
 800396e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003970:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003972:	2540      	movs	r5, #64	; 0x40
 8003974:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003976:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	920c      	str	r2, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800397c:	483d      	ldr	r0, [pc, #244]	; (8003a74 <mc_lock_pins+0x120>)
  (void) temp;
 800397e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003980:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003982:	2602      	movs	r6, #2
 8003984:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003986:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	920b      	str	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800398c:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003990:	2701      	movs	r7, #1
  (void) temp;
 8003992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003994:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003996:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003998:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800399a:	4a37      	ldr	r2, [pc, #220]	; (8003a78 <mc_lock_pins+0x124>)
  temp = READ_REG(GPIOx->LCKR);
 800399c:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80039a0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 80039a4:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039a8:	f44f 3c84 	mov.w	ip, #67584	; 0x10800
  (void) temp;
 80039ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039b0:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80039b4:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039b8:	f8c2 c01c 	str.w	ip, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80039bc:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80039c0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  (void) temp;
 80039c4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039c8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80039ca:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039cc:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80039ce:	69d1      	ldr	r1, [r2, #28]
 80039d0:	9108      	str	r1, [sp, #32]
  (void) temp;
 80039d2:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039d4:	4929      	ldr	r1, [pc, #164]	; (8003a7c <mc_lock_pins+0x128>)
 80039d6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80039d8:	2580      	movs	r5, #128	; 0x80
 80039da:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039dc:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80039de:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80039e2:	f8cd c01c 	str.w	ip, [sp, #28]
  (void) temp;
 80039e6:	f8dd e01c 	ldr.w	lr, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039ea:	f8df c094 	ldr.w	ip, [pc, #148]	; 8003a80 <mc_lock_pins+0x12c>
 80039ee:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80039f2:	f44f 7e80 	mov.w	lr, #256	; 0x100
 80039f6:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80039fa:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80039fe:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8003a02:	f8cd c018 	str.w	ip, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003a06:	f44f 7e00 	mov.w	lr, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a0a:	f44f 3c81 	mov.w	ip, #66048	; 0x10200
  (void) temp;
 8003a0e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a12:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003a16:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a1a:	f8c3 c01c 	str.w	ip, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003a1e:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8003a22:	f8cd c014 	str.w	ip, [sp, #20]
  (void) temp;
 8003a26:	f8dd c014 	ldr.w	ip, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a2a:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003a2c:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a2e:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003a30:	69d4      	ldr	r4, [r2, #28]
 8003a32:	9404      	str	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003a34:	f44f 6780 	mov.w	r7, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a38:	f44f 3482 	mov.w	r4, #66560	; 0x10400
  (void) temp;
 8003a3c:	f8dd c010 	ldr.w	ip, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a40:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003a42:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a44:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003a46:	69dc      	ldr	r4, [r3, #28]
 8003a48:	9403      	str	r4, [sp, #12]
  (void) temp;
 8003a4a:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a4c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003a4e:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a50:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003a52:	69d2      	ldr	r2, [r2, #28]
 8003a54:	9202      	str	r2, [sp, #8]
  (void) temp;
 8003a56:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a58:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003a5a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003a5c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	9301      	str	r3, [sp, #4]
  (void) temp;
 8003a62:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8003a64:	b00e      	add	sp, #56	; 0x38
 8003a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a6a:	bf00      	nop
 8003a6c:	00010020 	.word	0x00010020
 8003a70:	00010040 	.word	0x00010040
 8003a74:	00010002 	.word	0x00010002
 8003a78:	48000400 	.word	0x48000400
 8003a7c:	00010080 	.word	0x00010080
 8003a80:	00010100 	.word	0x00010100

08003a84 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	460c      	mov	r4, r1
 8003a88:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8003a8a:	2100      	movs	r1, #0
{
 8003a8c:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8003a8e:	0962      	lsrs	r2, r4, #5
{
 8003a90:	461f      	mov	r7, r3
 8003a92:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8003a94:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8003a98:	d122      	bne.n	8003ae0 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8003a9a:	2c12      	cmp	r4, #18
 8003a9c:	d814      	bhi.n	8003ac8 <MCP_ReceivedFrame+0x44>
 8003a9e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8003aa2:	0016      	.short	0x0016
 8003aa4:	00d1003f 	.word	0x00d1003f
 8003aa8:	00130163 	.word	0x00130163
 8003aac:	01700013 	.word	0x01700013
 8003ab0:	01f80241 	.word	0x01f80241
 8003ab4:	019d021c 	.word	0x019d021c
 8003ab8:	01cc01b5 	.word	0x01cc01b5
 8003abc:	001301e5 	.word	0x001301e5
 8003ac0:	00130013 	.word	0x00130013
 8003ac4:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8003ace:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f10d 020e 	add.w	r2, sp, #14
 8003ad8:	21ff      	movs	r1, #255	; 0xff
 8003ada:	47a0      	blx	r4
    }
  }
}
 8003adc:	b00d      	add	sp, #52	; 0x34
 8003ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8003ae0:	3a01      	subs	r2, #1
 8003ae2:	f001 fa25 	bl	8004f30 <UI_SetReg>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	f000 8234 	beq.w	8003f54 <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 8003aec:	f004 041f 	and.w	r4, r4, #31
 8003af0:	2c12      	cmp	r4, #18
 8003af2:	f200 8238 	bhi.w	8003f66 <MCP_ReceivedFrame+0x4e2>
 8003af6:	e8df f014 	tbh	[pc, r4, lsl #1]
 8003afa:	01ea      	.short	0x01ea
 8003afc:	00a50013 	.word	0x00a50013
 8003b00:	02360137 	.word	0x02360137
 8003b04:	01440236 	.word	0x01440236
 8003b08:	01cc0215 	.word	0x01cc0215
 8003b0c:	017101f0 	.word	0x017101f0
 8003b10:	01a00189 	.word	0x01a00189
 8003b14:	023601b9 	.word	0x023601b9
 8003b18:	02360236 	.word	0x02360236
 8003b1c:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8003b20:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8003b22:	2305      	movs	r3, #5
 8003b24:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8003b28:	2988      	cmp	r1, #136	; 0x88
 8003b2a:	f200 8237 	bhi.w	8003f9c <MCP_ReceivedFrame+0x518>
 8003b2e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003b32:	028c      	.short	0x028c
 8003b34:	02350235 	.word	0x02350235
 8003b38:	02350282 	.word	0x02350282
 8003b3c:	023e023e 	.word	0x023e023e
 8003b40:	023e023e 	.word	0x023e023e
 8003b44:	023e023e 	.word	0x023e023e
 8003b48:	023e023e 	.word	0x023e023e
 8003b4c:	023e023e 	.word	0x023e023e
 8003b50:	025d023e 	.word	0x025d023e
 8003b54:	0235025d 	.word	0x0235025d
 8003b58:	023e0235 	.word	0x023e0235
 8003b5c:	023e023e 	.word	0x023e023e
 8003b60:	023e023e 	.word	0x023e023e
 8003b64:	02350235 	.word	0x02350235
 8003b68:	01510235 	.word	0x01510235
 8003b6c:	02350151 	.word	0x02350151
 8003b70:	02350235 	.word	0x02350235
 8003b74:	02350235 	.word	0x02350235
 8003b78:	02350235 	.word	0x02350235
 8003b7c:	02350235 	.word	0x02350235
 8003b80:	02350235 	.word	0x02350235
 8003b84:	02350235 	.word	0x02350235
 8003b88:	02350235 	.word	0x02350235
 8003b8c:	02350235 	.word	0x02350235
 8003b90:	02350235 	.word	0x02350235
 8003b94:	02350235 	.word	0x02350235
 8003b98:	02350235 	.word	0x02350235
 8003b9c:	02350235 	.word	0x02350235
 8003ba0:	02350235 	.word	0x02350235
 8003ba4:	02350235 	.word	0x02350235
 8003ba8:	02350235 	.word	0x02350235
 8003bac:	02350235 	.word	0x02350235
 8003bb0:	02350235 	.word	0x02350235
 8003bb4:	0235023e 	.word	0x0235023e
 8003bb8:	02350235 	.word	0x02350235
 8003bbc:	025d0235 	.word	0x025d0235
 8003bc0:	025d025d 	.word	0x025d025d
 8003bc4:	02350235 	.word	0x02350235
 8003bc8:	02350235 	.word	0x02350235
 8003bcc:	02350235 	.word	0x02350235
 8003bd0:	0235023e 	.word	0x0235023e
 8003bd4:	02350235 	.word	0x02350235
 8003bd8:	023e023e 	.word	0x023e023e
 8003bdc:	023e023e 	.word	0x023e023e
 8003be0:	023e023e 	.word	0x023e023e
 8003be4:	0235023e 	.word	0x0235023e
 8003be8:	0235025d 	.word	0x0235025d
 8003bec:	02350235 	.word	0x02350235
 8003bf0:	02350235 	.word	0x02350235
 8003bf4:	0235023e 	.word	0x0235023e
 8003bf8:	023e0235 	.word	0x023e0235
 8003bfc:	0235023e 	.word	0x0235023e
 8003c00:	02350235 	.word	0x02350235
 8003c04:	02350235 	.word	0x02350235
 8003c08:	02350235 	.word	0x02350235
 8003c0c:	02350235 	.word	0x02350235
 8003c10:	02350235 	.word	0x02350235
 8003c14:	02350235 	.word	0x02350235
 8003c18:	02820235 	.word	0x02820235
 8003c1c:	025d025d 	.word	0x025d025d
 8003c20:	025d025d 	.word	0x025d025d
 8003c24:	0235025d 	.word	0x0235025d
 8003c28:	02350235 	.word	0x02350235
 8003c2c:	025d025d 	.word	0x025d025d
 8003c30:	02350235 	.word	0x02350235
 8003c34:	02350235 	.word	0x02350235
 8003c38:	02350235 	.word	0x02350235
 8003c3c:	023e0235 	.word	0x023e0235
 8003c40:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8003c44:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8003c46:	2303      	movs	r3, #3
 8003c48:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8003c4c:	2988      	cmp	r1, #136	; 0x88
 8003c4e:	f200 813e 	bhi.w	8003ece <MCP_ReceivedFrame+0x44a>
 8003c52:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c56:	01de      	.short	0x01de
 8003c58:	01de01b9 	.word	0x01de01b9
 8003c5c:	01b901de 	.word	0x01b901de
 8003c60:	01910191 	.word	0x01910191
 8003c64:	01910191 	.word	0x01910191
 8003c68:	01910191 	.word	0x01910191
 8003c6c:	01910191 	.word	0x01910191
 8003c70:	01910191 	.word	0x01910191
 8003c74:	01910191 	.word	0x01910191
 8003c78:	01910191 	.word	0x01910191
 8003c7c:	01910191 	.word	0x01910191
 8003c80:	01910191 	.word	0x01910191
 8003c84:	01910191 	.word	0x01910191
 8003c88:	01910191 	.word	0x01910191
 8003c8c:	013c0191 	.word	0x013c0191
 8003c90:	01b9013c 	.word	0x01b9013c
 8003c94:	01910191 	.word	0x01910191
 8003c98:	01de0191 	.word	0x01de0191
 8003c9c:	013c013c 	.word	0x013c013c
 8003ca0:	013c013c 	.word	0x013c013c
 8003ca4:	013c013c 	.word	0x013c013c
 8003ca8:	013c013c 	.word	0x013c013c
 8003cac:	013c013c 	.word	0x013c013c
 8003cb0:	013c013c 	.word	0x013c013c
 8003cb4:	013c013c 	.word	0x013c013c
 8003cb8:	013c013c 	.word	0x013c013c
 8003cbc:	013c013c 	.word	0x013c013c
 8003cc0:	013c013c 	.word	0x013c013c
 8003cc4:	013c013c 	.word	0x013c013c
 8003cc8:	013c013c 	.word	0x013c013c
 8003ccc:	013c013c 	.word	0x013c013c
 8003cd0:	013c013c 	.word	0x013c013c
 8003cd4:	013c013c 	.word	0x013c013c
 8003cd8:	013c0191 	.word	0x013c0191
 8003cdc:	013c013c 	.word	0x013c013c
 8003ce0:	01b9013c 	.word	0x01b9013c
 8003ce4:	01b901b9 	.word	0x01b901b9
 8003ce8:	01910191 	.word	0x01910191
 8003cec:	01910191 	.word	0x01910191
 8003cf0:	01b901de 	.word	0x01b901de
 8003cf4:	01910191 	.word	0x01910191
 8003cf8:	01910191 	.word	0x01910191
 8003cfc:	01910191 	.word	0x01910191
 8003d00:	01910191 	.word	0x01910191
 8003d04:	01910191 	.word	0x01910191
 8003d08:	01de0191 	.word	0x01de0191
 8003d0c:	013c01b9 	.word	0x013c01b9
 8003d10:	01910191 	.word	0x01910191
 8003d14:	01910191 	.word	0x01910191
 8003d18:	013c0191 	.word	0x013c0191
 8003d1c:	0191013c 	.word	0x0191013c
 8003d20:	01de0191 	.word	0x01de0191
 8003d24:	01b901de 	.word	0x01b901de
 8003d28:	01b901b9 	.word	0x01b901b9
 8003d2c:	01b901b9 	.word	0x01b901b9
 8003d30:	019101de 	.word	0x019101de
 8003d34:	01b90191 	.word	0x01b90191
 8003d38:	0191013c 	.word	0x0191013c
 8003d3c:	01de0191 	.word	0x01de0191
 8003d40:	01b901b9 	.word	0x01b901b9
 8003d44:	01b901b9 	.word	0x01b901b9
 8003d48:	01b901b9 	.word	0x01b901b9
 8003d4c:	01b901b9 	.word	0x01b901b9
 8003d50:	01b901b9 	.word	0x01b901b9
 8003d54:	01de01b9 	.word	0x01de01b9
 8003d58:	01de013c 	.word	0x01de013c
 8003d5c:	01b901b9 	.word	0x01b901b9
 8003d60:	019101b9 	.word	0x019101b9
 8003d64:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8003d68:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8003d6a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8003d6c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8003d70:	4628      	mov	r0, r5
 8003d72:	f001 fb9f 	bl	80054b4 <UI_ExecCmd>
 8003d76:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	f43f aea7 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003d80:	e03c      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
 8003d82:	ac04      	add	r4, sp, #16
 8003d84:	2100      	movs	r1, #0
 8003d86:	4620      	mov	r0, r4
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f007 fd39 	bl	800b800 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003d8e:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8003d92:	f10d 0012 	add.w	r0, sp, #18
 8003d96:	1e71      	subs	r1, r6, #1
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e005      	b.n	8003da8 <MCP_ReceivedFrame+0x324>
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8003da0:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003da4:	f000 815c 	beq.w	8004060 <MCP_ReceivedFrame+0x5dc>
 8003da8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003dac:	2a09      	cmp	r2, #9
 8003dae:	d1f5      	bne.n	8003d9c <MCP_ReceivedFrame+0x318>
 8003db0:	1d5a      	adds	r2, r3, #5
 8003db2:	1dd9      	adds	r1, r3, #7
 8003db4:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8003db6:	5cb2      	ldrb	r2, [r6, r2]
 8003db8:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8003dbc:	5c72      	ldrb	r2, [r6, r1]
 8003dbe:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8003dc2:	5cf3      	ldrb	r3, [r6, r3]
 8003dc4:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8003dc8:	4622      	mov	r2, r4
 8003dca:	2320      	movs	r3, #32
 8003dcc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003dd0:	21f0      	movs	r1, #240	; 0xf0
 8003dd2:	47a0      	blx	r4
      bNoError = true;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8003dda:	e00f      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003ddc:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003dde:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003de0:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003de2:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003de4:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8003de8:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8003dec:	b212      	sxth	r2, r2
 8003dee:	b209      	sxth	r1, r1
 8003df0:	4628      	mov	r0, r5
 8003df2:	f001 fbf1 	bl	80055d8 <UI_SetCurrentReferences>
      bNoError = true;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003e02:	461a      	mov	r2, r3
 8003e04:	21f0      	movs	r1, #240	; 0xf0
 8003e06:	47a0      	blx	r4
}
 8003e08:	b00d      	add	sp, #52	; 0x34
 8003e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003e0c:	4c96      	ldr	r4, [pc, #600]	; (8004068 <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 8003e0e:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8003e10:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003e12:	4621      	mov	r1, r4
 8003e14:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8003e16:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8003e1a:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003e1e:	f001 fbeb 	bl	80055f8 <UI_GetMPInfo>
 8003e22:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8003e26:	2800      	cmp	r0, #0
 8003e28:	f43f ae51 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8003e2c:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8003e30:	7923      	ldrb	r3, [r4, #4]
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	21f0      	movs	r1, #240	; 0xf0
 8003e36:	47b0      	blx	r6
  if (RequireAck)
 8003e38:	e650      	b.n	8003adc <MCP_ReceivedFrame+0x58>
 8003e3a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8003e3e:	ac04      	add	r4, sp, #16
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003e44:	2000      	movs	r0, #0
 8003e46:	e004      	b.n	8003e52 <MCP_ReceivedFrame+0x3ce>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8003e4c:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003e50:	d0ba      	beq.n	8003dc8 <MCP_ReceivedFrame+0x344>
 8003e52:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003e56:	b2c6      	uxtb	r6, r0
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d1f5      	bne.n	8003e48 <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 8003e5c:	f1c6 021f 	rsb	r2, r6, #31
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	3201      	adds	r2, #1
 8003e64:	4420      	add	r0, r4
 8003e66:	f007 fccb 	bl	800b800 <memset>
 8003e6a:	e7ad      	b.n	8003dc8 <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003e6c:	7970      	ldrb	r0, [r6, #5]
 8003e6e:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003e70:	7873      	ldrb	r3, [r6, #1]
 8003e72:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003e74:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003e78:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	b209      	sxth	r1, r1
 8003e80:	4628      	mov	r0, r5
 8003e82:	f001 fb65 	bl	8005550 <UI_ExecTorqueRamp>
 8003e86:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	f43f ae1f 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003e90:	e7b4      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8003e92:	f10d 030e 	add.w	r3, sp, #14
 8003e96:	7831      	ldrb	r1, [r6, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	f10d 020a 	add.w	r2, sp, #10
 8003e9e:	ab03      	add	r3, sp, #12
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f001 fb5f 	bl	8005564 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003ea6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8003eaa:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8003eae:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8003eb2:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003eb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003eba:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8003ebc:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 8003ebe:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8003ec2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	aa04      	add	r2, sp, #16
 8003eca:	21f0      	movs	r1, #240	; 0xf0
 8003ecc:	47a0      	blx	r4
  if (RequireAck)
 8003ece:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	f43f adfb 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003ed8:	e790      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003eda:	78b1      	ldrb	r1, [r6, #2]
 8003edc:	7873      	ldrb	r3, [r6, #1]
 8003ede:	78f2      	ldrb	r2, [r6, #3]
 8003ee0:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003ee2:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8003ee4:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003ee6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003eea:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8003eee:	4a5f      	ldr	r2, [pc, #380]	; (800406c <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003ef0:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003ef2:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8003ef6:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8003efa:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003efc:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8003f00:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8003f04:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8003f06:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8003f0a:	7831      	ldrb	r1, [r6, #0]
 8003f0c:	9000      	str	r0, [sp, #0]
 8003f0e:	b21b      	sxth	r3, r3
 8003f10:	b292      	uxth	r2, r2
 8003f12:	4628      	mov	r0, r5
 8003f14:	f001 fb44 	bl	80055a0 <UI_SetRevupData>
 8003f18:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	f43f add6 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003f22:	e76b      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003f24:	7877      	ldrb	r7, [r6, #1]
 8003f26:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003f28:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003f2a:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003f2c:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003f2e:	78f1      	ldrb	r1, [r6, #3]
 8003f30:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8003f34:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003f38:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8003f3c:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8003f40:	b292      	uxth	r2, r2
 8003f42:	4628      	mov	r0, r5
 8003f44:	f001 faf2 	bl	800552c <UI_ExecSpeedRamp>
 8003f48:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	f43f adbe 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003f52:	e753      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8003f54:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003f58:	230b      	movs	r3, #11
 8003f5a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	f43f adb5 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003f64:	e74a      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
 8003f66:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8003f70:	2800      	cmp	r0, #0
 8003f72:	f43f adac 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003f76:	e741      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003f78:	f10d 0209 	add.w	r2, sp, #9
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f001 f897 	bl	80050b0 <UI_GetReg>
          if ( bNoError == true )
 8003f82:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003f86:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f43f ada0 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8003f8e:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003f92:	2302      	movs	r3, #2
 8003f94:	aa04      	add	r2, sp, #16
 8003f96:	21f0      	movs	r1, #240	; 0xf0
 8003f98:	47a0      	blx	r4
  if (RequireAck)
 8003f9a:	e59f      	b.n	8003adc <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8003f9c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	f43f ad91 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003fac:	e726      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8003fae:	78b2      	ldrb	r2, [r6, #2]
 8003fb0:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8003fb8:	f000 ffba 	bl	8004f30 <UI_SetReg>
 8003fbc:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	f43f ad84 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8003fc6:	e719      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003fc8:	f10d 0209 	add.w	r2, sp, #9
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f001 f86f 	bl	80050b0 <UI_GetReg>
          if ( bNoError == true )
 8003fd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003fd6:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f43f ad78 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8003fde:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	aa04      	add	r2, sp, #16
 8003fe6:	21f0      	movs	r1, #240	; 0xf0
 8003fe8:	47a0      	blx	r4
  if (RequireAck)
 8003fea:	e577      	b.n	8003adc <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003fec:	78b4      	ldrb	r4, [r6, #2]
 8003fee:	7873      	ldrb	r3, [r6, #1]
 8003ff0:	78f0      	ldrb	r0, [r6, #3]
 8003ff2:	7932      	ldrb	r2, [r6, #4]
 8003ff4:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8003ff8:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003ffc:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8004000:	4628      	mov	r0, r5
 8004002:	f000 ff95 	bl	8004f30 <UI_SetReg>
 8004006:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800400a:	2800      	cmp	r0, #0
 800400c:	f43f ad5f 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8004010:	e6f4      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8004012:	f10d 0209 	add.w	r2, sp, #9
 8004016:	4628      	mov	r0, r5
 8004018:	f001 f84a 	bl	80050b0 <UI_GetReg>
           if ( bNoError == true )
 800401c:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8004020:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8004022:	2b00      	cmp	r3, #0
 8004024:	f43f ad53 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8004028:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800402c:	2301      	movs	r3, #1
 800402e:	aa04      	add	r2, sp, #16
 8004030:	21f0      	movs	r1, #240	; 0xf0
 8004032:	47a0      	blx	r4
  if (RequireAck)
 8004034:	e552      	b.n	8003adc <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8004036:	7872      	ldrb	r2, [r6, #1]
 8004038:	4628      	mov	r0, r5
 800403a:	f000 ff79 	bl	8004f30 <UI_SetReg>
 800403e:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8004042:	2800      	cmp	r0, #0
 8004044:	f43f ad43 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 8004048:	e6d8      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800404a:	7872      	ldrb	r2, [r6, #1]
 800404c:	2100      	movs	r1, #0
 800404e:	4628      	mov	r0, r5
 8004050:	f000 ff6e 	bl	8004f30 <UI_SetReg>
 8004054:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8004058:	2800      	cmp	r0, #0
 800405a:	f43f ad38 	beq.w	8003ace <MCP_ReceivedFrame+0x4a>
 800405e:	e6cd      	b.n	8003dfc <MCP_ReceivedFrame+0x378>
 8004060:	2326      	movs	r3, #38	; 0x26
 8004062:	2124      	movs	r1, #36	; 0x24
 8004064:	2222      	movs	r2, #34	; 0x22
 8004066:	e6a6      	b.n	8003db6 <MCP_ReceivedFrame+0x332>
 8004068:	20000f54 	.word	0x20000f54
 800406c:	2aaaaaab 	.word	0x2aaaaaab

08004070 <MCP_WaitNextFrame>:
{
 8004070:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8004072:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004074:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8004076:	6980      	ldr	r0, [r0, #24]
 8004078:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8004080:	69a0      	ldr	r0, [r4, #24]
 8004082:	6a23      	ldr	r3, [r4, #32]
}
 8004084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8004088:	4718      	bx	r3
 800408a:	bf00      	nop

0800408c <MCP_Init>:
{
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	b083      	sub	sp, #12
 8004090:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8004092:	4f0b      	ldr	r7, [pc, #44]	; (80040c0 <MCP_Init+0x34>)
{
 8004094:	4608      	mov	r0, r1
 8004096:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8004098:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 800409a:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 800409e:	4616      	mov	r6, r2
 80040a0:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 80040a2:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <MCP_Init+0x38>)
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <MCP_Init+0x3c>)
 80040a6:	9700      	str	r7, [sp, #0]
 80040a8:	4621      	mov	r1, r4
{
 80040aa:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 80040ac:	f005 feb0 	bl	8009e10 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 80040b0:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80040b4:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7ff ffda 	bl	8004070 <MCP_WaitNextFrame>
}
 80040bc:	b003      	add	sp, #12
 80040be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c0:	080040cd 	.word	0x080040cd
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	08003a85 	.word	0x08003a85

080040cc <MCP_OnTimeOut>:
{
 80040cc:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80040ce:	f7ff ffcf 	bl	8004070 <MCP_WaitNextFrame>
}
 80040d2:	bd08      	pop	{r3, pc}

080040d4 <MCP_SentFrame>:
{
 80040d4:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80040d6:	f7ff ffcb 	bl	8004070 <MCP_WaitNextFrame>
}
 80040da:	bd08      	pop	{r3, pc}

080040dc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80040dc:	b530      	push	{r4, r5, lr}
 80040de:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80040e0:	f003 fdec 	bl	8007cbc <HAL_RCC_GetHCLKFreq>
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80040e6:	4d0c      	ldr	r5, [pc, #48]	; (8004118 <MX_MotorControl_Init+0x3c>)
 80040e8:	4c0c      	ldr	r4, [pc, #48]	; (800411c <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80040ea:	fba3 3000 	umull	r3, r0, r3, r0
 80040ee:	09c0      	lsrs	r0, r0, #7
 80040f0:	f002 fa24 	bl	800653c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80040f4:	4629      	mov	r1, r5
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7ff f864 	bl	80031c4 <MCboot>
  mc_lock_pins();
 80040fc:	f7ff fc2a 	bl	8003954 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <MX_MotorControl_Init+0x44>)
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4807      	ldr	r0, [pc, #28]	; (8004124 <MX_MotorControl_Init+0x48>)
 8004106:	462b      	mov	r3, r5
 8004108:	4622      	mov	r2, r4
 800410a:	2101      	movs	r1, #1
 800410c:	f000 fe12 	bl	8004d34 <UI_TaskInit>
}
 8004110:	b003      	add	sp, #12
 8004112:	bd30      	pop	{r4, r5, pc}
 8004114:	10624dd3 	.word	0x10624dd3
 8004118:	200011fc 	.word	0x200011fc
 800411c:	200011f8 	.word	0x200011f8
 8004120:	0800b8ec 	.word	0x0800b8ec
 8004124:	20000dc8 	.word	0x20000dc8

08004128 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004128:	4a65      	ldr	r2, [pc, #404]	; (80042c0 <RCM_RegisterRegConv+0x198>)
 800412a:	6813      	ldr	r3, [r2, #0]
{
 800412c:	b470      	push	{r4, r5, r6}
 800412e:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004130:	2b00      	cmp	r3, #0
 8004132:	d07e      	beq.n	8004232 <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004134:	7904      	ldrb	r4, [r0, #4]
 8004136:	7918      	ldrb	r0, [r3, #4]
 8004138:	4284      	cmp	r4, r0
 800413a:	d01e      	beq.n	800417a <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800413c:	6855      	ldr	r5, [r2, #4]
 800413e:	2d00      	cmp	r5, #0
 8004140:	f000 808b 	beq.w	800425a <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004144:	792b      	ldrb	r3, [r5, #4]
 8004146:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 8004148:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800414c:	d079      	beq.n	8004242 <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800414e:	6893      	ldr	r3, [r2, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a2 	beq.w	800429a <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004156:	791d      	ldrb	r5, [r3, #4]
 8004158:	42a5      	cmp	r5, r4
 800415a:	d078      	beq.n	800424e <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800415c:	68d3      	ldr	r3, [r2, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80a0 	beq.w	80042a4 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004164:	791d      	ldrb	r5, [r3, #4]
 8004166:	42a5      	cmp	r5, r4
 8004168:	f000 8082 	beq.w	8004270 <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800416c:	2803      	cmp	r0, #3
 800416e:	bf88      	it	hi
 8004170:	20ff      	movhi	r0, #255	; 0xff
 8004172:	f240 80a0 	bls.w	80042b6 <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8004176:	bc70      	pop	{r4, r5, r6}
 8004178:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	680b      	ldr	r3, [r1, #0]
 800417e:	4283      	cmp	r3, r0
 8004180:	d1dc      	bne.n	800413c <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8004182:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004184:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004186:	4d4f      	ldr	r5, [pc, #316]	; (80042c4 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 8004188:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800418c:	2200      	movs	r2, #0
 800418e:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8004192:	07e5      	lsls	r5, r4, #31
 8004194:	d422      	bmi.n	80041dc <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004196:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004198:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80041a0:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80041a2:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80041a4:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80041a6:	f022 0220 	bic.w	r2, r2, #32
 80041aa:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80041ac:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80041b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80041b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041bc:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	2a00      	cmp	r2, #0
 80041c2:	dbfc      	blt.n	80041be <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80041c4:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 80041c6:	07d4      	lsls	r4, r2, #31
 80041c8:	d408      	bmi.n	80041dc <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 80041ca:	4c3f      	ldr	r4, [pc, #252]	; (80042c8 <RCM_RegisterRegConv+0x1a0>)
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	4022      	ands	r2, r4
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	07d2      	lsls	r2, r2, #31
 80041da:	d5f7      	bpl.n	80041cc <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 80041dc:	4d3b      	ldr	r5, [pc, #236]	; (80042cc <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80041de:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80041e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80041e4:	0056      	lsls	r6, r2, #1
 80041e6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80041ea:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 80041ee:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 80041f0:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 80041f2:	2200      	movs	r2, #0
 80041f4:	55aa      	strb	r2, [r5, r6]
 80041f6:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80041f8:	790c      	ldrb	r4, [r1, #4]
 80041fa:	2c09      	cmp	r4, #9
 80041fc:	d83f      	bhi.n	800427e <RCM_RegisterRegConv+0x156>
 80041fe:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8004202:	06a2      	lsls	r2, r4, #26
 8004204:	2501      	movs	r5, #1
 8004206:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 800420a:	fa05 f404 	lsl.w	r4, r5, r4
 800420e:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004210:	0dd4      	lsrs	r4, r2, #23
 8004212:	f004 0404 	and.w	r4, r4, #4
 8004216:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004218:	688d      	ldr	r5, [r1, #8]
 800421a:	58e1      	ldr	r1, [r4, r3]
 800421c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004220:	2607      	movs	r6, #7
 8004222:	4096      	lsls	r6, r2
 8004224:	4095      	lsls	r5, r2
 8004226:	ea21 0206 	bic.w	r2, r1, r6
 800422a:	432a      	orrs	r2, r5
 800422c:	50e2      	str	r2, [r4, r3]
}
 800422e:	bc70      	pop	{r4, r5, r6}
 8004230:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004232:	6855      	ldr	r5, [r2, #4]
 8004234:	2d00      	cmp	r5, #0
 8004236:	d039      	beq.n	80042ac <RCM_RegisterRegConv+0x184>
 8004238:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 800423a:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800423c:	792b      	ldrb	r3, [r5, #4]
 800423e:	42a3      	cmp	r3, r4
 8004240:	d185      	bne.n	800414e <RCM_RegisterRegConv+0x26>
 8004242:	682d      	ldr	r5, [r5, #0]
 8004244:	680b      	ldr	r3, [r1, #0]
 8004246:	429d      	cmp	r5, r3
 8004248:	d181      	bne.n	800414e <RCM_RegisterRegConv+0x26>
 800424a:	2001      	movs	r0, #1
 800424c:	e79a      	b.n	8004184 <RCM_RegisterRegConv+0x5c>
 800424e:	681d      	ldr	r5, [r3, #0]
 8004250:	680b      	ldr	r3, [r1, #0]
 8004252:	429d      	cmp	r5, r3
 8004254:	d182      	bne.n	800415c <RCM_RegisterRegConv+0x34>
      i++;
 8004256:	2002      	movs	r0, #2
 8004258:	e794      	b.n	8004184 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800425a:	6893      	ldr	r3, [r2, #8]
 800425c:	2001      	movs	r0, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	f47f af79 	bne.w	8004156 <RCM_RegisterRegConv+0x2e>
 8004264:	68d3      	ldr	r3, [r2, #12]
 8004266:	b333      	cbz	r3, 80042b6 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004268:	791d      	ldrb	r5, [r3, #4]
 800426a:	790c      	ldrb	r4, [r1, #4]
 800426c:	42a5      	cmp	r5, r4
 800426e:	d122      	bne.n	80042b6 <RCM_RegisterRegConv+0x18e>
 8004270:	681c      	ldr	r4, [r3, #0]
 8004272:	680b      	ldr	r3, [r1, #0]
 8004274:	429c      	cmp	r4, r3
 8004276:	f47f af79 	bne.w	800416c <RCM_RegisterRegConv+0x44>
      i++;
 800427a:	2003      	movs	r0, #3
 800427c:	e782      	b.n	8004184 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800427e:	2503      	movs	r5, #3
 8004280:	f06f 061d 	mvn.w	r6, #29
 8004284:	2201      	movs	r2, #1
 8004286:	fb15 6504 	smlabb	r5, r5, r4, r6
 800428a:	40a2      	lsls	r2, r4
 800428c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8004290:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8004294:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004298:	e7ba      	b.n	8004210 <RCM_RegisterRegConv+0xe8>
      i++;
 800429a:	2805      	cmp	r0, #5
 800429c:	bf34      	ite	cc
 800429e:	2000      	movcc	r0, #0
 80042a0:	2002      	movcs	r0, #2
 80042a2:	e7df      	b.n	8004264 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80042a4:	2804      	cmp	r0, #4
 80042a6:	680b      	ldr	r3, [r1, #0]
 80042a8:	d8e7      	bhi.n	800427a <RCM_RegisterRegConv+0x152>
 80042aa:	e76b      	b.n	8004184 <RCM_RegisterRegConv+0x5c>
 80042ac:	6893      	ldr	r3, [r2, #8]
 80042ae:	b123      	cbz	r3, 80042ba <RCM_RegisterRegConv+0x192>
 80042b0:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 80042b2:	4628      	mov	r0, r5
 80042b4:	e74f      	b.n	8004156 <RCM_RegisterRegConv+0x2e>
 80042b6:	680b      	ldr	r3, [r1, #0]
 80042b8:	e764      	b.n	8004184 <RCM_RegisterRegConv+0x5c>
 80042ba:	4618      	mov	r0, r3
 80042bc:	e7d2      	b.n	8004264 <RCM_RegisterRegConv+0x13c>
 80042be:	bf00      	nop
 80042c0:	20001240 	.word	0x20001240
 80042c4:	2000121c 	.word	0x2000121c
 80042c8:	7fffffc0 	.word	0x7fffffc0
 80042cc:	20001204 	.word	0x20001204

080042d0 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80042d0:	4b5c      	ldr	r3, [pc, #368]	; (8004444 <RCM_ExecRegularConv+0x174>)
 80042d2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80042d6:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 80042d8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80042dc:	0044      	lsls	r4, r0, #1
 80042de:	2a00      	cmp	r2, #0
 80042e0:	d136      	bne.n	8004350 <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80042e2:	7819      	ldrb	r1, [r3, #0]
 80042e4:	2900      	cmp	r1, #0
 80042e6:	d179      	bne.n	80043dc <RCM_ExecRegularConv+0x10c>
 80042e8:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 80042ea:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 80042ec:	2900      	cmp	r1, #0
 80042ee:	d07b      	beq.n	80043e8 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 80042f0:	7ade      	ldrb	r6, [r3, #11]
 80042f2:	42b0      	cmp	r0, r6
 80042f4:	f0c0 8098 	bcc.w	8004428 <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 80042f8:	7b1a      	ldrb	r2, [r3, #12]
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	f000 8097 	beq.w	800442e <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 8004300:	7c5e      	ldrb	r6, [r3, #17]
 8004302:	42b0      	cmp	r0, r6
 8004304:	d305      	bcc.n	8004312 <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 8004306:	7c9a      	ldrb	r2, [r3, #18]
 8004308:	2a00      	cmp	r2, #0
 800430a:	f040 8094 	bne.w	8004436 <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 800430e:	2202      	movs	r2, #2
 8004310:	e071      	b.n	80043f6 <RCM_ExecRegularConv+0x126>
 8004312:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8004314:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 8004316:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 800431a:	1821      	adds	r1, r4, r0
 800431c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8004320:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8004324:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 8004326:	4e48      	ldr	r6, [pc, #288]	; (8004448 <RCM_ExecRegularConv+0x178>)
 8004328:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 800432a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 800432e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8004332:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 8004334:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8004336:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 8004338:	1821      	adds	r1, r4, r0
 800433a:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800433c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8004340:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8004344:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004348:	7852      	ldrb	r2, [r2, #1]
 800434a:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 800434c:	bf18      	it	ne
 800434e:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8004350:	4a3e      	ldr	r2, [pc, #248]	; (800444c <RCM_ExecRegularConv+0x17c>)
 8004352:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8004356:	bb8a      	cbnz	r2, 80043bc <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004358:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <RCM_ExecRegularConv+0x180>)
 800435a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800435e:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	2d09      	cmp	r5, #9
 8004364:	d930      	bls.n	80043c8 <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8004366:	2603      	movs	r6, #3
 8004368:	f06f 071d 	mvn.w	r7, #29
 800436c:	2201      	movs	r2, #1
 800436e:	fb16 7605 	smlabb	r6, r6, r5, r7
 8004372:	40aa      	lsls	r2, r5
 8004374:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8004378:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800437c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8004380:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8004382:	0d12      	lsrs	r2, r2, #20
 8004384:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8004388:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 800438c:	432a      	orrs	r2, r5
 800438e:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8004390:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8004392:	688a      	ldr	r2, [r1, #8]
 8004394:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004398:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800439c:	f042 0204 	orr.w	r2, r2, #4
 80043a0:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80043a2:	680a      	ldr	r2, [r1, #0]
 80043a4:	0752      	lsls	r2, r2, #29
 80043a6:	d5fc      	bpl.n	80043a2 <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80043a8:	1822      	adds	r2, r4, r0
 80043aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80043ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043b0:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80043b2:	4d25      	ldr	r5, [pc, #148]	; (8004448 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 80043b4:	2102      	movs	r1, #2
 80043b6:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80043b8:	7952      	ldrb	r2, [r2, #5]
 80043ba:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 80043bc:	4420      	add	r0, r4
 80043be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 80043c2:	bcf0      	pop	{r4, r5, r6, r7}
 80043c4:	8858      	ldrh	r0, [r3, #2]
 80043c6:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80043c8:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80043cc:	06aa      	lsls	r2, r5, #26
 80043ce:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80043d0:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80043d4:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80043d8:	432a      	orrs	r2, r5
 80043da:	e7d1      	b.n	8004380 <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 80043dc:	795e      	ldrb	r6, [r3, #5]
 80043de:	4286      	cmp	r6, r0
 80043e0:	d898      	bhi.n	8004314 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 80043e2:	7999      	ldrb	r1, [r3, #6]
 80043e4:	2900      	cmp	r1, #0
 80043e6:	d183      	bne.n	80042f0 <RCM_ExecRegularConv+0x20>
 80043e8:	7b19      	ldrb	r1, [r3, #12]
 80043ea:	2900      	cmp	r1, #0
 80043ec:	d188      	bne.n	8004300 <RCM_ExecRegularConv+0x30>
 80043ee:	7c99      	ldrb	r1, [r3, #18]
 80043f0:	bb09      	cbnz	r1, 8004436 <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 80043f2:	2a04      	cmp	r2, #4
 80043f4:	d014      	beq.n	8004420 <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 80043f6:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80043fa:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80043fe:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8004400:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8004404:	4e10      	ldr	r6, [pc, #64]	; (8004448 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 8004406:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 800440a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 800440e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8004412:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 8004414:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8004418:	7832      	ldrb	r2, [r6, #0]
 800441a:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 800441c:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 800441e:	e78b      	b.n	8004338 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 8004420:	4e09      	ldr	r6, [pc, #36]	; (8004448 <RCM_ExecRegularConv+0x178>)
 8004422:	4602      	mov	r2, r0
 8004424:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 8004426:	e787      	b.n	8004338 <RCM_ExecRegularConv+0x68>
      i++;
 8004428:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 800442a:	4611      	mov	r1, r2
 800442c:	e773      	b.n	8004316 <RCM_ExecRegularConv+0x46>
 800442e:	7c9a      	ldrb	r2, [r3, #18]
 8004430:	b90a      	cbnz	r2, 8004436 <RCM_ExecRegularConv+0x166>
      i++;
 8004432:	2201      	movs	r2, #1
 8004434:	e7df      	b.n	80043f6 <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 8004436:	7dde      	ldrb	r6, [r3, #23]
 8004438:	4286      	cmp	r6, r0
      i++;
 800443a:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 800443e:	d9da      	bls.n	80043f6 <RCM_ExecRegularConv+0x126>
 8004440:	e768      	b.n	8004314 <RCM_ExecRegularConv+0x44>
 8004442:	bf00      	nop
 8004444:	20001204 	.word	0x20001204
 8004448:	20001200 	.word	0x20001200
 800444c:	20000b3c 	.word	0x20000b3c
 8004450:	20001240 	.word	0x20001240

08004454 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8004454:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8004456:	4c12      	ldr	r4, [pc, #72]	; (80044a0 <RCM_ExecUserConv+0x4c>)
 8004458:	7823      	ldrb	r3, [r4, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d000      	beq.n	8004460 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800445e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004460:	4d10      	ldr	r5, [pc, #64]	; (80044a4 <RCM_ExecUserConv+0x50>)
 8004462:	7828      	ldrb	r0, [r5, #0]
 8004464:	f7ff ff34 	bl	80042d0 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004468:	782b      	ldrb	r3, [r5, #0]
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800446c:	490f      	ldr	r1, [pc, #60]	; (80044ac <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800446e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8004472:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004476:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004478:	7852      	ldrb	r2, [r2, #1]
 800447a:	b10a      	cbz	r2, 8004480 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 800447c:	2202      	movs	r2, #2
 800447e:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8004480:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <RCM_ExecUserConv+0x5c>)
 8004482:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8004486:	2d00      	cmp	r5, #0
 8004488:	d0e9      	beq.n	800445e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800448a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800448e:	2100      	movs	r1, #0
 8004490:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	4601      	mov	r1, r0
 8004496:	4618      	mov	r0, r3
 8004498:	462b      	mov	r3, r5
}
 800449a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800449e:	4718      	bx	r3
 80044a0:	2000123c 	.word	0x2000123c
 80044a4:	20001201 	.word	0x20001201
 80044a8:	20001204 	.word	0x20001204
 80044ac:	20001250 	.word	0x20001250
 80044b0:	2000121c 	.word	0x2000121c

080044b4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 80044b4:	4b21      	ldr	r3, [pc, #132]	; (800453c <RCM_ExecNextConv+0x88>)
 80044b6:	4822      	ldr	r0, [pc, #136]	; (8004540 <RCM_ExecNextConv+0x8c>)
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80044be:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80044c2:	b383      	cbz	r3, 8004526 <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <RCM_ExecNextConv+0x90>)
{
 80044c6:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80044c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044cc:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80044ce:	2504      	movs	r5, #4
 80044d0:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80044d2:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80044d4:	2d09      	cmp	r5, #9
 80044d6:	ea4f 0442 	mov.w	r4, r2, lsl #1
 80044da:	d925      	bls.n	8004528 <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80044dc:	2603      	movs	r6, #3
 80044de:	f06f 071d 	mvn.w	r7, #29
 80044e2:	2301      	movs	r3, #1
 80044e4:	fb16 7605 	smlabb	r6, r6, r5, r7
 80044e8:	40ab      	lsls	r3, r5
 80044ea:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 80044ee:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80044f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80044f6:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80044f8:	0d1b      	lsrs	r3, r3, #20
 80044fa:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80044fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004502:	432b      	orrs	r3, r5
 8004504:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8004506:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8004508:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800450a:	4422      	add	r2, r4
 800450c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004510:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8004514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004518:	f043 0304 	orr.w	r3, r3, #4
 800451c:	2201      	movs	r2, #1
 800451e:	608b      	str	r3, [r1, #8]
 8004520:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004522:	bcf0      	pop	{r4, r5, r6, r7}
 8004524:	4770      	bx	lr
 8004526:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8004528:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800452c:	06ab      	lsls	r3, r5, #26
 800452e:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8004530:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8004534:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8004538:	432b      	orrs	r3, r5
 800453a:	e7dc      	b.n	80044f6 <RCM_ExecNextConv+0x42>
 800453c:	20001200 	.word	0x20001200
 8004540:	20001204 	.word	0x20001204
 8004544:	20001240 	.word	0x20001240

08004548 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8004548:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 800454a:	4c0f      	ldr	r4, [pc, #60]	; (8004588 <RCM_ReadOngoingConv+0x40>)
 800454c:	4a0f      	ldr	r2, [pc, #60]	; (800458c <RCM_ReadOngoingConv+0x44>)
 800454e:	7823      	ldrb	r3, [r4, #0]
 8004550:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004554:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004558:	0058      	lsls	r0, r3, #1
 800455a:	784d      	ldrb	r5, [r1, #1]
 800455c:	2d01      	cmp	r5, #1
 800455e:	d006      	beq.n	800456e <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004560:	4403      	add	r3, r0
 8004562:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004566:	7953      	ldrb	r3, [r2, #5]
 8004568:	7023      	strb	r3, [r4, #0]
}
 800456a:	bc70      	pop	{r4, r5, r6}
 800456c:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 800456e:	4d08      	ldr	r5, [pc, #32]	; (8004590 <RCM_ReadOngoingConv+0x48>)
 8004570:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8004574:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004576:	682e      	ldr	r6, [r5, #0]
 8004578:	0776      	lsls	r6, r6, #29
 800457a:	d5f1      	bpl.n	8004560 <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800457c:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800457e:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8004580:	2502      	movs	r5, #2
 8004582:	704d      	strb	r5, [r1, #1]
 8004584:	e7ec      	b.n	8004560 <RCM_ReadOngoingConv+0x18>
 8004586:	bf00      	nop
 8004588:	20001200 	.word	0x20001200
 800458c:	20001204 	.word	0x20001204
 8004590:	20001240 	.word	0x20001240

08004594 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004594:	4811      	ldr	r0, [pc, #68]	; (80045dc <MX_SPI2_Init+0x48>)
{
 8004596:	b538      	push	{r3, r4, r5, lr}
  hspi2.Instance = SPI2;
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <MX_SPI2_Init+0x4c>)
 800459a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800459c:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80045a0:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80045a4:	f44f 6570 	mov.w	r5, #3840	; 0xf00
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80045a8:	2418      	movs	r4, #24
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 80045aa:	2107      	movs	r1, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045ac:	6042      	str	r2, [r0, #4]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80045ae:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80045b0:	2208      	movs	r2, #8
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045b2:	2300      	movs	r3, #0
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80045b8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80045bc:	60c5      	str	r5, [r0, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80045be:	61c4      	str	r4, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 80045c0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80045c2:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045c4:	6083      	str	r3, [r0, #8]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80045c8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80045ca:	f003 fe25 	bl	8008218 <HAL_SPI_Init>
 80045ce:	b900      	cbnz	r0, 80045d2 <MX_SPI2_Init+0x3e>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80045d0:	bd38      	pop	{r3, r4, r5, pc}
 80045d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80045d6:	f7fe ba7f 	b.w	8002ad8 <Error_Handler>
 80045da:	bf00      	nop
 80045dc:	20001254 	.word	0x20001254
 80045e0:	40003800 	.word	0x40003800

080045e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80045e4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 80045e6:	6802      	ldr	r2, [r0, #0]
 80045e8:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <HAL_SPI_MspInit+0xe4>)
{
 80045ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI2)
 80045ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80045f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80045f8:	9406      	str	r4, [sp, #24]
  if(spiHandle->Instance==SPI2)
 80045fa:	d001      	beq.n	8004600 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80045fc:	b008      	add	sp, #32
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004600:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8004604:	4e31      	ldr	r6, [pc, #196]	; (80046cc <HAL_SPI_MspInit+0xe8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004606:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800460c:	659a      	str	r2, [r3, #88]	; 0x58
 800460e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004610:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004614:	9200      	str	r2, [sp, #0]
 8004616:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004628:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800462c:	2302      	movs	r3, #2
 800462e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	2300      	movs	r3, #0
 8004636:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800463c:	2305      	movs	r3, #5
 800463e:	4605      	mov	r5, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004640:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004642:	4823      	ldr	r0, [pc, #140]	; (80046d0 <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004644:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004646:	f002 fe2f 	bl	80072a8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel1;
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <HAL_SPI_MspInit+0xf0>)
 800464c:	6033      	str	r3, [r6, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800464e:	200c      	movs	r0, #12
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004650:	2180      	movs	r1, #128	; 0x80
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004652:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004656:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800465a:	6070      	str	r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800465c:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800465e:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004662:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004666:	60b4      	str	r4, [r6, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004668:	60f4      	str	r4, [r6, #12]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800466a:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800466c:	f001 ff86 	bl	800657c <HAL_DMA_Init>
 8004670:	bb20      	cbnz	r0, 80046bc <HAL_SPI_MspInit+0xd8>
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8004672:	4c19      	ldr	r4, [pc, #100]	; (80046d8 <HAL_SPI_MspInit+0xf4>)
 8004674:	4919      	ldr	r1, [pc, #100]	; (80046dc <HAL_SPI_MspInit+0xf8>)
 8004676:	6021      	str	r1, [r4, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004678:	220d      	movs	r2, #13
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800467a:	2010      	movs	r0, #16
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800467c:	2380      	movs	r3, #128	; 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800467e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004682:	6062      	str	r2, [r4, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004684:	60a0      	str	r0, [r4, #8]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004686:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800468a:	6123      	str	r3, [r4, #16]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800468c:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800468e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004690:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004692:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004696:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800469a:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800469c:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800469e:	f001 ff6d 	bl	800657c <HAL_DMA_Init>
 80046a2:	b970      	cbnz	r0, 80046c2 <HAL_SPI_MspInit+0xde>
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2104      	movs	r1, #4
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80046a8:	656c      	str	r4, [r5, #84]	; 0x54
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80046aa:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80046ac:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80046ae:	f001 feff 	bl	80064b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046b2:	2024      	movs	r0, #36	; 0x24
 80046b4:	f001 ff34 	bl	8006520 <HAL_NVIC_EnableIRQ>
}
 80046b8:	b008      	add	sp, #32
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80046bc:	f7fe fa0c 	bl	8002ad8 <Error_Handler>
 80046c0:	e7d7      	b.n	8004672 <HAL_SPI_MspInit+0x8e>
      Error_Handler();
 80046c2:	f7fe fa09 	bl	8002ad8 <Error_Handler>
 80046c6:	e7ed      	b.n	80046a4 <HAL_SPI_MspInit+0xc0>
 80046c8:	40003800 	.word	0x40003800
 80046cc:	200012b8 	.word	0x200012b8
 80046d0:	48000400 	.word	0x48000400
 80046d4:	40020008 	.word	0x40020008
 80046d8:	20001318 	.word	0x20001318
 80046dc:	4002001c 	.word	0x4002001c

080046e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_MspInit+0x3c>)
{
 80046e2:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
 80046ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80046ee:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f0:	f002 0201 	and.w	r2, r2, #1
 80046f4:	9200      	str	r2, [sp, #0]
 80046f6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004708:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800470c:	f001 febc 	bl	8006488 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004710:	b003      	add	sp, #12
 8004712:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8004716:	f002 bf45 	b.w	80075a4 <HAL_PWREx_DisableUCPDDeadBattery>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000

08004720 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004720:	4801      	ldr	r0, [pc, #4]	; (8004728 <DMA1_Channel1_IRQHandler+0x8>)
 8004722:	f002 b803 	b.w	800672c <HAL_DMA_IRQHandler>
 8004726:	bf00      	nop
 8004728:	200012b8 	.word	0x200012b8

0800472c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <DMA1_Channel2_IRQHandler+0x8>)
 800472e:	f001 bffd 	b.w	800672c <HAL_DMA_IRQHandler>
 8004732:	bf00      	nop
 8004734:	20001318 	.word	0x20001318

08004738 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <FDCAN1_IT0_IRQHandler+0x8>)
 800473a:	f002 bb3f 	b.w	8006dbc <HAL_FDCAN_IRQHandler>
 800473e:	bf00      	nop
 8004740:	20001064 	.word	0x20001064

08004744 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <SPI2_IRQHandler+0x8>)
 8004746:	f003 beb7 	b.w	80084b8 <HAL_SPI_IRQHandler>
 800474a:	bf00      	nop
 800474c:	20001254 	.word	0x20001254

08004750 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <TIM6_DAC_IRQHandler+0x8>)
 8004752:	f004 bb83 	b.w	8008e5c <HAL_TIM_IRQHandler>
 8004756:	bf00      	nop
 8004758:	200013c4 	.word	0x200013c4

0800475c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800475c:	4801      	ldr	r0, [pc, #4]	; (8004764 <TIM7_IRQHandler+0x8>)
 800475e:	f004 bb7d 	b.w	8008e5c <HAL_TIM_IRQHandler>
 8004762:	bf00      	nop
 8004764:	2000145c 	.word	0x2000145c

08004768 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800476c:	2240      	movs	r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8004770:	f7fe bfc6 	b.w	8003700 <TSK_HighFrequencyTask>

08004774 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004776:	4804      	ldr	r0, [pc, #16]	; (8004788 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004778:	f06f 0201 	mvn.w	r2, #1
 800477c:	611a      	str	r2, [r3, #16]
 800477e:	f006 bab7 	b.w	800acf0 <R3_2_TIMx_UP_IRQHandler>
 8004782:	bf00      	nop
 8004784:	40012c00 	.word	0x40012c00
 8004788:	20000b3c 	.word	0x20000b3c

0800478c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 800478c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	0611      	lsls	r1, r2, #24
 8004794:	d505      	bpl.n	80047a2 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004796:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 800479a:	480a      	ldr	r0, [pc, #40]	; (80047c4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	f006 fb09 	bl	800adb4 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	05d2      	lsls	r2, r2, #23
 80047a8:	d505      	bpl.n	80047b6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80047aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80047b0:	611a      	str	r2, [r3, #16]
 80047b2:	f006 fadf 	bl	800ad74 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80047b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80047ba:	f7fe bf75 	b.w	80036a8 <MC_Scheduler>
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	20000b3c 	.word	0x20000b3c

080047c8 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 80047c8:	4806      	ldr	r0, [pc, #24]	; (80047e4 <TIM4_IRQHandler+0x1c>)
 80047ca:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	07d1      	lsls	r1, r2, #31
 80047d0:	d502      	bpl.n	80047d8 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	07d2      	lsls	r2, r2, #31
 80047d6:	d400      	bmi.n	80047da <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80047d8:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80047da:	f06f 0201 	mvn.w	r2, #1
 80047de:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 80047e0:	f005 bb00 	b.w	8009de4 <ENC_IRQHandler>
 80047e4:	2000090c 	.word	0x2000090c

080047e8 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80047e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80047ea:	4c18      	ldr	r4, [pc, #96]	; (800484c <USART2_IRQHandler+0x64>)
 80047ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	0691      	lsls	r1, r2, #26
 80047f4:	d50b      	bpl.n	800480e <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80047f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80047f8:	4620      	mov	r0, r4
 80047fa:	b2c9      	uxtb	r1, r1
 80047fc:	f006 fee4 	bl	800b5c8 <UFCP_RX_IRQ_Handler>
 8004800:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8004802:	2b01      	cmp	r3, #1
 8004804:	d01a      	beq.n	800483c <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8004806:	2b02      	cmp	r3, #2
 8004808:	d01d      	beq.n	8004846 <USART2_IRQHandler+0x5e>
 800480a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	0612      	lsls	r2, r2, #24
 8004812:	d504      	bpl.n	800481e <USART2_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8004814:	480d      	ldr	r0, [pc, #52]	; (800484c <USART2_IRQHandler+0x64>)
 8004816:	f006 fe3f 	bl	800b498 <UFCP_TX_IRQ_Handler>
 800481a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	071b      	lsls	r3, r3, #28
 8004822:	d50a      	bpl.n	800483a <USART2_IRQHandler+0x52>
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8004824:	4809      	ldr	r0, [pc, #36]	; (800484c <USART2_IRQHandler+0x64>)
 8004826:	f006 ff31 	bl	800b68c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800482a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800482e:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8004830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004834:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8004836:	f000 badf 	b.w	8004df8 <UI_SerialCommunicationTimeOutStop>
}
 800483a:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 800483c:	f000 fae2 	bl	8004e04 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8004840:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004844:	e7e3      	b.n	800480e <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8004846:	f000 fad7 	bl	8004df8 <UI_SerialCommunicationTimeOutStop>
 800484a:	e7de      	b.n	800480a <USART2_IRQHandler+0x22>
 800484c:	20000c8c 	.word	0x20000c8c

08004850 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004850:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004852:	f7ff f86f 	bl	8003934 <TSK_HardwareFaultTask>
 8004856:	4d18      	ldr	r5, [pc, #96]	; (80048b8 <HardFault_Handler+0x68>)
 8004858:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 800485a:	462c      	mov	r4, r5
 800485c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	0711      	lsls	r1, r2, #28
 8004864:	4620      	mov	r0, r4
 8004866:	d508      	bpl.n	800487a <HardFault_Handler+0x2a>
 8004868:	f006 ff10 	bl	800b68c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800486c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004870:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8004872:	f000 fac1 	bl	8004df8 <UI_SerialCommunicationTimeOutStop>
 8004876:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	0612      	lsls	r2, r2, #24
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 800487e:	4620      	mov	r0, r4
 8004880:	d513      	bpl.n	80048aa <HardFault_Handler+0x5a>
 8004882:	f006 fe09 	bl	800b498 <UFCP_TX_IRQ_Handler>
 8004886:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	0691      	lsls	r1, r2, #26
 800488e:	d5e7      	bpl.n	8004860 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004890:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8004892:	4620      	mov	r0, r4
 8004894:	b2c9      	uxtb	r1, r1
 8004896:	f006 fe97 	bl	800b5c8 <UFCP_RX_IRQ_Handler>
 800489a:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 800489c:	2b01      	cmp	r3, #1
 800489e:	d008      	beq.n	80048b2 <HardFault_Handler+0x62>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d1db      	bne.n	800485c <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 80048a4:	f000 faa8 	bl	8004df8 <UI_SerialCommunicationTimeOutStop>
 80048a8:	e7d8      	b.n	800485c <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	0692      	lsls	r2, r2, #26
 80048ae:	d5d7      	bpl.n	8004860 <HardFault_Handler+0x10>
 80048b0:	e7ee      	b.n	8004890 <HardFault_Handler+0x40>
          UI_SerialCommunicationTimeOutStart();
 80048b2:	f000 faa7 	bl	8004e04 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 80048b6:	e7d1      	b.n	800485c <HardFault_Handler+0xc>
 80048b8:	20000c8c 	.word	0x20000c8c

080048bc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80048bc:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80048be:	4c0a      	ldr	r4, [pc, #40]	; (80048e8 <SysTick_Handler+0x2c>)
 80048c0:	7823      	ldrb	r3, [r4, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d006      	beq.n	80048d4 <SysTick_Handler+0x18>
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80048ca:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80048cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80048d0:	f7ff b820 	b.w	8003914 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80048d4:	f000 fed2 	bl	800567c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80048d8:	f001 fe4c 	bl	8006574 <HAL_SYSTICK_IRQHandler>
 80048dc:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80048de:	7023      	strb	r3, [r4, #0]
}
 80048e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80048e4:	f7ff b816 	b.w	8003914 <MC_RunMotorControlTasks>
 80048e8:	20000dcc 	.word	0x20000dcc

080048ec <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048ec:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80048ee:	481a      	ldr	r0, [pc, #104]	; (8004958 <MX_TIM4_Init+0x6c>)
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <MX_TIM4_Init+0x70>)
 80048f2:	6003      	str	r3, [r0, #0]
{
 80048f4:	b08e      	sub	sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f6:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = M1_PULSE_NBR;
 80048f8:	f641 32ff 	movw	r2, #7167	; 0x1bff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim4.Init.Period = M1_PULSE_NBR;
 8004900:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = 0;
 8004902:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004904:	2203      	movs	r2, #3
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004906:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004908:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800490a:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490c:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800490e:	2300      	movs	r3, #0
 8004910:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004914:	2201      	movs	r2, #1
 8004916:	2300      	movs	r3, #0
 8004918:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800491c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8004920:	240c      	movs	r4, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004922:	220c      	movs	r2, #12
 8004924:	2300      	movs	r3, #0
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004926:	a904      	add	r1, sp, #16
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004928:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 800492c:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800492e:	f004 f959 	bl	8008be4 <HAL_TIM_Encoder_Init>
 8004932:	b948      	cbnz	r0, 8004948 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004934:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004936:	4808      	ldr	r0, [pc, #32]	; (8004958 <MX_TIM4_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004938:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800493a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800493c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800493e:	f004 fcc1 	bl	80092c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004942:	b920      	cbnz	r0, 800494e <MX_TIM4_Init+0x62>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004944:	b00e      	add	sp, #56	; 0x38
 8004946:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004948:	f7fe f8c6 	bl	8002ad8 <Error_Handler>
 800494c:	e7f2      	b.n	8004934 <MX_TIM4_Init+0x48>
    Error_Handler();
 800494e:	f7fe f8c3 	bl	8002ad8 <Error_Handler>
}
 8004952:	b00e      	add	sp, #56	; 0x38
 8004954:	bd10      	pop	{r4, pc}
 8004956:	bf00      	nop
 8004958:	20001378 	.word	0x20001378
 800495c:	40000800 	.word	0x40000800

08004960 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004960:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004962:	4812      	ldr	r0, [pc, #72]	; (80049ac <MX_TIM6_Init+0x4c>)
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <MX_TIM6_Init+0x50>)
 8004966:	6003      	str	r3, [r0, #0]
{
 8004968:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800496a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 16999;
 800496c:	f244 2267 	movw	r2, #16999	; 0x4267
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004970:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim6.Init.Period = 16999;
 8004974:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = 0;
 8004976:	6043      	str	r3, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004978:	9301      	str	r3, [sp, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800497a:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800497c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800497e:	f003 ffd5 	bl	800892c <HAL_TIM_Base_Init>
 8004982:	b950      	cbnz	r0, 800499a <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004984:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004986:	4809      	ldr	r0, [pc, #36]	; (80049ac <MX_TIM6_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004988:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800498a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800498c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800498e:	f004 fc99 	bl	80092c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004992:	b928      	cbnz	r0, 80049a0 <MX_TIM6_Init+0x40>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004994:	b005      	add	sp, #20
 8004996:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800499a:	f7fe f89d 	bl	8002ad8 <Error_Handler>
 800499e:	e7f1      	b.n	8004984 <MX_TIM6_Init+0x24>
    Error_Handler();
 80049a0:	f7fe f89a 	bl	8002ad8 <Error_Handler>
}
 80049a4:	b005      	add	sp, #20
 80049a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80049aa:	bf00      	nop
 80049ac:	200013c4 	.word	0x200013c4
 80049b0:	40001000 	.word	0x40001000

080049b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80049b4:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80049b6:	4812      	ldr	r0, [pc, #72]	; (8004a00 <MX_TIM7_Init+0x4c>)
 80049b8:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <MX_TIM7_Init+0x50>)
 80049ba:	6003      	str	r3, [r0, #0]
{
 80049bc:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049be:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 9;
 80049c0:	2109      	movs	r1, #9
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 16999;
 80049c2:	f244 2267 	movw	r2, #16999	; 0x4267
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim7.Init.Prescaler = 9;
 80049ce:	6041      	str	r1, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049d0:	9301      	str	r3, [sp, #4]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049d2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80049d4:	f003 ffaa 	bl	800892c <HAL_TIM_Base_Init>
 80049d8:	b950      	cbnz	r0, 80049f0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049da:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80049dc:	4808      	ldr	r0, [pc, #32]	; (8004a00 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049de:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80049e0:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049e2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80049e4:	f004 fc6e 	bl	80092c4 <HAL_TIMEx_MasterConfigSynchronization>
 80049e8:	b928      	cbnz	r0, 80049f6 <MX_TIM7_Init+0x42>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80049ea:	b005      	add	sp, #20
 80049ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80049f0:	f7fe f872 	bl	8002ad8 <Error_Handler>
 80049f4:	e7f1      	b.n	80049da <MX_TIM7_Init+0x26>
    Error_Handler();
 80049f6:	f7fe f86f 	bl	8002ad8 <Error_Handler>
}
 80049fa:	b005      	add	sp, #20
 80049fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a00:	2000145c 	.word	0x2000145c
 8004a04:	40001400 	.word	0x40001400

08004a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a08:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM1)
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_TIM_Base_MspInit+0x8c>)
 8004a0c:	6803      	ldr	r3, [r0, #0]
 8004a0e:	4293      	cmp	r3, r2
{
 8004a10:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM1)
 8004a12:	d008      	beq.n	8004a26 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <HAL_TIM_Base_MspInit+0x90>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d027      	beq.n	8004a6a <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8004a1a:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <HAL_TIM_Base_MspInit+0x94>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00f      	beq.n	8004a40 <HAL_TIM_Base_MspInit+0x38>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004a20:	b005      	add	sp, #20
 8004a22:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_TIM_Base_MspInit+0x98>)
 8004a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	9b01      	ldr	r3, [sp, #4]
}
 8004a3a:	b005      	add	sp, #20
 8004a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004a40:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_TIM_Base_MspInit+0x98>)
 8004a42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a44:	f042 0220 	orr.w	r2, r2, #32
 8004a48:	659a      	str	r2, [r3, #88]	; 0x58
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2107      	movs	r1, #7
 8004a56:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004a58:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 8004a5a:	f001 fd29 	bl	80064b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004a5e:	2037      	movs	r0, #55	; 0x37
}
 8004a60:	b005      	add	sp, #20
 8004a62:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004a66:	f001 bd5b 	b.w	8006520 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <HAL_TIM_Base_MspInit+0x98>)
 8004a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a6e:	f042 0210 	orr.w	r2, r2, #16
 8004a72:	659a      	str	r2, [r3, #88]	; 0x58
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2105      	movs	r1, #5
 8004a80:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a82:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004a84:	f001 fd14 	bl	80064b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a88:	2036      	movs	r0, #54	; 0x36
}
 8004a8a:	b005      	add	sp, #20
 8004a8c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004a90:	f001 bd46 	b.w	8006520 <HAL_NVIC_EnableIRQ>
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40001000 	.word	0x40001000
 8004a9c:	40001400 	.word	0x40001400
 8004aa0:	40021000 	.word	0x40021000

08004aa4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004aa4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_encoderHandle->Instance==TIM4)
 8004aa6:	6801      	ldr	r1, [r0, #0]
 8004aa8:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_TIM_Encoder_MspInit+0x68>)
{
 8004aaa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aac:	2300      	movs	r3, #0
  if(tim_encoderHandle->Instance==TIM4)
 8004aae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ab4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004ab8:	9306      	str	r3, [sp, #24]
  if(tim_encoderHandle->Instance==TIM4)
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Encoder_MspInit+0x1c>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004abc:	b009      	add	sp, #36	; 0x24
 8004abe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ac4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac8:	4811      	ldr	r0, [pc, #68]	; (8004b10 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004aca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004acc:	f042 0204 	orr.w	r2, r2, #4
 8004ad0:	659a      	str	r2, [r3, #88]	; 0x58
 8004ad2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ad4:	f002 0204 	and.w	r2, r2, #4
 8004ad8:	9200      	str	r2, [sp, #0]
 8004ada:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004adc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ade:	f042 0202 	orr.w	r2, r2, #2
 8004ae2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004aec:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aee:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004af0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004af2:	2200      	movs	r2, #0
 8004af4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004af8:	24c0      	movs	r4, #192	; 0xc0
 8004afa:	2502      	movs	r5, #2
 8004afc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b04:	f002 fbd0 	bl	80072a8 <HAL_GPIO_Init>
}
 8004b08:	b009      	add	sp, #36	; 0x24
 8004b0a:	bd30      	pop	{r4, r5, pc}
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	48000400 	.word	0x48000400

08004b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b14:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8004b16:	6801      	ldr	r1, [r0, #0]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <HAL_TIM_MspPostInit+0xa0>)
{
 8004b1a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b1c:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8004b1e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b24:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004b28:	9306      	str	r3, [sp, #24]
  if(timHandle->Instance==TIM1)
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b2c:	b008      	add	sp, #32
 8004b2e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b34:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b38:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b44:	f002 0201 	and.w	r2, r2, #1
 8004b48:	9200      	str	r2, [sp, #0]
 8004b4a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b4e:	f042 0202 	orr.w	r2, r2, #2
 8004b52:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b56:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	2302      	movs	r3, #2
 8004b64:	2601      	movs	r6, #1
 8004b66:	2702      	movs	r7, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004b68:	a902      	add	r1, sp, #8
 8004b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b72:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004b76:	f002 fb97 	bl	80072a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7e:	a902      	add	r1, sp, #8
 8004b80:	480d      	ldr	r0, [pc, #52]	; (8004bb8 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b82:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004b84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004b8c:	f44f 66e0 	mov.w	r6, #1792	; 0x700
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b90:	f002 fb8a 	bl	80072a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004b94:	2702      	movs	r7, #2
 8004b96:	2202      	movs	r2, #2
 8004b98:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b9a:	a902      	add	r1, sp, #8
 8004b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004ba0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004ba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004ba8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004baa:	f002 fb7d 	bl	80072a8 <HAL_GPIO_Init>
}
 8004bae:	b008      	add	sp, #32
 8004bb0:	bdd0      	pop	{r4, r6, r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	48000400 	.word	0x48000400

08004bbc <MX_TIM1_Init>:
{
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004bbe:	2400      	movs	r4, #0
{
 8004bc0:	b0a1      	sub	sp, #132	; 0x84
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	2234      	movs	r2, #52	; 0x34
 8004bc6:	a812      	add	r0, sp, #72	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004bc8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004bcc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd0:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004bd8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8004bdc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004be0:	9408      	str	r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004be2:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004be4:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004be6:	f006 fe0b 	bl	800b800 <memset>
  htim1.Instance = TIM1;
 8004bea:	4850      	ldr	r0, [pc, #320]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004bec:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <MX_TIM1_Init+0x174>)
 8004bee:	6003      	str	r3, [r0, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004bf0:	2520      	movs	r5, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8004bf2:	f640 51d5 	movw	r1, #3541	; 0xdd5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8004bfa:	2307      	movs	r3, #7
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8004bfc:	e9c0 5102 	strd	r5, r1, [r0, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8004c00:	e9c0 2304 	strd	r2, r3, [r0, #16]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8004c04:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c06:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c08:	f003 fe90 	bl	800892c <HAL_TIM_Base_Init>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d16a      	bne.n	8004ce6 <MX_TIM1_Init+0x12a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c10:	4846      	ldr	r0, [pc, #280]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004c12:	f003 ff63 	bl	8008adc <HAL_TIM_PWM_Init>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d16c      	bne.n	8004cf4 <MX_TIM1_Init+0x138>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004c1a:	2206      	movs	r2, #6
 8004c1c:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004c1e:	4843      	ldr	r0, [pc, #268]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004c20:	a904      	add	r1, sp, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004c26:	f004 f88f 	bl	8008d48 <HAL_TIM_SlaveConfigSynchro>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d17b      	bne.n	8004d26 <MX_TIM1_Init+0x16a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004c2e:	2470      	movs	r4, #112	; 0x70
 8004c30:	2500      	movs	r5, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c32:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c34:	483d      	ldr	r0, [pc, #244]	; (8004d2c <MX_TIM1_Init+0x170>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c36:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c38:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004c3a:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c3e:	f004 fb41 	bl	80092c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d16c      	bne.n	8004d20 <MX_TIM1_Init+0x164>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c46:	2060      	movs	r0, #96	; 0x60
 8004c48:	2100      	movs	r1, #0
 8004c4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c4e:	2000      	movs	r0, #0
 8004c50:	2100      	movs	r1, #0
 8004c52:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c56:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8004c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c5e:	4833      	ldr	r0, [pc, #204]	; (8004d2c <MX_TIM1_Init+0x170>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8004c60:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c62:	2200      	movs	r2, #0
 8004c64:	a90a      	add	r1, sp, #40	; 0x28
 8004c66:	f004 fa33 	bl	80090d0 <HAL_TIM_PWM_ConfigChannel>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d155      	bne.n	8004d1a <MX_TIM1_Init+0x15e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c6e:	482f      	ldr	r0, [pc, #188]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004c70:	2204      	movs	r2, #4
 8004c72:	a90a      	add	r1, sp, #40	; 0x28
 8004c74:	f004 fa2c 	bl	80090d0 <HAL_TIM_PWM_ConfigChannel>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d14b      	bne.n	8004d14 <MX_TIM1_Init+0x158>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c7c:	482b      	ldr	r0, [pc, #172]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004c7e:	2208      	movs	r2, #8
 8004c80:	a90a      	add	r1, sp, #40	; 0x28
 8004c82:	f004 fa25 	bl	80090d0 <HAL_TIM_PWM_ConfigChannel>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d141      	bne.n	8004d0e <MX_TIM1_Init+0x152>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004c8a:	2470      	movs	r4, #112	; 0x70
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c8c:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c8e:	4827      	ldr	r0, [pc, #156]	; (8004d2c <MX_TIM1_Init+0x170>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004c90:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c92:	a90a      	add	r1, sp, #40	; 0x28
 8004c94:	220c      	movs	r2, #12
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c96:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c98:	f004 fa1a 	bl	80090d0 <HAL_TIM_PWM_ConfigChannel>
 8004c9c:	bba0      	cbnz	r0, 8004d08 <MX_TIM1_Init+0x14c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8004c9e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8004ca2:	2584      	movs	r5, #132	; 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ca4:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8004cac:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004cb0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cb4:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8004cb6:	2400      	movs	r4, #0
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004cbe:	481b      	ldr	r0, [pc, #108]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004cc0:	a912      	add	r1, sp, #72	; 0x48
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8004cc2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004cc6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8004cca:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8004cce:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8004cd2:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004cd6:	f004 fb3d 	bl	8009354 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cda:	b970      	cbnz	r0, 8004cfa <MX_TIM1_Init+0x13e>
  HAL_TIM_MspPostInit(&htim1);
 8004cdc:	4813      	ldr	r0, [pc, #76]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004cde:	f7ff ff19 	bl	8004b14 <HAL_TIM_MspPostInit>
}
 8004ce2:	b021      	add	sp, #132	; 0x84
 8004ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004ce6:	f7fd fef7 	bl	8002ad8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004cea:	4810      	ldr	r0, [pc, #64]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004cec:	f003 fef6 	bl	8008adc <HAL_TIM_PWM_Init>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d092      	beq.n	8004c1a <MX_TIM1_Init+0x5e>
    Error_Handler();
 8004cf4:	f7fd fef0 	bl	8002ad8 <Error_Handler>
 8004cf8:	e78f      	b.n	8004c1a <MX_TIM1_Init+0x5e>
    Error_Handler();
 8004cfa:	f7fd feed 	bl	8002ad8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8004cfe:	480b      	ldr	r0, [pc, #44]	; (8004d2c <MX_TIM1_Init+0x170>)
 8004d00:	f7ff ff08 	bl	8004b14 <HAL_TIM_MspPostInit>
}
 8004d04:	b021      	add	sp, #132	; 0x84
 8004d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004d08:	f7fd fee6 	bl	8002ad8 <Error_Handler>
 8004d0c:	e7c7      	b.n	8004c9e <MX_TIM1_Init+0xe2>
    Error_Handler();
 8004d0e:	f7fd fee3 	bl	8002ad8 <Error_Handler>
 8004d12:	e7ba      	b.n	8004c8a <MX_TIM1_Init+0xce>
    Error_Handler();
 8004d14:	f7fd fee0 	bl	8002ad8 <Error_Handler>
 8004d18:	e7b0      	b.n	8004c7c <MX_TIM1_Init+0xc0>
    Error_Handler();
 8004d1a:	f7fd fedd 	bl	8002ad8 <Error_Handler>
 8004d1e:	e7a6      	b.n	8004c6e <MX_TIM1_Init+0xb2>
    Error_Handler();
 8004d20:	f7fd feda 	bl	8002ad8 <Error_Handler>
 8004d24:	e78f      	b.n	8004c46 <MX_TIM1_Init+0x8a>
    Error_Handler();
 8004d26:	f7fd fed7 	bl	8002ad8 <Error_Handler>
 8004d2a:	e780      	b.n	8004c2e <MX_TIM1_Init+0x72>
 8004d2c:	20001410 	.word	0x20001410
 8004d30:	40012c00 	.word	0x40012c00

08004d34 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8004d38:	4d17      	ldr	r5, [pc, #92]	; (8004d98 <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8004d3a:	f8df c070 	ldr.w	ip, [pc, #112]	; 8004dac <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8004d3e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004db0 <UI_TaskInit+0x7c>
{
 8004d42:	468e      	mov	lr, r1
 8004d44:	4681      	mov	r9, r0
 8004d46:	4616      	mov	r6, r2
 8004d48:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8004d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d4c:	4664      	mov	r4, ip
 8004d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d50:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8004d54:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 8004d56:	4d11      	ldr	r5, [pc, #68]	; (8004d9c <UI_TaskInit+0x68>)
{
 8004d58:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8004d5c:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8004d60:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8004d64:	4640      	mov	r0, r8
{
 8004d66:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8004d68:	f006 fb94 	bl	800b494 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8004d6c:	f8cd a004 	str.w	sl, [sp, #4]
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <UI_TaskInit+0x6c>)
 8004d72:	6828      	ldr	r0, [r5, #0]
 8004d74:	4a0b      	ldr	r2, [pc, #44]	; (8004da4 <UI_TaskInit+0x70>)
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4641      	mov	r1, r8
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <UI_TaskInit+0x74>)
 8004d7c:	f7ff f986 	bl	800408c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004d80:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004d84:	6828      	ldr	r0, [r5, #0]
 8004d86:	463b      	mov	r3, r7
 8004d88:	4632      	mov	r2, r6
 8004d8a:	4621      	mov	r1, r4

}
 8004d8c:	b002      	add	sp, #8
 8004d8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004d92:	f000 b8b9 	b.w	8004f08 <UI_Init>
 8004d96:	bf00      	nop
 8004d98:	20000f34 	.word	0x20000f34
 8004d9c:	20000f60 	.word	0x20000f60
 8004da0:	0800b6a9 	.word	0x0800b6a9
 8004da4:	0800b519 	.word	0x0800b519
 8004da8:	0800b4f9 	.word	0x0800b4f9
 8004dac:	200014a8 	.word	0x200014a8
 8004db0:	20000c8c 	.word	0x20000c8c

08004db4 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8004db4:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <UI_Scheduler+0x38>)
 8004db6:	8813      	ldrh	r3, [r2, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b11b      	cbz	r3, 8004dc4 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8004dbc:	8813      	ldrh	r3, [r2, #0]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8004dc4:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <UI_Scheduler+0x3c>)
 8004dc6:	8813      	ldrh	r3, [r2, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d903      	bls.n	8004dd6 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8004dce:	8813      	ldrh	r3, [r2, #0]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8004dd6:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <UI_Scheduler+0x40>)
 8004dd8:	8813      	ldrh	r3, [r2, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d903      	bls.n	8004de8 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8004de0:	8813      	ldrh	r3, [r2, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	8013      	strh	r3, [r2, #0]
  }
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000f5e 	.word	0x20000f5e
 8004df0:	20000f5c 	.word	0x20000f5c
 8004df4:	20000dce 	.word	0x20000dce

08004df8 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8004df8:	4b01      	ldr	r3, [pc, #4]	; (8004e00 <UI_SerialCommunicationTimeOutStop+0x8>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	801a      	strh	r2, [r3, #0]
}
 8004dfe:	4770      	bx	lr
 8004e00:	20000f5c 	.word	0x20000f5c

08004e04 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004e04:	4b01      	ldr	r3, [pc, #4]	; (8004e0c <UI_SerialCommunicationTimeOutStart+0x8>)
 8004e06:	224f      	movs	r2, #79	; 0x4f
 8004e08:	801a      	strh	r2, [r3, #0]
}
 8004e0a:	4770      	bx	lr
 8004e0c:	20000f5c 	.word	0x20000f5c

08004e10 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e10:	481f      	ldr	r0, [pc, #124]	; (8004e90 <MX_USART2_UART_Init+0x80>)
{
 8004e12:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <MX_USART2_UART_Init+0x84>)
 8004e16:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004e18:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e1c:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e1e:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e20:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e24:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e28:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 115200;
 8004e2c:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e2e:	6142      	str	r2, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e30:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e32:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e34:	f004 fba6 	bl	8009584 <HAL_UART_Init>
 8004e38:	b970      	cbnz	r0, 8004e58 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e3a:	4815      	ldr	r0, [pc, #84]	; (8004e90 <MX_USART2_UART_Init+0x80>)
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f004 fd77 	bl	8009930 <HAL_UARTEx_SetTxFifoThreshold>
 8004e42:	b988      	cbnz	r0, 8004e68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e44:	4812      	ldr	r0, [pc, #72]	; (8004e90 <MX_USART2_UART_Init+0x80>)
 8004e46:	2100      	movs	r1, #0
 8004e48:	f004 fdb0 	bl	80099ac <HAL_UARTEx_SetRxFifoThreshold>
 8004e4c:	b9a0      	cbnz	r0, 8004e78 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004e4e:	4810      	ldr	r0, [pc, #64]	; (8004e90 <MX_USART2_UART_Init+0x80>)
 8004e50:	f004 fd50 	bl	80098f4 <HAL_UARTEx_DisableFifoMode>
 8004e54:	b9b8      	cbnz	r0, 8004e86 <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004e58:	f7fd fe3e 	bl	8002ad8 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e5c:	480c      	ldr	r0, [pc, #48]	; (8004e90 <MX_USART2_UART_Init+0x80>)
 8004e5e:	2100      	movs	r1, #0
 8004e60:	f004 fd66 	bl	8009930 <HAL_UARTEx_SetTxFifoThreshold>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d0ed      	beq.n	8004e44 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8004e68:	f7fd fe36 	bl	8002ad8 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e6c:	4808      	ldr	r0, [pc, #32]	; (8004e90 <MX_USART2_UART_Init+0x80>)
 8004e6e:	2100      	movs	r1, #0
 8004e70:	f004 fd9c 	bl	80099ac <HAL_UARTEx_SetRxFifoThreshold>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d0ea      	beq.n	8004e4e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8004e78:	f7fd fe2e 	bl	8002ad8 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004e7c:	4804      	ldr	r0, [pc, #16]	; (8004e90 <MX_USART2_UART_Init+0x80>)
 8004e7e:	f004 fd39 	bl	80098f4 <HAL_UARTEx_DisableFifoMode>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d0e7      	beq.n	8004e56 <MX_USART2_UART_Init+0x46>
}
 8004e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004e8a:	f7fd be25 	b.w	8002ad8 <Error_Handler>
 8004e8e:	bf00      	nop
 8004e90:	20001558 	.word	0x20001558
 8004e94:	40004400 	.word	0x40004400

08004e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e98:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8004e9a:	6801      	ldr	r1, [r0, #0]
 8004e9c:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <HAL_UART_MspInit+0x6c>)
{
 8004e9e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea0:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8004ea2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ea8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004eac:	9306      	str	r3, [sp, #24]
  if(uartHandle->Instance==USART2)
 8004eae:	d001      	beq.n	8004eb4 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004eb0:	b008      	add	sp, #32
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ebc:	2007      	movs	r0, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ebe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ec0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ec4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ec6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ec8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004ecc:	9200      	str	r2, [sp, #0]
 8004ece:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004eda:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004ee8:	240c      	movs	r4, #12
 8004eea:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004ef0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004ef4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef8:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004efa:	f002 f9d5 	bl	80072a8 <HAL_GPIO_Init>
}
 8004efe:	b008      	add	sp, #32
 8004f00:	bd70      	pop	{r4, r5, r6, pc}
 8004f02:	bf00      	nop
 8004f04:	40004400 	.word	0x40004400

08004f08 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004f08:	b430      	push	{r4, r5}
 8004f0a:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8004f0c:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8004f0e:	2500      	movs	r5, #0
 8004f10:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8004f12:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8004f16:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8004f18:	7101      	strb	r1, [r0, #4]
}
 8004f1a:	4770      	bx	lr

08004f1c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8004f1c:	7903      	ldrb	r3, [r0, #4]
 8004f1e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8004f20:	bf86      	itte	hi
 8004f22:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8004f24:	2001      	movhi	r0, #1
    retVal = false;
 8004f26:	2000      	movls	r0, #0
  }
  return retVal;
}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8004f2c:	7d00      	ldrb	r0, [r0, #20]
 8004f2e:	4770      	bx	lr

08004f30 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8004f30:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004f32:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004f36:	7d03      	ldrb	r3, [r0, #20]
{
 8004f38:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004f3a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004f3e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
{
 8004f42:	4614      	mov	r4, r2
 8004f44:	295b      	cmp	r1, #91	; 0x5b
 8004f46:	d82f      	bhi.n	8004fa8 <UI_SetReg+0x78>
 8004f48:	e8df f001 	tbb	[pc, r1]
 8004f4c:	412e2e3d 	.word	0x412e2e3d
 8004f50:	544e482e 	.word	0x544e482e
 8004f54:	726c665a 	.word	0x726c665a
 8004f58:	908a8478 	.word	0x908a8478
 8004f5c:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f60:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f64:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f68:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f6c:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f70:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f74:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f78:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f7c:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f80:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f84:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f88:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f8c:	2e2e962e 	.word	0x2e2e962e
 8004f90:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f94:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f98:	2e2e2e2e 	.word	0x2e2e2e2e
 8004f9c:	2e2e2e2e 	.word	0x2e2e2e2e
 8004fa0:	2e2e2e2e 	.word	0x2e2e2e2e
 8004fa4:	312e2e2e 	.word	0x312e2e2e
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004fa8:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8004faa:	b003      	add	sp, #12
 8004fac:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004fae:	493f      	ldr	r1, [pc, #252]	; (80050ac <UI_SetReg+0x17c>)
 8004fb0:	fb81 3104 	smull	r3, r1, r1, r4
 8004fb4:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8004fb8:	4628      	mov	r0, r5
 8004fba:	b209      	sxth	r1, r1
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f7fd fec5 	bl	8002d4c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8004fc2:	2001      	movs	r0, #1
    break;
 8004fc4:	e7f1      	b.n	8004faa <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8004fc6:	b2e1      	uxtb	r1, r4
 8004fc8:	f7ff ffa8 	bl	8004f1c <UI_SelectMC>
    break;
 8004fcc:	e7ed      	b.n	8004faa <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8004fce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004fd2:	d057      	beq.n	8005084 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8004fd4:	2c01      	cmp	r4, #1
 8004fd6:	d05f      	beq.n	8005098 <UI_SetReg+0x168>
  bool retVal = true;
 8004fd8:	2001      	movs	r0, #1
 8004fda:	e7e6      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	b221      	sxth	r1, r4
 8004fe0:	f004 ffc4 	bl	8009f6c <PID_SetKP>
  bool retVal = true;
 8004fe4:	2001      	movs	r0, #1
    break;
 8004fe6:	e7e0      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	b221      	sxth	r1, r4
 8004fec:	f004 ffc0 	bl	8009f70 <PID_SetKI>
  bool retVal = true;
 8004ff0:	2001      	movs	r0, #1
    break;
 8004ff2:	e7da      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	b221      	sxth	r1, r4
 8004ff8:	f004 ffca 	bl	8009f90 <PID_SetKD>
  bool retVal = true;
 8004ffc:	2001      	movs	r0, #1
    break;
 8004ffe:	e7d4      	b.n	8004faa <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8005000:	4628      	mov	r0, r5
 8005002:	f7fd ff69 	bl	8002ed8 <MCI_GetIqdref>
 8005006:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8005008:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 800500c:	4628      	mov	r0, r5
 800500e:	9901      	ldr	r1, [sp, #4]
 8005010:	f7fd feb2 	bl	8002d78 <MCI_SetCurrentReferences>
  bool retVal = true;
 8005014:	2001      	movs	r0, #1
    break;
 8005016:	e7c8      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8005018:	6858      	ldr	r0, [r3, #4]
 800501a:	b221      	sxth	r1, r4
 800501c:	f004 ffa6 	bl	8009f6c <PID_SetKP>
  bool retVal = true;
 8005020:	2001      	movs	r0, #1
    break;
 8005022:	e7c2      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8005024:	6858      	ldr	r0, [r3, #4]
 8005026:	b221      	sxth	r1, r4
 8005028:	f004 ffa2 	bl	8009f70 <PID_SetKI>
  bool retVal = true;
 800502c:	2001      	movs	r0, #1
    break;
 800502e:	e7bc      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8005030:	6858      	ldr	r0, [r3, #4]
 8005032:	b221      	sxth	r1, r4
 8005034:	f004 ffac 	bl	8009f90 <PID_SetKD>
  bool retVal = true;
 8005038:	2001      	movs	r0, #1
    break;
 800503a:	e7b6      	b.n	8004faa <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 800503c:	4628      	mov	r0, r5
 800503e:	f7fd ff4b 	bl	8002ed8 <MCI_GetIqdref>
 8005042:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8005044:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8005048:	4628      	mov	r0, r5
 800504a:	9901      	ldr	r1, [sp, #4]
 800504c:	f7fd fe94 	bl	8002d78 <MCI_SetCurrentReferences>
  bool retVal = true;
 8005050:	2001      	movs	r0, #1
    break;
 8005052:	e7aa      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8005054:	6898      	ldr	r0, [r3, #8]
 8005056:	b221      	sxth	r1, r4
 8005058:	f004 ff88 	bl	8009f6c <PID_SetKP>
  bool retVal = true;
 800505c:	2001      	movs	r0, #1
    break;
 800505e:	e7a4      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8005060:	6898      	ldr	r0, [r3, #8]
 8005062:	b221      	sxth	r1, r4
 8005064:	f004 ff84 	bl	8009f70 <PID_SetKI>
  bool retVal = true;
 8005068:	2001      	movs	r0, #1
    break;
 800506a:	e79e      	b.n	8004faa <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800506c:	6898      	ldr	r0, [r3, #8]
 800506e:	b221      	sxth	r1, r4
 8005070:	f004 ff8e 	bl	8009f90 <PID_SetKD>
  bool retVal = true;
 8005074:	2001      	movs	r0, #1
    break;
 8005076:	e798      	b.n	8004faa <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8005078:	4628      	mov	r0, r5
 800507a:	b221      	sxth	r1, r4
 800507c:	f7fd ff6e 	bl	8002f5c <MCI_SetIdref>
  bool retVal = true;
 8005080:	2001      	movs	r0, #1
    break;
 8005082:	e792      	b.n	8004faa <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8005084:	4628      	mov	r0, r5
 8005086:	f7fd ff51 	bl	8002f2c <MCI_GetTeref>
 800508a:	4622      	mov	r2, r4
 800508c:	4601      	mov	r1, r0
 800508e:	4628      	mov	r0, r5
 8005090:	f7fd fe68 	bl	8002d64 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8005094:	2001      	movs	r0, #1
 8005096:	e788      	b.n	8004faa <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8005098:	4628      	mov	r0, r5
 800509a:	f7fd feef 	bl	8002e7c <MCI_GetMecSpeedRefUnit>
 800509e:	2200      	movs	r2, #0
 80050a0:	4601      	mov	r1, r0
 80050a2:	4628      	mov	r0, r5
 80050a4:	f7fd fe52 	bl	8002d4c <MCI_ExecSpeedRamp>
  bool retVal = true;
 80050a8:	4620      	mov	r0, r4
 80050aa:	e77e      	b.n	8004faa <UI_SetReg+0x7a>
 80050ac:	2aaaaaab 	.word	0x2aaaaaab

080050b0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80050b0:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80050b2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80050b6:	7d03      	ldrb	r3, [r0, #20]
{
 80050b8:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80050ba:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80050be:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	f000 8089 	beq.w	80051da <UI_GetReg+0x12a>
  {
    *success = true;
 80050c8:	2601      	movs	r6, #1
 80050ca:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 80050cc:	2981      	cmp	r1, #129	; 0x81
 80050ce:	f200 81db 	bhi.w	8005488 <UI_GetReg+0x3d8>
 80050d2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80050d6:	0163      	.short	0x0163
 80050d8:	0159015d 	.word	0x0159015d
 80050dc:	01b601bd 	.word	0x01b601bd
 80050e0:	01ae01b2 	.word	0x01ae01b2
 80050e4:	00ff01aa 	.word	0x00ff01aa
 80050e8:	0178017c 	.word	0x0178017c
 80050ec:	00fa0174 	.word	0x00fa0174
 80050f0:	016a016e 	.word	0x016a016e
 80050f4:	01d90166 	.word	0x01d90166
 80050f8:	01d901d9 	.word	0x01d901d9
 80050fc:	01d901d9 	.word	0x01d901d9
 8005100:	01d901d9 	.word	0x01d901d9
 8005104:	01d901d9 	.word	0x01d901d9
 8005108:	01a201a6 	.word	0x01a201a6
 800510c:	01d9019e 	.word	0x01d9019e
 8005110:	01d201d9 	.word	0x01d201d9
 8005114:	01c801cd 	.word	0x01c801cd
 8005118:	01c101d9 	.word	0x01c101d9
 800511c:	014f0154 	.word	0x014f0154
 8005120:	01940199 	.word	0x01940199
 8005124:	01c801cd 	.word	0x01c801cd
 8005128:	00fa00ff 	.word	0x00fa00ff
 800512c:	018a018f 	.word	0x018a018f
 8005130:	01800185 	.word	0x01800185
 8005134:	0127013b 	.word	0x0127013b
 8005138:	01d901d9 	.word	0x01d901d9
 800513c:	01d901d9 	.word	0x01d901d9
 8005140:	01d901d9 	.word	0x01d901d9
 8005144:	01d901d9 	.word	0x01d901d9
 8005148:	01d901d9 	.word	0x01d901d9
 800514c:	01d901d9 	.word	0x01d901d9
 8005150:	01d901d9 	.word	0x01d901d9
 8005154:	01190120 	.word	0x01190120
 8005158:	01d900fa 	.word	0x01d900fa
 800515c:	01d901d9 	.word	0x01d901d9
 8005160:	01d901d9 	.word	0x01d901d9
 8005164:	01d901d9 	.word	0x01d901d9
 8005168:	01d901d9 	.word	0x01d901d9
 800516c:	01d901d9 	.word	0x01d901d9
 8005170:	01d901d9 	.word	0x01d901d9
 8005174:	01d901d9 	.word	0x01d901d9
 8005178:	01d901d9 	.word	0x01d901d9
 800517c:	01d901d9 	.word	0x01d901d9
 8005180:	01d901d9 	.word	0x01d901d9
 8005184:	01d901d9 	.word	0x01d901d9
 8005188:	01d901d9 	.word	0x01d901d9
 800518c:	01d90108 	.word	0x01d90108
 8005190:	01d901d9 	.word	0x01d901d9
 8005194:	01d901d9 	.word	0x01d901d9
 8005198:	01d901d9 	.word	0x01d901d9
 800519c:	01d901d9 	.word	0x01d901d9
 80051a0:	01d901d9 	.word	0x01d901d9
 80051a4:	01d901d9 	.word	0x01d901d9
 80051a8:	01d901d9 	.word	0x01d901d9
 80051ac:	01d901d9 	.word	0x01d901d9
 80051b0:	010401d9 	.word	0x010401d9
 80051b4:	01720115 	.word	0x01720115
 80051b8:	00f701d9 	.word	0x00f701d9
 80051bc:	01d900f7 	.word	0x01d900f7
 80051c0:	01d901d9 	.word	0x01d901d9
 80051c4:	01d901d9 	.word	0x01d901d9
 80051c8:	01d901d9 	.word	0x01d901d9
 80051cc:	01d901d9 	.word	0x01d901d9
 80051d0:	01d901d9 	.word	0x01d901d9
 80051d4:	01d901d9 	.word	0x01d901d9
 80051d8:	00f7      	.short	0x00f7
 80051da:	2970      	cmp	r1, #112	; 0x70
 80051dc:	d872      	bhi.n	80052c4 <UI_GetReg+0x214>
 80051de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051e2:	00dd      	.short	0x00dd
 80051e4:	00d300d7 	.word	0x00d300d7
 80051e8:	01300137 	.word	0x01300137
 80051ec:	0128012c 	.word	0x0128012c
 80051f0:	00790124 	.word	0x00790124
 80051f4:	00f200f6 	.word	0x00f200f6
 80051f8:	007400ee 	.word	0x007400ee
 80051fc:	00e400e8 	.word	0x00e400e8
 8005200:	007100e0 	.word	0x007100e0
 8005204:	00710071 	.word	0x00710071
 8005208:	00710071 	.word	0x00710071
 800520c:	00710071 	.word	0x00710071
 8005210:	00710071 	.word	0x00710071
 8005214:	011c0120 	.word	0x011c0120
 8005218:	00710118 	.word	0x00710118
 800521c:	014c0071 	.word	0x014c0071
 8005220:	01420147 	.word	0x01420147
 8005224:	013b0071 	.word	0x013b0071
 8005228:	00c900ce 	.word	0x00c900ce
 800522c:	010e0113 	.word	0x010e0113
 8005230:	01420147 	.word	0x01420147
 8005234:	00740079 	.word	0x00740079
 8005238:	01040109 	.word	0x01040109
 800523c:	00fa00ff 	.word	0x00fa00ff
 8005240:	00a100b5 	.word	0x00a100b5
 8005244:	00710071 	.word	0x00710071
 8005248:	00710071 	.word	0x00710071
 800524c:	00710071 	.word	0x00710071
 8005250:	00710071 	.word	0x00710071
 8005254:	00710071 	.word	0x00710071
 8005258:	00710071 	.word	0x00710071
 800525c:	00710071 	.word	0x00710071
 8005260:	0093009a 	.word	0x0093009a
 8005264:	00710074 	.word	0x00710074
 8005268:	00710071 	.word	0x00710071
 800526c:	00710071 	.word	0x00710071
 8005270:	00710071 	.word	0x00710071
 8005274:	00710071 	.word	0x00710071
 8005278:	00710071 	.word	0x00710071
 800527c:	00710071 	.word	0x00710071
 8005280:	00710071 	.word	0x00710071
 8005284:	00710071 	.word	0x00710071
 8005288:	00710071 	.word	0x00710071
 800528c:	00710071 	.word	0x00710071
 8005290:	00710071 	.word	0x00710071
 8005294:	00710071 	.word	0x00710071
 8005298:	00710082 	.word	0x00710082
 800529c:	00710071 	.word	0x00710071
 80052a0:	00710071 	.word	0x00710071
 80052a4:	00710071 	.word	0x00710071
 80052a8:	00710071 	.word	0x00710071
 80052ac:	00710071 	.word	0x00710071
 80052b0:	00710071 	.word	0x00710071
 80052b4:	00710071 	.word	0x00710071
 80052b8:	00710071 	.word	0x00710071
 80052bc:	007e0071 	.word	0x007e0071
 80052c0:	00ec008f 	.word	0x00ec008f
  int32_t bRetVal = 0;
 80052c4:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 80052c6:	b00c      	add	sp, #48	; 0x30
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7fd fe04 	bl	8002ed8 <MCI_GetIqdref>
 80052d0:	1400      	asrs	r0, r0, #16
    break;
 80052d2:	e7f8      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80052d4:	4620      	mov	r0, r4
 80052d6:	f7fd fdff 	bl	8002ed8 <MCI_GetIqdref>
 80052da:	b200      	sxth	r0, r0
    break;
 80052dc:	e7f3      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80052de:	6828      	ldr	r0, [r5, #0]
 80052e0:	f004 fe52 	bl	8009f88 <PID_GetKPDivisor>
    break;
 80052e4:	e7ef      	b.n	80052c6 <UI_GetReg+0x216>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7fd fdb2 	bl	8002e50 <MCI_GetControlMode>
 80052ec:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80052ee:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80052f0:	f000 80d7 	beq.w	80054a2 <UI_GetReg+0x3f2>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80052f4:	f7fd fdc2 	bl	8002e7c <MCI_GetMecSpeedRefUnit>
 80052f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80052fc:	0040      	lsls	r0, r0, #1
 80052fe:	e7e2      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8005300:	6828      	ldr	r0, [r5, #0]
 8005302:	f004 fe43 	bl	8009f8c <PID_GetKIDivisor>
    break;
 8005306:	e7de      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8005308:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800530a:	f005 fffd 	bl	800b308 <STC_GetMinAppNegativeMecSpeedUnit>
 800530e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005312:	0040      	lsls	r0, r0, #1
    break;
 8005314:	e7d7      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8005316:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005318:	f005 fff4 	bl	800b304 <STC_GetMaxAppPositiveMecSpeedUnit>
 800531c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005320:	0040      	lsls	r0, r0, #1
    break;
 8005322:	e7d0      	b.n	80052c6 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005324:	6902      	ldr	r2, [r0, #16]
 8005326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800532a:	0f1a      	lsrs	r2, r3, #28
 800532c:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800532e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005332:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005334:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005338:	f240 80ae 	bls.w	8005498 <UI_GetReg+0x3e8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800533c:	2b01      	cmp	r3, #1
 800533e:	d8c1      	bhi.n	80052c4 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8005340:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8005342:	2800      	cmp	r0, #0
 8005344:	d0be      	beq.n	80052c4 <UI_GetReg+0x214>
        bRetVal = SPD_GetS16Speed(pSPD);
 8005346:	f005 ff1d 	bl	800b184 <SPD_GetS16Speed>
 800534a:	e7bc      	b.n	80052c6 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800534c:	6902      	ldr	r2, [r0, #16]
 800534e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005352:	0f1a      	lsrs	r2, r3, #28
 8005354:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005356:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800535a:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800535c:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005360:	f240 8095 	bls.w	800548e <UI_GetReg+0x3de>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005364:	2b01      	cmp	r3, #1
 8005366:	d8ad      	bhi.n	80052c4 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8005368:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800536a:	2800      	cmp	r0, #0
 800536c:	d0aa      	beq.n	80052c4 <UI_GetReg+0x214>
        bRetVal = SPD_GetElAngle(pSPD);
 800536e:	f005 fed1 	bl	800b114 <SPD_GetElAngle>
 8005372:	e7a8      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).b;
 8005374:	4620      	mov	r0, r4
 8005376:	f7fd fd85 	bl	8002e84 <MCI_GetIab>
 800537a:	1400      	asrs	r0, r0, #16
    break;
 800537c:	e7a3      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).a;
 800537e:	4620      	mov	r0, r4
 8005380:	f7fd fd80 	bl	8002e84 <MCI_GetIab>
 8005384:	b200      	sxth	r0, r0
    break;
 8005386:	e79e      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8005388:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800538a:	f006 f86f 	bl	800b46c <STM_GetState>
	break;
 800538e:	e79a      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8005390:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 8005392:	b00c      	add	sp, #48	; 0x30
 8005394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8005398:	f006 b876 	b.w	800b488 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800539c:	f7ff fdc6 	bl	8004f2c <UI_GetSelectedMC>
    break;
 80053a0:	e791      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80053a2:	68a8      	ldr	r0, [r5, #8]
 80053a4:	f004 fdf6 	bl	8009f94 <PID_GetKD>
    break;
 80053a8:	e78d      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80053aa:	68a8      	ldr	r0, [r5, #8]
 80053ac:	f004 fde6 	bl	8009f7c <PID_GetKI>
    break;
 80053b0:	e789      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80053b2:	68a8      	ldr	r0, [r5, #8]
 80053b4:	f004 fdde 	bl	8009f74 <PID_GetKP>
    break;
 80053b8:	e785      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)(MC_UID);
 80053ba:	483d      	ldr	r0, [pc, #244]	; (80054b0 <UI_GetReg+0x400>)
 80053bc:	e783      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80053be:	6868      	ldr	r0, [r5, #4]
 80053c0:	f004 fde8 	bl	8009f94 <PID_GetKD>
    break;
 80053c4:	e77f      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80053c6:	6868      	ldr	r0, [r5, #4]
 80053c8:	f004 fdd8 	bl	8009f7c <PID_GetKI>
    break;
 80053cc:	e77b      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80053ce:	6868      	ldr	r0, [r5, #4]
 80053d0:	f004 fdd0 	bl	8009f74 <PID_GetKP>
    break;
 80053d4:	e777      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7fd fd9a 	bl	8002f10 <MCI_GetValphabeta>
 80053dc:	1400      	asrs	r0, r0, #16
    break;
 80053de:	e772      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7fd fd95 	bl	8002f10 <MCI_GetValphabeta>
 80053e6:	b200      	sxth	r0, r0
    break;
 80053e8:	e76d      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).d;
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7fd fd82 	bl	8002ef4 <MCI_GetVqd>
 80053f0:	1400      	asrs	r0, r0, #16
    break;
 80053f2:	e768      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).q;
 80053f4:	4620      	mov	r0, r4
 80053f6:	f7fd fd7d 	bl	8002ef4 <MCI_GetVqd>
 80053fa:	b200      	sxth	r0, r0
    break;
 80053fc:	e763      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80053fe:	4620      	mov	r0, r4
 8005400:	f7fd fd4e 	bl	8002ea0 <MCI_GetIalphabeta>
 8005404:	1400      	asrs	r0, r0, #16
    break;
 8005406:	e75e      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8005408:	4620      	mov	r0, r4
 800540a:	f7fd fd49 	bl	8002ea0 <MCI_GetIalphabeta>
 800540e:	b200      	sxth	r0, r0
    break;
 8005410:	e759      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8005412:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005414:	f004 fd48 	bl	8009ea8 <MPM_GetAvrgElMotorPowerW>
    break;
 8005418:	e755      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 800541a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800541c:	f004 fd88 	bl	8009f30 <NTC_GetAvTemp_C>
    break;
 8005420:	e751      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8005422:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005424:	f004 fb00 	bl	8009a28 <VBS_GetAvBusVoltage_V>
    break;
 8005428:	e74d      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800542a:	6828      	ldr	r0, [r5, #0]
 800542c:	f004 fdb2 	bl	8009f94 <PID_GetKD>
    break;
 8005430:	e749      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8005432:	6828      	ldr	r0, [r5, #0]
 8005434:	f004 fda2 	bl	8009f7c <PID_GetKI>
    break;
 8005438:	e745      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800543a:	6828      	ldr	r0, [r5, #0]
 800543c:	f004 fd9a 	bl	8009f74 <PID_GetKP>
    break;
 8005440:	e741      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8005442:	4620      	mov	r0, r4
 8005444:	f7fd fd1a 	bl	8002e7c <MCI_GetMecSpeedRefUnit>
 8005448:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800544c:	0040      	lsls	r0, r0, #1
    break;
 800544e:	e73a      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8005450:	4620      	mov	r0, r4
 8005452:	f7fd fcfd 	bl	8002e50 <MCI_GetControlMode>
    break;
 8005456:	e736      	b.n	80052c6 <UI_GetReg+0x216>
      if (pMCT->pRevupCtrl)
 8005458:	6968      	ldr	r0, [r5, #20]
 800545a:	2800      	cmp	r0, #0
 800545c:	f43f af32 	beq.w	80052c4 <UI_GetReg+0x214>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8005460:	f006 f9a6 	bl	800b7b0 <RUC_GetNumberOfPhases>
 8005464:	e72f      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).d;
 8005466:	4620      	mov	r0, r4
 8005468:	f7fd fd28 	bl	8002ebc <MCI_GetIqd>
 800546c:	1400      	asrs	r0, r0, #16
    break;
 800546e:	e72a      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).q;
 8005470:	4620      	mov	r0, r4
 8005472:	f7fd fd23 	bl	8002ebc <MCI_GetIqd>
 8005476:	b200      	sxth	r0, r0
    break;
 8005478:	e725      	b.n	80052c6 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800547a:	4620      	mov	r0, r4
 800547c:	f7fd fcf6 	bl	8002e6c <MCI_GetAvrgMecSpeedUnit>
 8005480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005484:	0040      	lsls	r0, r0, #1
    break;
 8005486:	e71e      	b.n	80052c6 <UI_GetReg+0x216>
        *success = false;
 8005488:	2000      	movs	r0, #0
 800548a:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800548c:	e71b      	b.n	80052c6 <UI_GetReg+0x216>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800548e:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8005490:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005492:	f63f af6a 	bhi.w	800536a <UI_GetReg+0x2ba>
 8005496:	e767      	b.n	8005368 <UI_GetReg+0x2b8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8005498:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 800549a:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800549c:	f63f af51 	bhi.w	8005342 <UI_GetReg+0x292>
 80054a0:	e74e      	b.n	8005340 <UI_GetReg+0x290>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80054a2:	f7fd fcd7 	bl	8002e54 <MCI_GetLastRampFinalSpeed>
 80054a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80054aa:	0040      	lsls	r0, r0, #1
 80054ac:	e70b      	b.n	80052c6 <UI_GetReg+0x216>
 80054ae:	bf00      	nop
 80054b0:	34a6847a 	.word	0x34a6847a

080054b4 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80054b4:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80054b6:	6883      	ldr	r3, [r0, #8]
 80054b8:	7d02      	ldrb	r2, [r0, #20]
 80054ba:	3901      	subs	r1, #1
 80054bc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 80054c0:	290d      	cmp	r1, #13
 80054c2:	d808      	bhi.n	80054d6 <UI_ExecCmd+0x22>
 80054c4:	e8df f001 	tbb	[pc, r1]
 80054c8:	0e091419 	.word	0x0e091419
 80054cc:	231e100e 	.word	0x231e100e
 80054d0:	07070728 	.word	0x07070728
 80054d4:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80054d6:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80054d8:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 80054da:	4620      	mov	r0, r4
 80054dc:	f7fd fca8 	bl	8002e30 <MCI_GetSTMState>
 80054e0:	2806      	cmp	r0, #6
 80054e2:	d01e      	beq.n	8005522 <UI_ExecCmd+0x6e>
  bool retVal = true;
 80054e4:	2001      	movs	r0, #1
}
 80054e6:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7fd fca1 	bl	8002e30 <MCI_GetSTMState>
 80054ee:	b120      	cbz	r0, 80054fa <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7fd fc55 	bl	8002da0 <MCI_StopMotor>
  bool retVal = true;
 80054f6:	2001      	movs	r0, #1
}
 80054f8:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7fd fc46 	bl	8002d8c <MCI_StartMotor>
  bool retVal = true;
 8005500:	2001      	movs	r0, #1
}
 8005502:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8005504:	4620      	mov	r0, r4
 8005506:	f7fd fc4f 	bl	8002da8 <MCI_FaultAcknowledged>
  bool retVal = true;
 800550a:	2001      	movs	r0, #1
}
 800550c:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 800550e:	4620      	mov	r0, r4
 8005510:	f7fd fc4e 	bl	8002db0 <MCI_EncoderAlign>
  bool retVal = true;
 8005514:	2001      	movs	r0, #1
}
 8005516:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8005518:	4620      	mov	r0, r4
 800551a:	f7fd fd29 	bl	8002f70 <MCI_Clear_Iqdref>
  bool retVal = true;
 800551e:	2001      	movs	r0, #1
}
 8005520:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8005522:	4620      	mov	r0, r4
 8005524:	f7fd fc9e 	bl	8002e64 <MCI_StopRamp>
  bool retVal = true;
 8005528:	2001      	movs	r0, #1
}
 800552a:	bd10      	pop	{r4, pc}

0800552c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 800552c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800552e:	4b07      	ldr	r3, [pc, #28]	; (800554c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005530:	7d04      	ldrb	r4, [r0, #20]
 8005532:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8005534:	fb83 c301 	smull	ip, r3, r3, r1
 8005538:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800553c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005540:	b209      	sxth	r1, r1
 8005542:	f7fd fc03 	bl	8002d4c <MCI_ExecSpeedRamp>
  return true;
}
 8005546:	2001      	movs	r0, #1
 8005548:	bd10      	pop	{r4, pc}
 800554a:	bf00      	nop
 800554c:	2aaaaaab 	.word	0x2aaaaaab

08005550 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8005550:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005552:	6883      	ldr	r3, [r0, #8]
 8005554:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8005556:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800555a:	f7fd fc03 	bl	8002d64 <MCI_ExecTorqueRamp>
  return true;
}
 800555e:	2001      	movs	r0, #1
 8005560:	bd10      	pop	{r4, pc}
 8005562:	bf00      	nop

08005564 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005566:	7d04      	ldrb	r4, [r0, #20]
 8005568:	68c0      	ldr	r0, [r0, #12]
 800556a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800556e:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8005570:	b19c      	cbz	r4, 800559a <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8005572:	4620      	mov	r0, r4
 8005574:	461e      	mov	r6, r3
 8005576:	4617      	mov	r7, r2
 8005578:	460d      	mov	r5, r1
 800557a:	f006 f903 	bl	800b784 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800557e:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8005580:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8005582:	4620      	mov	r0, r4
 8005584:	f006 f904 	bl	800b790 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005588:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800558a:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800558c:	4620      	mov	r0, r4
 800558e:	f006 f907 	bl	800b7a0 <RUC_GetPhaseFinalTorque>
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8005596:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8005598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 800559a:	4620      	mov	r0, r4
}
 800559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559e:	bf00      	nop

080055a0 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80055a0:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80055a2:	7d04      	ldrb	r4, [r0, #20]
 80055a4:	68c0      	ldr	r0, [r0, #12]
{
 80055a6:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80055a8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 80055ac:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80055b0:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80055b2:	9001      	str	r0, [sp, #4]
{
 80055b4:	461d      	mov	r5, r3
 80055b6:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80055b8:	f006 f8d2 	bl	800b760 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80055bc:	9801      	ldr	r0, [sp, #4]
 80055be:	462a      	mov	r2, r5
 80055c0:	4621      	mov	r1, r4
 80055c2:	f006 f8d3 	bl	800b76c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80055c6:	9801      	ldr	r0, [sp, #4]
 80055c8:	4632      	mov	r2, r6
 80055ca:	4621      	mov	r1, r4
 80055cc:	f006 f8d4 	bl	800b778 <RUC_SetPhaseFinalTorque>
  return true;
}
 80055d0:	2001      	movs	r0, #1
 80055d2:	b002      	add	sp, #8
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
 80055d6:	bf00      	nop

080055d8 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80055d8:	b410      	push	{r4}
 80055da:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80055dc:	7d04      	ldrb	r4, [r0, #20]
 80055de:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 80055e0:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80055e4:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80055e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80055ec:	9901      	ldr	r1, [sp, #4]
}
 80055ee:	b003      	add	sp, #12
 80055f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 80055f4:	f7fd bbc0 	b.w	8002d78 <MCI_SetCurrentReferences>

080055f8 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80055f8:	2000      	movs	r0, #0
 80055fa:	4770      	bx	lr

080055fc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80055fc:	4a03      	ldr	r2, [pc, #12]	; (800560c <SystemInit+0x10>)
 80055fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005602:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005606:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800560a:	4770      	bx	lr
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005610:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005612:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <HAL_InitTick+0x40>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	b90b      	cbnz	r3, 800561c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005618:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800561a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800561c:	490d      	ldr	r1, [pc, #52]	; (8005654 <HAL_InitTick+0x44>)
 800561e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005622:	4605      	mov	r5, r0
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	6808      	ldr	r0, [r1, #0]
 800562a:	fbb0 f0f3 	udiv	r0, r0, r3
 800562e:	f000 ff85 	bl	800653c <HAL_SYSTICK_Config>
 8005632:	4604      	mov	r4, r0
 8005634:	2800      	cmp	r0, #0
 8005636:	d1ef      	bne.n	8005618 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005638:	2d0f      	cmp	r5, #15
 800563a:	d8ed      	bhi.n	8005618 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800563c:	4602      	mov	r2, r0
 800563e:	4629      	mov	r1, r5
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	f000 ff34 	bl	80064b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <HAL_InitTick+0x48>)
 800564a:	4620      	mov	r0, r4
 800564c:	601d      	str	r5, [r3, #0]
}
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	20000dd4 	.word	0x20000dd4
 8005654:	20000dd0 	.word	0x20000dd0
 8005658:	20000dd8 	.word	0x20000dd8

0800565c <HAL_Init>:
{
 800565c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800565e:	2003      	movs	r0, #3
 8005660:	f000 ff12 	bl	8006488 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005664:	2004      	movs	r0, #4
 8005666:	f7ff ffd3 	bl	8005610 <HAL_InitTick>
 800566a:	b110      	cbz	r0, 8005672 <HAL_Init+0x16>
    status = HAL_ERROR;
 800566c:	2401      	movs	r4, #1
}
 800566e:	4620      	mov	r0, r4
 8005670:	bd10      	pop	{r4, pc}
 8005672:	4604      	mov	r4, r0
    HAL_MspInit();
 8005674:	f7ff f834 	bl	80046e0 <HAL_MspInit>
}
 8005678:	4620      	mov	r0, r4
 800567a:	bd10      	pop	{r4, pc}

0800567c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800567c:	4a03      	ldr	r2, [pc, #12]	; (800568c <HAL_IncTick+0x10>)
 800567e:	4904      	ldr	r1, [pc, #16]	; (8005690 <HAL_IncTick+0x14>)
 8005680:	6813      	ldr	r3, [r2, #0]
 8005682:	6809      	ldr	r1, [r1, #0]
 8005684:	440b      	add	r3, r1
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	200015e8 	.word	0x200015e8
 8005690:	20000dd4 	.word	0x20000dd4

08005694 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005694:	4b01      	ldr	r3, [pc, #4]	; (800569c <HAL_GetTick+0x8>)
 8005696:	6818      	ldr	r0, [r3, #0]
}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	200015e8 	.word	0x200015e8

080056a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056a8:	2800      	cmp	r0, #0
 80056aa:	f000 80cb 	beq.w	8005844 <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056ae:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80056b0:	4604      	mov	r4, r0
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	f000 8094 	beq.w	80057e0 <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056b8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80056ba:	6893      	ldr	r3, [r2, #8]
 80056bc:	009d      	lsls	r5, r3, #2
 80056be:	d505      	bpl.n	80056cc <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80056c0:	6893      	ldr	r3, [r2, #8]
 80056c2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80056c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056ca:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056cc:	6893      	ldr	r3, [r2, #8]
 80056ce:	00d8      	lsls	r0, r3, #3
 80056d0:	d419      	bmi.n	8005706 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056d2:	4b71      	ldr	r3, [pc, #452]	; (8005898 <HAL_ADC_Init+0x1f8>)
 80056d4:	4871      	ldr	r0, [pc, #452]	; (800589c <HAL_ADC_Init+0x1fc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80056d8:	6891      	ldr	r1, [r2, #8]
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	fba0 0303 	umull	r0, r3, r0, r3
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80056e6:	3301      	adds	r3, #1
 80056e8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80056f2:	6091      	str	r1, [r2, #8]
 80056f4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80056f6:	9b01      	ldr	r3, [sp, #4]
 80056f8:	b12b      	cbz	r3, 8005706 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80056fa:	9b01      	ldr	r3, [sp, #4]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f9      	bne.n	80056fa <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005706:	6893      	ldr	r3, [r2, #8]
 8005708:	00d9      	lsls	r1, r3, #3
 800570a:	d45b      	bmi.n	80057c4 <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800570c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800570e:	f043 0310 	orr.w	r3, r3, #16
 8005712:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005714:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800571c:	6893      	ldr	r3, [r2, #8]
 800571e:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8005722:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005726:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005728:	d153      	bne.n	80057d2 <HAL_ADC_Init+0x132>
 800572a:	06db      	lsls	r3, r3, #27
 800572c:	d451      	bmi.n	80057d2 <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800572e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005730:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005734:	f043 0302 	orr.w	r3, r3, #2
 8005738:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800573a:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800573c:	07de      	lsls	r6, r3, #31
 800573e:	d40e      	bmi.n	800575e <HAL_ADC_Init+0xbe>
 8005740:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <HAL_ADC_Init+0x200>)
 8005742:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005746:	6889      	ldr	r1, [r1, #8]
 8005748:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800574a:	430b      	orrs	r3, r1
 800574c:	07dd      	lsls	r5, r3, #31
 800574e:	d406      	bmi.n	800575e <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005750:	4954      	ldr	r1, [pc, #336]	; (80058a4 <HAL_ADC_Init+0x204>)
 8005752:	6865      	ldr	r5, [r4, #4]
 8005754:	688b      	ldr	r3, [r1, #8]
 8005756:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800575a:	432b      	orrs	r3, r5
 800575c:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800575e:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8005762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005764:	432b      	orrs	r3, r5
 8005766:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005768:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800576a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800576e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005772:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005774:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005778:	d05f      	beq.n	800583a <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800577a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800577c:	b121      	cbz	r1, 8005788 <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800577e:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005780:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005784:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005786:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005788:	68d6      	ldr	r6, [r2, #12]
 800578a:	4947      	ldr	r1, [pc, #284]	; (80058a8 <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800578c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800578e:	4031      	ands	r1, r6
 8005790:	430b      	orrs	r3, r1
 8005792:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005794:	6913      	ldr	r3, [r2, #16]
 8005796:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800579a:	432b      	orrs	r3, r5
 800579c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800579e:	6893      	ldr	r3, [r2, #8]
 80057a0:	0759      	lsls	r1, r3, #29
 80057a2:	d523      	bpl.n	80057ec <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057a4:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057a6:	6963      	ldr	r3, [r4, #20]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d04e      	beq.n	800584a <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80057ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057ae:	f023 030f 	bic.w	r3, r3, #15
 80057b2:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80057b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80057c0:	b002      	add	sp, #8
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057c4:	6893      	ldr	r3, [r2, #8]
 80057c6:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057ca:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057d0:	d0ab      	beq.n	800572a <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80057d4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057d6:	f043 0310 	orr.w	r3, r3, #16
 80057da:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80057dc:	b002      	add	sp, #8
 80057de:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80057e0:	f7fb fc0e 	bl	8001000 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80057e4:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80057e6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80057ea:	e765      	b.n	80056b8 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057ec:	6893      	ldr	r3, [r2, #8]
 80057ee:	071b      	lsls	r3, r3, #28
 80057f0:	d4d9      	bmi.n	80057a6 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057f2:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057f8:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 80057fa:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057fc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005800:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005802:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005806:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800580a:	430b      	orrs	r3, r1
 800580c:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800580e:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005810:	bb1d      	cbnz	r5, 800585a <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005816:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005818:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800581c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005824:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8005828:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800582c:	2b01      	cmp	r3, #1
 800582e:	d021      	beq.n	8005874 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005830:	6913      	ldr	r3, [r2, #16]
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	6113      	str	r3, [r2, #16]
 8005838:	e7b5      	b.n	80057a6 <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800583a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800583c:	3901      	subs	r1, #1
 800583e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005842:	e79a      	b.n	800577a <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8005844:	2001      	movs	r0, #1
}
 8005846:	b002      	add	sp, #8
 8005848:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800584a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800584c:	6a23      	ldr	r3, [r4, #32]
 800584e:	f021 010f 	bic.w	r1, r1, #15
 8005852:	3b01      	subs	r3, #1
 8005854:	430b      	orrs	r3, r1
 8005856:	6313      	str	r3, [r2, #48]	; 0x30
 8005858:	e7ac      	b.n	80057b4 <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800585a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005860:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005864:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800586c:	432b      	orrs	r3, r5
 800586e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005872:	e7d9      	b.n	8005828 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005874:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8005878:	6911      	ldr	r1, [r2, #16]
 800587a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800587c:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8005880:	f021 0104 	bic.w	r1, r1, #4
 8005884:	4333      	orrs	r3, r6
 8005886:	430b      	orrs	r3, r1
 8005888:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800588a:	432b      	orrs	r3, r5
 800588c:	430b      	orrs	r3, r1
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	6113      	str	r3, [r2, #16]
 8005894:	e787      	b.n	80057a6 <HAL_ADC_Init+0x106>
 8005896:	bf00      	nop
 8005898:	20000dd0 	.word	0x20000dd0
 800589c:	053e2d63 	.word	0x053e2d63
 80058a0:	50000100 	.word	0x50000100
 80058a4:	50000300 	.word	0x50000300
 80058a8:	fff04007 	.word	0xfff04007

080058ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058ae:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80058b2:	b083      	sub	sp, #12
 80058b4:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80058b6:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80058b8:	f04f 0000 	mov.w	r0, #0
 80058bc:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80058be:	f000 8143 	beq.w	8005b48 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058c2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80058c4:	2001      	movs	r0, #1
 80058c6:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058ca:	6894      	ldr	r4, [r2, #8]
 80058cc:	0766      	lsls	r6, r4, #29
 80058ce:	d43d      	bmi.n	800594c <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 80058d0:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80058d4:	09a6      	lsrs	r6, r4, #6
 80058d6:	f102 0530 	add.w	r5, r2, #48	; 0x30
 80058da:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80058de:	f004 041f 	and.w	r4, r4, #31
 80058e2:	5977      	ldr	r7, [r6, r5]
 80058e4:	f04f 0c1f 	mov.w	ip, #31
 80058e8:	fa0c fc04 	lsl.w	ip, ip, r4
 80058ec:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80058f0:	ea27 070c 	bic.w	r7, r7, ip
 80058f4:	40a0      	lsls	r0, r4
 80058f6:	4338      	orrs	r0, r7
 80058f8:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058fa:	6890      	ldr	r0, [r2, #8]
 80058fc:	0745      	lsls	r5, r0, #29
 80058fe:	f140 809a 	bpl.w	8005a36 <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005902:	6890      	ldr	r0, [r2, #8]
 8005904:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005906:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005908:	07e4      	lsls	r4, r4, #31
 800590a:	d530      	bpl.n	800596e <HAL_ADC_ConfigChannel+0xc2>
 800590c:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800590e:	49c2      	ldr	r1, [pc, #776]	; (8005c18 <HAL_ADC_ConfigChannel+0x36c>)
 8005910:	420c      	tst	r4, r1
 8005912:	d02a      	beq.n	800596a <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005914:	49c1      	ldr	r1, [pc, #772]	; (8005c1c <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005916:	4dc2      	ldr	r5, [pc, #776]	; (8005c20 <HAL_ADC_ConfigChannel+0x374>)
 8005918:	6888      	ldr	r0, [r1, #8]
 800591a:	42ac      	cmp	r4, r5
 800591c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8005920:	d01d      	beq.n	800595e <HAL_ADC_ConfigChannel+0xb2>
 8005922:	4dc0      	ldr	r5, [pc, #768]	; (8005c24 <HAL_ADC_ConfigChannel+0x378>)
 8005924:	42ac      	cmp	r4, r5
 8005926:	d01a      	beq.n	800595e <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005928:	4dbf      	ldr	r5, [pc, #764]	; (8005c28 <HAL_ADC_ConfigChannel+0x37c>)
 800592a:	42ac      	cmp	r4, r5
 800592c:	f040 813e 	bne.w	8005bac <HAL_ADC_ConfigChannel+0x300>
 8005930:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8005934:	d119      	bne.n	800596a <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005936:	4cbd      	ldr	r4, [pc, #756]	; (8005c2c <HAL_ADC_ConfigChannel+0x380>)
 8005938:	42a2      	cmp	r2, r4
 800593a:	d016      	beq.n	800596a <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800593c:	688a      	ldr	r2, [r1, #8]
 800593e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005942:	4316      	orrs	r6, r2
 8005944:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8005948:	608e      	str	r6, [r1, #8]
}
 800594a:	e003      	b.n	8005954 <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800594c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800594e:	f042 0220 	orr.w	r2, r2, #32
 8005952:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800595a:	b003      	add	sp, #12
 800595c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800595e:	0201      	lsls	r1, r0, #8
 8005960:	d403      	bmi.n	800596a <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005962:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005966:	f000 8102 	beq.w	8005b6e <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800596a:	2000      	movs	r0, #0
 800596c:	e7f2      	b.n	8005954 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800596e:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005970:	4caf      	ldr	r4, [pc, #700]	; (8005c30 <HAL_ADC_ConfigChannel+0x384>)
 8005972:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005976:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8005c40 <HAL_ADC_ConfigChannel+0x394>
 800597a:	f006 0718 	and.w	r7, r6, #24
 800597e:	40fc      	lsrs	r4, r7
 8005980:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8005984:	4004      	ands	r4, r0
 8005986:	ea25 0507 	bic.w	r5, r5, r7
 800598a:	432c      	orrs	r4, r5
 800598c:	4566      	cmp	r6, ip
 800598e:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005992:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005994:	d1bb      	bne.n	800590e <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005996:	2f00      	cmp	r7, #0
 8005998:	f000 80d9 	beq.w	8005b4e <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	f000 8181 	beq.w	8005ca8 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80059a6:	fab4 f484 	clz	r4, r4
 80059aa:	3401      	adds	r4, #1
 80059ac:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059b0:	2c09      	cmp	r4, #9
 80059b2:	f240 8179 	bls.w	8005ca8 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80059ba:	2d00      	cmp	r5, #0
 80059bc:	f000 81d7 	beq.w	8005d6e <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80059c0:	fab5 f585 	clz	r5, r5
 80059c4:	3501      	adds	r5, #1
 80059c6:	06ad      	lsls	r5, r5, #26
 80059c8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059cc:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80059d0:	2c00      	cmp	r4, #0
 80059d2:	f000 81d1 	beq.w	8005d78 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 80059d6:	fab4 f484 	clz	r4, r4
 80059da:	3401      	adds	r4, #1
 80059dc:	f004 041f 	and.w	r4, r4, #31
 80059e0:	2601      	movs	r6, #1
 80059e2:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059e6:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f000 81c1 	beq.w	8005d74 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80059f2:	fab0 f480 	clz	r4, r0
 80059f6:	3401      	adds	r4, #1
 80059f8:	f004 041f 	and.w	r4, r4, #31
 80059fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005a00:	f1a4 001e 	sub.w	r0, r4, #30
 8005a04:	0500      	lsls	r0, r0, #20
 8005a06:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a0a:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a0c:	0dc7      	lsrs	r7, r0, #23
 8005a0e:	f007 0704 	and.w	r7, r7, #4
 8005a12:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8005a16:	688e      	ldr	r6, [r1, #8]
 8005a18:	597c      	ldr	r4, [r7, r5]
 8005a1a:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005a1e:	f04f 0c07 	mov.w	ip, #7
 8005a22:	fa0c fc00 	lsl.w	ip, ip, r0
 8005a26:	ea24 040c 	bic.w	r4, r4, ip
 8005a2a:	fa06 f000 	lsl.w	r0, r6, r0
 8005a2e:	4320      	orrs	r0, r4
 8005a30:	5178      	str	r0, [r7, r5]
 8005a32:	680c      	ldr	r4, [r1, #0]
}
 8005a34:	e76b      	b.n	800590e <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a36:	6890      	ldr	r0, [r2, #8]
 8005a38:	f010 0008 	ands.w	r0, r0, #8
 8005a3c:	f040 8082 	bne.w	8005b44 <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a40:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005a42:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a44:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005a48:	f000 80c4 	beq.w	8005bd4 <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a4c:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8005a50:	f00c 0c04 	and.w	ip, ip, #4
 8005a54:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8005a58:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005a5c:	f85c 5007 	ldr.w	r5, [ip, r7]
 8005a60:	f04f 0e07 	mov.w	lr, #7
 8005a64:	fa0e fe06 	lsl.w	lr, lr, r6
 8005a68:	40b4      	lsls	r4, r6
 8005a6a:	ea25 050e 	bic.w	r5, r5, lr
 8005a6e:	432c      	orrs	r4, r5
 8005a70:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005a74:	6954      	ldr	r4, [r2, #20]
 8005a76:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005a7a:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a7c:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a80:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a82:	f1bc 0f04 	cmp.w	ip, #4
 8005a86:	d02e      	beq.n	8005ae6 <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a88:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8005a8c:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8005c44 <HAL_ADC_ConfigChannel+0x398>
 8005a90:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8005a94:	680f      	ldr	r7, [r1, #0]
 8005a96:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a9a:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8005a9e:	694d      	ldr	r5, [r1, #20]
 8005aa0:	0076      	lsls	r6, r6, #1
 8005aa2:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8005aa6:	40b5      	lsls	r5, r6
 8005aa8:	ea47 070e 	orr.w	r7, r7, lr
 8005aac:	433d      	orrs	r5, r7
 8005aae:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8005ab2:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ab6:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005ab8:	698e      	ldr	r6, [r1, #24]
 8005aba:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8005abe:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8005ac2:	4335      	orrs	r5, r6
 8005ac4:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005ac8:	690e      	ldr	r6, [r1, #16]
 8005aca:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8005acc:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8005ad0:	2f01      	cmp	r7, #1
 8005ad2:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8005ad6:	bf08      	it	eq
 8005ad8:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8005adc:	4328      	orrs	r0, r5
 8005ade:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8005ae2:	6808      	ldr	r0, [r1, #0]
}
 8005ae4:	e70f      	b.n	8005906 <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ae6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ae8:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005aea:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005aec:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005af0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005af4:	2d00      	cmp	r5, #0
 8005af6:	f040 80a7 	bne.w	8005c48 <HAL_ADC_ConfigChannel+0x39c>
 8005afa:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005afe:	42ac      	cmp	r4, r5
 8005b00:	f000 8119 	beq.w	8005d36 <HAL_ADC_ConfigChannel+0x48a>
 8005b04:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005b06:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b08:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b0c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005b10:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8005b14:	42ae      	cmp	r6, r5
 8005b16:	f000 80fc 	beq.w	8005d12 <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b1a:	68a6      	ldr	r6, [r4, #8]
 8005b1c:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b1e:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b22:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005b26:	42ae      	cmp	r6, r5
 8005b28:	f000 80e2 	beq.w	8005cf0 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b2c:	68e6      	ldr	r6, [r4, #12]
 8005b2e:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b30:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005b32:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005b36:	42b5      	cmp	r5, r6
 8005b38:	f47f aee5 	bne.w	8005906 <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005b42:	6020      	str	r0, [r4, #0]
 8005b44:	6808      	ldr	r0, [r1, #0]
}
 8005b46:	e6de      	b.n	8005906 <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8005b48:	2002      	movs	r0, #2
}
 8005b4a:	b003      	add	sp, #12
 8005b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b4e:	0e80      	lsrs	r0, r0, #26
 8005b50:	1c44      	adds	r4, r0, #1
 8005b52:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b56:	2e09      	cmp	r6, #9
 8005b58:	d850      	bhi.n	8005bfc <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b5a:	06a5      	lsls	r5, r4, #26
 8005b5c:	2401      	movs	r4, #1
 8005b5e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005b62:	40b4      	lsls	r4, r6
 8005b64:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005b68:	4325      	orrs	r5, r4
 8005b6a:	0500      	lsls	r0, r0, #20
 8005b6c:	e74d      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b6e:	482b      	ldr	r0, [pc, #172]	; (8005c1c <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b70:	4a30      	ldr	r2, [pc, #192]	; (8005c34 <HAL_ADC_ConfigChannel+0x388>)
 8005b72:	6881      	ldr	r1, [r0, #8]
 8005b74:	4c30      	ldr	r4, [pc, #192]	; (8005c38 <HAL_ADC_ConfigChannel+0x38c>)
 8005b76:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005b7a:	430e      	orrs	r6, r1
 8005b7c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8005b80:	6086      	str	r6, [r0, #8]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	0992      	lsrs	r2, r2, #6
 8005b86:	fba4 1202 	umull	r1, r2, r4, r2
 8005b8a:	0992      	lsrs	r2, r2, #6
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	f43f aee6 	beq.w	800596a <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8005b9e:	9a01      	ldr	r2, [sp, #4]
 8005ba0:	3a01      	subs	r2, #1
 8005ba2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005ba4:	9a01      	ldr	r2, [sp, #4]
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d1f9      	bne.n	8005b9e <HAL_ADC_ConfigChannel+0x2f2>
 8005baa:	e6de      	b.n	800596a <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bac:	4d23      	ldr	r5, [pc, #140]	; (8005c3c <HAL_ADC_ConfigChannel+0x390>)
 8005bae:	42ac      	cmp	r4, r5
 8005bb0:	f47f aedb 	bne.w	800596a <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bb4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005bb8:	f47f aed7 	bne.w	800596a <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005bbc:	4c1b      	ldr	r4, [pc, #108]	; (8005c2c <HAL_ADC_ConfigChannel+0x380>)
 8005bbe:	42a2      	cmp	r2, r4
 8005bc0:	f43f aed3 	beq.w	800596a <HAL_ADC_ConfigChannel+0xbe>
 8005bc4:	688a      	ldr	r2, [r1, #8]
 8005bc6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005bca:	4332      	orrs	r2, r6
 8005bcc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005bd0:	608a      	str	r2, [r1, #8]
}
 8005bd2:	e6bf      	b.n	8005954 <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005bd4:	0df5      	lsrs	r5, r6, #23
 8005bd6:	f102 0414 	add.w	r4, r2, #20
 8005bda:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8005bde:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005be2:	592f      	ldr	r7, [r5, r4]
 8005be4:	f04f 0c07 	mov.w	ip, #7
 8005be8:	fa0c f606 	lsl.w	r6, ip, r6
 8005bec:	ea27 0606 	bic.w	r6, r7, r6
 8005bf0:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005bf2:	6954      	ldr	r4, [r2, #20]
 8005bf4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005bf8:	6154      	str	r4, [r2, #20]
}
 8005bfa:	e73f      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bfc:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005c00:	06a5      	lsls	r5, r4, #26
 8005c02:	381e      	subs	r0, #30
 8005c04:	2401      	movs	r4, #1
 8005c06:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005c0a:	fa04 f606 	lsl.w	r6, r4, r6
 8005c0e:	0500      	lsls	r0, r0, #20
 8005c10:	4335      	orrs	r5, r6
 8005c12:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005c16:	e6f8      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x15e>
 8005c18:	80080000 	.word	0x80080000
 8005c1c:	50000300 	.word	0x50000300
 8005c20:	c3210000 	.word	0xc3210000
 8005c24:	90c00010 	.word	0x90c00010
 8005c28:	c7520000 	.word	0xc7520000
 8005c2c:	50000100 	.word	0x50000100
 8005c30:	0007ffff 	.word	0x0007ffff
 8005c34:	20000dd0 	.word	0x20000dd0
 8005c38:	053e2d63 	.word	0x053e2d63
 8005c3c:	cb840000 	.word	0xcb840000
 8005c40:	407f0000 	.word	0x407f0000
 8005c44:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c4c:	b11d      	cbz	r5, 8005c56 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8005c4e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c52:	42ac      	cmp	r4, r5
 8005c54:	d06f      	beq.n	8005d36 <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c56:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005c58:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c5a:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c5e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005c62:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c66:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c6a:	b11d      	cbz	r5, 8005c74 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8005c6c:	fab5 f585 	clz	r5, r5
 8005c70:	42ae      	cmp	r6, r5
 8005c72:	d04e      	beq.n	8005d12 <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c74:	68a5      	ldr	r5, [r4, #8]
 8005c76:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c78:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c7c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c80:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c84:	b11d      	cbz	r5, 8005c8e <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8005c86:	fab5 f585 	clz	r5, r5
 8005c8a:	42ae      	cmp	r6, r5
 8005c8c:	d030      	beq.n	8005cf0 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c8e:	68e5      	ldr	r5, [r4, #12]
 8005c90:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c92:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c94:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	f43f ae32 	beq.w	8005906 <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8005ca2:	fab5 f585 	clz	r5, r5
 8005ca6:	e746      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005cac:	2d00      	cmp	r5, #0
 8005cae:	d058      	beq.n	8005d62 <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8005cb0:	fab5 f585 	clz	r5, r5
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	06ad      	lsls	r5, r5, #26
 8005cb8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005cc0:	2c00      	cmp	r4, #0
 8005cc2:	d04c      	beq.n	8005d5e <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8005cc4:	fab4 f484 	clz	r4, r4
 8005cc8:	3401      	adds	r4, #1
 8005cca:	f004 041f 	and.w	r4, r4, #31
 8005cce:	2601      	movs	r6, #1
 8005cd0:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cd4:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d044      	beq.n	8005d68 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8005cde:	fab0 f480 	clz	r4, r0
 8005ce2:	3401      	adds	r4, #1
 8005ce4:	f004 041f 	and.w	r4, r4, #31
 8005ce8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005cec:	0520      	lsls	r0, r4, #20
 8005cee:	e68c      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8005cf0:	6838      	ldr	r0, [r7, #0]
 8005cf2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cf6:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cf8:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005cfa:	68e5      	ldr	r5, [r4, #12]
 8005cfc:	68e6      	ldr	r6, [r4, #12]
 8005cfe:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d02:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d06:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d1c5      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x3ec>
 8005d0c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005d10:	e711      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 8005d12:	6838      	ldr	r0, [r7, #0]
 8005d14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d18:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d1a:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d1c:	68a5      	ldr	r5, [r4, #8]
 8005d1e:	68a6      	ldr	r6, [r4, #8]
 8005d20:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d24:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d28:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	d1a7      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x3d4>
 8005d30:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005d34:	e6f7      	b.n	8005b26 <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 8005d36:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005d38:	4614      	mov	r4, r2
 8005d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d3e:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d42:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d44:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8005d46:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005d48:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d4c:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d50:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	d186      	bne.n	8005c66 <HAL_ADC_ConfigChannel+0x3ba>
 8005d58:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005d5c:	e6da      	b.n	8005b14 <HAL_ADC_ConfigChannel+0x268>
 8005d5e:	2402      	movs	r4, #2
 8005d60:	e7b8      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x428>
 8005d62:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005d66:	e7a9      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x410>
 8005d68:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005d6c:	e64d      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x15e>
 8005d6e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005d72:	e62b      	b.n	80059cc <HAL_ADC_ConfigChannel+0x120>
 8005d74:	4801      	ldr	r0, [pc, #4]	; (8005d7c <HAL_ADC_ConfigChannel+0x4d0>)
 8005d76:	e648      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x15e>
 8005d78:	2402      	movs	r4, #2
 8005d7a:	e634      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x13a>
 8005d7c:	fe500000 	.word	0xfe500000

08005d80 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d84:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d88:	6944      	ldr	r4, [r0, #20]
{
 8005d8a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8005d8c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005d8e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8005d90:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005d92:	f000 8187 	beq.w	80060a4 <HAL_ADCEx_InjectedConfigChannel+0x324>
 8005d96:	2301      	movs	r3, #1
 8005d98:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005d9c:	b1e4      	cbz	r4, 8005dd8 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005d9e:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d019      	beq.n	8005dd8 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005da4:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	f040 8126 	bne.w	8005ff8 <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005dac:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	f000 8248 	beq.w	8006244 <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005db4:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005db6:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005dba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005dbc:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005dbe:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005dc0:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005dc4:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005dc6:	f005 051f 	and.w	r5, r5, #31
 8005dca:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8005dce:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005dd0:	4323      	orrs	r3, r4
 8005dd2:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005dd4:	6803      	ldr	r3, [r0, #0]
 8005dd6:	e005      	b.n	8005de4 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005dd8:	684b      	ldr	r3, [r1, #4]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	f000 80f8 	beq.w	8005fd0 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8005de0:	680a      	ldr	r2, [r1, #0]
 8005de2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005de4:	689c      	ldr	r4, [r3, #8]
 8005de6:	0724      	lsls	r4, r4, #28
 8005de8:	d410      	bmi.n	8005e0c <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005dea:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005dee:	2c00      	cmp	r4, #0
 8005df0:	f040 80e5 	bne.w	8005fbe <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005df4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8005df8:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8005dfc:	68dd      	ldr	r5, [r3, #12]
 8005dfe:	0524      	lsls	r4, r4, #20
 8005e00:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8005e04:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8005e08:	432c      	orrs	r4, r5
 8005e0a:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e0c:	689c      	ldr	r4, [r3, #8]
 8005e0e:	f014 0404 	ands.w	r4, r4, #4
 8005e12:	d060      	beq.n	8005ed6 <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e14:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e16:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e18:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e1a:	07ef      	lsls	r7, r5, #31
 8005e1c:	d414      	bmi.n	8005e48 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8005e1e:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005e20:	4dbe      	ldr	r5, [pc, #760]	; (800611c <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 8005e22:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005e26:	f8df e320 	ldr.w	lr, [pc, #800]	; 8006148 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8005e2a:	f007 0c18 	and.w	ip, r7, #24
 8005e2e:	fa25 f50c 	lsr.w	r5, r5, ip
 8005e32:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8005e36:	4015      	ands	r5, r2
 8005e38:	ea26 060c 	bic.w	r6, r6, ip
 8005e3c:	4335      	orrs	r5, r6
 8005e3e:	4577      	cmp	r7, lr
 8005e40:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 8005e44:	f000 80fd 	beq.w	8006042 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8005e48:	49b5      	ldr	r1, [pc, #724]	; (8006120 <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 8005e4a:	420a      	tst	r2, r1
 8005e4c:	d019      	beq.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005e4e:	4db5      	ldr	r5, [pc, #724]	; (8006124 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005e50:	4eb5      	ldr	r6, [pc, #724]	; (8006128 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 8005e52:	68a9      	ldr	r1, [r5, #8]
 8005e54:	42b2      	cmp	r2, r6
 8005e56:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8005e5a:	d019      	beq.n	8005e90 <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005e5c:	4eb3      	ldr	r6, [pc, #716]	; (800612c <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 8005e5e:	42b2      	cmp	r2, r6
 8005e60:	d016      	beq.n	8005e90 <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005e62:	4eb3      	ldr	r6, [pc, #716]	; (8006130 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8005e64:	42b2      	cmp	r2, r6
 8005e66:	f040 8126 	bne.w	80060b6 <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e6a:	01ce      	lsls	r6, r1, #7
 8005e6c:	d409      	bmi.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e6e:	4ab1      	ldr	r2, [pc, #708]	; (8006134 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d006      	beq.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005e74:	68ab      	ldr	r3, [r5, #8]
 8005e76:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005e7a:	431f      	orrs	r7, r3
 8005e7c:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8005e80:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e82:	2300      	movs	r3, #0
 8005e84:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005e88:	4620      	mov	r0, r4
 8005e8a:	b002      	add	sp, #8
 8005e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e90:	020a      	lsls	r2, r1, #8
 8005e92:	d4f6      	bmi.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e98:	d1f3      	bne.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
 8005e9a:	4aa2      	ldr	r2, [pc, #648]	; (8006124 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005e9c:	49a6      	ldr	r1, [pc, #664]	; (8006138 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8005e9e:	6893      	ldr	r3, [r2, #8]
 8005ea0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005ea4:	431f      	orrs	r7, r3
 8005ea6:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8005eaa:	6097      	str	r7, [r2, #8]
 8005eac:	680b      	ldr	r3, [r1, #0]
 8005eae:	4aa3      	ldr	r2, [pc, #652]	; (800613c <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	3318      	adds	r3, #24
 8005ec0:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0dc      	beq.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005ece:	9b01      	ldr	r3, [sp, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f9      	bne.n	8005ec8 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8005ed4:	e7d5      	b.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ed6:	689d      	ldr	r5, [r3, #8]
 8005ed8:	f015 0508 	ands.w	r5, r5, #8
 8005edc:	d19c      	bne.n	8005e18 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005ede:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005ee0:	2c00      	cmp	r4, #0
 8005ee2:	f040 809f 	bne.w	8006024 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005ee6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005eea:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005eec:	68dc      	ldr	r4, [r3, #12]
 8005eee:	bf0c      	ite	eq
 8005ef0:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005ef4:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8005ef8:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005efa:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005efc:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8005f00:	2e01      	cmp	r6, #1
 8005f02:	f000 80ff 	beq.w	8006104 <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005f06:	691e      	ldr	r6, [r3, #16]
 8005f08:	f026 0602 	bic.w	r6, r6, #2
 8005f0c:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005f0e:	688e      	ldr	r6, [r1, #8]
 8005f10:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8005f14:	f000 80e2 	beq.w	80060dc <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f18:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8005f1c:	f00e 0e04 	and.w	lr, lr, #4
 8005f20:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8005f24:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005f28:	f85e 700c 	ldr.w	r7, [lr, ip]
 8005f2c:	f04f 0807 	mov.w	r8, #7
 8005f30:	fa08 f802 	lsl.w	r8, r8, r2
 8005f34:	4096      	lsls	r6, r2
 8005f36:	ea27 0208 	bic.w	r2, r7, r8
 8005f3a:	4316      	orrs	r6, r2
 8005f3c:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f46:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005f48:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005f4c:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005f4e:	f1be 0f04 	cmp.w	lr, #4
 8005f52:	f000 80fd 	beq.w	8006150 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f56:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8005f5a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800614c <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8005f5e:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 8005f62:	ea06 0808 	and.w	r8, r6, r8
 8005f66:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005f68:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8005f6c:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 8005f70:	694e      	ldr	r6, [r1, #20]
 8005f72:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005f76:	fa06 f60c 	lsl.w	r6, r6, ip
 8005f7a:	ea47 0708 	orr.w	r7, r7, r8
 8005f7e:	433e      	orrs	r6, r7
 8005f80:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8005f84:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f88:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8005f8c:	698f      	ldr	r7, [r1, #24]
 8005f8e:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8005f92:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8005f96:	433e      	orrs	r6, r7
 8005f98:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005f9c:	690f      	ldr	r7, [r1, #16]
 8005f9e:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 8005fa2:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8005fa6:	f1bc 0f01 	cmp.w	ip, #1
 8005faa:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8005fae:	bf08      	it	eq
 8005fb0:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8005fb4:	4335      	orrs	r5, r6
 8005fb6:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8005fba:	680a      	ldr	r2, [r1, #0]
}
 8005fbc:	e72c      	b.n	8005e18 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8005fbe:	68dc      	ldr	r4, [r3, #12]
 8005fc0:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8005fc4:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005fc8:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8005fcc:	60dc      	str	r4, [r3, #12]
 8005fce:	e71d      	b.n	8005e0c <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005fd0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005fd2:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d06a      	beq.n	80060ae <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005fd8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005fda:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005fde:	0c55      	lsrs	r5, r2, #17
 8005fe0:	4323      	orrs	r3, r4
 8005fe2:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8005fe6:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005fe8:	6803      	ldr	r3, [r0, #0]
 8005fea:	4e55      	ldr	r6, [pc, #340]	; (8006140 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8005fec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005fee:	4034      	ands	r4, r6
 8005ff0:	432c      	orrs	r4, r5
 8005ff2:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005ff4:	6645      	str	r5, [r0, #100]	; 0x64
 8005ff6:	e6f5      	b.n	8005de4 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005ff8:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005ffc:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005ffe:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8006002:	f006 061f 	and.w	r6, r6, #31
 8006006:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8006008:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 800600a:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800600c:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006010:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006012:	2c00      	cmp	r4, #0
 8006014:	f47f aee6 	bne.w	8005de4 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006018:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800601a:	4e49      	ldr	r6, [pc, #292]	; (8006140 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 800601c:	4034      	ands	r4, r6
 800601e:	4325      	orrs	r5, r4
 8006020:	64dd      	str	r5, [r3, #76]	; 0x4c
 8006022:	e6df      	b.n	8005de4 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006024:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006026:	2c00      	cmp	r4, #0
 8006028:	f43f af5d 	beq.w	8005ee6 <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800602c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8006030:	2c01      	cmp	r4, #1
 8006032:	f000 8154 	beq.w	80062de <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006036:	68dc      	ldr	r4, [r3, #12]
 8006038:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800603c:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800603e:	462c      	mov	r4, r5
 8006040:	e75c      	b.n	8005efc <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006042:	f1bc 0f00 	cmp.w	ip, #0
 8006046:	f040 80c7 	bne.w	80061d8 <HAL_ADCEx_InjectedConfigChannel+0x458>
 800604a:	0e92      	lsrs	r2, r2, #26
 800604c:	1c55      	adds	r5, r2, #1
 800604e:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006052:	2f09      	cmp	r7, #9
 8006054:	f240 80f9 	bls.w	800624a <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006058:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800605c:	06ae      	lsls	r6, r5, #26
 800605e:	3a1e      	subs	r2, #30
 8006060:	2501      	movs	r5, #1
 8006062:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8006066:	fa05 f707 	lsl.w	r7, r5, r7
 800606a:	0512      	lsls	r2, r2, #20
 800606c:	433e      	orrs	r6, r7
 800606e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006072:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006074:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8006078:	f00c 0c04 	and.w	ip, ip, #4
 800607c:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8006080:	688e      	ldr	r6, [r1, #8]
 8006082:	f85c 5007 	ldr.w	r5, [ip, r7]
 8006086:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800608a:	f04f 0e07 	mov.w	lr, #7
 800608e:	fa0e fe02 	lsl.w	lr, lr, r2
 8006092:	ea25 050e 	bic.w	r5, r5, lr
 8006096:	fa06 f202 	lsl.w	r2, r6, r2
 800609a:	432a      	orrs	r2, r5
 800609c:	f84c 2007 	str.w	r2, [ip, r7]
 80060a0:	680a      	ldr	r2, [r1, #0]
}
 80060a2:	e6d1      	b.n	8005e48 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 80060a4:	2402      	movs	r4, #2
}
 80060a6:	4620      	mov	r0, r4
 80060a8:	b002      	add	sp, #8
 80060aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80060ae:	0c55      	lsrs	r5, r2, #17
 80060b0:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 80060b4:	e798      	b.n	8005fe8 <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80060b6:	4e23      	ldr	r6, [pc, #140]	; (8006144 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 80060b8:	42b2      	cmp	r2, r6
 80060ba:	f47f aee2 	bne.w	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060be:	0249      	lsls	r1, r1, #9
 80060c0:	f53f aedf 	bmi.w	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 80060c4:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	f43f aedb 	beq.w	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80060cc:	68ab      	ldr	r3, [r5, #8]
 80060ce:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80060d2:	431f      	orrs	r7, r3
 80060d4:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 80060d8:	60af      	str	r7, [r5, #8]
}
 80060da:	e6d2      	b.n	8005e82 <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80060dc:	0dd7      	lsrs	r7, r2, #23
 80060de:	f007 0704 	and.w	r7, r7, #4
 80060e2:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80060e6:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 80060ea:	f04f 0c07 	mov.w	ip, #7
 80060ee:	59ba      	ldr	r2, [r7, r6]
 80060f0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80060f4:	ea22 020c 	bic.w	r2, r2, ip
 80060f8:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006100:	615a      	str	r2, [r3, #20]
}
 8006102:	e721      	b.n	8005f48 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 8006104:	691f      	ldr	r7, [r3, #16]
 8006106:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8006108:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 800610c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 800610e:	433e      	orrs	r6, r7
 8006110:	ea46 060c 	orr.w	r6, r6, ip
 8006114:	f046 0602 	orr.w	r6, r6, #2
 8006118:	611e      	str	r6, [r3, #16]
 800611a:	e6f8      	b.n	8005f0e <HAL_ADCEx_InjectedConfigChannel+0x18e>
 800611c:	0007ffff 	.word	0x0007ffff
 8006120:	80080000 	.word	0x80080000
 8006124:	50000300 	.word	0x50000300
 8006128:	c3210000 	.word	0xc3210000
 800612c:	90c00010 	.word	0x90c00010
 8006130:	c7520000 	.word	0xc7520000
 8006134:	50000100 	.word	0x50000100
 8006138:	20000dd0 	.word	0x20000dd0
 800613c:	053e2d63 	.word	0x053e2d63
 8006140:	04104000 	.word	0x04104000
 8006144:	cb840000 	.word	0xcb840000
 8006148:	407f0000 	.word	0x407f0000
 800614c:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006150:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006152:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006154:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006156:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800615a:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800615e:	2e00      	cmp	r6, #0
 8006160:	d07d      	beq.n	800625e <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006162:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8006166:	b126      	cbz	r6, 8006172 <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 8006168:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800616c:	42b5      	cmp	r5, r6
 800616e:	f000 80bb 	beq.w	80062e8 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8006172:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8006174:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006176:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800617a:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800617e:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006182:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8006186:	b126      	cbz	r6, 8006192 <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 8006188:	fab6 f686 	clz	r6, r6
 800618c:	42b7      	cmp	r7, r6
 800618e:	f000 80c0 	beq.w	8006312 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006192:	68ae      	ldr	r6, [r5, #8]
 8006194:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006196:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800619a:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80061a2:	b126      	cbz	r6, 80061ae <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 80061a4:	fab6 f686 	clz	r6, r6
 80061a8:	42b7      	cmp	r7, r6
 80061aa:	f000 80c7 	beq.w	800633c <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061ae:	68ee      	ldr	r6, [r5, #12]
 80061b0:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061b2:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061b4:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80061bc:	2e00      	cmp	r6, #0
 80061be:	f43f ae2b 	beq.w	8005e18 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 80061c2:	fab6 f686 	clz	r6, r6
 80061c6:	42be      	cmp	r6, r7
 80061c8:	f47f ae26 	bne.w	8005e18 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 80061cc:	682a      	ldr	r2, [r5, #0]
 80061ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061d2:	602a      	str	r2, [r5, #0]
 80061d4:	680a      	ldr	r2, [r1, #0]
}
 80061d6:	e61f      	b.n	8005e18 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d8:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80061dc:	2d00      	cmp	r5, #0
 80061de:	d05a      	beq.n	8006296 <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 80061e0:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80061e4:	3501      	adds	r5, #1
 80061e6:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061ea:	2d09      	cmp	r5, #9
 80061ec:	d953      	bls.n	8006296 <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	f000 80c2 	beq.w	800637c <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 80061f8:	fab6 f686 	clz	r6, r6
 80061fc:	3601      	adds	r6, #1
 80061fe:	06b6      	lsls	r6, r6, #26
 8006200:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006204:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8006208:	2d00      	cmp	r5, #0
 800620a:	f000 80b5 	beq.w	8006378 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 800620e:	fab5 f585 	clz	r5, r5
 8006212:	3501      	adds	r5, #1
 8006214:	f005 051f 	and.w	r5, r5, #31
 8006218:	2701      	movs	r7, #1
 800621a:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800621e:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006220:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8006224:	2a00      	cmp	r2, #0
 8006226:	f000 80a5 	beq.w	8006374 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 800622a:	fab2 f582 	clz	r5, r2
 800622e:	3501      	adds	r5, #1
 8006230:	f005 051f 	and.w	r5, r5, #31
 8006234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006238:	f1a5 021e 	sub.w	r2, r5, #30
 800623c:	0512      	lsls	r2, r2, #20
 800623e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006242:	e716      	b.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8006244:	3b01      	subs	r3, #1
 8006246:	461c      	mov	r4, r3
 8006248:	e5ba      	b.n	8005dc0 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800624a:	06ae      	lsls	r6, r5, #26
 800624c:	2501      	movs	r5, #1
 800624e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8006252:	40bd      	lsls	r5, r7
 8006254:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8006258:	432e      	orrs	r6, r5
 800625a:	0512      	lsls	r2, r2, #20
 800625c:	e709      	b.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800625e:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006262:	42b5      	cmp	r5, r6
 8006264:	d040      	beq.n	80062e8 <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006266:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8006268:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800626a:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800626e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006272:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8006276:	42b7      	cmp	r7, r6
 8006278:	d04b      	beq.n	8006312 <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800627a:	68af      	ldr	r7, [r5, #8]
 800627c:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800627e:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006282:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006286:	42b7      	cmp	r7, r6
 8006288:	d058      	beq.n	800633c <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800628a:	68ef      	ldr	r7, [r5, #12]
 800628c:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800628e:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006290:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8006294:	e797      	b.n	80061c6 <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006296:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800629a:	2e00      	cmp	r6, #0
 800629c:	d064      	beq.n	8006368 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 800629e:	fab6 f686 	clz	r6, r6
 80062a2:	3601      	adds	r6, #1
 80062a4:	06b6      	lsls	r6, r6, #26
 80062a6:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062aa:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	d058      	beq.n	8006364 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 80062b2:	fab5 f585 	clz	r5, r5
 80062b6:	3501      	adds	r5, #1
 80062b8:	f005 051f 	and.w	r5, r5, #31
 80062bc:	2701      	movs	r7, #1
 80062be:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80062c2:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	d050      	beq.n	800636e <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 80062cc:	fab2 f582 	clz	r5, r2
 80062d0:	3501      	adds	r5, #1
 80062d2:	f005 051f 	and.w	r5, r5, #31
 80062d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062da:	052a      	lsls	r2, r5, #20
 80062dc:	e6c9      	b.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062de:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80062e0:	f046 0620 	orr.w	r6, r6, #32
 80062e4:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80062e6:	e609      	b.n	8005efc <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 80062e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062ea:	461d      	mov	r5, r3
 80062ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062f0:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80062f4:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80062f6:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80062f8:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80062fa:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062fe:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006302:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006306:	2e00      	cmp	r6, #0
 8006308:	f47f af3b 	bne.w	8006182 <HAL_ADCEx_InjectedConfigChannel+0x402>
 800630c:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8006310:	e7b1      	b.n	8006276 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 8006312:	f8dc 2000 	ldr.w	r2, [ip]
 8006316:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800631a:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800631e:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006320:	68ae      	ldr	r6, [r5, #8]
 8006322:	68af      	ldr	r7, [r5, #8]
 8006324:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006328:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800632c:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006330:	2e00      	cmp	r6, #0
 8006332:	f47f af34 	bne.w	800619e <HAL_ADCEx_InjectedConfigChannel+0x41e>
 8006336:	f3c2 6684 	ubfx	r6, r2, #26, #5
 800633a:	e7a4      	b.n	8006286 <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 800633c:	f8dc 2000 	ldr.w	r2, [ip]
 8006340:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006344:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006348:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800634a:	68ee      	ldr	r6, [r5, #12]
 800634c:	68ef      	ldr	r7, [r5, #12]
 800634e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006352:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006356:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006358:	2e00      	cmp	r6, #0
 800635a:	f47f af2d 	bne.w	80061b8 <HAL_ADCEx_InjectedConfigChannel+0x438>
 800635e:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8006362:	e730      	b.n	80061c6 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8006364:	2502      	movs	r5, #2
 8006366:	e7ac      	b.n	80062c2 <HAL_ADCEx_InjectedConfigChannel+0x542>
 8006368:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 800636c:	e79d      	b.n	80062aa <HAL_ADCEx_InjectedConfigChannel+0x52a>
 800636e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8006372:	e67e      	b.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8006374:	4a03      	ldr	r2, [pc, #12]	; (8006384 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 8006376:	e67c      	b.n	8006072 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8006378:	2502      	movs	r5, #2
 800637a:	e750      	b.n	800621e <HAL_ADCEx_InjectedConfigChannel+0x49e>
 800637c:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8006380:	e740      	b.n	8006204 <HAL_ADCEx_InjectedConfigChannel+0x484>
 8006382:	bf00      	nop
 8006384:	fe500000 	.word	0xfe500000

08006388 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006388:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800638a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800638e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8006390:	2a01      	cmp	r2, #1
{
 8006392:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8006394:	d04f      	beq.n	8006436 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006396:	6804      	ldr	r4, [r0, #0]
 8006398:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800639a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800639c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800639e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80063a2:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80063a4:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80063a8:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063aa:	d008      	beq.n	80063be <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063ac:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063b2:	f041 0120 	orr.w	r1, r1, #32
 80063b6:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80063b8:	b01c      	add	sp, #112	; 0x70
 80063ba:	bcf0      	pop	{r4, r5, r6, r7}
 80063bc:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063be:	4a23      	ldr	r2, [pc, #140]	; (800644c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80063c0:	6890      	ldr	r0, [r2, #8]
 80063c2:	0740      	lsls	r0, r0, #29
 80063c4:	d50b      	bpl.n	80063de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80063c6:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063ca:	f042 0220 	orr.w	r2, r2, #32
 80063ce:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80063d0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80063d8:	b01c      	add	sp, #112	; 0x70
 80063da:	bcf0      	pop	{r4, r5, r6, r7}
 80063dc:	4770      	bx	lr
 80063de:	68a0      	ldr	r0, [r4, #8]
 80063e0:	0746      	lsls	r6, r0, #29
 80063e2:	d4f1      	bmi.n	80063c8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80063e4:	b1d5      	cbz	r5, 800641c <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80063e6:	4e1a      	ldr	r6, [pc, #104]	; (8006450 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80063e8:	684f      	ldr	r7, [r1, #4]
 80063ea:	68b0      	ldr	r0, [r6, #8]
 80063ec:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80063f0:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80063f4:	4338      	orrs	r0, r7
 80063f6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80063fa:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063fc:	68a4      	ldr	r4, [r4, #8]
 80063fe:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006400:	4320      	orrs	r0, r4
 8006402:	f010 0001 	ands.w	r0, r0, #1
 8006406:	d114      	bne.n	8006432 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8006408:	68b4      	ldr	r4, [r6, #8]
 800640a:	688a      	ldr	r2, [r1, #8]
 800640c:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8006410:	4315      	orrs	r5, r2
 8006412:	f021 010f 	bic.w	r1, r1, #15
 8006416:	430d      	orrs	r5, r1
 8006418:	60b5      	str	r5, [r6, #8]
 800641a:	e7da      	b.n	80063d2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800641c:	4d0c      	ldr	r5, [pc, #48]	; (8006450 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800641e:	68a9      	ldr	r1, [r5, #8]
 8006420:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8006424:	60a9      	str	r1, [r5, #8]
 8006426:	68a1      	ldr	r1, [r4, #8]
 8006428:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800642a:	4308      	orrs	r0, r1
 800642c:	f010 0001 	ands.w	r0, r0, #1
 8006430:	d005      	beq.n	800643e <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006432:	2000      	movs	r0, #0
 8006434:	e7cd      	b.n	80063d2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006436:	2002      	movs	r0, #2
}
 8006438:	b01c      	add	sp, #112	; 0x70
 800643a:	bcf0      	pop	{r4, r5, r6, r7}
 800643c:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800643e:	68aa      	ldr	r2, [r5, #8]
 8006440:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8006444:	f022 020f 	bic.w	r2, r2, #15
 8006448:	60aa      	str	r2, [r5, #8]
 800644a:	e7c2      	b.n	80063d2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800644c:	50000100 	.word	0x50000100
 8006450:	50000300 	.word	0x50000300

08006454 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006454:	b1b0      	cbz	r0, 8006484 <HAL_CORDIC_Init+0x30>
{
 8006456:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006458:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800645c:	4604      	mov	r4, r0
 800645e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006462:	b153      	cbz	r3, 800647a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006464:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006466:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006468:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800646a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800646e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8006472:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006476:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8006478:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800647a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800647e:	f7fa fe4f 	bl	8001120 <HAL_CORDIC_MspInit>
 8006482:	e7ef      	b.n	8006464 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006484:	2001      	movs	r0, #1
}
 8006486:	4770      	bx	lr

08006488 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006488:	4908      	ldr	r1, [pc, #32]	; (80064ac <HAL_NVIC_SetPriorityGrouping+0x24>)
 800648a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800648c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800648e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006490:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006494:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006496:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800649a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800649c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80064a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80064a8:	60cb      	str	r3, [r1, #12]
 80064aa:	4770      	bx	lr
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064b0:	4b19      	ldr	r3, [pc, #100]	; (8006518 <HAL_NVIC_SetPriority+0x68>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064b8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064ba:	f1c3 0507 	rsb	r5, r3, #7
 80064be:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064c0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064c4:	bf28      	it	cs
 80064c6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064c8:	2c06      	cmp	r4, #6
 80064ca:	d919      	bls.n	8006500 <HAL_NVIC_SetPriority+0x50>
 80064cc:	3b03      	subs	r3, #3
 80064ce:	f04f 34ff 	mov.w	r4, #4294967295
 80064d2:	409c      	lsls	r4, r3
 80064d4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d8:	f04f 34ff 	mov.w	r4, #4294967295
 80064dc:	40ac      	lsls	r4, r5
 80064de:	ea21 0104 	bic.w	r1, r1, r4
 80064e2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80064e4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80064ea:	db0c      	blt.n	8006506 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80064f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80064f4:	0109      	lsls	r1, r1, #4
 80064f6:	b2c9      	uxtb	r1, r1
 80064f8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80064fc:	bc30      	pop	{r4, r5}
 80064fe:	4770      	bx	lr
 8006500:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006502:	4613      	mov	r3, r2
 8006504:	e7e8      	b.n	80064d8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <HAL_NVIC_SetPriority+0x6c>)
 8006508:	f000 000f 	and.w	r0, r0, #15
 800650c:	0109      	lsls	r1, r1, #4
 800650e:	4403      	add	r3, r0
 8006510:	b2c9      	uxtb	r1, r1
 8006512:	7619      	strb	r1, [r3, #24]
 8006514:	bc30      	pop	{r4, r5}
 8006516:	4770      	bx	lr
 8006518:	e000ed00 	.word	0xe000ed00
 800651c:	e000ecfc 	.word	0xe000ecfc

08006520 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006520:	2800      	cmp	r0, #0
 8006522:	db07      	blt.n	8006534 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006524:	4a04      	ldr	r2, [pc, #16]	; (8006538 <HAL_NVIC_EnableIRQ+0x18>)
 8006526:	f000 011f 	and.w	r1, r0, #31
 800652a:	2301      	movs	r3, #1
 800652c:	0940      	lsrs	r0, r0, #5
 800652e:	408b      	lsls	r3, r1
 8006530:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	e000e100 	.word	0xe000e100

0800653c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800653c:	3801      	subs	r0, #1
 800653e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006542:	d20e      	bcs.n	8006562 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006544:	4b08      	ldr	r3, [pc, #32]	; (8006568 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006546:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006548:	4c08      	ldr	r4, [pc, #32]	; (800656c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800654a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800654c:	20f0      	movs	r0, #240	; 0xf0
 800654e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006552:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006554:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006556:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006558:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800655a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800655e:	6019      	str	r1, [r3, #0]
 8006560:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006562:	2001      	movs	r0, #1
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	e000e010 	.word	0xe000e010
 800656c:	e000ed00 	.word	0xe000ed00

08006570 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop

08006574 <HAL_SYSTICK_IRQHandler>:
{
 8006574:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8006576:	f7ff fffb 	bl	8006570 <HAL_SYSTICK_Callback>
}
 800657a:	bd08      	pop	{r3, pc}

0800657c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800657c:	2800      	cmp	r0, #0
 800657e:	d07d      	beq.n	800667c <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006580:	4a3f      	ldr	r2, [pc, #252]	; (8006680 <HAL_DMA_Init+0x104>)
 8006582:	4603      	mov	r3, r0
 8006584:	6800      	ldr	r0, [r0, #0]
 8006586:	4290      	cmp	r0, r2
{
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800658c:	d962      	bls.n	8006654 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800658e:	493d      	ldr	r1, [pc, #244]	; (8006684 <HAL_DMA_Init+0x108>)
 8006590:	4a3d      	ldr	r2, [pc, #244]	; (8006688 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8006592:	4c3e      	ldr	r4, [pc, #248]	; (800668c <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006594:	4401      	add	r1, r0
 8006596:	fba2 2101 	umull	r2, r1, r2, r1
 800659a:	0909      	lsrs	r1, r1, #4
 800659c:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800659e:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065a2:	691e      	ldr	r6, [r3, #16]
 80065a4:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 80065a6:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065a8:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065aa:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065ac:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80066a4 <HAL_DMA_Init+0x128>
 80065b0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006680 <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065b4:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 80065b6:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ba:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 80065bc:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80065c0:	4c31      	ldr	r4, [pc, #196]	; (8006688 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 80065c2:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065c6:	69de      	ldr	r6, [r3, #28]
 80065c8:	6459      	str	r1, [r3, #68]	; 0x44
 80065ca:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80065cc:	b2c5      	uxtb	r5, r0
 80065ce:	3d08      	subs	r5, #8
 80065d0:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80065d4:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065d6:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065d8:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065dc:	4e2c      	ldr	r6, [pc, #176]	; (8006690 <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80065de:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065e0:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065e4:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065e8:	4540      	cmp	r0, r8
 80065ea:	bf88      	it	hi
 80065ec:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 80065ee:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065f2:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065f4:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80066a8 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 80065f8:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80065fa:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065fe:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006602:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006606:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800660a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800660e:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006610:	d029      	beq.n	8006666 <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006612:	6858      	ldr	r0, [r3, #4]
 8006614:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006616:	3801      	subs	r0, #1
 8006618:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800661a:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800661e:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006622:	d826      	bhi.n	8006672 <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006624:	491b      	ldr	r1, [pc, #108]	; (8006694 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006626:	481c      	ldr	r0, [pc, #112]	; (8006698 <HAL_DMA_Init+0x11c>)
 8006628:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800662a:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800662c:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800662e:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006630:	f002 021f 	and.w	r2, r2, #31
 8006634:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006638:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800663a:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800663e:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006640:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006642:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006644:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006646:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006648:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800664c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006654:	4911      	ldr	r1, [pc, #68]	; (800669c <HAL_DMA_Init+0x120>)
 8006656:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8006658:	4c11      	ldr	r4, [pc, #68]	; (80066a0 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800665a:	4401      	add	r1, r0
 800665c:	fba2 2101 	umull	r2, r1, r2, r1
 8006660:	0909      	lsrs	r1, r1, #4
 8006662:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8006664:	e79b      	b.n	800659e <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006666:	2200      	movs	r2, #0
 8006668:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800666a:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800666e:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 8006672:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8006674:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006678:	65da      	str	r2, [r3, #92]	; 0x5c
 800667a:	e7e2      	b.n	8006642 <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 800667c:	2001      	movs	r0, #1
}
 800667e:	4770      	bx	lr
 8006680:	40020407 	.word	0x40020407
 8006684:	bffdfbf8 	.word	0xbffdfbf8
 8006688:	cccccccd 	.word	0xcccccccd
 800668c:	40020400 	.word	0x40020400
 8006690:	40020800 	.word	0x40020800
 8006694:	1000823f 	.word	0x1000823f
 8006698:	40020940 	.word	0x40020940
 800669c:	bffdfff8 	.word	0xbffdfff8
 80066a0:	40020000 	.word	0x40020000
 80066a4:	40020820 	.word	0x40020820
 80066a8:	40020880 	.word	0x40020880

080066ac <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80066ac:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80066b0:	2a02      	cmp	r2, #2
{
 80066b2:	4603      	mov	r3, r0
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80066b4:	d009      	beq.n	80066ca <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 80066b6:	2201      	movs	r2, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066b8:	2004      	movs	r0, #4
    __HAL_UNLOCK(hdma);
 80066ba:	2100      	movs	r1, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066bc:	63d8      	str	r0, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80066be:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    status = HAL_ERROR;
 80066c2:	4610      	mov	r0, r2
    hdma->State = HAL_DMA_STATE_READY;
 80066c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80066c8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ca:	6802      	ldr	r2, [r0, #0]
{
 80066cc:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ce:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d0:	6810      	ldr	r0, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066d2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d4:	f020 000e 	bic.w	r0, r0, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066d8:	e9d3 4110 	ldrd	r4, r1, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066dc:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80066de:	6810      	ldr	r0, [r2, #0]
 80066e0:	f020 0001 	bic.w	r0, r0, #1
 80066e4:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066e6:	682a      	ldr	r2, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80066e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066ee:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066f0:	f001 011f 	and.w	r1, r1, #31
 80066f4:	2201      	movs	r2, #1
 80066f6:	408a      	lsls	r2, r1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066fa:	6062      	str	r2, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066fc:	6071      	str	r1, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80066fe:	b130      	cbz	r0, 800670e <HAL_DMA_Abort_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006700:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006702:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800670a:	6002      	str	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800670c:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 800670e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006710:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8006712:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006714:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006718:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800671c:	b11a      	cbz	r2, 8006726 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 800671e:	4618      	mov	r0, r3
 8006720:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	4620      	mov	r0, r4
}
 8006724:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006726:	4610      	mov	r0, r2
}
 8006728:	bd70      	pop	{r4, r5, r6, pc}
 800672a:	bf00      	nop

0800672c <HAL_DMA_IRQHandler>:
{
 800672c:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800672e:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 8006732:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006734:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006736:	6805      	ldr	r5, [r0, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	409a      	lsls	r2, r3
 800673e:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8006740:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006742:	d00e      	beq.n	8006762 <HAL_DMA_IRQHandler+0x36>
 8006744:	f014 0f04 	tst.w	r4, #4
 8006748:	d00b      	beq.n	8006762 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	069b      	lsls	r3, r3, #26
 800674e:	d403      	bmi.n	8006758 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	f023 0304 	bic.w	r3, r3, #4
 8006756:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006758:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800675a:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800675c:	b1cb      	cbz	r3, 8006792 <HAL_DMA_IRQHandler+0x66>
}
 800675e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006760:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006762:	2202      	movs	r2, #2
 8006764:	409a      	lsls	r2, r3
 8006766:	420a      	tst	r2, r1
 8006768:	d015      	beq.n	8006796 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 800676a:	f014 0f02 	tst.w	r4, #2
 800676e:	d012      	beq.n	8006796 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	0699      	lsls	r1, r3, #26
 8006774:	d406      	bmi.n	8006784 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006776:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006778:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800677a:	f023 030a 	bic.w	r3, r3, #10
 800677e:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006780:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8006784:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006786:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006788:	2200      	movs	r2, #0
 800678a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e5      	bne.n	800675e <HAL_DMA_IRQHandler+0x32>
}
 8006792:	bc70      	pop	{r4, r5, r6}
 8006794:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006796:	2208      	movs	r2, #8
 8006798:	409a      	lsls	r2, r3
 800679a:	420a      	tst	r2, r1
 800679c:	d0f9      	beq.n	8006792 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 800679e:	0722      	lsls	r2, r4, #28
 80067a0:	d5f7      	bpl.n	8006792 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067a2:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80067a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067a6:	f022 020e 	bic.w	r2, r2, #14
 80067aa:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067ac:	2201      	movs	r2, #1
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80067b2:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067b4:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067b6:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80067b8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80067bc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 80067c0:	2900      	cmp	r1, #0
 80067c2:	d0e6      	beq.n	8006792 <HAL_DMA_IRQHandler+0x66>
}
 80067c4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80067c6:	4708      	bx	r1

080067c8 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f000 80d8 	beq.w	800697e <HAL_FDCAN_Init+0x1b6>
{
 80067ce:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80067d0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80067d4:	4604      	mov	r4, r0
 80067d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d071      	beq.n	80068c2 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80067de:	6822      	ldr	r2, [r4, #0]
 80067e0:	6993      	ldr	r3, [r2, #24]
 80067e2:	f023 0310 	bic.w	r3, r3, #16
 80067e6:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067e8:	f7fe ff54 	bl	8005694 <HAL_GetTick>
 80067ec:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80067ee:	e004      	b.n	80067fa <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80067f0:	f7fe ff50 	bl	8005694 <HAL_GetTick>
 80067f4:	1b43      	subs	r3, r0, r5
 80067f6:	2b0a      	cmp	r3, #10
 80067f8:	d85a      	bhi.n	80068b0 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	0711      	lsls	r1, r2, #28
 8006800:	d4f6      	bmi.n	80067f0 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	f042 0201 	orr.w	r2, r2, #1
 8006808:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800680a:	f7fe ff43 	bl	8005694 <HAL_GetTick>
 800680e:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006810:	e004      	b.n	800681c <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006812:	f7fe ff3f 	bl	8005694 <HAL_GetTick>
 8006816:	1b40      	subs	r0, r0, r5
 8006818:	280a      	cmp	r0, #10
 800681a:	d849      	bhi.n	80068b0 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	699a      	ldr	r2, [r3, #24]
 8006820:	07d2      	lsls	r2, r2, #31
 8006822:	d5f6      	bpl.n	8006812 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006824:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006826:	4959      	ldr	r1, [pc, #356]	; (800698c <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006828:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 800682c:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800682e:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006830:	f000 80a1 	beq.w	8006976 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006834:	7c22      	ldrb	r2, [r4, #16]
 8006836:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	bf0c      	ite	eq
 800683c:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006840:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8006844:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006846:	7c62      	ldrb	r2, [r4, #17]
 8006848:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800684a:	699a      	ldr	r2, [r3, #24]
 800684c:	bf0c      	ite	eq
 800684e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006852:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8006856:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006858:	7ca2      	ldrb	r2, [r4, #18]
 800685a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	bf0c      	ite	eq
 8006860:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006864:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006868:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800686a:	699a      	ldr	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800686c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006870:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006874:	432a      	orrs	r2, r5
 8006876:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800687e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006880:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006882:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006884:	f022 0210 	bic.w	r2, r2, #16
 8006888:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800688a:	d01f      	beq.n	80068cc <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800688c:	b311      	cbz	r1, 80068d4 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800688e:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006890:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006892:	d076      	beq.n	8006982 <HAL_FDCAN_Init+0x1ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006898:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800689a:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800689c:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800689e:	f042 0210 	orr.w	r2, r2, #16
 80068a2:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80068a4:	d116      	bne.n	80068d4 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	f042 0220 	orr.w	r2, r2, #32
 80068ac:	619a      	str	r2, [r3, #24]
 80068ae:	e011      	b.n	80068d4 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068b2:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068ba:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80068be:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80068c2:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80068c6:	f7fa fc97 	bl	80011f8 <HAL_FDCAN_MspInit>
 80068ca:	e788      	b.n	80067de <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	f042 0204 	orr.w	r2, r2, #4
 80068d2:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068d8:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068da:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068dc:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068de:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068e0:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80068e4:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068e6:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068e8:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80068ea:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80068f0:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068f4:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80068f6:	d10e      	bne.n	8006916 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068f8:	e9d4 520b 	ldrd	r5, r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80068fc:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006900:	3a01      	subs	r2, #1
 8006902:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006904:	3d01      	subs	r5, #1
 8006906:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800690a:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800690c:	4302      	orrs	r2, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800690e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006910:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006914:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006916:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800691a:	6be2      	ldr	r2, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800691c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800691e:	481c      	ldr	r0, [pc, #112]	; (8006990 <HAL_FDCAN_Init+0x1c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006920:	4311      	orrs	r1, r2
 8006922:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006926:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800692a:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800692c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006930:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006938:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800693c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800693e:	4d15      	ldr	r5, [pc, #84]	; (8006994 <HAL_FDCAN_Init+0x1cc>)
 8006940:	6465      	str	r5, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006946:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800694a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800694e:	4912      	ldr	r1, [pc, #72]	; (8006998 <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006950:	4b12      	ldr	r3, [pc, #72]	; (800699c <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006952:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <HAL_FDCAN_Init+0x1d8>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006954:	3540      	adds	r5, #64	; 0x40
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006956:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800695a:	e9c4 5112 	strd	r5, r1, [r4, #72]	; 0x48

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800695e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006962:	2100      	movs	r1, #0
 8006964:	f004 ff4c 	bl	800b800 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006968:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800696a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800696c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800696e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8006972:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8006974:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006976:	4a0b      	ldr	r2, [pc, #44]	; (80069a4 <HAL_FDCAN_Init+0x1dc>)
 8006978:	6861      	ldr	r1, [r4, #4]
 800697a:	6011      	str	r1, [r2, #0]
 800697c:	e75a      	b.n	8006834 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 800697e:	2001      	movs	r0, #1
}
 8006980:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006982:	f042 0220 	orr.w	r2, r2, #32
 8006986:	619a      	str	r2, [r3, #24]
 8006988:	e7a4      	b.n	80068d4 <HAL_FDCAN_Init+0x10c>
 800698a:	bf00      	nop
 800698c:	40006400 	.word	0x40006400
 8006990:	4000a400 	.word	0x4000a400
 8006994:	4000a470 	.word	0x4000a470
 8006998:	4000a588 	.word	0x4000a588
 800699c:	4000a678 	.word	0x4000a678
 80069a0:	4000a660 	.word	0x4000a660
 80069a4:	40006500 	.word	0x40006500

080069a8 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80069a8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069ac:	3b01      	subs	r3, #1
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d905      	bls.n	80069be <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80069b2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80069b4:	f043 0302 	orr.w	r3, r3, #2
 80069b8:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 80069ba:	2001      	movs	r0, #1
}
 80069bc:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80069be:	680b      	ldr	r3, [r1, #0]
{
 80069c0:	b470      	push	{r4, r5, r6}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80069c2:	b983      	cbnz	r3, 80069e6 <HAL_FDCAN_ConfigFilter+0x3e>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069c4:	e9d1 6202 	ldrd	r6, r2, [r1, #8]
 80069c8:	694d      	ldr	r5, [r1, #20]
      *FilterAddress = FilterElementW1;
 80069ca:	6c04      	ldr	r4, [r0, #64]	; 0x40
                         (sFilterConfig->FilterID1 << 16U)    |
 80069cc:	6908      	ldr	r0, [r1, #16]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80069ce:	6849      	ldr	r1, [r1, #4]
                         (sFilterConfig->FilterConfig << 27U) |
 80069d0:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069d2:	ea42 7286 	orr.w	r2, r2, r6, lsl #30
 80069d6:	432a      	orrs	r2, r5
 80069d8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      *FilterAddress = FilterElementW1;
 80069dc:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    return HAL_OK;
 80069e0:	4618      	mov	r0, r3
}
 80069e2:	bc70      	pop	{r4, r5, r6}
 80069e4:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80069e6:	e9d1 6203 	ldrd	r6, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069ea:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80069ec:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80069ee:	688d      	ldr	r5, [r1, #8]
 80069f0:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069f2:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80069f6:	ea42 7246 	orr.w	r2, r2, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80069fa:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
      *FilterAddress = FilterElementW1;
 80069fe:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8006a02:	2000      	movs	r0, #0
}
 8006a04:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 8006a06:	604b      	str	r3, [r1, #4]
}
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop

08006a0c <HAL_FDCAN_ConfigGlobalFilter>:
{
 8006a0c:	b470      	push	{r4, r5, r6}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a0e:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
 8006a12:	2e01      	cmp	r6, #1
 8006a14:	d006      	beq.n	8006a24 <HAL_FDCAN_ConfigGlobalFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a16:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a18:	f043 0304 	orr.w	r3, r3, #4
 8006a1c:	6603      	str	r3, [r0, #96]	; 0x60
}
 8006a1e:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 8006a20:	2001      	movs	r0, #1
}
 8006a22:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8006a24:	6806      	ldr	r6, [r0, #0]
 8006a26:	4615      	mov	r5, r2
 8006a28:	9a03      	ldr	r2, [sp, #12]
 8006a2a:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 8006a2e:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8006a32:	ea43 0285 	orr.w	r2, r3, r5, lsl #2
 8006a36:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8006a3a:	f020 033f 	bic.w	r3, r0, #63	; 0x3f
 8006a3e:	4319      	orrs	r1, r3
 8006a40:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
    return HAL_OK;
 8006a44:	2000      	movs	r0, #0
}
 8006a46:	bc70      	pop	{r4, r5, r6}
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop

08006a4c <HAL_FDCAN_ConfigTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a4c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d005      	beq.n	8006a60 <HAL_FDCAN_ConfigTxDelayCompensation+0x14>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a54:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a56:	f043 0304 	orr.w	r3, r3, #4
 8006a5a:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006a5c:	2001      	movs	r0, #1
}
 8006a5e:	4770      	bx	lr
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8006a60:	6803      	ldr	r3, [r0, #0]
 8006a62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006a66:	649a      	str	r2, [r3, #72]	; 0x48
    return HAL_OK;
 8006a68:	2000      	movs	r0, #0
 8006a6a:	4770      	bx	lr

08006a6c <HAL_FDCAN_EnableTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a6c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d005      	beq.n	8006a80 <HAL_FDCAN_EnableTxDelayCompensation+0x14>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a74:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a76:	f043 0304 	orr.w	r3, r3, #4
 8006a7a:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006a7c:	2001      	movs	r0, #1
}
 8006a7e:	4770      	bx	lr
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006a80:	6802      	ldr	r2, [r0, #0]
 8006a82:	68d3      	ldr	r3, [r2, #12]
 8006a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a88:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop

08006a90 <HAL_FDCAN_EnableISOMode>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a90:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d005      	beq.n	8006aa4 <HAL_FDCAN_EnableISOMode+0x14>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a98:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a9a:	f043 0304 	orr.w	r3, r3, #4
 8006a9e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006aa0:	2001      	movs	r0, #1
}
 8006aa2:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_NISO);
 8006aa4:	6802      	ldr	r2, [r0, #0]
 8006aa6:	6993      	ldr	r3, [r2, #24]
 8006aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aac:	6193      	str	r3, [r2, #24]
    return HAL_OK;
 8006aae:	2000      	movs	r0, #0
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop

08006ab4 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ab4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8006ab8:	2a01      	cmp	r2, #1
{
 8006aba:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006abc:	d005      	beq.n	8006aca <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006abe:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006ac0:	f042 0204 	orr.w	r2, r2, #4
 8006ac4:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006ac6:	2001      	movs	r0, #1
}
 8006ac8:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006aca:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ad2:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ad4:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006adc:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ade:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop

08006ae4 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006ae4:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006ae6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8006aea:	2802      	cmp	r0, #2
 8006aec:	d10e      	bne.n	8006b0c <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
{
 8006aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006af2:	681d      	ldr	r5, [r3, #0]
 8006af4:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8006af8:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 8006afc:	d00c      	beq.n	8006b18 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006afe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8006b06:	2001      	movs	r0, #1
}
 8006b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b0e:	f042 0208 	orr.w	r2, r2, #8
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 8006b14:	2001      	movs	r0, #1
}
 8006b16:	4770      	bx	lr
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006b18:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006b1c:	684c      	ldr	r4, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006b1e:	f3c6 4c01 	ubfx	ip, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006b22:	2c00      	cmp	r4, #0
 8006b24:	d13c      	bne.n	8006ba0 <HAL_FDCAN_AddMessageToTxFifoQ+0xbc>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006b26:	690c      	ldr	r4, [r1, #16]
 8006b28:	688f      	ldr	r7, [r1, #8]
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006b2a:	680e      	ldr	r6, [r1, #0]
                   FDCAN_STANDARD_ID |
 8006b2c:	433c      	orrs	r4, r7
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b2e:	ea44 4886 	orr.w	r8, r4, r6, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b32:	e9d1 7406 	ldrd	r7, r4, [r1, #24]
 8006b36:	694e      	ldr	r6, [r1, #20]
 8006b38:	433c      	orrs	r4, r7
 8006b3a:	4334      	orrs	r4, r6
 8006b3c:	68ce      	ldr	r6, [r1, #12]
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b3e:	6d5f      	ldr	r7, [r3, #84]	; 0x54
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b40:	ea44 0e06 	orr.w	lr, r4, r6
 8006b44:	6a0c      	ldr	r4, [r1, #32]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b46:	eb0c 06cc 	add.w	r6, ip, ip, lsl #3
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b4a:	ea4e 6404 	orr.w	r4, lr, r4, lsl #24
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b4e:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006b52:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8006b56:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b5a:	89cc      	ldrh	r4, [r1, #14]
 8006b5c:	4e14      	ldr	r6, [pc, #80]	; (8006bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0xcc>)
 8006b5e:	5d34      	ldrb	r4, [r6, r4]
 8006b60:	b1ac      	cbz	r4, 8006b8e <HAL_FDCAN_AddMessageToTxFifoQ+0xaa>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b62:	7894      	ldrb	r4, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b64:	f892 8003 	ldrb.w	r8, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006b68:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b6a:	0424      	lsls	r4, r4, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b6c:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b70:	f892 8001 	ldrb.w	r8, [r2, #1]
 8006b74:	433c      	orrs	r4, r7
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b76:	eb00 070e 	add.w	r7, r0, lr
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b7a:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b7e:	60bc      	str	r4, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b80:	89cc      	ldrh	r4, [r1, #14]
 8006b82:	5d34      	ldrb	r4, [r6, r4]
 8006b84:	3004      	adds	r0, #4
 8006b86:	42a0      	cmp	r0, r4
 8006b88:	f102 0204 	add.w	r2, r2, #4
 8006b8c:	d3e9      	bcc.n	8006b62 <HAL_FDCAN_AddMessageToTxFifoQ+0x7e>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b8e:	2201      	movs	r2, #1
 8006b90:	fa02 f20c 	lsl.w	r2, r2, ip
 8006b94:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
    return HAL_OK;
 8006b98:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006b9a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                   pTxHeader->TxFrameType |
 8006ba0:	690c      	ldr	r4, [r1, #16]
 8006ba2:	680f      	ldr	r7, [r1, #0]
 8006ba4:	688e      	ldr	r6, [r1, #8]
 8006ba6:	433c      	orrs	r4, r7
 8006ba8:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006baa:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
 8006bae:	e7c0      	b.n	8006b32 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006bb0:	0800b924 	.word	0x0800b924

08006bb4 <HAL_FDCAN_GetRxMessage>:
{
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006bb6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006bba:	2c02      	cmp	r4, #2
 8006bbc:	d10c      	bne.n	8006bd8 <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006bbe:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006bc0:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006bc2:	d00f      	beq.n	8006be4 <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006bc4:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 8006bc8:	0724      	lsls	r4, r4, #28
 8006bca:	d15c      	bne.n	8006c86 <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006bcc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd2:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006bd4:	2001      	movs	r0, #1
}
 8006bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006bd8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006bda:	f043 0308 	orr.w	r3, r3, #8
 8006bde:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006be0:	2001      	movs	r0, #1
}
 8006be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006be4:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 8006be8:	0725      	lsls	r5, r4, #28
 8006bea:	d0ef      	beq.n	8006bcc <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bec:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006bf0:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bf2:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006bf6:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8006bfa:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006bfe:	683c      	ldr	r4, [r7, #0]
 8006c00:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006c04:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006c06:	2c00      	cmp	r4, #0
 8006c08:	d14c      	bne.n	8006ca4 <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006c0a:	683c      	ldr	r4, [r7, #0]
 8006c0c:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006c10:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006c12:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c14:	f8df c094 	ldr.w	ip, [pc, #148]	; 8006cac <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006c18:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8006c1c:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006c1e:	683c      	ldr	r4, [r7, #0]
 8006c20:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8006c24:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006c26:	88bc      	ldrh	r4, [r7, #4]
 8006c28:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006c2a:	687c      	ldr	r4, [r7, #4]
 8006c2c:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8006c30:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006c32:	687d      	ldr	r5, [r7, #4]
 8006c34:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8006c38:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006c3a:	687d      	ldr	r5, [r7, #4]
 8006c3c:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8006c40:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006c42:	79fd      	ldrb	r5, [r7, #7]
 8006c44:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c48:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006c4a:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006c4c:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c4e:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006c52:	0fed      	lsrs	r5, r5, #31
 8006c54:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c56:	b174      	cbz	r4, 8006c76 <HAL_FDCAN_GetRxMessage+0xc2>
 8006c58:	1e5d      	subs	r5, r3, #1
 8006c5a:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8006c62:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c66:	89d6      	ldrh	r6, [r2, #14]
 8006c68:	3b06      	subs	r3, #6
 8006c6a:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8006c6e:	1bdb      	subs	r3, r3, r7
 8006c70:	429e      	cmp	r6, r3
 8006c72:	d8f3      	bhi.n	8006c5c <HAL_FDCAN_GetRxMessage+0xa8>
 8006c74:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006c76:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006c78:	bf0c      	ite	eq
 8006c7a:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006c7e:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 8006c82:	2000      	movs	r0, #0
}
 8006c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c86:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c8a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c8c:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c90:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8006c94:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006c98:	683c      	ldr	r4, [r7, #0]
 8006c9a:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006c9e:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006ca0:	2c00      	cmp	r4, #0
 8006ca2:	d0b2      	beq.n	8006c0a <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006ca4:	683c      	ldr	r4, [r7, #0]
 8006ca6:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8006caa:	e7b1      	b.n	8006c10 <HAL_FDCAN_GetRxMessage+0x5c>
 8006cac:	0800b924 	.word	0x0800b924

08006cb0 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006cb0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d905      	bls.n	8006cc6 <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006cba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006cc2:	2001      	movs	r0, #1
}
 8006cc4:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006cc6:	6803      	ldr	r3, [r0, #0]
{
 8006cc8:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006cca:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006cce:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006cd0:	d03d      	beq.n	8006d4e <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006cd2:	07c4      	lsls	r4, r0, #31
 8006cd4:	d43b      	bmi.n	8006d4e <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006cd6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006cd8:	f044 0401 	orr.w	r4, r4, #1
 8006cdc:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006cde:	b1cd      	cbz	r5, 8006d14 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006ce0:	07c5      	lsls	r5, r0, #31
 8006ce2:	d517      	bpl.n	8006d14 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006ce4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006ce6:	f040 0002 	orr.w	r0, r0, #2
 8006cea:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006cec:	060c      	lsls	r4, r1, #24
 8006cee:	d504      	bpl.n	8006cfa <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006cf0:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006cf4:	4310      	orrs	r0, r2
 8006cf6:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006cfa:	05c8      	lsls	r0, r1, #23
 8006cfc:	d504      	bpl.n	8006d08 <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006cfe:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006d02:	4302      	orrs	r2, r0
 8006d04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d0a:	4311      	orrs	r1, r2
    return HAL_OK;
 8006d0c:	2000      	movs	r0, #0
}
 8006d0e:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006d10:	6559      	str	r1, [r3, #84]	; 0x54
}
 8006d12:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006d14:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006d18:	d001      	beq.n	8006d1e <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006d1a:	0784      	lsls	r4, r0, #30
 8006d1c:	d4e2      	bmi.n	8006ce4 <HAL_FDCAN_ActivateNotification+0x34>
 8006d1e:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006d22:	d131      	bne.n	8006d88 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006d24:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006d28:	d001      	beq.n	8006d2e <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006d2a:	0704      	lsls	r4, r0, #28
 8006d2c:	d4da      	bmi.n	8006ce4 <HAL_FDCAN_ActivateNotification+0x34>
 8006d2e:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006d32:	d001      	beq.n	8006d38 <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006d34:	06c5      	lsls	r5, r0, #27
 8006d36:	d4d5      	bmi.n	8006ce4 <HAL_FDCAN_ActivateNotification+0x34>
 8006d38:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d3c:	d001      	beq.n	8006d42 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006d3e:	0684      	lsls	r4, r0, #26
 8006d40:	d4d0      	bmi.n	8006ce4 <HAL_FDCAN_ActivateNotification+0x34>
 8006d42:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006d46:	d0d1      	beq.n	8006cec <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006d48:	0645      	lsls	r5, r0, #25
 8006d4a:	d5cf      	bpl.n	8006cec <HAL_FDCAN_ActivateNotification+0x3c>
 8006d4c:	e7ca      	b.n	8006ce4 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006d4e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006d52:	d001      	beq.n	8006d58 <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006d54:	0784      	lsls	r4, r0, #30
 8006d56:	d5be      	bpl.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x26>
 8006d58:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006d5c:	d117      	bne.n	8006d8e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d5e:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006d62:	d001      	beq.n	8006d68 <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006d64:	0704      	lsls	r4, r0, #28
 8006d66:	d5b6      	bpl.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x26>
 8006d68:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006d6c:	d001      	beq.n	8006d72 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006d6e:	06c4      	lsls	r4, r0, #27
 8006d70:	d5b1      	bpl.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x26>
 8006d72:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d76:	d001      	beq.n	8006d7c <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006d78:	0684      	lsls	r4, r0, #26
 8006d7a:	d5ac      	bpl.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x26>
 8006d7c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006d80:	d0ad      	beq.n	8006cde <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006d82:	0644      	lsls	r4, r0, #25
 8006d84:	d4ab      	bmi.n	8006cde <HAL_FDCAN_ActivateNotification+0x2e>
 8006d86:	e7a6      	b.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006d88:	0745      	lsls	r5, r0, #29
 8006d8a:	d4ab      	bmi.n	8006ce4 <HAL_FDCAN_ActivateNotification+0x34>
 8006d8c:	e7ca      	b.n	8006d24 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d8e:	0744      	lsls	r4, r0, #29
 8006d90:	d5a1      	bpl.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x26>
 8006d92:	e7e4      	b.n	8006d5e <HAL_FDCAN_ActivateNotification+0xae>

08006d94 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop

08006d98 <HAL_FDCAN_RxFifo1Callback>:
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop

08006d9c <HAL_FDCAN_TxFifoEmptyCallback>:
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop

08006da0 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <HAL_FDCAN_TxBufferAbortCallback>:
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <HAL_FDCAN_TimestampWraparoundCallback>:
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <HAL_FDCAN_TimeoutOccurredCallback>:
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop

08006db0 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <HAL_FDCAN_ErrorCallback>:
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop

08006db8 <HAL_FDCAN_ErrorStatusCallback>:
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <HAL_FDCAN_IRQHandler>:
{
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006dc0:	6803      	ldr	r3, [r0, #0]
 8006dc2:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006dc6:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006dca:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006dce:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006dd0:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006dd4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006dd6:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006dda:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006ddc:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006de0:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006de2:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006de6:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8006dea:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006dee:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006df0:	0652      	lsls	r2, r2, #25
{
 8006df2:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006df4:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006df8:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006dfc:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006e00:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006e04:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006e08:	d502      	bpl.n	8006e10 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006e0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e0c:	0651      	lsls	r1, r2, #25
 8006e0e:	d473      	bmi.n	8006ef8 <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e12:	05d2      	lsls	r2, r2, #23
 8006e14:	d502      	bpl.n	8006e1c <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e18:	05d0      	lsls	r0, r2, #23
 8006e1a:	d45d      	bmi.n	8006ed8 <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 8006e1c:	f1b9 0f00 	cmp.w	r9, #0
 8006e20:	d14a      	bne.n	8006eb8 <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 8006e22:	f1b8 0f00 	cmp.w	r8, #0
 8006e26:	d137      	bne.n	8006e98 <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	d13e      	bne.n	8006eaa <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e2e:	0591      	lsls	r1, r2, #22
 8006e30:	d502      	bpl.n	8006e38 <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006e32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e34:	0592      	lsls	r2, r2, #22
 8006e36:	d475      	bmi.n	8006f24 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e3a:	0617      	lsls	r7, r2, #24
 8006e3c:	d502      	bpl.n	8006e44 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006e3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e40:	0610      	lsls	r0, r2, #24
 8006e42:	d477      	bmi.n	8006f34 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e46:	0491      	lsls	r1, r2, #18
 8006e48:	d502      	bpl.n	8006e50 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006e4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e4c:	0492      	lsls	r2, r2, #18
 8006e4e:	d459      	bmi.n	8006f04 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e52:	0417      	lsls	r7, r2, #16
 8006e54:	d502      	bpl.n	8006e5c <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006e56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e58:	0410      	lsls	r0, r2, #16
 8006e5a:	d45b      	bmi.n	8006f14 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e5e:	0451      	lsls	r1, r2, #17
 8006e60:	d509      	bpl.n	8006e76 <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006e62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e64:	0452      	lsls	r2, r2, #17
 8006e66:	d506      	bpl.n	8006e76 <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006e68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e6c:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006e6e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e74:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006e76:	b94e      	cbnz	r6, 8006e8c <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 8006e78:	b125      	cbz	r5, 8006e84 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006e7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e80:	431d      	orrs	r5, r3
 8006e82:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006e84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e86:	bb13      	cbnz	r3, 8006ece <HAL_FDCAN_IRQHandler+0x112>
}
 8006e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006e8c:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4620      	mov	r0, r4
 8006e92:	f7ff ff91 	bl	8006db8 <HAL_FDCAN_ErrorStatusCallback>
 8006e96:	e7ef      	b.n	8006e78 <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e98:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f7fb fbbe 	bl	8002620 <HAL_FDCAN_RxFifo0Callback>
 8006ea4:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006ea6:	2f00      	cmp	r7, #0
 8006ea8:	d0c0      	beq.n	8006e2c <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006eaa:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006eac:	4639      	mov	r1, r7
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f7ff ff72 	bl	8006d98 <HAL_FDCAN_RxFifo1Callback>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	e7b9      	b.n	8006e2c <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006eb8:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff ff68 	bl	8006d94 <HAL_FDCAN_TxEventFifoCallback>
 8006ec4:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006ec6:	f1b8 0f00 	cmp.w	r8, #0
 8006eca:	d0ad      	beq.n	8006e28 <HAL_FDCAN_IRQHandler+0x6c>
 8006ecc:	e7e4      	b.n	8006e98 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff ff70 	bl	8006db4 <HAL_FDCAN_ErrorCallback>
}
 8006ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006ed8:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006edc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006ee4:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006ee6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7ff ff5b 	bl	8006da4 <HAL_FDCAN_TxBufferAbortCallback>
 8006eee:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006ef0:	f1b9 0f00 	cmp.w	r9, #0
 8006ef4:	d095      	beq.n	8006e22 <HAL_FDCAN_IRQHandler+0x66>
 8006ef6:	e7df      	b.n	8006eb8 <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006ef8:	2240      	movs	r2, #64	; 0x40
 8006efa:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006efc:	f7ff ff58 	bl	8006db0 <HAL_FDCAN_HighPriorityMessageCallback>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	e785      	b.n	8006e10 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006f04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f08:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7ff ff4c 	bl	8006da8 <HAL_FDCAN_TimestampWraparoundCallback>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	e79d      	b.n	8006e50 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006f18:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7ff ff46 	bl	8006dac <HAL_FDCAN_TimeoutOccurredCallback>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	e79b      	b.n	8006e5c <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f28:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7ff ff36 	bl	8006d9c <HAL_FDCAN_TxFifoEmptyCallback>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	e781      	b.n	8006e38 <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006f34:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006f38:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006f3c:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006f3e:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff ff2c 	bl	8006da0 <HAL_FDCAN_TxBufferCompleteCallback>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	e77b      	b.n	8006e44 <HAL_FDCAN_IRQHandler+0x88>

08006f4c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f50:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80070a4 <HAL_FLASH_Program+0x158>
 8006f54:	f899 4000 	ldrb.w	r4, [r9]
 8006f58:	2c01      	cmp	r4, #1
 8006f5a:	d04f      	beq.n	8006ffc <HAL_FLASH_Program+0xb0>
 8006f5c:	469b      	mov	fp, r3
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4682      	mov	sl, r0
 8006f62:	460f      	mov	r7, r1
 8006f64:	4690      	mov	r8, r2
 8006f66:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006f6a:	f7fe fb93 	bl	8005694 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f6e:	4e4c      	ldr	r6, [pc, #304]	; (80070a0 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8006f70:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f72:	e005      	b.n	8006f80 <HAL_FLASH_Program+0x34>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006f74:	f7fe fb8e 	bl	8005694 <HAL_GetTick>
 8006f78:	1b44      	subs	r4, r0, r5
 8006f7a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8006f7e:	d837      	bhi.n	8006ff0 <HAL_FLASH_Program+0xa4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f80:	6933      	ldr	r3, [r6, #16]
 8006f82:	03d8      	lsls	r0, r3, #15
 8006f84:	d4f6      	bmi.n	8006f74 <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006f86:	6934      	ldr	r4, [r6, #16]
 8006f88:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 8006f8c:	401c      	ands	r4, r3
 8006f8e:	d147      	bne.n	8007020 <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006f90:	6933      	ldr	r3, [r6, #16]
 8006f92:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006f94:	bf44      	itt	mi
 8006f96:	2301      	movmi	r3, #1
 8006f98:	6133      	strmi	r3, [r6, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c9 3004 	str.w	r3, [r9, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006fa0:	f1ba 0f00 	cmp.w	sl, #0
 8006fa4:	d02d      	beq.n	8007002 <HAL_FLASH_Program+0xb6>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006fa6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d940      	bls.n	8007030 <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 8006fae:	f7fe fb71 	bl	8005694 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006fb2:	4e3b      	ldr	r6, [pc, #236]	; (80070a0 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8006fb4:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006fb6:	e005      	b.n	8006fc4 <HAL_FLASH_Program+0x78>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006fb8:	f7fe fb6c 	bl	8005694 <HAL_GetTick>
 8006fbc:	1b40      	subs	r0, r0, r5
 8006fbe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006fc2:	d82b      	bhi.n	800701c <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006fc4:	6933      	ldr	r3, [r6, #16]
 8006fc6:	03db      	lsls	r3, r3, #15
 8006fc8:	d4f6      	bmi.n	8006fb8 <HAL_FLASH_Program+0x6c>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006fca:	6933      	ldr	r3, [r6, #16]
 8006fcc:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d152      	bne.n	800707a <HAL_FLASH_Program+0x12e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006fd4:	6930      	ldr	r0, [r6, #16]
 8006fd6:	f010 0001 	ands.w	r0, r0, #1
 8006fda:	d002      	beq.n	8006fe2 <HAL_FLASH_Program+0x96>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	6132      	str	r2, [r6, #16]
    if (prog_bit != 0U)
 8006fe2:	b134      	cbz	r4, 8006ff2 <HAL_FLASH_Program+0xa6>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006fe4:	4a2e      	ldr	r2, [pc, #184]	; (80070a0 <HAL_FLASH_Program+0x154>)
 8006fe6:	6953      	ldr	r3, [r2, #20]
 8006fe8:	ea23 0404 	bic.w	r4, r3, r4
 8006fec:	6154      	str	r4, [r2, #20]
 8006fee:	e000      	b.n	8006ff2 <HAL_FLASH_Program+0xa6>
 8006ff0:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f889 3000 	strb.w	r3, [r9]
}
 8006ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8006ffc:	2002      	movs	r0, #2
}
 8006ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007002:	4a27      	ldr	r2, [pc, #156]	; (80070a0 <HAL_FLASH_Program+0x154>)
 8007004:	6953      	ldr	r3, [r2, #20]
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800700c:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8007010:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8007014:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007016:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 800701a:	e7c8      	b.n	8006fae <HAL_FLASH_Program+0x62>
      return HAL_TIMEOUT;
 800701c:	2003      	movs	r0, #3
 800701e:	e7e0      	b.n	8006fe2 <HAL_FLASH_Program+0x96>
    pFlash.ErrorCode |= error;
 8007020:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007024:	4323      	orrs	r3, r4
 8007026:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 800702a:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800702c:	6134      	str	r4, [r6, #16]
  if (status == HAL_OK)
 800702e:	e7e0      	b.n	8006ff2 <HAL_FLASH_Program+0xa6>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007030:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <HAL_FLASH_Program+0x154>)
 8007032:	6953      	ldr	r3, [r2, #20]
 8007034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007038:	6153      	str	r3, [r2, #20]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800703a:	4643      	mov	r3, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007040:	b672      	cpsid	i
 8007042:	1dfa      	adds	r2, r7, #7
 8007044:	eba2 0208 	sub.w	r2, r2, r8
 8007048:	2a0e      	cmp	r2, #14
 800704a:	d91e      	bls.n	800708a <HAL_FLASH_Program+0x13e>
 800704c:	ea47 0208 	orr.w	r2, r7, r8
 8007050:	0752      	lsls	r2, r2, #29
 8007052:	d11a      	bne.n	800708a <HAL_FLASH_Program+0x13e>
 8007054:	1aff      	subs	r7, r7, r3
 8007056:	f508 7880 	add.w	r8, r8, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800705a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800705e:	18fa      	adds	r2, r7, r3
 8007060:	3308      	adds	r3, #8
 8007062:	4543      	cmp	r3, r8
 8007064:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 8007068:	d1f7      	bne.n	800705a <HAL_FLASH_Program+0x10e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706a:	f385 8810 	msr	PRIMASK, r5
        prog_bit = FLASH_CR_FSTPG;
 800706e:	f1ba 0f02 	cmp.w	sl, #2
 8007072:	bf08      	it	eq
 8007074:	f44f 2480 	moveq.w	r4, #262144	; 0x40000
 8007078:	e799      	b.n	8006fae <HAL_FLASH_Program+0x62>
    pFlash.ErrorCode |= error;
 800707a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800707e:	431a      	orrs	r2, r3
 8007080:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 8007084:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8007086:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 8007088:	e7ab      	b.n	8006fe2 <HAL_FLASH_Program+0x96>
 800708a:	eba7 0708 	sub.w	r7, r7, r8
 800708e:	f508 7880 	add.w	r8, r8, #256	; 0x100
    *dest_addr = *src_addr;
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	51da      	str	r2, [r3, r7]
    src_addr++;
 8007096:	3304      	adds	r3, #4
  while (row_index != 0U);
 8007098:	4598      	cmp	r8, r3
 800709a:	d1fa      	bne.n	8007092 <HAL_FLASH_Program+0x146>
 800709c:	e7e5      	b.n	800706a <HAL_FLASH_Program+0x11e>
 800709e:	bf00      	nop
 80070a0:	40022000 	.word	0x40022000
 80070a4:	20000ddc 	.word	0x20000ddc

080070a8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80070a8:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <HAL_FLASH_Unlock+0x1c>)
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	2a00      	cmp	r2, #0
 80070ae:	db01      	blt.n	80070b4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2000      	movs	r0, #0
}
 80070b2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80070b4:	4904      	ldr	r1, [pc, #16]	; (80070c8 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80070b6:	4a05      	ldr	r2, [pc, #20]	; (80070cc <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80070b8:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80070ba:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80070bc:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	0fc0      	lsrs	r0, r0, #31
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40022000 	.word	0x40022000
 80070c8:	45670123 	.word	0x45670123
 80070cc:	cdef89ab 	.word	0xcdef89ab

080070d0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <HAL_FLASH_Lock+0x14>)
 80070d2:	695a      	ldr	r2, [r3, #20]
 80070d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80070d8:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80070da:	6958      	ldr	r0, [r3, #20]
}
 80070dc:	43c0      	mvns	r0, r0
 80070de:	0fc0      	lsrs	r0, r0, #31
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40022000 	.word	0x40022000

080070e8 <HAL_FLASH_GetError>:
  return pFlash.ErrorCode;
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <HAL_FLASH_GetError+0x8>)
 80070ea:	6858      	ldr	r0, [r3, #4]
}
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000ddc 	.word	0x20000ddc

080070f4 <FLASH_WaitForLastOperation>:
{
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80070f8:	f7fe facc 	bl	8005694 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80070fc:	4e10      	ldr	r6, [pc, #64]	; (8007140 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 80070fe:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007100:	e004      	b.n	800710c <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007102:	f7fe fac7 	bl	8005694 <HAL_GetTick>
 8007106:	1b03      	subs	r3, r0, r4
 8007108:	42ab      	cmp	r3, r5
 800710a:	d80f      	bhi.n	800712c <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800710c:	6933      	ldr	r3, [r6, #16]
 800710e:	03db      	lsls	r3, r3, #15
 8007110:	d4f7      	bmi.n	8007102 <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007112:	6933      	ldr	r3, [r6, #16]
 8007114:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8007118:	4013      	ands	r3, r2
 800711a:	d109      	bne.n	8007130 <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800711c:	6930      	ldr	r0, [r6, #16]
 800711e:	f010 0001 	ands.w	r0, r0, #1
 8007122:	d002      	beq.n	800712a <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007124:	2201      	movs	r2, #1
 8007126:	4618      	mov	r0, r3
 8007128:	6132      	str	r2, [r6, #16]
}
 800712a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800712c:	2003      	movs	r0, #3
}
 800712e:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8007130:	4904      	ldr	r1, [pc, #16]	; (8007144 <FLASH_WaitForLastOperation+0x50>)
 8007132:	684a      	ldr	r2, [r1, #4]
 8007134:	431a      	orrs	r2, r3
 8007136:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8007138:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800713a:	6133      	str	r3, [r6, #16]
}
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	bf00      	nop
 8007140:	40022000 	.word	0x40022000
 8007144:	20000ddc 	.word	0x20000ddc

08007148 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800714c:	4e54      	ldr	r6, [pc, #336]	; (80072a0 <HAL_FLASHEx_Erase+0x158>)
 800714e:	7833      	ldrb	r3, [r6, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d077      	beq.n	8007244 <HAL_FLASHEx_Erase+0xfc>
 8007154:	4681      	mov	r9, r0
 8007156:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800715c:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 800715e:	7034      	strb	r4, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007160:	f7ff ffc8 	bl	80070f4 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8007164:	4605      	mov	r5, r0
 8007166:	b120      	cbz	r0, 8007172 <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007168:	2300      	movs	r3, #0
 800716a:	7033      	strb	r3, [r6, #0]

  return status;
}
 800716c:	4628      	mov	r0, r5
 800716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007172:	4b4c      	ldr	r3, [pc, #304]	; (80072a4 <HAL_FLASHEx_Erase+0x15c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007174:	6070      	str	r0, [r6, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800717c:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800717e:	d165      	bne.n	800724c <HAL_FLASHEx_Erase+0x104>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007180:	0552      	lsls	r2, r2, #21
 8007182:	f140 808a 	bpl.w	800729a <HAL_FLASHEx_Erase+0x152>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007186:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007188:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800718a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800718e:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007190:	7731      	strb	r1, [r6, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007192:	f8d9 3000 	ldr.w	r3, [r9]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d065      	beq.n	8007266 <HAL_FLASHEx_Erase+0x11e>
      *PageError = 0xFFFFFFFFU;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80071a0:	e9d9 8302 	ldrd	r8, r3, [r9, #8]
 80071a4:	4443      	add	r3, r8
 80071a6:	4598      	cmp	r8, r3
 80071a8:	d226      	bcs.n	80071f8 <HAL_FLASHEx_Erase+0xb0>
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80071aa:	4c3e      	ldr	r4, [pc, #248]	; (80072a4 <HAL_FLASHEx_Erase+0x15c>)
 80071ac:	e006      	b.n	80071bc <HAL_FLASHEx_Erase+0x74>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80071ae:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 80071b2:	f108 0801 	add.w	r8, r8, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	4543      	cmp	r3, r8
 80071ba:	d91d      	bls.n	80071f8 <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80071bc:	6962      	ldr	r2, [r4, #20]
 80071be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80071c2:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 80071c6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80071ca:	4313      	orrs	r3, r2
 80071cc:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80071ce:	6963      	ldr	r3, [r4, #20]
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80071d6:	6963      	ldr	r3, [r4, #20]
 80071d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071dc:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071e2:	f7ff ff87 	bl	80070f4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80071e6:	6963      	ldr	r3, [r4, #20]
 80071e8:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80071ec:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d0dd      	beq.n	80071ae <HAL_FLASHEx_Erase+0x66>
          *PageError = page_index;
 80071f2:	f8c7 8000 	str.w	r8, [r7]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071f6:	4605      	mov	r5, r0
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80071f8:	7f33      	ldrb	r3, [r6, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80071fa:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80071fe:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007200:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007202:	d10c      	bne.n	800721e <HAL_FLASHEx_Erase+0xd6>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <HAL_FLASHEx_Erase+0x15c>)
 8007206:	6811      	ldr	r1, [r2, #0]
 8007208:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	6811      	ldr	r1, [r2, #0]
 8007210:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8007214:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007216:	6811      	ldr	r1, [r2, #0]
 8007218:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800721c:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800721e:	3b02      	subs	r3, #2
 8007220:	2b01      	cmp	r3, #1
 8007222:	d80c      	bhi.n	800723e <HAL_FLASHEx_Erase+0xf6>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007224:	4b1f      	ldr	r3, [pc, #124]	; (80072a4 <HAL_FLASHEx_Erase+0x15c>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007234:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800723c:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800723e:	2300      	movs	r3, #0
 8007240:	7733      	strb	r3, [r6, #28]
}
 8007242:	e791      	b.n	8007168 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8007244:	2502      	movs	r5, #2
}
 8007246:	4628      	mov	r0, r5
 8007248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800724c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	0551      	lsls	r1, r2, #21
 8007256:	d51e      	bpl.n	8007296 <HAL_FLASHEx_Erase+0x14e>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007258:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800725a:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800725c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007260:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007262:	7731      	strb	r1, [r6, #28]
 8007264:	e795      	b.n	8007192 <HAL_FLASHEx_Erase+0x4a>
    if ((Banks & FLASH_BANK_1) != 0U)
 8007266:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800726a:	07db      	lsls	r3, r3, #31
 800726c:	d504      	bpl.n	8007278 <HAL_FLASHEx_Erase+0x130>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800726e:	4a0d      	ldr	r2, [pc, #52]	; (80072a4 <HAL_FLASHEx_Erase+0x15c>)
 8007270:	6953      	ldr	r3, [r2, #20]
 8007272:	f043 0304 	orr.w	r3, r3, #4
 8007276:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007278:	4c0a      	ldr	r4, [pc, #40]	; (80072a4 <HAL_FLASHEx_Erase+0x15c>)
 800727a:	6963      	ldr	r3, [r4, #20]
 800727c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007280:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007286:	f7ff ff35 	bl	80070f4 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800728a:	6963      	ldr	r3, [r4, #20]
 800728c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007290:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007292:	6163      	str	r3, [r4, #20]
 8007294:	e7b0      	b.n	80071f8 <HAL_FLASHEx_Erase+0xb0>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007296:	7734      	strb	r4, [r6, #28]
 8007298:	e77b      	b.n	8007192 <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800729a:	7730      	strb	r0, [r6, #28]
 800729c:	e779      	b.n	8007192 <HAL_FLASHEx_Erase+0x4a>
 800729e:	bf00      	nop
 80072a0:	20000ddc 	.word	0x20000ddc
 80072a4:	40022000 	.word	0x40022000

080072a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072ac:	680e      	ldr	r6, [r1, #0]
{
 80072ae:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	f000 808b 	beq.w	80073cc <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80072b6:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 800748c <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 80072ba:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072bc:	2201      	movs	r2, #1
 80072be:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 80072c2:	ea14 0c06 	ands.w	ip, r4, r6
 80072c6:	d07c      	beq.n	80073c2 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072c8:	684d      	ldr	r5, [r1, #4]
 80072ca:	f025 0a10 	bic.w	sl, r5, #16
 80072ce:	f10a 32ff 	add.w	r2, sl, #4294967295
 80072d2:	2a01      	cmp	r2, #1
 80072d4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072d8:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80072dc:	d979      	bls.n	80073d2 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 80072de:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072e0:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072e2:	fa02 f208 	lsl.w	r2, r2, r8
 80072e6:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072ea:	fa04 f408 	lsl.w	r4, r4, r8
 80072ee:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80072f0:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072f2:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 80072f4:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072f6:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072fa:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072fc:	fa02 f208 	lsl.w	r2, r2, r8
 8007300:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007302:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8007304:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007306:	d55c      	bpl.n	80073c2 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007308:	4c5a      	ldr	r4, [pc, #360]	; (8007474 <HAL_GPIO_Init+0x1cc>)
 800730a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	6622      	str	r2, [r4, #96]	; 0x60
 8007312:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007314:	f023 0403 	bic.w	r4, r3, #3
 8007318:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800731c:	f002 0201 	and.w	r2, r2, #1
 8007320:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8007324:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007326:	f003 0203 	and.w	r2, r3, #3
 800732a:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800732e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007330:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007332:	220f      	movs	r2, #15
 8007334:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007338:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800733c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007340:	d018      	beq.n	8007374 <HAL_GPIO_Init+0xcc>
 8007342:	4a4d      	ldr	r2, [pc, #308]	; (8007478 <HAL_GPIO_Init+0x1d0>)
 8007344:	4290      	cmp	r0, r2
 8007346:	f000 8084 	beq.w	8007452 <HAL_GPIO_Init+0x1aa>
 800734a:	4a4c      	ldr	r2, [pc, #304]	; (800747c <HAL_GPIO_Init+0x1d4>)
 800734c:	4290      	cmp	r0, r2
 800734e:	f000 8085 	beq.w	800745c <HAL_GPIO_Init+0x1b4>
 8007352:	4a4b      	ldr	r2, [pc, #300]	; (8007480 <HAL_GPIO_Init+0x1d8>)
 8007354:	4290      	cmp	r0, r2
 8007356:	d076      	beq.n	8007446 <HAL_GPIO_Init+0x19e>
 8007358:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <HAL_GPIO_Init+0x1dc>)
 800735a:	4290      	cmp	r0, r2
 800735c:	f000 8084 	beq.w	8007468 <HAL_GPIO_Init+0x1c0>
 8007360:	4a49      	ldr	r2, [pc, #292]	; (8007488 <HAL_GPIO_Init+0x1e0>)
 8007362:	4290      	cmp	r0, r2
 8007364:	bf0c      	ite	eq
 8007366:	f04f 0805 	moveq.w	r8, #5
 800736a:	f04f 0806 	movne.w	r8, #6
 800736e:	fa08 f209 	lsl.w	r2, r8, r9
 8007372:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007374:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 8007376:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800737a:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800737e:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8007380:	bf54      	ite	pl
 8007382:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8007384:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8007388:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 800738c:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007390:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8007392:	bf54      	ite	pl
 8007394:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8007396:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 800739a:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800739e:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073a2:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 80073a4:	bf54      	ite	pl
 80073a6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80073a8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 80073ac:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80073b0:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073b4:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 80073b6:	bf54      	ite	pl
 80073b8:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80073ba:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 80073be:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 80073c2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80073c4:	fa36 f203 	lsrs.w	r2, r6, r3
 80073c8:	f47f af78 	bne.w	80072bc <HAL_GPIO_Init+0x14>
  }
}
 80073cc:	b003      	add	sp, #12
 80073ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80073d2:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073d4:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073d8:	fa02 f208 	lsl.w	r2, r2, r8
 80073dc:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073e0:	68cf      	ldr	r7, [r1, #12]
 80073e2:	fa07 f708 	lsl.w	r7, r7, r8
 80073e6:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80073ea:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80073ec:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073ee:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073f2:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073f6:	465c      	mov	r4, fp
 80073f8:	409c      	lsls	r4, r3
 80073fa:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 80073fc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80073fe:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007400:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007404:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007408:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800740c:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007410:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8007414:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007416:	f47f af6d 	bne.w	80072f4 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800741a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800741e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007422:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8007426:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800742a:	0092      	lsls	r2, r2, #2
 800742c:	f04f 0a0f 	mov.w	sl, #15
 8007430:	fa0a fb02 	lsl.w	fp, sl, r2
 8007434:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007438:	690c      	ldr	r4, [r1, #16]
 800743a:	4094      	lsls	r4, r2
 800743c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8007440:	f8c9 4020 	str.w	r4, [r9, #32]
 8007444:	e756      	b.n	80072f4 <HAL_GPIO_Init+0x4c>
 8007446:	f04f 0803 	mov.w	r8, #3
 800744a:	fa08 f209 	lsl.w	r2, r8, r9
 800744e:	4317      	orrs	r7, r2
 8007450:	e790      	b.n	8007374 <HAL_GPIO_Init+0xcc>
 8007452:	2201      	movs	r2, #1
 8007454:	fa02 f209 	lsl.w	r2, r2, r9
 8007458:	4317      	orrs	r7, r2
 800745a:	e78b      	b.n	8007374 <HAL_GPIO_Init+0xcc>
 800745c:	f04f 0802 	mov.w	r8, #2
 8007460:	fa08 f209 	lsl.w	r2, r8, r9
 8007464:	4317      	orrs	r7, r2
 8007466:	e785      	b.n	8007374 <HAL_GPIO_Init+0xcc>
 8007468:	f04f 0804 	mov.w	r8, #4
 800746c:	fa08 f209 	lsl.w	r2, r8, r9
 8007470:	4317      	orrs	r7, r2
 8007472:	e77f      	b.n	8007374 <HAL_GPIO_Init+0xcc>
 8007474:	40021000 	.word	0x40021000
 8007478:	48000400 	.word	0x48000400
 800747c:	48000800 	.word	0x48000800
 8007480:	48000c00 	.word	0x48000c00
 8007484:	48001000 	.word	0x48001000
 8007488:	48001400 	.word	0x48001400
 800748c:	40010400 	.word	0x40010400

08007490 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007490:	6903      	ldr	r3, [r0, #16]
 8007492:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007494:	bf14      	ite	ne
 8007496:	2001      	movne	r0, #1
 8007498:	2000      	moveq	r0, #0
 800749a:	4770      	bx	lr

0800749c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800749c:	b10a      	cbz	r2, 80074a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800749e:	6181      	str	r1, [r0, #24]
 80074a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80074a2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop

080074a8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074a8:	4a3b      	ldr	r2, [pc, #236]	; (8007598 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 80074aa:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074ac:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80074ae:	b968      	cbnz	r0, 80074cc <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d014      	beq.n	80074e4 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074ba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80074be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 80074c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ca:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80074d0:	d02f      	beq.n	8007532 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80074d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074da:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80074dc:	2000      	movs	r0, #0
}
 80074de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e2:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074e4:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074e8:	4b2c      	ldr	r3, [pc, #176]	; (800759c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80074ea:	482d      	ldr	r0, [pc, #180]	; (80075a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074ec:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80074f0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074f4:	6811      	ldr	r1, [r2, #0]
 80074f6:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80074fa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80074fe:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007500:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007502:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007504:	2332      	movs	r3, #50	; 0x32
 8007506:	fb03 f304 	mul.w	r3, r3, r4
 800750a:	fba0 0303 	umull	r0, r3, r0, r3
 800750e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007510:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007512:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007516:	d506      	bpl.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8007518:	e000      	b.n	800751c <HAL_PWREx_ControlVoltageScaling+0x74>
 800751a:	b123      	cbz	r3, 8007526 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800751c:	6951      	ldr	r1, [r2, #20]
 800751e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007520:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007524:	d4f9      	bmi.n	800751a <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007526:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	055c      	lsls	r4, r3, #21
 800752c:	d5d6      	bpl.n	80074dc <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 800752e:	2003      	movs	r0, #3
 8007530:	e7c9      	b.n	80074c6 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753a:	d009      	beq.n	8007550 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800753c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8007540:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8007548:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800754a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800754e:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007550:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007554:	4b11      	ldr	r3, [pc, #68]	; (800759c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007556:	4812      	ldr	r0, [pc, #72]	; (80075a0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007558:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800755c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007560:	6811      	ldr	r1, [r2, #0]
 8007562:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8007566:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800756a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800756c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800756e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007570:	2332      	movs	r3, #50	; 0x32
 8007572:	fb03 f304 	mul.w	r3, r3, r4
 8007576:	fba0 0303 	umull	r0, r3, r0, r3
 800757a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800757c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800757e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007582:	d5d0      	bpl.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8007584:	e001      	b.n	800758a <HAL_PWREx_ControlVoltageScaling+0xe2>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0cd      	beq.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800758a:	6951      	ldr	r1, [r2, #20]
 800758c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800758e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007592:	d5c8      	bpl.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8007594:	e7f7      	b.n	8007586 <HAL_PWREx_ControlVoltageScaling+0xde>
 8007596:	bf00      	nop
 8007598:	40007000 	.word	0x40007000
 800759c:	20000dd0 	.word	0x20000dd0
 80075a0:	431bde83 	.word	0x431bde83

080075a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80075a4:	4a02      	ldr	r2, [pc, #8]	; (80075b0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80075a6:	6893      	ldr	r3, [r2, #8]
 80075a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075ac:	6093      	str	r3, [r2, #8]
}
 80075ae:	4770      	bx	lr
 80075b0:	40007000 	.word	0x40007000

080075b4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075b4:	2800      	cmp	r0, #0
 80075b6:	f000 81c3 	beq.w	8007940 <HAL_RCC_OscConfig+0x38c>
{
 80075ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075be:	6803      	ldr	r3, [r0, #0]
 80075c0:	07d9      	lsls	r1, r3, #31
{
 80075c2:	b082      	sub	sp, #8
 80075c4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075c6:	d52d      	bpl.n	8007624 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075c8:	49b5      	ldr	r1, [pc, #724]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 80075ca:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075cc:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ce:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80075d2:	2a0c      	cmp	r2, #12
 80075d4:	f000 810a 	beq.w	80077ec <HAL_RCC_OscConfig+0x238>
 80075d8:	2a08      	cmp	r2, #8
 80075da:	f000 810c 	beq.w	80077f6 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075de:	6863      	ldr	r3, [r4, #4]
 80075e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e4:	f000 8133 	beq.w	800784e <HAL_RCC_OscConfig+0x29a>
 80075e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075ec:	f000 819b 	beq.w	8007926 <HAL_RCC_OscConfig+0x372>
 80075f0:	4dab      	ldr	r5, [pc, #684]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 80075f2:	682a      	ldr	r2, [r5, #0]
 80075f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	682a      	ldr	r2, [r5, #0]
 80075fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007600:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007602:	2b00      	cmp	r3, #0
 8007604:	f040 8128 	bne.w	8007858 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fe f844 	bl	8005694 <HAL_GetTick>
 800760c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800760e:	e005      	b.n	800761c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007610:	f7fe f840 	bl	8005694 <HAL_GetTick>
 8007614:	1b80      	subs	r0, r0, r6
 8007616:	2864      	cmp	r0, #100	; 0x64
 8007618:	f200 813b 	bhi.w	8007892 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	039f      	lsls	r7, r3, #14
 8007620:	d4f6      	bmi.n	8007610 <HAL_RCC_OscConfig+0x5c>
 8007622:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007624:	079e      	lsls	r6, r3, #30
 8007626:	d528      	bpl.n	800767a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007628:	4a9d      	ldr	r2, [pc, #628]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 800762a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800762c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800762e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007632:	2b0c      	cmp	r3, #12
 8007634:	f000 80ec 	beq.w	8007810 <HAL_RCC_OscConfig+0x25c>
 8007638:	2b04      	cmp	r3, #4
 800763a:	f000 80ee 	beq.w	800781a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800763e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007640:	4d97      	ldr	r5, [pc, #604]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8116 	beq.w	8007874 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fe f820 	bl	8005694 <HAL_GetTick>
 8007654:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007656:	e005      	b.n	8007664 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007658:	f7fe f81c 	bl	8005694 <HAL_GetTick>
 800765c:	1b80      	subs	r0, r0, r6
 800765e:	2802      	cmp	r0, #2
 8007660:	f200 8117 	bhi.w	8007892 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	0558      	lsls	r0, r3, #21
 8007668:	d5f6      	bpl.n	8007658 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800766a:	686b      	ldr	r3, [r5, #4]
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007672:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007676:	606b      	str	r3, [r5, #4]
 8007678:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800767a:	071a      	lsls	r2, r3, #28
 800767c:	d519      	bpl.n	80076b2 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800767e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007680:	4d87      	ldr	r5, [pc, #540]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 809e 	beq.w	80077c4 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8007688:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007694:	f7fd fffe 	bl	8005694 <HAL_GetTick>
 8007698:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800769a:	e005      	b.n	80076a8 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800769c:	f7fd fffa 	bl	8005694 <HAL_GetTick>
 80076a0:	1b80      	subs	r0, r0, r6
 80076a2:	2802      	cmp	r0, #2
 80076a4:	f200 80f5 	bhi.w	8007892 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076a8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80076ac:	079f      	lsls	r7, r3, #30
 80076ae:	d5f5      	bpl.n	800769c <HAL_RCC_OscConfig+0xe8>
 80076b0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076b2:	0759      	lsls	r1, r3, #29
 80076b4:	d541      	bpl.n	800773a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076b6:	4b7a      	ldr	r3, [pc, #488]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 80076b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076ba:	00d2      	lsls	r2, r2, #3
 80076bc:	f100 80ed 	bmi.w	800789a <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076c6:	659a      	str	r2, [r3, #88]	; 0x58
 80076c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80076d2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076d4:	4e73      	ldr	r6, [pc, #460]	; (80078a4 <HAL_RCC_OscConfig+0x2f0>)
 80076d6:	6833      	ldr	r3, [r6, #0]
 80076d8:	05df      	lsls	r7, r3, #23
 80076da:	f140 8113 	bpl.w	8007904 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	f000 80e3 	beq.w	80078ac <HAL_RCC_OscConfig+0x2f8>
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	f000 8169 	beq.w	80079be <HAL_RCC_OscConfig+0x40a>
 80076ec:	4e6c      	ldr	r6, [pc, #432]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 80076ee:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80076fa:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80076fe:	f022 0204 	bic.w	r2, r2, #4
 8007702:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 80d7 	bne.w	80078ba <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770c:	f7fd ffc2 	bl	8005694 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007710:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007714:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007716:	e005      	b.n	8007724 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007718:	f7fd ffbc 	bl	8005694 <HAL_GetTick>
 800771c:	1bc0      	subs	r0, r0, r7
 800771e:	4540      	cmp	r0, r8
 8007720:	f200 80b7 	bhi.w	8007892 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007724:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8007728:	079a      	lsls	r2, r3, #30
 800772a:	d4f5      	bmi.n	8007718 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800772c:	b125      	cbz	r5, 8007738 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800772e:	4a5c      	ldr	r2, [pc, #368]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 8007730:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007736:	6593      	str	r3, [r2, #88]	; 0x58
 8007738:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800773a:	069b      	lsls	r3, r3, #26
 800773c:	d518      	bpl.n	8007770 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800773e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007740:	4d57      	ldr	r5, [pc, #348]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 80ca 	beq.w	80078dc <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8007748:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007754:	f7fd ff9e 	bl	8005694 <HAL_GetTick>
 8007758:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800775a:	e005      	b.n	8007768 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800775c:	f7fd ff9a 	bl	8005694 <HAL_GetTick>
 8007760:	1b80      	subs	r0, r0, r6
 8007762:	2802      	cmp	r0, #2
 8007764:	f200 8095 	bhi.w	8007892 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007768:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800776c:	079f      	lsls	r7, r3, #30
 800776e:	d5f5      	bpl.n	800775c <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007770:	69e0      	ldr	r0, [r4, #28]
 8007772:	b318      	cbz	r0, 80077bc <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007774:	4d4a      	ldr	r5, [pc, #296]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 8007776:	68ab      	ldr	r3, [r5, #8]
 8007778:	f003 030c 	and.w	r3, r3, #12
 800777c:	2b0c      	cmp	r3, #12
 800777e:	f000 812c 	beq.w	80079da <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007782:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007784:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800778a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800778c:	f000 80da 	beq.w	8007944 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007790:	68eb      	ldr	r3, [r5, #12]
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007798:	68eb      	ldr	r3, [r5, #12]
 800779a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800779e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a2:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fd ff76 	bl	8005694 <HAL_GetTick>
 80077a8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077aa:	e004      	b.n	80077b6 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ac:	f7fd ff72 	bl	8005694 <HAL_GetTick>
 80077b0:	1b00      	subs	r0, r0, r4
 80077b2:	2802      	cmp	r0, #2
 80077b4:	d86d      	bhi.n	8007892 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077b6:	682b      	ldr	r3, [r5, #0]
 80077b8:	019b      	lsls	r3, r3, #6
 80077ba:	d4f7      	bmi.n	80077ac <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80077bc:	2000      	movs	r0, #0
}
 80077be:	b002      	add	sp, #8
 80077c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80077c4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80077d0:	f7fd ff60 	bl	8005694 <HAL_GetTick>
 80077d4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077d6:	e004      	b.n	80077e2 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077d8:	f7fd ff5c 	bl	8005694 <HAL_GetTick>
 80077dc:	1b80      	subs	r0, r0, r6
 80077de:	2802      	cmp	r0, #2
 80077e0:	d857      	bhi.n	8007892 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077e2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80077e6:	0798      	lsls	r0, r3, #30
 80077e8:	d4f6      	bmi.n	80077d8 <HAL_RCC_OscConfig+0x224>
 80077ea:	e761      	b.n	80076b0 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077ec:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80077f0:	2903      	cmp	r1, #3
 80077f2:	f47f aef4 	bne.w	80075de <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f6:	4a2a      	ldr	r2, [pc, #168]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	0392      	lsls	r2, r2, #14
 80077fc:	f57f af12 	bpl.w	8007624 <HAL_RCC_OscConfig+0x70>
 8007800:	6862      	ldr	r2, [r4, #4]
 8007802:	2a00      	cmp	r2, #0
 8007804:	f47f af0e 	bne.w	8007624 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8007808:	2001      	movs	r0, #1
}
 800780a:	b002      	add	sp, #8
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007810:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007814:	2a02      	cmp	r2, #2
 8007816:	f47f af12 	bne.w	800763e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800781a:	4b21      	ldr	r3, [pc, #132]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	055d      	lsls	r5, r3, #21
 8007820:	d502      	bpl.n	8007828 <HAL_RCC_OscConfig+0x274>
 8007822:	68e3      	ldr	r3, [r4, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0ef      	beq.n	8007808 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007828:	4a1d      	ldr	r2, [pc, #116]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 800782a:	6920      	ldr	r0, [r4, #16]
 800782c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800782e:	491e      	ldr	r1, [pc, #120]	; (80078a8 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007830:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007834:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007838:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800783a:	6808      	ldr	r0, [r1, #0]
 800783c:	f7fd fee8 	bl	8005610 <HAL_InitTick>
 8007840:	2800      	cmp	r0, #0
 8007842:	d1e1      	bne.n	8007808 <HAL_RCC_OscConfig+0x254>
 8007844:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007846:	071a      	lsls	r2, r3, #28
 8007848:	f57f af33 	bpl.w	80076b2 <HAL_RCC_OscConfig+0xfe>
 800784c:	e717      	b.n	800767e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800784e:	4a14      	ldr	r2, [pc, #80]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
 8007850:	6813      	ldr	r3, [r2, #0]
 8007852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007856:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007858:	f7fd ff1c 	bl	8005694 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800785c:	4e10      	ldr	r6, [pc, #64]	; (80078a0 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 800785e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007860:	e004      	b.n	800786c <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007862:	f7fd ff17 	bl	8005694 <HAL_GetTick>
 8007866:	1b40      	subs	r0, r0, r5
 8007868:	2864      	cmp	r0, #100	; 0x64
 800786a:	d812      	bhi.n	8007892 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800786c:	6833      	ldr	r3, [r6, #0]
 800786e:	039b      	lsls	r3, r3, #14
 8007870:	d5f7      	bpl.n	8007862 <HAL_RCC_OscConfig+0x2ae>
 8007872:	e6d6      	b.n	8007622 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800787a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800787c:	f7fd ff0a 	bl	8005694 <HAL_GetTick>
 8007880:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007882:	682b      	ldr	r3, [r5, #0]
 8007884:	0559      	lsls	r1, r3, #21
 8007886:	d5dd      	bpl.n	8007844 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007888:	f7fd ff04 	bl	8005694 <HAL_GetTick>
 800788c:	1b80      	subs	r0, r0, r6
 800788e:	2802      	cmp	r0, #2
 8007890:	d9f7      	bls.n	8007882 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8007892:	2003      	movs	r0, #3
}
 8007894:	b002      	add	sp, #8
 8007896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800789a:	2500      	movs	r5, #0
 800789c:	e71a      	b.n	80076d4 <HAL_RCC_OscConfig+0x120>
 800789e:	bf00      	nop
 80078a0:	40021000 	.word	0x40021000
 80078a4:	40007000 	.word	0x40007000
 80078a8:	20000dd8 	.word	0x20000dd8
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078ac:	4a65      	ldr	r2, [pc, #404]	; (8007a44 <HAL_RCC_OscConfig+0x490>)
 80078ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80078ba:	f7fd feeb 	bl	8005694 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078be:	4f61      	ldr	r7, [pc, #388]	; (8007a44 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 80078c0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c2:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078c6:	e004      	b.n	80078d2 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c8:	f7fd fee4 	bl	8005694 <HAL_GetTick>
 80078cc:	1b80      	subs	r0, r0, r6
 80078ce:	4540      	cmp	r0, r8
 80078d0:	d8df      	bhi.n	8007892 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078d6:	0799      	lsls	r1, r3, #30
 80078d8:	d5f6      	bpl.n	80078c8 <HAL_RCC_OscConfig+0x314>
 80078da:	e727      	b.n	800772c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80078dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80078e8:	f7fd fed4 	bl	8005694 <HAL_GetTick>
 80078ec:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078ee:	e004      	b.n	80078fa <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078f0:	f7fd fed0 	bl	8005694 <HAL_GetTick>
 80078f4:	1b80      	subs	r0, r0, r6
 80078f6:	2802      	cmp	r0, #2
 80078f8:	d8cb      	bhi.n	8007892 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078fa:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80078fe:	0798      	lsls	r0, r3, #30
 8007900:	d4f6      	bmi.n	80078f0 <HAL_RCC_OscConfig+0x33c>
 8007902:	e735      	b.n	8007770 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800790a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800790c:	f7fd fec2 	bl	8005694 <HAL_GetTick>
 8007910:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007912:	6833      	ldr	r3, [r6, #0]
 8007914:	05d8      	lsls	r0, r3, #23
 8007916:	f53f aee2 	bmi.w	80076de <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800791a:	f7fd febb 	bl	8005694 <HAL_GetTick>
 800791e:	1bc0      	subs	r0, r0, r7
 8007920:	2802      	cmp	r0, #2
 8007922:	d9f6      	bls.n	8007912 <HAL_RCC_OscConfig+0x35e>
 8007924:	e7b5      	b.n	8007892 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800792a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800793c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800793e:	e78b      	b.n	8007858 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007940:	2001      	movs	r0, #1
}
 8007942:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007944:	f7fd fea6 	bl	8005694 <HAL_GetTick>
 8007948:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800794a:	e004      	b.n	8007956 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800794c:	f7fd fea2 	bl	8005694 <HAL_GetTick>
 8007950:	1b80      	subs	r0, r0, r6
 8007952:	2802      	cmp	r0, #2
 8007954:	d89d      	bhi.n	8007892 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007956:	682b      	ldr	r3, [r5, #0]
 8007958:	0199      	lsls	r1, r3, #6
 800795a:	d4f7      	bmi.n	800794c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800795c:	68e9      	ldr	r1, [r5, #12]
 800795e:	4b3a      	ldr	r3, [pc, #232]	; (8007a48 <HAL_RCC_OscConfig+0x494>)
 8007960:	6a22      	ldr	r2, [r4, #32]
 8007962:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007966:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007968:	400b      	ands	r3, r1
 800796a:	4313      	orrs	r3, r2
 800796c:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8007970:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007974:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8007978:	3801      	subs	r0, #1
 800797a:	0849      	lsrs	r1, r1, #1
 800797c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007980:	3901      	subs	r1, #1
 8007982:	0852      	lsrs	r2, r2, #1
 8007984:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007988:	3a01      	subs	r2, #1
 800798a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800798e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007990:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007992:	4e2c      	ldr	r6, [pc, #176]	; (8007a44 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8007994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007998:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800799a:	68eb      	ldr	r3, [r5, #12]
 800799c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079a0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80079a2:	f7fd fe77 	bl	8005694 <HAL_GetTick>
 80079a6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079a8:	e005      	b.n	80079b6 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079aa:	f7fd fe73 	bl	8005694 <HAL_GetTick>
 80079ae:	1b00      	subs	r0, r0, r4
 80079b0:	2802      	cmp	r0, #2
 80079b2:	f63f af6e 	bhi.w	8007892 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079b6:	6833      	ldr	r3, [r6, #0]
 80079b8:	019a      	lsls	r2, r3, #6
 80079ba:	d5f6      	bpl.n	80079aa <HAL_RCC_OscConfig+0x3f6>
 80079bc:	e6fe      	b.n	80077bc <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079be:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <HAL_RCC_OscConfig+0x490>)
 80079c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80079c4:	f042 0204 	orr.w	r2, r2, #4
 80079c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80079cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079d8:	e76f      	b.n	80078ba <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079da:	2801      	cmp	r0, #1
 80079dc:	f43f aeef 	beq.w	80077be <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80079e0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e2:	6a22      	ldr	r2, [r4, #32]
 80079e4:	f003 0103 	and.w	r1, r3, #3
 80079e8:	4291      	cmp	r1, r2
 80079ea:	f47f af0d 	bne.w	8007808 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079f4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80079fa:	f47f af05 	bne.w	8007808 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80079fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007a00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a04:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007a08:	f47f aefe 	bne.w	8007808 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007a0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a12:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007a16:	f47f aef7 	bne.w	8007808 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a1c:	0852      	lsrs	r2, r2, #1
 8007a1e:	3a01      	subs	r2, #1
 8007a20:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a24:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007a28:	f47f aeee 	bne.w	8007808 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007a2e:	0852      	lsrs	r2, r2, #1
 8007a30:	3a01      	subs	r2, #1
 8007a32:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a36:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8007a3a:	bf14      	ite	ne
 8007a3c:	2001      	movne	r0, #1
 8007a3e:	2000      	moveq	r0, #0
 8007a40:	e6bd      	b.n	80077be <HAL_RCC_OscConfig+0x20a>
 8007a42:	bf00      	nop
 8007a44:	40021000 	.word	0x40021000
 8007a48:	019f800c 	.word	0x019f800c

08007a4c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a4c:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x54>)
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	f002 020c 	and.w	r2, r2, #12
 8007a54:	2a04      	cmp	r2, #4
 8007a56:	d021      	beq.n	8007a9c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	f002 020c 	and.w	r2, r2, #12
 8007a5e:	2a08      	cmp	r2, #8
 8007a60:	d01c      	beq.n	8007a9c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	f002 020c 	and.w	r2, r2, #12
 8007a68:	2a0c      	cmp	r2, #12
 8007a6a:	d001      	beq.n	8007a70 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007a6c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007a6e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a70:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a72:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a74:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a76:	f3c0 1003 	ubfx	r0, r0, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a7a:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a7e:	1c42      	adds	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a80:	4808      	ldr	r0, [pc, #32]	; (8007aa4 <HAL_RCC_GetSysClockFreq+0x58>)
 8007a82:	fbb0 f0f2 	udiv	r0, r0, r2
 8007a86:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <HAL_RCC_GetSysClockFreq+0x54>)
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007a92:	3301      	adds	r3, #1
 8007a94:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007a96:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007a9a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007a9c:	4801      	ldr	r0, [pc, #4]	; (8007aa4 <HAL_RCC_GetSysClockFreq+0x58>)
 8007a9e:	4770      	bx	lr
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	00f42400 	.word	0x00f42400

08007aa8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	f000 80e9 	beq.w	8007c80 <HAL_RCC_ClockConfig+0x1d8>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007aae:	4a7c      	ldr	r2, [pc, #496]	; (8007ca0 <HAL_RCC_ClockConfig+0x1f8>)
{
 8007ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ab4:	6813      	ldr	r3, [r2, #0]
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	428b      	cmp	r3, r1
 8007abc:	460d      	mov	r5, r1
 8007abe:	4604      	mov	r4, r0
 8007ac0:	d20c      	bcs.n	8007adc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	f023 030f 	bic.w	r3, r3, #15
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007acc:	6813      	ldr	r3, [r2, #0]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	428b      	cmp	r3, r1
 8007ad4:	d002      	beq.n	8007adc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007ad6:	2001      	movs	r0, #1
}
 8007ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	07de      	lsls	r6, r3, #31
 8007ae0:	d563      	bpl.n	8007baa <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	2a03      	cmp	r2, #3
 8007ae6:	f000 809a 	beq.w	8007c1e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aea:	4b6e      	ldr	r3, [pc, #440]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aec:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aee:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007af0:	f000 8091 	beq.w	8007c16 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007af4:	055b      	lsls	r3, r3, #21
 8007af6:	d5ee      	bpl.n	8007ad6 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007af8:	f7ff ffa8 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007afc:	4b6a      	ldr	r3, [pc, #424]	; (8007ca8 <HAL_RCC_ClockConfig+0x200>)
 8007afe:	4298      	cmp	r0, r3
 8007b00:	f200 80c0 	bhi.w	8007c84 <HAL_RCC_ClockConfig+0x1dc>
 8007b04:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b06:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b0a:	4e66      	ldr	r6, [pc, #408]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007b0c:	68b3      	ldr	r3, [r6, #8]
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	431a      	orrs	r2, r3
 8007b14:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8007b16:	f7fd fdbd 	bl	8005694 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b1a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007b1e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b20:	e004      	b.n	8007b2c <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b22:	f7fd fdb7 	bl	8005694 <HAL_GetTick>
 8007b26:	1bc0      	subs	r0, r0, r7
 8007b28:	4540      	cmp	r0, r8
 8007b2a:	d871      	bhi.n	8007c10 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b2c:	68b3      	ldr	r3, [r6, #8]
 8007b2e:	6862      	ldr	r2, [r4, #4]
 8007b30:	f003 030c 	and.w	r3, r3, #12
 8007b34:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007b38:	d1f3      	bne.n	8007b22 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	079f      	lsls	r7, r3, #30
 8007b3e:	d436      	bmi.n	8007bae <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8007b40:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8007b44:	d103      	bne.n	8007b4e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b46:	68b3      	ldr	r3, [r6, #8]
 8007b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b4c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b4e:	4e54      	ldr	r6, [pc, #336]	; (8007ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8007b50:	6833      	ldr	r3, [r6, #0]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	42ab      	cmp	r3, r5
 8007b58:	d846      	bhi.n	8007be8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	075a      	lsls	r2, r3, #29
 8007b5e:	d506      	bpl.n	8007b6e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b60:	4950      	ldr	r1, [pc, #320]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007b62:	68e0      	ldr	r0, [r4, #12]
 8007b64:	688a      	ldr	r2, [r1, #8]
 8007b66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b6a:	4302      	orrs	r2, r0
 8007b6c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b6e:	071b      	lsls	r3, r3, #28
 8007b70:	d507      	bpl.n	8007b82 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b72:	4a4c      	ldr	r2, [pc, #304]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007b74:	6921      	ldr	r1, [r4, #16]
 8007b76:	6893      	ldr	r3, [r2, #8]
 8007b78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007b7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007b80:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b82:	f7ff ff63 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8007b86:	4a47      	ldr	r2, [pc, #284]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007b88:	4c48      	ldr	r4, [pc, #288]	; (8007cac <HAL_RCC_ClockConfig+0x204>)
 8007b8a:	6892      	ldr	r2, [r2, #8]
 8007b8c:	4948      	ldr	r1, [pc, #288]	; (8007cb0 <HAL_RCC_ClockConfig+0x208>)
 8007b8e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007b92:	4603      	mov	r3, r0
 8007b94:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007b96:	4847      	ldr	r0, [pc, #284]	; (8007cb4 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b98:	f002 021f 	and.w	r2, r2, #31
 8007b9c:	40d3      	lsrs	r3, r2
 8007b9e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007ba0:	6800      	ldr	r0, [r0, #0]
}
 8007ba2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007ba6:	f7fd bd33 	b.w	8005610 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007baa:	0798      	lsls	r0, r3, #30
 8007bac:	d5cf      	bpl.n	8007b4e <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bae:	0758      	lsls	r0, r3, #29
 8007bb0:	d504      	bpl.n	8007bbc <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bb2:	493c      	ldr	r1, [pc, #240]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007bb4:	688a      	ldr	r2, [r1, #8]
 8007bb6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007bba:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bbc:	0719      	lsls	r1, r3, #28
 8007bbe:	d506      	bpl.n	8007bce <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007bc0:	4a38      	ldr	r2, [pc, #224]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007bc2:	6893      	ldr	r3, [r2, #8]
 8007bc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bc8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bcc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bce:	4a35      	ldr	r2, [pc, #212]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007bd0:	68a1      	ldr	r1, [r4, #8]
 8007bd2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bd4:	4e32      	ldr	r6, [pc, #200]	; (8007ca0 <HAL_RCC_ClockConfig+0x1f8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bde:	6833      	ldr	r3, [r6, #0]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	42ab      	cmp	r3, r5
 8007be6:	d9b8      	bls.n	8007b5a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be8:	6833      	ldr	r3, [r6, #0]
 8007bea:	f023 030f 	bic.w	r3, r3, #15
 8007bee:	432b      	orrs	r3, r5
 8007bf0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007bf2:	f7fd fd4f 	bl	8005694 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007bfa:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfc:	6833      	ldr	r3, [r6, #0]
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	42ab      	cmp	r3, r5
 8007c04:	d0a9      	beq.n	8007b5a <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c06:	f7fd fd45 	bl	8005694 <HAL_GetTick>
 8007c0a:	1bc0      	subs	r0, r0, r7
 8007c0c:	4540      	cmp	r0, r8
 8007c0e:	d9f5      	bls.n	8007bfc <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8007c10:	2003      	movs	r0, #3
}
 8007c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c16:	039a      	lsls	r2, r3, #14
 8007c18:	f53f af6e 	bmi.w	8007af8 <HAL_RCC_ClockConfig+0x50>
 8007c1c:	e75b      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c1e:	4821      	ldr	r0, [pc, #132]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007c20:	6801      	ldr	r1, [r0, #0]
 8007c22:	0189      	lsls	r1, r1, #6
 8007c24:	f57f af57 	bpl.w	8007ad6 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c28:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c2a:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c2c:	68c0      	ldr	r0, [r0, #12]
      if(pllfreq > 80000000U)
 8007c2e:	4f1e      	ldr	r7, [pc, #120]	; (8007ca8 <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c30:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8007c34:	1c4e      	adds	r6, r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c36:	4920      	ldr	r1, [pc, #128]	; (8007cb8 <HAL_RCC_ClockConfig+0x210>)
 8007c38:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c3c:	4e19      	ldr	r6, [pc, #100]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c3e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007c42:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c46:	68f0      	ldr	r0, [r6, #12]
 8007c48:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8007c50:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8007c54:	42b9      	cmp	r1, r7
 8007c56:	d920      	bls.n	8007c9a <HAL_RCC_ClockConfig+0x1f2>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c58:	68b1      	ldr	r1, [r6, #8]
 8007c5a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8007c5e:	d005      	beq.n	8007c6c <HAL_RCC_ClockConfig+0x1c4>
 8007c60:	f013 0902 	ands.w	r9, r3, #2
 8007c64:	f43f af51 	beq.w	8007b0a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	b9b3      	cbnz	r3, 8007c9a <HAL_RCC_ClockConfig+0x1f2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c6c:	490d      	ldr	r1, [pc, #52]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007c6e:	688b      	ldr	r3, [r1, #8]
 8007c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c78:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c7a:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007c7e:	e744      	b.n	8007b0a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8007c80:	2001      	movs	r0, #1
}
 8007c82:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c84:	4a07      	ldr	r2, [pc, #28]	; (8007ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8007c86:	6893      	ldr	r3, [r2, #8]
 8007c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007c98:	e737      	b.n	8007b0a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007c9a:	f04f 0900 	mov.w	r9, #0
 8007c9e:	e734      	b.n	8007b0a <HAL_RCC_ClockConfig+0x62>
 8007ca0:	40022000 	.word	0x40022000
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	04c4b400 	.word	0x04c4b400
 8007cac:	0800b90c 	.word	0x0800b90c
 8007cb0:	20000dd0 	.word	0x20000dd0
 8007cb4:	20000dd8 	.word	0x20000dd8
 8007cb8:	00f42400 	.word	0x00f42400

08007cbc <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8007cbc:	4b01      	ldr	r3, [pc, #4]	; (8007cc4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000dd0 	.word	0x20000dd0

08007cc8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007cca:	4a06      	ldr	r2, [pc, #24]	; (8007ce4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007cce:	4906      	ldr	r1, [pc, #24]	; (8007ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007cd0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007cd4:	6808      	ldr	r0, [r1, #0]
 8007cd6:	5cd3      	ldrb	r3, [r2, r3]
 8007cd8:	f003 031f 	and.w	r3, r3, #31
}
 8007cdc:	40d8      	lsrs	r0, r3
 8007cde:	4770      	bx	lr
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	0800b91c 	.word	0x0800b91c
 8007ce8:	20000dd0 	.word	0x20000dd0

08007cec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007cee:	4a06      	ldr	r2, [pc, #24]	; (8007d08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007cf2:	4906      	ldr	r1, [pc, #24]	; (8007d0c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cf4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007cf8:	6808      	ldr	r0, [r1, #0]
 8007cfa:	5cd3      	ldrb	r3, [r2, r3]
 8007cfc:	f003 031f 	and.w	r3, r3, #31
}
 8007d00:	40d8      	lsrs	r0, r3
 8007d02:	4770      	bx	lr
 8007d04:	40021000 	.word	0x40021000
 8007d08:	0800b91c 	.word	0x0800b91c
 8007d0c:	20000dd0 	.word	0x20000dd0

08007d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d14:	6803      	ldr	r3, [r0, #0]
{
 8007d16:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d18:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007d1c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d1e:	d056      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d20:	4b9f      	ldr	r3, [pc, #636]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007d22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d24:	00d5      	lsls	r5, r2, #3
 8007d26:	f140 810c 	bpl.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8007d2a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d2c:	4d9d      	ldr	r5, [pc, #628]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007d2e:	682b      	ldr	r3, [r5, #0]
 8007d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d34:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d36:	f7fd fcad 	bl	8005694 <HAL_GetTick>
 8007d3a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d3c:	e005      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d3e:	f7fd fca9 	bl	8005694 <HAL_GetTick>
 8007d42:	1b83      	subs	r3, r0, r6
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	f200 8107 	bhi.w	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	05d8      	lsls	r0, r3, #23
 8007d4e:	d5f6      	bpl.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d50:	4d93      	ldr	r5, [pc, #588]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007d52:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d56:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007d5a:	d027      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007d5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d025      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d62:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d66:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d6e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d72:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d76:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d7e:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d80:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007d84:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d88:	f140 8108 	bpl.w	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fd fc82 	bl	8005694 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d90:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007d94:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d96:	e005      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d98:	f7fd fc7c 	bl	8005694 <HAL_GetTick>
 8007d9c:	1b80      	subs	r0, r0, r6
 8007d9e:	4540      	cmp	r0, r8
 8007da0:	f200 80da 	bhi.w	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007da4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007da8:	079b      	lsls	r3, r3, #30
 8007daa:	d5f5      	bpl.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dae:	497c      	ldr	r1, [pc, #496]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007db0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007db4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dbe:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007dc0:	b127      	cbz	r7, 8007dcc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dc2:	4a77      	ldr	r2, [pc, #476]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007dc4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dca:	6593      	str	r3, [r2, #88]	; 0x58
 8007dcc:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007dce:	07de      	lsls	r6, r3, #31
 8007dd0:	d508      	bpl.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007dd2:	4973      	ldr	r1, [pc, #460]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007dd4:	6865      	ldr	r5, [r4, #4]
 8007dd6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007dda:	f022 0203 	bic.w	r2, r2, #3
 8007dde:	432a      	orrs	r2, r5
 8007de0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007de4:	079d      	lsls	r5, r3, #30
 8007de6:	d508      	bpl.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007de8:	496d      	ldr	r1, [pc, #436]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007dea:	68a5      	ldr	r5, [r4, #8]
 8007dec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007df0:	f022 020c 	bic.w	r2, r2, #12
 8007df4:	432a      	orrs	r2, r5
 8007df6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dfa:	0759      	lsls	r1, r3, #29
 8007dfc:	d508      	bpl.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dfe:	4968      	ldr	r1, [pc, #416]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e00:	68e5      	ldr	r5, [r4, #12]
 8007e02:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e06:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007e0a:	432a      	orrs	r2, r5
 8007e0c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e10:	071a      	lsls	r2, r3, #28
 8007e12:	d508      	bpl.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e14:	4962      	ldr	r1, [pc, #392]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e16:	6925      	ldr	r5, [r4, #16]
 8007e18:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e1c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007e20:	432a      	orrs	r2, r5
 8007e22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e26:	069f      	lsls	r7, r3, #26
 8007e28:	d508      	bpl.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e2a:	495d      	ldr	r1, [pc, #372]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e2c:	6965      	ldr	r5, [r4, #20]
 8007e2e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e36:	432a      	orrs	r2, r5
 8007e38:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e3c:	065e      	lsls	r6, r3, #25
 8007e3e:	d508      	bpl.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e40:	4957      	ldr	r1, [pc, #348]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e42:	69a5      	ldr	r5, [r4, #24]
 8007e44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e48:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007e4c:	432a      	orrs	r2, r5
 8007e4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e52:	061d      	lsls	r5, r3, #24
 8007e54:	d508      	bpl.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e56:	4952      	ldr	r1, [pc, #328]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e58:	69e5      	ldr	r5, [r4, #28]
 8007e5a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e5e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007e62:	432a      	orrs	r2, r5
 8007e64:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e68:	05d9      	lsls	r1, r3, #23
 8007e6a:	d508      	bpl.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e6c:	494c      	ldr	r1, [pc, #304]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e6e:	6a25      	ldr	r5, [r4, #32]
 8007e70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e74:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007e78:	432a      	orrs	r2, r5
 8007e7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e7e:	059a      	lsls	r2, r3, #22
 8007e80:	d508      	bpl.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e82:	4947      	ldr	r1, [pc, #284]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e84:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007e86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e8a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007e8e:	432a      	orrs	r2, r5
 8007e90:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e94:	055f      	lsls	r7, r3, #21
 8007e96:	d50b      	bpl.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e98:	4941      	ldr	r1, [pc, #260]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007e9a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007e9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ea0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007ea4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ea6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eaa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007eae:	d055      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007eb0:	051e      	lsls	r6, r3, #20
 8007eb2:	d50b      	bpl.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007eb4:	493a      	ldr	r1, [pc, #232]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007eb6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007eb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ebc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007ec0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ec2:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ec6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007eca:	d04c      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ecc:	04dd      	lsls	r5, r3, #19
 8007ece:	d50b      	bpl.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ed0:	4933      	ldr	r1, [pc, #204]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007ed2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007ed4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ed8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007edc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ede:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ee2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ee6:	d043      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ee8:	0499      	lsls	r1, r3, #18
 8007eea:	d50b      	bpl.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eec:	492c      	ldr	r1, [pc, #176]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007eee:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007ef0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ef4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007ef8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007efa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007efe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f02:	d03a      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f04:	045a      	lsls	r2, r3, #17
 8007f06:	d50b      	bpl.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f08:	4925      	ldr	r1, [pc, #148]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007f0a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007f0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007f10:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007f14:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f16:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f1e:	d031      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f20:	041b      	lsls	r3, r3, #16
 8007f22:	d50b      	bpl.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f24:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007f26:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f28:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f2c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007f30:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f32:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f3a:	d028      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8007f3c:	b002      	add	sp, #8
 8007f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f48:	659a      	str	r2, [r3, #88]	; 0x58
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007f54:	2701      	movs	r7, #1
 8007f56:	e6e9      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8007f58:	2003      	movs	r0, #3
 8007f5a:	e731      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f5c:	68ca      	ldr	r2, [r1, #12]
 8007f5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f62:	60ca      	str	r2, [r1, #12]
 8007f64:	e7a4      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f66:	68ca      	ldr	r2, [r1, #12]
 8007f68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f6c:	60ca      	str	r2, [r1, #12]
 8007f6e:	e7ad      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f70:	68ca      	ldr	r2, [r1, #12]
 8007f72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f76:	60ca      	str	r2, [r1, #12]
 8007f78:	e7b6      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f7a:	68ca      	ldr	r2, [r1, #12]
 8007f7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f80:	60ca      	str	r2, [r1, #12]
 8007f82:	e7bf      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f84:	68ca      	ldr	r2, [r1, #12]
 8007f86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f8a:	60ca      	str	r2, [r1, #12]
 8007f8c:	e7c8      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f8e:	68d3      	ldr	r3, [r2, #12]
 8007f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f94:	60d3      	str	r3, [r2, #12]
}
 8007f96:	b002      	add	sp, #8
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	e706      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007fa0:	40021000 	.word	0x40021000
 8007fa4:	40007000 	.word	0x40007000

08007fa8 <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007faa:	b083      	sub	sp, #12
 8007fac:	460c      	mov	r4, r1
 8007fae:	4617      	mov	r7, r2
 8007fb0:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fb2:	f7fd fb6f 	bl	8005694 <HAL_GetTick>
 8007fb6:	4427      	add	r7, r4
 8007fb8:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 8007fba:	f7fd fb6b 	bl	8005694 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fbe:	4b2e      	ldr	r3, [pc, #184]	; (8008078 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fc6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007fca:	0d1b      	lsrs	r3, r3, #20
 8007fcc:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8007fd0:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fd2:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fd4:	682a      	ldr	r2, [r5, #0]
 8007fd6:	1c61      	adds	r1, r4, #1
 8007fd8:	6893      	ldr	r3, [r2, #8]
 8007fda:	d10d      	bne.n	8007ff8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8007fdc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007fe0:	d007      	beq.n	8007ff2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007fe2:	7b13      	ldrb	r3, [r2, #12]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007fe8:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007fea:	6893      	ldr	r3, [r2, #8]
 8007fec:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007ff0:	d1f7      	bne.n	8007fe2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8007ff2:	2000      	movs	r0, #0
}
 8007ff4:	b003      	add	sp, #12
 8007ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007ff8:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007ffc:	d0f9      	beq.n	8007ff2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007ffe:	7b13      	ldrb	r3, [r2, #12]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8008004:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008006:	f7fd fb45 	bl	8005694 <HAL_GetTick>
 800800a:	1bc0      	subs	r0, r0, r7
 800800c:	42b0      	cmp	r0, r6
 800800e:	d208      	bcs.n	8008022 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8008010:	9a01      	ldr	r2, [sp, #4]
      count--;
 8008012:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8008014:	2a00      	cmp	r2, #0
      count--;
 8008016:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800801a:	bf08      	it	eq
 800801c:	2600      	moveq	r6, #0
      count--;
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	e7d8      	b.n	8007fd4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008022:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008026:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008028:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800802c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008030:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008032:	d014      	beq.n	800805e <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008034:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008036:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800803a:	d007      	beq.n	800804c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 800803c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800803e:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8008040:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008044:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008048:	2003      	movs	r0, #3
 800804a:	e7d3      	b.n	8007ff4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e7ee      	b.n	800803c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800805e:	68aa      	ldr	r2, [r5, #8]
 8008060:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008064:	d002      	beq.n	800806c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008066:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800806a:	d1e3      	bne.n	8008034 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	e7de      	b.n	8008034 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 8008076:	bf00      	nop
 8008078:	20000dd0 	.word	0x20000dd0

0800807c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	460d      	mov	r5, r1
 8008082:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008084:	f7fd fb06 	bl	8005694 <HAL_GetTick>
 8008088:	3564      	adds	r5, #100	; 0x64
 800808a:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 800808c:	f7fd fb02 	bl	8005694 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008090:	4b26      	ldr	r3, [pc, #152]	; (800812c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008092:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800809a:	fb04 f303 	mul.w	r3, r4, r3
 800809e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080a0:	6893      	ldr	r3, [r2, #8]
 80080a2:	061a      	lsls	r2, r3, #24
 80080a4:	d510      	bpl.n	80080c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4c>
 80080a6:	4605      	mov	r5, r0
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080a8:	f7fd faf4 	bl	8005694 <HAL_GetTick>
 80080ac:	1b43      	subs	r3, r0, r5
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	d20d      	bcs.n	80080ce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x52>
      if(count == 0U)
 80080b2:	9a01      	ldr	r2, [sp, #4]
      count--;
 80080b4:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080b6:	6831      	ldr	r1, [r6, #0]
      count--;
 80080b8:	3b01      	subs	r3, #1
 80080ba:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080bc:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 80080be:	2a00      	cmp	r2, #0
 80080c0:	bf08      	it	eq
 80080c2:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080c4:	061b      	lsls	r3, r3, #24
 80080c6:	d4ef      	bmi.n	80080a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
  return HAL_OK;
 80080c8:	2000      	movs	r0, #0
}
 80080ca:	b002      	add	sp, #8
 80080cc:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ce:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080d2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080dc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080de:	d015      	beq.n	800810c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080e0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80080e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80080e6:	d008      	beq.n	80080fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
        hspi->State = HAL_SPI_STATE_READY;
 80080e8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80080ea:	2300      	movs	r3, #0
 80080ec:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80080ee:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80080f2:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
}
 80080f6:	b002      	add	sp, #8
 80080f8:	bd70      	pop	{r4, r5, r6, pc}
          SPI_RESET_CRC(hspi);
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e7ed      	b.n	80080e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800810c:	68b2      	ldr	r2, [r6, #8]
 800810e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008112:	d002      	beq.n	800811a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008114:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008118:	d1e2      	bne.n	80080e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
          __HAL_SPI_DISABLE(hspi);
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008120:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008122:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8008124:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008128:	d1de      	bne.n	80080e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 800812a:	e7e6      	b.n	80080fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
 800812c:	20000dd0 	.word	0x20000dd0

08008130 <SPI_EndRxTxTransaction.constprop.0>:
  * @param  hspi SPI handle
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8008130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008132:	b083      	sub	sp, #12
 8008134:	460d      	mov	r5, r1
 8008136:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008138:	f7fd faac 	bl	8005694 <HAL_GetTick>
 800813c:	f105 0664 	add.w	r6, r5, #100	; 0x64
 8008140:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8008142:	f7fd faa7 	bl	8005694 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008146:	4b33      	ldr	r3, [pc, #204]	; (8008214 <SPI_EndRxTxTransaction.constprop.0+0xe4>)
  while ((hspi->Instance->SR & Fifo) != State)
 8008148:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008150:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008154:	0d1b      	lsrs	r3, r3, #20
 8008156:	fb06 f303 	mul.w	r3, r6, r3
 800815a:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800815c:	6893      	ldr	r3, [r2, #8]
 800815e:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008162:	d011      	beq.n	8008188 <SPI_EndRxTxTransaction.constprop.0+0x58>
 8008164:	4607      	mov	r7, r0
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008166:	f7fd fa95 	bl	8005694 <HAL_GetTick>
 800816a:	1bc0      	subs	r0, r0, r7
 800816c:	4286      	cmp	r6, r0
 800816e:	d91d      	bls.n	80081ac <SPI_EndRxTxTransaction.constprop.0+0x7c>
      if(count == 0U)
 8008170:	9a01      	ldr	r2, [sp, #4]
      count--;
 8008172:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8008174:	6821      	ldr	r1, [r4, #0]
      count--;
 8008176:	3b01      	subs	r3, #1
 8008178:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800817a:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 800817c:	2a00      	cmp	r2, #0
 800817e:	bf08      	it	eq
 8008180:	2600      	moveq	r6, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8008182:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008186:	d1ee      	bne.n	8008166 <SPI_EndRxTxTransaction.constprop.0+0x36>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008188:	4629      	mov	r1, r5
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff ff76 	bl	800807c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8008190:	b928      	cbnz	r0, 800819e <SPI_EndRxTxTransaction.constprop.0+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008192:	462a      	mov	r2, r5
 8008194:	2164      	movs	r1, #100	; 0x64
 8008196:	4620      	mov	r0, r4
 8008198:	f7ff ff06 	bl	8007fa8 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 800819c:	b1f0      	cbz	r0, 80081dc <SPI_EndRxTxTransaction.constprop.0+0xac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800819e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80081a0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a2:	f043 0320 	orr.w	r3, r3, #32
 80081a6:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 80081a8:	b003      	add	sp, #12
 80081aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ac:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081b0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081ba:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081bc:	d019      	beq.n	80081f2 <SPI_EndRxTxTransaction.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80081c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80081c4:	d00c      	beq.n	80081e0 <SPI_EndRxTxTransaction.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80081ce:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d0:	f043 0320 	orr.w	r3, r3, #32
 80081d4:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80081d6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 80081da:	2003      	movs	r0, #3
}
 80081dc:	b003      	add	sp, #12
 80081de:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SPI_RESET_CRC(hspi);
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e7e9      	b.n	80081c6 <SPI_EndRxTxTransaction.constprop.0+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f2:	68a2      	ldr	r2, [r4, #8]
 80081f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80081f8:	d002      	beq.n	8008200 <SPI_EndRxTxTransaction.constprop.0+0xd0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80081fe:	d1de      	bne.n	80081be <SPI_EndRxTxTransaction.constprop.0+0x8e>
          __HAL_SPI_DISABLE(hspi);
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008206:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008208:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800820a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800820e:	d1da      	bne.n	80081c6 <SPI_EndRxTxTransaction.constprop.0+0x96>
 8008210:	e7e6      	b.n	80081e0 <SPI_EndRxTxTransaction.constprop.0+0xb0>
 8008212:	bf00      	nop
 8008214:	20000dd0 	.word	0x20000dd0

08008218 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008218:	2800      	cmp	r0, #0
 800821a:	d07f      	beq.n	800831c <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800821c:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008226:	f1bc 0f00 	cmp.w	ip, #0
 800822a:	d05c      	beq.n	80082e6 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800822c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800822e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008232:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008236:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008238:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800823c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800823e:	2b00      	cmp	r3, #0
 8008240:	d05e      	beq.n	8008300 <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 8008242:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008244:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008246:	2302      	movs	r3, #2
 8008248:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800824c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800824e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8008252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008256:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008258:	d94c      	bls.n	80082f4 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800825a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800825e:	d15f      	bne.n	8008320 <HAL_SPI_Init+0x108>
 8008260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008262:	2700      	movs	r7, #0
 8008264:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008268:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800826c:	6925      	ldr	r5, [r4, #16]
 800826e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8008272:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8008276:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800827a:	4333      	orrs	r3, r6
 800827c:	f005 0502 	and.w	r5, r5, #2
 8008280:	432b      	orrs	r3, r5
 8008282:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008284:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008288:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800828c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800828e:	432b      	orrs	r3, r5
 8008290:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008294:	f002 0208 	and.w	r2, r2, #8
 8008298:	ea42 0208 	orr.w	r2, r2, r8
 800829c:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082a0:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082a4:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082a8:	ea43 030e 	orr.w	r3, r3, lr
 80082ac:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082b0:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082b4:	4333      	orrs	r3, r6
 80082b6:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082ba:	f00c 0c10 	and.w	ip, ip, #16
 80082be:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082c2:	432b      	orrs	r3, r5
 80082c4:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082c6:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082ca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082cc:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082ce:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082d0:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80082d6:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082d8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082da:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082dc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 80082e0:	4610      	mov	r0, r2
}
 80082e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082e6:	6843      	ldr	r3, [r0, #4]
 80082e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ec:	d0a1      	beq.n	8008232 <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082ee:	f8c0 c01c 	str.w	ip, [r0, #28]
 80082f2:	e79e      	b.n	8008232 <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082f4:	d00c      	beq.n	8008310 <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082f6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082fa:	2000      	movs	r0, #0
 80082fc:	62a0      	str	r0, [r4, #40]	; 0x28
 80082fe:	e7b3      	b.n	8008268 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 8008300:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008304:	4620      	mov	r0, r4
 8008306:	f7fc f96d 	bl	80045e4 <HAL_SPI_MspInit>
 800830a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800830e:	e798      	b.n	8008242 <HAL_SPI_Init+0x2a>
 8008310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008312:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8008316:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 800831a:	e7a5      	b.n	8008268 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 800831c:	2001      	movs	r0, #1
}
 800831e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008320:	2700      	movs	r7, #0
 8008322:	e7ea      	b.n	80082fa <HAL_SPI_Init+0xe2>

08008324 <HAL_SPI_TransmitReceive_IT>:
{
 8008324:	b470      	push	{r4, r5, r6}
 8008326:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008328:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800832c:	2801      	cmp	r0, #1
 800832e:	d046      	beq.n	80083be <HAL_SPI_TransmitReceive_IT+0x9a>
  tmp_state           = hspi->State;
 8008330:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 8008334:	2501      	movs	r5, #1
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008336:	42a8      	cmp	r0, r5
  tmp_state           = hspi->State;
 8008338:	b2c6      	uxtb	r6, r0
  __HAL_LOCK(hspi);
 800833a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800833e:	d00e      	beq.n	800835e <HAL_SPI_TransmitReceive_IT+0x3a>
 8008340:	6860      	ldr	r0, [r4, #4]
 8008342:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8008346:	d005      	beq.n	8008354 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 8008348:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 800834a:	2300      	movs	r3, #0
 800834c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8008350:	bc70      	pop	{r4, r5, r6}
 8008352:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008354:	68a0      	ldr	r0, [r4, #8]
 8008356:	2800      	cmp	r0, #0
 8008358:	d1f6      	bne.n	8008348 <HAL_SPI_TransmitReceive_IT+0x24>
 800835a:	2e04      	cmp	r6, #4
 800835c:	d1f4      	bne.n	8008348 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800835e:	b361      	cbz	r1, 80083ba <HAL_SPI_TransmitReceive_IT+0x96>
 8008360:	b35a      	cbz	r2, 80083ba <HAL_SPI_TransmitReceive_IT+0x96>
 8008362:	b353      	cbz	r3, 80083ba <HAL_SPI_TransmitReceive_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008364:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008368:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800836a:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800836c:	bf1c      	itt	ne
 800836e:	2005      	movne	r0, #5
 8008370:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008374:	68e0      	ldr	r0, [r4, #12]
  hspi->TxXferSize  = Size;
 8008376:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008378:	2100      	movs	r1, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800837a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800837e:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008380:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8008382:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008384:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008388:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800838c:	d91c      	bls.n	80083c8 <HAL_SPI_TransmitReceive_IT+0xa4>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <HAL_SPI_TransmitReceive_IT+0xbc>)
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008390:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <HAL_SPI_TransmitReceive_IT+0xc0>)
 8008392:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800839e:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80083a6:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80083ae:	d109      	bne.n	80083c4 <HAL_SPI_TransmitReceive_IT+0xa0>
    __HAL_SPI_ENABLE(hspi);
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e7c7      	b.n	800834a <HAL_SPI_TransmitReceive_IT+0x26>
    errorcode = HAL_ERROR;
 80083ba:	2001      	movs	r0, #1
 80083bc:	e7c5      	b.n	800834a <HAL_SPI_TransmitReceive_IT+0x26>
  __HAL_LOCK(hspi);
 80083be:	2002      	movs	r0, #2
}
 80083c0:	bc70      	pop	{r4, r5, r6}
 80083c2:	4770      	bx	lr
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7c0      	b.n	800834a <HAL_SPI_TransmitReceive_IT+0x26>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80083c8:	4907      	ldr	r1, [pc, #28]	; (80083e8 <HAL_SPI_TransmitReceive_IT+0xc4>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80083ca:	4a08      	ldr	r2, [pc, #32]	; (80083ec <HAL_SPI_TransmitReceive_IT+0xc8>)
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80083cc:	2b01      	cmp	r3, #1
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80083ce:	e9c4 1213 	strd	r1, r2, [r4, #76]	; 0x4c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80083d2:	d8e0      	bhi.n	8008396 <HAL_SPI_TransmitReceive_IT+0x72>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083dc:	605a      	str	r2, [r3, #4]
 80083de:	e7df      	b.n	80083a0 <HAL_SPI_TransmitReceive_IT+0x7c>
 80083e0:	08008689 	.word	0x08008689
 80083e4:	08008605 	.word	0x08008605
 80083e8:	080083f9 	.word	0x080083f9
 80083ec:	08008711 	.word	0x08008711

080083f0 <HAL_SPI_RxCpltCallback>:
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop

080083f4 <HAL_SPI_ErrorCallback>:
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop

080083f8 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 80083f8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b01      	cmp	r3, #1
{
 8008400:	b510      	push	{r4, lr}
 8008402:	4604      	mov	r4, r0
  if (hspi->RxXferCount > 1U)
 8008404:	d922      	bls.n	800844c <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008406:	6801      	ldr	r1, [r0, #0]
 8008408:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800840a:	68cb      	ldr	r3, [r1, #12]
 800840c:	f822 3b02 	strh.w	r3, [r2], #2
    hspi->RxXferCount -= 2U;
 8008410:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008414:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8008416:	3b02      	subs	r3, #2
 8008418:	b29b      	uxth	r3, r3
 800841a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800841e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8008422:	b29b      	uxth	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	d00c      	beq.n	8008442 <SPI_2linesRxISR_8BIT+0x4a>
  if (hspi->RxXferCount == 0U)
 8008428:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800842c:	b29b      	uxth	r3, r3
 800842e:	b93b      	cbnz	r3, 8008440 <SPI_2linesRxISR_8BIT+0x48>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	6853      	ldr	r3, [r2, #4]
 8008434:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008438:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800843a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800843c:	b29b      	uxth	r3, r3
 800843e:	b19b      	cbz	r3, 8008468 <SPI_2linesRxISR_8BIT+0x70>
}
 8008440:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008442:	684b      	ldr	r3, [r1, #4]
 8008444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008448:	604b      	str	r3, [r1, #4]
 800844a:	e7ed      	b.n	8008428 <SPI_2linesRxISR_8BIT+0x30>
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800844c:	6802      	ldr	r2, [r0, #0]
 800844e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008450:	7b12      	ldrb	r2, [r2, #12]
 8008452:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8008454:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    hspi->pRxBuffPtr++;
 8008458:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 800845a:	3b01      	subs	r3, #1
 800845c:	b29b      	uxth	r3, r3
    hspi->pRxBuffPtr++;
 800845e:	3201      	adds	r2, #1
    hspi->RxXferCount--;
 8008460:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    hspi->pRxBuffPtr++;
 8008464:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8008466:	e7df      	b.n	8008428 <SPI_2linesRxISR_8BIT+0x30>
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008468:	f7fd f914 	bl	8005694 <HAL_GetTick>

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	6853      	ldr	r3, [r2, #4]
 8008470:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8008474:	4601      	mov	r1, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008476:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008478:	4620      	mov	r0, r4
 800847a:	f7ff fe59 	bl	8008130 <SPI_EndRxTxTransaction.constprop.0>
 800847e:	b118      	cbz	r0, 8008488 <SPI_2linesRxISR_8BIT+0x90>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008480:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008482:	f043 0320 	orr.w	r3, r3, #32
 8008486:	6623      	str	r3, [r4, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008488:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800848a:	b95b      	cbnz	r3, 80084a4 <SPI_2linesRxISR_8BIT+0xac>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800848c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008490:	2b04      	cmp	r3, #4
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008492:	f04f 0301 	mov.w	r3, #1
 8008496:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800849a:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800849c:	d009      	beq.n	80084b2 <SPI_2linesRxISR_8BIT+0xba>
        hspi->State = HAL_SPI_STATE_READY;
        /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->TxRxCpltCallback(hspi);
#else
        HAL_SPI_TxRxCpltCallback(hspi);
 800849e:	f7f9 f9cf 	bl	8001840 <HAL_SPI_TxRxCpltCallback>
}
 80084a2:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    else
    {
      hspi->State = HAL_SPI_STATE_READY;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7ff ffa2 	bl	80083f4 <HAL_SPI_ErrorCallback>
}
 80084b0:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 80084b2:	f7ff ff9d 	bl	80083f0 <HAL_SPI_RxCpltCallback>
}
 80084b6:	bd10      	pop	{r4, pc}

080084b8 <HAL_SPI_IRQHandler>:
{
 80084b8:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80084ba:	6802      	ldr	r2, [r0, #0]
 80084bc:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80084be:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80084c0:	f013 0f40 	tst.w	r3, #64	; 0x40
{
 80084c4:	b085      	sub	sp, #20
 80084c6:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80084c8:	f3c3 1580 	ubfx	r5, r3, #6, #1
 80084cc:	d105      	bne.n	80084da <HAL_SPI_IRQHandler+0x22>
 80084ce:	f013 0f01 	tst.w	r3, #1
 80084d2:	d002      	beq.n	80084da <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80084d4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80084d8:	d17a      	bne.n	80085d0 <HAL_SPI_IRQHandler+0x118>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80084da:	0798      	lsls	r0, r3, #30
 80084dc:	d501      	bpl.n	80084e2 <HAL_SPI_IRQHandler+0x2a>
 80084de:	0608      	lsls	r0, r1, #24
 80084e0:	d470      	bmi.n	80085c4 <HAL_SPI_IRQHandler+0x10c>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80084e2:	f013 0f20 	tst.w	r3, #32
 80084e6:	f3c3 1040 	ubfx	r0, r3, #5, #1
 80084ea:	d049      	beq.n	8008580 <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80084ec:	0688      	lsls	r0, r1, #26
 80084ee:	d545      	bpl.n	800857c <HAL_SPI_IRQHandler+0xc4>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80084f0:	b175      	cbz	r5, 8008510 <HAL_SPI_IRQHandler+0x58>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084f2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80084f6:	2803      	cmp	r0, #3
 80084f8:	d06c      	beq.n	80085d4 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084fc:	2500      	movs	r5, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084fe:	f040 0004 	orr.w	r0, r0, #4
 8008502:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008504:	9500      	str	r5, [sp, #0]
 8008506:	68d0      	ldr	r0, [r2, #12]
 8008508:	9000      	str	r0, [sp, #0]
 800850a:	6890      	ldr	r0, [r2, #8]
 800850c:	9000      	str	r0, [sp, #0]
 800850e:	9800      	ldr	r0, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008510:	6e20      	ldr	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008512:	2500      	movs	r5, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008514:	f040 0001 	orr.w	r0, r0, #1
 8008518:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800851a:	9502      	str	r5, [sp, #8]
 800851c:	6890      	ldr	r0, [r2, #8]
 800851e:	9002      	str	r0, [sp, #8]
 8008520:	6810      	ldr	r0, [r2, #0]
 8008522:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8008526:	6010      	str	r0, [r2, #0]
 8008528:	9802      	ldr	r0, [sp, #8]
 800852a:	f3c3 2300 	ubfx	r3, r3, #8, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800852e:	2b00      	cmp	r3, #0
 8008530:	d13e      	bne.n	80085b0 <HAL_SPI_IRQHandler+0xf8>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008532:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008534:	b313      	cbz	r3, 800857c <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008536:	6853      	ldr	r3, [r2, #4]
 8008538:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800853c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800853e:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008540:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8008542:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008546:	d04d      	beq.n	80085e4 <HAL_SPI_IRQHandler+0x12c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008548:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800854a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8008552:	b140      	cbz	r0, 8008566 <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008554:	4b25      	ldr	r3, [pc, #148]	; (80085ec <HAL_SPI_IRQHandler+0x134>)
 8008556:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008558:	f7fe f8a8 	bl	80066ac <HAL_DMA_Abort_IT>
 800855c:	b118      	cbz	r0, 8008566 <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800855e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008564:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008568:	b140      	cbz	r0, 800857c <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800856a:	4b20      	ldr	r3, [pc, #128]	; (80085ec <HAL_SPI_IRQHandler+0x134>)
 800856c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800856e:	f7fe f89d 	bl	80066ac <HAL_DMA_Abort_IT>
 8008572:	b118      	cbz	r0, 800857c <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008574:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800857a:	6623      	str	r3, [r4, #96]	; 0x60
}
 800857c:	b005      	add	sp, #20
 800857e:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008580:	b195      	cbz	r5, 80085a8 <HAL_SPI_IRQHandler+0xf0>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008582:	068d      	lsls	r5, r1, #26
 8008584:	d5fa      	bpl.n	800857c <HAL_SPI_IRQHandler+0xc4>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008586:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 800858a:	2d03      	cmp	r5, #3
 800858c:	d022      	beq.n	80085d4 <HAL_SPI_IRQHandler+0x11c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800858e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8008590:	f045 0504 	orr.w	r5, r5, #4
 8008594:	6625      	str	r5, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008596:	9000      	str	r0, [sp, #0]
 8008598:	68d0      	ldr	r0, [r2, #12]
 800859a:	9000      	str	r0, [sp, #0]
 800859c:	6890      	ldr	r0, [r2, #8]
 800859e:	9000      	str	r0, [sp, #0]
 80085a0:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80085a2:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80085a6:	e7c2      	b.n	800852e <HAL_SPI_IRQHandler+0x76>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80085a8:	05dd      	lsls	r5, r3, #23
 80085aa:	d5e7      	bpl.n	800857c <HAL_SPI_IRQHandler+0xc4>
 80085ac:	068b      	lsls	r3, r1, #26
 80085ae:	d5e5      	bpl.n	800857c <HAL_SPI_IRQHandler+0xc4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085b2:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085b4:	f043 0308 	orr.w	r3, r3, #8
 80085b8:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085ba:	9003      	str	r0, [sp, #12]
 80085bc:	6893      	ldr	r3, [r2, #8]
 80085be:	9303      	str	r3, [sp, #12]
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	e7b6      	b.n	8008532 <HAL_SPI_IRQHandler+0x7a>
    hspi->TxISR(hspi);
 80085c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80085c6:	4620      	mov	r0, r4
}
 80085c8:	b005      	add	sp, #20
 80085ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 80085ce:	4718      	bx	r3
    hspi->RxISR(hspi);
 80085d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80085d2:	e7f9      	b.n	80085c8 <HAL_SPI_IRQHandler+0x110>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085d4:	2300      	movs	r3, #0
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	68d3      	ldr	r3, [r2, #12]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	6893      	ldr	r3, [r2, #8]
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	9b01      	ldr	r3, [sp, #4]
        return;
 80085e2:	e7cb      	b.n	800857c <HAL_SPI_IRQHandler+0xc4>
        HAL_SPI_ErrorCallback(hspi);
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff ff05 	bl	80083f4 <HAL_SPI_ErrorCallback>
 80085ea:	e7c7      	b.n	800857c <HAL_SPI_IRQHandler+0xc4>
 80085ec:	080085f1 	.word	0x080085f1

080085f0 <SPI_DMAAbortOnError>:
{
 80085f0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80085fa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80085fc:	f7ff fefa 	bl	80083f4 <HAL_SPI_ErrorCallback>
}
 8008600:	bd08      	pop	{r3, pc}
 8008602:	bf00      	nop

08008604 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008604:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008606:	6801      	ldr	r1, [r0, #0]
 8008608:	f832 3b02 	ldrh.w	r3, [r2], #2
 800860c:	60cb      	str	r3, [r1, #12]
  hspi->TxXferCount--;
 800860e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008610:	6382      	str	r2, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8008612:	3b01      	subs	r3, #1
 8008614:	b29b      	uxth	r3, r3
 8008616:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8008618:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800861a:	b29b      	uxth	r3, r3
 800861c:	b953      	cbnz	r3, 8008634 <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800861e:	684b      	ldr	r3, [r1, #4]
 8008620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 8008624:	b510      	push	{r4, lr}
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008626:	604b      	str	r3, [r1, #4]
    if (hspi->RxXferCount == 0U)
 8008628:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800862c:	b29b      	uxth	r3, r3
 800862e:	4604      	mov	r4, r0
 8008630:	b10b      	cbz	r3, 8008636 <SPI_2linesTxISR_16BIT+0x32>
}
 8008632:	bd10      	pop	{r4, pc}
 8008634:	4770      	bx	lr
  tickstart = HAL_GetTick();
 8008636:	f7fd f82d 	bl	8005694 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	6853      	ldr	r3, [r2, #4]
 800863e:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8008642:	4601      	mov	r1, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008644:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff fd72 	bl	8008130 <SPI_EndRxTxTransaction.constprop.0>
 800864c:	b118      	cbz	r0, 8008656 <SPI_2linesTxISR_16BIT+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800864e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008650:	f043 0320 	orr.w	r3, r3, #32
 8008654:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008656:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008658:	b95b      	cbnz	r3, 8008672 <SPI_2linesTxISR_16BIT+0x6e>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800865a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800865e:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 8008660:	f04f 0301 	mov.w	r3, #1
 8008664:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8008668:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800866a:	d009      	beq.n	8008680 <SPI_2linesTxISR_16BIT+0x7c>
        HAL_SPI_TxRxCpltCallback(hspi);
 800866c:	f7f9 f8e8 	bl	8001840 <HAL_SPI_TxRxCpltCallback>
}
 8008670:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 8008672:	2301      	movs	r3, #1
 8008674:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff febb 	bl	80083f4 <HAL_SPI_ErrorCallback>
}
 800867e:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 8008680:	f7ff feb6 	bl	80083f0 <HAL_SPI_RxCpltCallback>
}
 8008684:	bd10      	pop	{r4, pc}
 8008686:	bf00      	nop

08008688 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008688:	6801      	ldr	r1, [r0, #0]
 800868a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800868c:	68cb      	ldr	r3, [r1, #12]
 800868e:	f822 3b02 	strh.w	r3, [r2], #2
  hspi->RxXferCount--;
 8008692:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008696:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8008698:	3b01      	subs	r3, #1
 800869a:	b29b      	uxth	r3, r3
 800869c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80086a0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	b94b      	cbnz	r3, 80086bc <SPI_2linesRxISR_16BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80086a8:	684b      	ldr	r3, [r1, #4]
 80086aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
{
 80086ae:	b510      	push	{r4, lr}
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80086b0:	604b      	str	r3, [r1, #4]
    if (hspi->TxXferCount == 0U)
 80086b2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	4604      	mov	r4, r0
 80086b8:	b10b      	cbz	r3, 80086be <SPI_2linesRxISR_16BIT+0x36>
}
 80086ba:	bd10      	pop	{r4, pc}
 80086bc:	4770      	bx	lr
  tickstart = HAL_GetTick();
 80086be:	f7fc ffe9 	bl	8005694 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	6853      	ldr	r3, [r2, #4]
 80086c6:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 80086ca:	4601      	mov	r1, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80086cc:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7ff fd2e 	bl	8008130 <SPI_EndRxTxTransaction.constprop.0>
 80086d4:	b118      	cbz	r0, 80086de <SPI_2linesRxISR_16BIT+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80086d8:	f043 0320 	orr.w	r3, r3, #32
 80086dc:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80086de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80086e0:	b95b      	cbnz	r3, 80086fa <SPI_2linesRxISR_16BIT+0x72>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80086e2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80086e6:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 80086e8:	f04f 0301 	mov.w	r3, #1
 80086ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80086f0:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80086f2:	d009      	beq.n	8008708 <SPI_2linesRxISR_16BIT+0x80>
        HAL_SPI_TxRxCpltCallback(hspi);
 80086f4:	f7f9 f8a4 	bl	8001840 <HAL_SPI_TxRxCpltCallback>
}
 80086f8:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008700:	4620      	mov	r0, r4
 8008702:	f7ff fe77 	bl	80083f4 <HAL_SPI_ErrorCallback>
}
 8008706:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 8008708:	f7ff fe72 	bl	80083f0 <HAL_SPI_RxCpltCallback>
}
 800870c:	bd10      	pop	{r4, pc}
 800870e:	bf00      	nop

08008710 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8008710:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008712:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hspi->TxXferCount >= 2U)
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b01      	cmp	r3, #1
{
 8008718:	b510      	push	{r4, lr}
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800871a:	6803      	ldr	r3, [r0, #0]
{
 800871c:	4604      	mov	r4, r0
  if (hspi->TxXferCount >= 2U)
 800871e:	d914      	bls.n	800874a <SPI_2linesTxISR_8BIT+0x3a>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008720:	f832 1b02 	ldrh.w	r1, [r2], #2
 8008724:	60d9      	str	r1, [r3, #12]
    hspi->TxXferCount -= 2U;
 8008726:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008728:	6382      	str	r2, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800872a:	3b02      	subs	r3, #2
 800872c:	b29b      	uxth	r3, r3
 800872e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8008730:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008732:	b29b      	uxth	r3, r3
 8008734:	b943      	cbnz	r3, 8008748 <SPI_2linesTxISR_8BIT+0x38>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008736:	6822      	ldr	r2, [r4, #0]
 8008738:	6853      	ldr	r3, [r2, #4]
 800873a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873e:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8008740:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008744:	b29b      	uxth	r3, r3
 8008746:	b153      	cbz	r3, 800875e <SPI_2linesTxISR_8BIT+0x4e>
}
 8008748:	bd10      	pop	{r4, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800874a:	7812      	ldrb	r2, [r2, #0]
 800874c:	731a      	strb	r2, [r3, #12]
    hspi->TxXferCount--;
 800874e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr++;
 8008750:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8008752:	3b01      	subs	r3, #1
 8008754:	b29b      	uxth	r3, r3
    hspi->pTxBuffPtr++;
 8008756:	3201      	adds	r2, #1
    hspi->TxXferCount--;
 8008758:	87c3      	strh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr++;
 800875a:	6382      	str	r2, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 800875c:	e7e8      	b.n	8008730 <SPI_2linesTxISR_8BIT+0x20>
  tickstart = HAL_GetTick();
 800875e:	f7fc ff99 	bl	8005694 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008762:	6822      	ldr	r2, [r4, #0]
 8008764:	6853      	ldr	r3, [r2, #4]
 8008766:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 800876a:	4601      	mov	r1, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800876c:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff fcde 	bl	8008130 <SPI_EndRxTxTransaction.constprop.0>
 8008774:	b118      	cbz	r0, 800877e <SPI_2linesTxISR_8BIT+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008776:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008778:	f043 0320 	orr.w	r3, r3, #32
 800877c:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800877e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008780:	b95b      	cbnz	r3, 800879a <SPI_2linesTxISR_8BIT+0x8a>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008782:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008786:	2b04      	cmp	r3, #4
        hspi->State = HAL_SPI_STATE_READY;
 8008788:	f04f 0301 	mov.w	r3, #1
 800878c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8008790:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008792:	d009      	beq.n	80087a8 <SPI_2linesTxISR_8BIT+0x98>
        HAL_SPI_TxRxCpltCallback(hspi);
 8008794:	f7f9 f854 	bl	8001840 <HAL_SPI_TxRxCpltCallback>
}
 8008798:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 800879a:	2301      	movs	r3, #1
 800879c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80087a0:	4620      	mov	r0, r4
 80087a2:	f7ff fe27 	bl	80083f4 <HAL_SPI_ErrorCallback>
}
 80087a6:	bd10      	pop	{r4, pc}
        HAL_SPI_RxCpltCallback(hspi);
 80087a8:	f7ff fe22 	bl	80083f0 <HAL_SPI_RxCpltCallback>
}
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop

080087b0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b0:	6a03      	ldr	r3, [r0, #32]
 80087b2:	f023 0301 	bic.w	r3, r3, #1
 80087b6:	6203      	str	r3, [r0, #32]
{
 80087b8:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087be:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087c0:	4f18      	ldr	r7, [pc, #96]	; (8008824 <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 80087c2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80087c4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80087ca:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087d2:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 80087d4:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 80087d8:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087dc:	d00e      	beq.n	80087fc <TIM_OC1_SetConfig+0x4c>
 80087de:	4c12      	ldr	r4, [pc, #72]	; (8008828 <TIM_OC1_SetConfig+0x78>)
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d00b      	beq.n	80087fc <TIM_OC1_SetConfig+0x4c>
 80087e4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d007      	beq.n	80087fc <TIM_OC1_SetConfig+0x4c>
 80087ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80087f0:	42a0      	cmp	r0, r4
 80087f2:	d003      	beq.n	80087fc <TIM_OC1_SetConfig+0x4c>
 80087f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d10b      	bne.n	8008814 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087fc:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80087fe:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008802:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008804:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008808:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800880c:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800880e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008812:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008814:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008816:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008818:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800881a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 800881c:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800881e:	6203      	str	r3, [r0, #32]
}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40012c00 	.word	0x40012c00
 8008828:	40013400 	.word	0x40013400

0800882c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800882c:	6a03      	ldr	r3, [r0, #32]
 800882e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008832:	6203      	str	r3, [r0, #32]
{
 8008834:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008838:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800883a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800883c:	4f19      	ldr	r7, [pc, #100]	; (80088a4 <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800883e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8008840:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008842:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8008846:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800884a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800884e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008850:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8008854:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008858:	d00f      	beq.n	800887a <TIM_OC3_SetConfig+0x4e>
 800885a:	4c13      	ldr	r4, [pc, #76]	; (80088a8 <TIM_OC3_SetConfig+0x7c>)
 800885c:	42a0      	cmp	r0, r4
 800885e:	d00c      	beq.n	800887a <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008860:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8008864:	42a0      	cmp	r0, r4
 8008866:	d00f      	beq.n	8008888 <TIM_OC3_SetConfig+0x5c>
 8008868:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800886c:	42a0      	cmp	r0, r4
 800886e:	d00b      	beq.n	8008888 <TIM_OC3_SetConfig+0x5c>
 8008870:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008874:	42a0      	cmp	r0, r4
 8008876:	d10e      	bne.n	8008896 <TIM_OC3_SetConfig+0x6a>
 8008878:	e006      	b.n	8008888 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800887a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800887c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008880:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008888:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800888c:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008890:	432c      	orrs	r4, r5
 8008892:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008896:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008898:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800889a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800889c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 800889e:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80088a0:	6203      	str	r3, [r0, #32]
}
 80088a2:	4770      	bx	lr
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40013400 	.word	0x40013400

080088ac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088ac:	6a03      	ldr	r3, [r0, #32]
 80088ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088b2:	6203      	str	r3, [r0, #32]
{
 80088b4:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ba:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80088bc:	4f19      	ldr	r7, [pc, #100]	; (8008924 <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088be:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088c0:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 80088c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088ca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80088ce:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088d0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80088d8:	d00f      	beq.n	80088fa <TIM_OC4_SetConfig+0x4e>
 80088da:	4c13      	ldr	r4, [pc, #76]	; (8008928 <TIM_OC4_SetConfig+0x7c>)
 80088dc:	42a0      	cmp	r0, r4
 80088de:	d00c      	beq.n	80088fa <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e0:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d00f      	beq.n	8008908 <TIM_OC4_SetConfig+0x5c>
 80088e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80088ec:	42a0      	cmp	r0, r4
 80088ee:	d00b      	beq.n	8008908 <TIM_OC4_SetConfig+0x5c>
 80088f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d10e      	bne.n	8008916 <TIM_OC4_SetConfig+0x6a>
 80088f8:	e006      	b.n	8008908 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80088fa:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80088fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008900:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008908:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800890c:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008910:	432c      	orrs	r4, r5
 8008912:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008916:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008918:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800891a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800891c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 800891e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8008920:	6203      	str	r3, [r0, #32]
}
 8008922:	4770      	bx	lr
 8008924:	40012c00 	.word	0x40012c00
 8008928:	40013400 	.word	0x40013400

0800892c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800892c:	2800      	cmp	r0, #0
 800892e:	d07d      	beq.n	8008a2c <HAL_TIM_Base_Init+0x100>
{
 8008930:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008932:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008936:	4604      	mov	r4, r0
 8008938:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800893c:	2b00      	cmp	r3, #0
 800893e:	d06d      	beq.n	8008a1c <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008940:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008942:	4a3b      	ldr	r2, [pc, #236]	; (8008a30 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	2302      	movs	r3, #2
 8008946:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800894a:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 800894c:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800894e:	d051      	beq.n	80089f4 <HAL_TIM_Base_Init+0xc8>
 8008950:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008954:	d021      	beq.n	800899a <HAL_TIM_Base_Init+0x6e>
 8008956:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800895a:	4291      	cmp	r1, r2
 800895c:	d01d      	beq.n	800899a <HAL_TIM_Base_Init+0x6e>
 800895e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008962:	4291      	cmp	r1, r2
 8008964:	d019      	beq.n	800899a <HAL_TIM_Base_Init+0x6e>
 8008966:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800896a:	4291      	cmp	r1, r2
 800896c:	d042      	beq.n	80089f4 <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800896e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008972:	4291      	cmp	r1, r2
 8008974:	d057      	beq.n	8008a26 <HAL_TIM_Base_Init+0xfa>
 8008976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800897a:	4291      	cmp	r1, r2
 800897c:	d053      	beq.n	8008a26 <HAL_TIM_Base_Init+0xfa>
 800897e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008982:	4291      	cmp	r1, r2
 8008984:	d04f      	beq.n	8008a26 <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008986:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008988:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800898a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800898c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008990:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008992:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008994:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008996:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008998:	e010      	b.n	80089bc <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800899a:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800899c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800899e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80089a4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80089a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089aa:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ac:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b2:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80089b4:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80089b6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089b8:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80089ba:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80089bc:	2301      	movs	r3, #1
 80089be:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80089c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80089cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80089d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80089d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80089e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80089e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80089ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80089f0:	2000      	movs	r0, #0
}
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80089f4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089f6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089f8:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80089fe:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a04:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a0a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008a0c:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a0e:	68e3      	ldr	r3, [r4, #12]
 8008a10:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008a16:	6963      	ldr	r3, [r4, #20]
 8008a18:	630b      	str	r3, [r1, #48]	; 0x30
 8008a1a:	e7cf      	b.n	80089bc <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8008a1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008a20:	f7fb fff2 	bl	8004a08 <HAL_TIM_Base_MspInit>
 8008a24:	e78c      	b.n	8008940 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a26:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a28:	69a2      	ldr	r2, [r4, #24]
 8008a2a:	e7e9      	b.n	8008a00 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 8008a2c:	2001      	movs	r0, #1
}
 8008a2e:	4770      	bx	lr
 8008a30:	40012c00 	.word	0x40012c00

08008a34 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008a34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d122      	bne.n	8008a82 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a3c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3e:	4917      	ldr	r1, [pc, #92]	; (8008a9c <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	2202      	movs	r2, #2
 8008a42:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a46:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a48:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a50:	d019      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x52>
 8008a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a56:	d016      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x52>
 8008a58:	4a11      	ldr	r2, [pc, #68]	; (8008aa0 <HAL_TIM_Base_Start_IT+0x6c>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d013      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x52>
 8008a5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d00f      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x52>
 8008a66:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00b      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x52>
 8008a6e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d007      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	f042 0201 	orr.w	r2, r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a7e:	2000      	movs	r0, #0
 8008a80:	4770      	bx	lr
    return HAL_ERROR;
 8008a82:	2001      	movs	r0, #1
 8008a84:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a86:	6899      	ldr	r1, [r3, #8]
 8008a88:	4a06      	ldr	r2, [pc, #24]	; (8008aa4 <HAL_TIM_Base_Start_IT+0x70>)
 8008a8a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8c:	2a06      	cmp	r2, #6
 8008a8e:	d002      	beq.n	8008a96 <HAL_TIM_Base_Start_IT+0x62>
 8008a90:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008a94:	d1ef      	bne.n	8008a76 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8008a96:	2000      	movs	r0, #0
}
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	40012c00 	.word	0x40012c00
 8008aa0:	40000400 	.word	0x40000400
 8008aa4:	00010007 	.word	0x00010007

08008aa8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008aa8:	6803      	ldr	r3, [r0, #0]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	f022 0201 	bic.w	r2, r2, #1
 8008ab0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8008ab2:	6a1a      	ldr	r2, [r3, #32]
 8008ab4:	f241 1111 	movw	r1, #4369	; 0x1111
 8008ab8:	420a      	tst	r2, r1
 8008aba:	d108      	bne.n	8008ace <HAL_TIM_Base_Stop_IT+0x26>
 8008abc:	6a19      	ldr	r1, [r3, #32]
 8008abe:	f244 4244 	movw	r2, #17476	; 0x4444
 8008ac2:	4211      	tst	r1, r2
 8008ac4:	d103      	bne.n	8008ace <HAL_TIM_Base_Stop_IT+0x26>
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	f022 0201 	bic.w	r2, r2, #1
 8008acc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_TIM_PWM_MspInit>:
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop

08008adc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d07d      	beq.n	8008bdc <HAL_TIM_PWM_Init+0x100>
{
 8008ae0:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008ae2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d06d      	beq.n	8008bcc <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008af0:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008af2:	4a3b      	ldr	r2, [pc, #236]	; (8008be0 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008af4:	2302      	movs	r3, #2
 8008af6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008afa:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8008afc:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008afe:	d051      	beq.n	8008ba4 <HAL_TIM_PWM_Init+0xc8>
 8008b00:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008b04:	d021      	beq.n	8008b4a <HAL_TIM_PWM_Init+0x6e>
 8008b06:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008b0a:	4291      	cmp	r1, r2
 8008b0c:	d01d      	beq.n	8008b4a <HAL_TIM_PWM_Init+0x6e>
 8008b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b12:	4291      	cmp	r1, r2
 8008b14:	d019      	beq.n	8008b4a <HAL_TIM_PWM_Init+0x6e>
 8008b16:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	d042      	beq.n	8008ba4 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b1e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008b22:	4291      	cmp	r1, r2
 8008b24:	d057      	beq.n	8008bd6 <HAL_TIM_PWM_Init+0xfa>
 8008b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b2a:	4291      	cmp	r1, r2
 8008b2c:	d053      	beq.n	8008bd6 <HAL_TIM_PWM_Init+0xfa>
 8008b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b32:	4291      	cmp	r1, r2
 8008b34:	d04f      	beq.n	8008bd6 <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b36:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b38:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8008b3a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b40:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008b42:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b44:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008b46:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b48:	e010      	b.n	8008b6c <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8008b4a:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b4c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b4e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008b54:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b5a:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b5c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b62:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8008b64:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008b66:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b68:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008b6a:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b70:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008b78:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008b7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008b80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b94:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008b98:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008b9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008ba0:	2000      	movs	r0, #0
}
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8008ba4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ba6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ba8:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008bae:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008bbc:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bbe:	68e3      	ldr	r3, [r4, #12]
 8008bc0:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008bc2:	6863      	ldr	r3, [r4, #4]
 8008bc4:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008bc6:	6963      	ldr	r3, [r4, #20]
 8008bc8:	630b      	str	r3, [r1, #48]	; 0x30
 8008bca:	e7cf      	b.n	8008b6c <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8008bcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008bd0:	f7ff ff82 	bl	8008ad8 <HAL_TIM_PWM_MspInit>
 8008bd4:	e78c      	b.n	8008af0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bd6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd8:	69a2      	ldr	r2, [r4, #24]
 8008bda:	e7e9      	b.n	8008bb0 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8008bdc:	2001      	movs	r0, #1
}
 8008bde:	4770      	bx	lr
 8008be0:	40012c00 	.word	0x40012c00

08008be4 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f000 80ab 	beq.w	8008d40 <HAL_TIM_Encoder_Init+0x15c>
{
 8008bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008bee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 8095 	beq.w	8008d2a <HAL_TIM_Encoder_Init+0x146>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c00:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c02:	4950      	ldr	r1, [pc, #320]	; (8008d44 <HAL_TIM_Encoder_Init+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008c04:	2202      	movs	r2, #2
 8008c06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8008c10:	f022 0207 	bic.w	r2, r2, #7
 8008c14:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c16:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8008c18:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c1a:	d072      	beq.n	8008d02 <HAL_TIM_Encoder_Init+0x11e>
 8008c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c20:	d021      	beq.n	8008c66 <HAL_TIM_Encoder_Init+0x82>
 8008c22:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008c26:	428b      	cmp	r3, r1
 8008c28:	d01d      	beq.n	8008c66 <HAL_TIM_Encoder_Init+0x82>
 8008c2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c2e:	428b      	cmp	r3, r1
 8008c30:	d019      	beq.n	8008c66 <HAL_TIM_Encoder_Init+0x82>
 8008c32:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8008c36:	428b      	cmp	r3, r1
 8008c38:	d063      	beq.n	8008d02 <HAL_TIM_Encoder_Init+0x11e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c3a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8008c3e:	428b      	cmp	r3, r1
 8008c40:	d078      	beq.n	8008d34 <HAL_TIM_Encoder_Init+0x150>
 8008c42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c46:	428b      	cmp	r3, r1
 8008c48:	d074      	beq.n	8008d34 <HAL_TIM_Encoder_Init+0x150>
 8008c4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c4e:	428b      	cmp	r3, r1
 8008c50:	d070      	beq.n	8008d34 <HAL_TIM_Encoder_Init+0x150>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c52:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c54:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c5a:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8008c5c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008c5e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c60:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c62:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c64:	e010      	b.n	8008c88 <HAL_TIM_Encoder_Init+0xa4>
    tmpcr1 |= Structure->CounterMode;
 8008c66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c68:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c6e:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c74:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c76:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c7c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c7e:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8008c80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008c82:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c84:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c86:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008c88:	2601      	movs	r6, #1
 8008c8a:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8008c8c:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8008c90:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c92:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c94:	69af      	ldr	r7, [r5, #24]
 8008c96:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8008c98:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c9c:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008ca0:	69e8      	ldr	r0, [r5, #28]
 8008ca2:	0112      	lsls	r2, r2, #4
 8008ca4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008ca8:	68e8      	ldr	r0, [r5, #12]
 8008caa:	4302      	orrs	r2, r0
 8008cac:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008cae:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008cb2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8008cb6:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 8008cba:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cbc:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cc0:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cc4:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008cc6:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cca:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008cce:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008cd2:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cd6:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8008cd8:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cdc:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8008cde:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8008ce0:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8008ce2:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ce4:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ce8:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cec:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cf0:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cf4:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008cf8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 8008cfc:	2000      	movs	r0, #0
}
 8008cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8008d02:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d04:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008d0a:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d10:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d12:	69a1      	ldr	r1, [r4, #24]
 8008d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d18:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8008d1a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d1c:	68e2      	ldr	r2, [r4, #12]
 8008d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008d20:	6862      	ldr	r2, [r4, #4]
 8008d22:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008d24:	6962      	ldr	r2, [r4, #20]
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30
 8008d28:	e7ae      	b.n	8008c88 <HAL_TIM_Encoder_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 8008d2a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8008d2e:	f7fb feb9 	bl	8004aa4 <HAL_TIM_Encoder_MspInit>
 8008d32:	e765      	b.n	8008c00 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d34:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d36:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d3c:	4302      	orrs	r2, r0
 8008d3e:	e7e9      	b.n	8008d14 <HAL_TIM_Encoder_Init+0x130>
    return HAL_ERROR;
 8008d40:	2001      	movs	r0, #1
}
 8008d42:	4770      	bx	lr
 8008d44:	40012c00 	.word	0x40012c00

08008d48 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8008d48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d04d      	beq.n	8008dec <HAL_TIM_SlaveConfigSynchro+0xa4>
 8008d50:	4602      	mov	r2, r0
{
 8008d52:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d54:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8008d56:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008d58:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8008d5a:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008d5e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008d62:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d64:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d70:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d76:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d7a:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d7c:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8008d7e:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8008d80:	d051      	beq.n	8008e26 <HAL_TIM_SlaveConfigSynchro+0xde>
 8008d82:	d825      	bhi.n	8008dd0 <HAL_TIM_SlaveConfigSynchro+0x88>
 8008d84:	2c40      	cmp	r4, #64	; 0x40
 8008d86:	d033      	beq.n	8008df0 <HAL_TIM_SlaveConfigSynchro+0xa8>
 8008d88:	2c50      	cmp	r4, #80	; 0x50
 8008d8a:	d110      	bne.n	8008dae <HAL_TIM_SlaveConfigSynchro+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d8c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d8e:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d90:	688c      	ldr	r4, [r1, #8]
 8008d92:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d94:	f026 0601 	bic.w	r6, r6, #1
 8008d98:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d9a:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d9c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8008da4:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008daa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008dac:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008dae:	68c3      	ldr	r3, [r0, #12]
 8008db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db4:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008db6:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8008dba:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dc0:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8008dc2:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008dc6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8008dca:	4608      	mov	r0, r1
}
 8008dcc:	bcf0      	pop	{r4, r5, r6, r7}
 8008dce:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8008dd0:	2c70      	cmp	r4, #112	; 0x70
 8008dd2:	d1ec      	bne.n	8008dae <HAL_TIM_SlaveConfigSynchro+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dd4:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8008dd8:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8008dda:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ddc:	432b      	orrs	r3, r5
 8008dde:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008de2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008de6:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de8:	6083      	str	r3, [r0, #8]
 8008dea:	e7e0      	b.n	8008dae <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8008dec:	2002      	movs	r0, #2
}
 8008dee:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008df0:	2d05      	cmp	r5, #5
 8008df2:	d010      	beq.n	8008e16 <HAL_TIM_SlaveConfigSynchro+0xce>
 8008df4:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8008df8:	d00d      	beq.n	8008e16 <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 8008dfa:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008dfc:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008dfe:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008e00:	f024 0401 	bic.w	r4, r4, #1
 8008e04:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008e06:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008e0c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8008e10:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8008e12:	6205      	str	r5, [r0, #32]
      break;
 8008e14:	e7cb      	b.n	8008dae <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8008e16:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8008e18:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8008e1a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008e1e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8008e22:	bcf0      	pop	{r4, r5, r6, r7}
 8008e24:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e26:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e28:	688d      	ldr	r5, [r1, #8]
 8008e2a:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e2c:	f024 0410 	bic.w	r4, r4, #16
 8008e30:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e32:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8008e34:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e36:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e3e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008e46:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8008e48:	6203      	str	r3, [r0, #32]
 8008e4a:	e7b0      	b.n	8008dae <HAL_TIM_SlaveConfigSynchro+0x66>

08008e4c <HAL_TIM_OC_DelayElapsedCallback>:
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <HAL_TIM_IC_CaptureCallback>:
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop

08008e54 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <HAL_TIM_TriggerCallback>:
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop

08008e5c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e5c:	6803      	ldr	r3, [r0, #0]
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	0791      	lsls	r1, r2, #30
{
 8008e62:	b510      	push	{r4, lr}
 8008e64:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e66:	d503      	bpl.n	8008e70 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	0792      	lsls	r2, r2, #30
 8008e6c:	f100 808a 	bmi.w	8008f84 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e70:	691a      	ldr	r2, [r3, #16]
 8008e72:	0752      	lsls	r2, r2, #29
 8008e74:	d502      	bpl.n	8008e7c <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	0750      	lsls	r0, r2, #29
 8008e7a:	d470      	bmi.n	8008f5e <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	0711      	lsls	r1, r2, #28
 8008e80:	d502      	bpl.n	8008e88 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	0712      	lsls	r2, r2, #28
 8008e86:	d458      	bmi.n	8008f3a <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e88:	691a      	ldr	r2, [r3, #16]
 8008e8a:	06d1      	lsls	r1, r2, #27
 8008e8c:	d502      	bpl.n	8008e94 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	06d2      	lsls	r2, r2, #27
 8008e92:	d43e      	bmi.n	8008f12 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e94:	691a      	ldr	r2, [r3, #16]
 8008e96:	07d0      	lsls	r0, r2, #31
 8008e98:	d503      	bpl.n	8008ea2 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	07d1      	lsls	r1, r2, #31
 8008e9e:	f100 808a 	bmi.w	8008fb6 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	0612      	lsls	r2, r2, #24
 8008ea6:	d503      	bpl.n	8008eb0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	0610      	lsls	r0, r2, #24
 8008eac:	f100 808b 	bmi.w	8008fc6 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008eb0:	691a      	ldr	r2, [r3, #16]
 8008eb2:	05d1      	lsls	r1, r2, #23
 8008eb4:	d503      	bpl.n	8008ebe <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	0612      	lsls	r2, r2, #24
 8008eba:	f100 808c 	bmi.w	8008fd6 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	0650      	lsls	r0, r2, #25
 8008ec2:	d503      	bpl.n	8008ecc <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	0651      	lsls	r1, r2, #25
 8008ec8:	f100 808d 	bmi.w	8008fe6 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	0692      	lsls	r2, r2, #26
 8008ed0:	d503      	bpl.n	8008eda <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	0690      	lsls	r0, r2, #26
 8008ed6:	f100 808e 	bmi.w	8008ff6 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	02d1      	lsls	r1, r2, #11
 8008ede:	d503      	bpl.n	8008ee8 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	02d2      	lsls	r2, r2, #11
 8008ee4:	f100 808f 	bmi.w	8009006 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008ee8:	691a      	ldr	r2, [r3, #16]
 8008eea:	0290      	lsls	r0, r2, #10
 8008eec:	d503      	bpl.n	8008ef6 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	0291      	lsls	r1, r2, #10
 8008ef2:	f100 8090 	bmi.w	8009016 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008ef6:	691a      	ldr	r2, [r3, #16]
 8008ef8:	0252      	lsls	r2, r2, #9
 8008efa:	d503      	bpl.n	8008f04 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	0250      	lsls	r0, r2, #9
 8008f00:	f100 8091 	bmi.w	8009026 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	0211      	lsls	r1, r2, #8
 8008f08:	d502      	bpl.n	8008f10 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	0212      	lsls	r2, r2, #8
 8008f0e:	d44a      	bmi.n	8008fa6 <HAL_TIM_IRQHandler+0x14a>
}
 8008f10:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f12:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f16:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f18:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f1a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008f22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f24:	f040 8090 	bne.w	8009048 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f28:	f7ff ff90 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7ff ff91 	bl	8008e54 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f32:	2200      	movs	r2, #0
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	7722      	strb	r2, [r4, #28]
 8008f38:	e7ac      	b.n	8008e94 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f3a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f3e:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f40:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f42:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8008f48:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f4a:	d17a      	bne.n	8009042 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4c:	f7ff ff7e 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f50:	4620      	mov	r0, r4
 8008f52:	f7ff ff7f 	bl	8008e54 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f56:	2200      	movs	r2, #0
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	7722      	strb	r2, [r4, #28]
 8008f5c:	e794      	b.n	8008e88 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f5e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f62:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f64:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008f6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f70:	d164      	bne.n	800903c <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f72:	f7ff ff6b 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7ff ff6c 	bl	8008e54 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	7722      	strb	r2, [r4, #28]
 8008f82:	e77b      	b.n	8008e7c <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f84:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f88:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f8a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f8c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	0799      	lsls	r1, r3, #30
 8008f92:	d150      	bne.n	8009036 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f94:	f7ff ff5a 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff ff5b 	bl	8008e54 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	7722      	strb	r2, [r4, #28]
 8008fa4:	e764      	b.n	8008e70 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008fa6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008faa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008fac:	611a      	str	r2, [r3, #16]
}
 8008fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008fb2:	f000 ba29 	b.w	8009408 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fb6:	f06f 0201 	mvn.w	r2, #1
 8008fba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f7f8 fc6f 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	e76d      	b.n	8008ea2 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fa11 	bl	80093f4 <HAL_TIMEx_BreakCallback>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	e76c      	b.n	8008eb0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fa0b 	bl	80093f8 <HAL_TIMEx_Break2Callback>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	e76b      	b.n	8008ebe <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008fec:	4620      	mov	r0, r4
 8008fee:	f7ff ff33 	bl	8008e58 <HAL_TIM_TriggerCallback>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	e76a      	b.n	8008ecc <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ff6:	f06f 0220 	mvn.w	r2, #32
 8008ffa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 f9f7 	bl	80093f0 <HAL_TIMEx_CommutCallback>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	e769      	b.n	8008eda <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009006:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800900a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800900c:	4620      	mov	r0, r4
 800900e:	f000 f9f5 	bl	80093fc <HAL_TIMEx_EncoderIndexCallback>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	e768      	b.n	8008ee8 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009016:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800901a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800901c:	4620      	mov	r0, r4
 800901e:	f000 f9ef 	bl	8009400 <HAL_TIMEx_DirectionChangeCallback>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	e767      	b.n	8008ef6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009026:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800902a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800902c:	4620      	mov	r0, r4
 800902e:	f000 f9e9 	bl	8009404 <HAL_TIMEx_IndexErrorCallback>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	e766      	b.n	8008f04 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8009036:	f7ff ff0b 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 800903a:	e7b0      	b.n	8008f9e <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 800903c:	f7ff ff08 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 8009040:	e79c      	b.n	8008f7c <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8009042:	f7ff ff05 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 8009046:	e786      	b.n	8008f56 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8009048:	f7ff ff02 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 800904c:	e771      	b.n	8008f32 <HAL_TIM_IRQHandler+0xd6>
 800904e:	bf00      	nop

08009050 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009050:	6a03      	ldr	r3, [r0, #32]
 8009052:	f023 0310 	bic.w	r3, r3, #16
 8009056:	6203      	str	r3, [r0, #32]
{
 8009058:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 800905a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800905c:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800905e:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009060:	4f19      	ldr	r7, [pc, #100]	; (80090c8 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009062:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009064:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009066:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800906a:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800906e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009072:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009074:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009078:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800907c:	d00f      	beq.n	800909e <TIM_OC2_SetConfig+0x4e>
 800907e:	4c13      	ldr	r4, [pc, #76]	; (80090cc <TIM_OC2_SetConfig+0x7c>)
 8009080:	42a0      	cmp	r0, r4
 8009082:	d00c      	beq.n	800909e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009084:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009088:	42a0      	cmp	r0, r4
 800908a:	d00f      	beq.n	80090ac <TIM_OC2_SetConfig+0x5c>
 800908c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009090:	42a0      	cmp	r0, r4
 8009092:	d00b      	beq.n	80090ac <TIM_OC2_SetConfig+0x5c>
 8009094:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009098:	42a0      	cmp	r0, r4
 800909a:	d10e      	bne.n	80090ba <TIM_OC2_SetConfig+0x6a>
 800909c:	e006      	b.n	80090ac <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800909e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80090a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090a4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80090a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090ac:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090b0:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090b4:	432c      	orrs	r4, r5
 80090b6:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80090ba:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80090bc:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80090be:	6182      	str	r2, [r0, #24]
}
 80090c0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80090c2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80090c4:	6203      	str	r3, [r0, #32]
}
 80090c6:	4770      	bx	lr
 80090c8:	40012c00 	.word	0x40012c00
 80090cc:	40013400 	.word	0x40013400

080090d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80090d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	f000 80e4 	beq.w	80092a4 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 80090dc:	2301      	movs	r3, #1
 80090de:	4604      	mov	r4, r0
 80090e0:	460d      	mov	r5, r1
 80090e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80090e6:	2a14      	cmp	r2, #20
 80090e8:	d844      	bhi.n	8009174 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80090ea:	e8df f002 	tbb	[pc, r2]
 80090ee:	4347      	.short	0x4347
 80090f0:	435b4343 	.word	0x435b4343
 80090f4:	43704343 	.word	0x43704343
 80090f8:	43844343 	.word	0x43844343
 80090fc:	43994343 	.word	0x43994343
 8009100:	4343      	.short	0x4343
 8009102:	0b          	.byte	0x0b
 8009103:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009104:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009106:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800910a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800910c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910e:	4e6c      	ldr	r6, [pc, #432]	; (80092c0 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009110:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8009114:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8009116:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009118:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800911a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800911c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009120:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009124:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009128:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800912a:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800912e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009132:	d008      	beq.n	8009146 <HAL_TIM_PWM_ConfigChannel+0x76>
 8009134:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009138:	42b3      	cmp	r3, r6
 800913a:	d004      	beq.n	8009146 <HAL_TIM_PWM_ConfigChannel+0x76>
 800913c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8009140:	42b3      	cmp	r3, r6
 8009142:	f040 80b1 	bne.w	80092a8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009146:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009148:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800914c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8009150:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8009152:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8009154:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8009156:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8009158:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800915a:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800915c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800915e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009162:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009164:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009166:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800916a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800916c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800916e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8009172:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8009174:	2000      	movs	r0, #0
 8009176:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800917c:	6800      	ldr	r0, [r0, #0]
 800917e:	f7ff fb17 	bl	80087b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009182:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009184:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009186:	6999      	ldr	r1, [r3, #24]
 8009188:	f041 0108 	orr.w	r1, r1, #8
 800918c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800918e:	6999      	ldr	r1, [r3, #24]
 8009190:	f021 0104 	bic.w	r1, r1, #4
 8009194:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009196:	699a      	ldr	r2, [r3, #24]
 8009198:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800919a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800919c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800919e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80091a2:	e7ea      	b.n	800917a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091a4:	6800      	ldr	r0, [r0, #0]
 80091a6:	f7ff ff53 	bl	8009050 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091ac:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091ae:	6999      	ldr	r1, [r3, #24]
 80091b0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80091b4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091b6:	6999      	ldr	r1, [r3, #24]
 80091b8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80091bc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80091c4:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091c6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80091c8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80091cc:	e7d5      	b.n	800917a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	f7ff fb2c 	bl	800882c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091d6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091d8:	69d9      	ldr	r1, [r3, #28]
 80091da:	f041 0108 	orr.w	r1, r1, #8
 80091de:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091e0:	69d9      	ldr	r1, [r3, #28]
 80091e2:	f021 0104 	bic.w	r1, r1, #4
 80091e6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091e8:	69da      	ldr	r2, [r3, #28]
 80091ea:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80091ec:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091ee:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80091f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80091f4:	e7c1      	b.n	800917a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091f6:	6800      	ldr	r0, [r0, #0]
 80091f8:	f7ff fb58 	bl	80088ac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091fe:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009200:	69d9      	ldr	r1, [r3, #28]
 8009202:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009206:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009208:	69d9      	ldr	r1, [r3, #28]
 800920a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800920e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009210:	69da      	ldr	r2, [r3, #28]
 8009212:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8009216:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009218:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800921a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800921e:	e7ac      	b.n	800917a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009220:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009222:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009226:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8009228:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800922a:	4e25      	ldr	r6, [pc, #148]	; (80092c0 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800922c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009230:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8009232:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009234:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009238:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800923c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009240:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009244:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009246:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800924a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800924e:	d00f      	beq.n	8009270 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009250:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009254:	42b3      	cmp	r3, r6
 8009256:	d00b      	beq.n	8009270 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009258:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800925c:	42b3      	cmp	r3, r6
 800925e:	d007      	beq.n	8009270 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009260:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009264:	42b3      	cmp	r3, r6
 8009266:	d003      	beq.n	8009270 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009268:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800926c:	42b3      	cmp	r3, r6
 800926e:	d104      	bne.n	800927a <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009270:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009272:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009276:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800927a:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800927c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800927e:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8009280:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8009282:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009284:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009286:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009288:	f041 0108 	orr.w	r1, r1, #8
 800928c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800928e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009290:	f021 0104 	bic.w	r1, r1, #4
 8009294:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009298:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800929a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800929c:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800929e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80092a2:	e76a      	b.n	800917a <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 80092a4:	2002      	movs	r0, #2
}
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092ac:	42b3      	cmp	r3, r6
 80092ae:	f43f af4a 	beq.w	8009146 <HAL_TIM_PWM_ConfigChannel+0x76>
 80092b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092b6:	42b3      	cmp	r3, r6
 80092b8:	f47f af4a 	bne.w	8009150 <HAL_TIM_PWM_ConfigChannel+0x80>
 80092bc:	e743      	b.n	8009146 <HAL_TIM_PWM_ConfigChannel+0x76>
 80092be:	bf00      	nop
 80092c0:	40012c00 	.word	0x40012c00

080092c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d03c      	beq.n	8009346 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 80092cc:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092ce:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092d0:	4c1e      	ldr	r4, [pc, #120]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 80092d2:	2302      	movs	r3, #2
 80092d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092d8:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 80092da:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80092dc:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092de:	d026      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80092e0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80092e4:	42a2      	cmp	r2, r4
 80092e6:	d022      	beq.n	800932e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092e8:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80092ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80092ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092f2:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80092f8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092fa:	d00a      	beq.n	8009312 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80092fc:	4b14      	ldr	r3, [pc, #80]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80092fe:	429a      	cmp	r2, r3
 8009300:	d007      	beq.n	8009312 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8009302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009306:	429a      	cmp	r2, r3
 8009308:	d003      	beq.n	8009312 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800930a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800930e:	429a      	cmp	r2, r3
 8009310:	d104      	bne.n	800931c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009312:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009314:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009318:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800931a:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800931c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800931e:	2201      	movs	r2, #1
 8009320:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009324:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8009328:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800932a:	4618      	mov	r0, r3
}
 800932c:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800932e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009336:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8009338:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800933c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009340:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8009342:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009344:	e7e5      	b.n	8009312 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8009346:	2002      	movs	r0, #2
}
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40012c00 	.word	0x40012c00
 8009350:	40000400 	.word	0x40000400

08009354 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009354:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009358:	2b01      	cmp	r3, #1
 800935a:	d044      	beq.n	80093e6 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 800935c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800935e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8009362:	4602      	mov	r2, r0
 8009364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009368:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800936c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800936e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009372:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009378:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800937c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800937e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009382:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009388:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800938a:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800938c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800938e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009392:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009394:	4c15      	ldr	r4, [pc, #84]	; (80093ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8009396:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009398:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800939c:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800939e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80093a2:	d00a      	beq.n	80093ba <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80093a4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d006      	beq.n	80093ba <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80093ac:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80093ae:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80093b0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80093b4:	4608      	mov	r0, r1
}
 80093b6:	bc30      	pop	{r4, r5}
 80093b8:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80093ba:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80093be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093c2:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093c8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093cc:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80093d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093d4:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80093da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093dc:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80093de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093e2:	430b      	orrs	r3, r1
 80093e4:	e7e2      	b.n	80093ac <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80093e6:	2002      	movs	r0, #2
}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	40012c00 	.word	0x40012c00

080093f0 <HAL_TIMEx_CommutCallback>:
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop

080093f4 <HAL_TIMEx_BreakCallback>:
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop

080093f8 <HAL_TIMEx_Break2Callback>:
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop

080093fc <HAL_TIMEx_EncoderIndexCallback>:
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop

08009400 <HAL_TIMEx_DirectionChangeCallback>:
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop

08009404 <HAL_TIMEx_IndexErrorCallback>:
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop

08009408 <HAL_TIMEx_TransitionErrorCallback>:
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop

0800940c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800940c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800940e:	07da      	lsls	r2, r3, #31
{
 8009410:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009412:	d506      	bpl.n	8009422 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009414:	6801      	ldr	r1, [r0, #0]
 8009416:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009418:	684a      	ldr	r2, [r1, #4]
 800941a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800941e:	4322      	orrs	r2, r4
 8009420:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009422:	079c      	lsls	r4, r3, #30
 8009424:	d506      	bpl.n	8009434 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009426:	6801      	ldr	r1, [r0, #0]
 8009428:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800942a:	684a      	ldr	r2, [r1, #4]
 800942c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009430:	4322      	orrs	r2, r4
 8009432:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009434:	0759      	lsls	r1, r3, #29
 8009436:	d506      	bpl.n	8009446 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009438:	6801      	ldr	r1, [r0, #0]
 800943a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800943c:	684a      	ldr	r2, [r1, #4]
 800943e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009442:	4322      	orrs	r2, r4
 8009444:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009446:	071a      	lsls	r2, r3, #28
 8009448:	d506      	bpl.n	8009458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800944a:	6801      	ldr	r1, [r0, #0]
 800944c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800944e:	684a      	ldr	r2, [r1, #4]
 8009450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009454:	4322      	orrs	r2, r4
 8009456:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009458:	06dc      	lsls	r4, r3, #27
 800945a:	d506      	bpl.n	800946a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800945c:	6801      	ldr	r1, [r0, #0]
 800945e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009460:	688a      	ldr	r2, [r1, #8]
 8009462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009466:	4322      	orrs	r2, r4
 8009468:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800946a:	0699      	lsls	r1, r3, #26
 800946c:	d506      	bpl.n	800947c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800946e:	6801      	ldr	r1, [r0, #0]
 8009470:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009472:	688a      	ldr	r2, [r1, #8]
 8009474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009478:	4322      	orrs	r2, r4
 800947a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800947c:	065a      	lsls	r2, r3, #25
 800947e:	d509      	bpl.n	8009494 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009480:	6801      	ldr	r1, [r0, #0]
 8009482:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009484:	684a      	ldr	r2, [r1, #4]
 8009486:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800948a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800948c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009490:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009492:	d00b      	beq.n	80094ac <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009494:	061b      	lsls	r3, r3, #24
 8009496:	d506      	bpl.n	80094a6 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009498:	6802      	ldr	r2, [r0, #0]
 800949a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800949c:	6853      	ldr	r3, [r2, #4]
 800949e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80094a2:	430b      	orrs	r3, r1
 80094a4:	6053      	str	r3, [r2, #4]
  }
}
 80094a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094aa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094ac:	684a      	ldr	r2, [r1, #4]
 80094ae:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80094b0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80094b4:	4322      	orrs	r2, r4
 80094b6:	604a      	str	r2, [r1, #4]
 80094b8:	e7ec      	b.n	8009494 <UART_AdvFeatureConfig+0x88>
 80094ba:	bf00      	nop

080094bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094bc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094be:	2300      	movs	r3, #0
{
 80094c0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094c6:	f7fc f8e5 	bl	8005694 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80094d0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094d2:	d40d      	bmi.n	80094f0 <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	0752      	lsls	r2, r2, #29
 80094d8:	d431      	bmi.n	800953e <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094da:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80094dc:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 80094de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80094e2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 80094e6:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80094e8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ec:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094f0:	69da      	ldr	r2, [r3, #28]
 80094f2:	0292      	lsls	r2, r2, #10
 80094f4:	d4ee      	bmi.n	80094d4 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f6:	f7fc f8cd 	bl	8005694 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094fa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094fc:	1b40      	subs	r0, r0, r5
 80094fe:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009502:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009504:	d22c      	bcs.n	8009560 <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009506:	0750      	lsls	r0, r2, #29
 8009508:	d5f2      	bpl.n	80094f0 <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800950a:	69da      	ldr	r2, [r3, #28]
 800950c:	0511      	lsls	r1, r2, #20
 800950e:	d5ef      	bpl.n	80094f0 <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009514:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800951c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951e:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009520:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009522:	f021 0101 	bic.w	r1, r1, #1
 8009526:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009528:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 800952a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800952e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8009532:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8009534:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009538:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 800953c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	0258      	lsls	r0, r3, #9
 8009542:	d4ca      	bmi.n	80094da <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009544:	f7fc f8a6 	bl	8005694 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009548:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954a:	1b40      	subs	r0, r0, r5
 800954c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009550:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009552:	d205      	bcs.n	8009560 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009554:	0751      	lsls	r1, r2, #29
 8009556:	d5f2      	bpl.n	800953e <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009558:	69da      	ldr	r2, [r3, #28]
 800955a:	0512      	lsls	r2, r2, #20
 800955c:	d5ef      	bpl.n	800953e <UART_CheckIdleState+0x82>
 800955e:	e7d7      	b.n	8009510 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009564:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009566:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8009568:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	f022 0201 	bic.w	r2, r2, #1
 800956e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009570:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8009572:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8009576:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800957a:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800957c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop

08009584 <HAL_UART_Init>:
  if (huart == NULL)
 8009584:	2800      	cmp	r0, #0
 8009586:	f000 817f 	beq.w	8009888 <HAL_UART_Init+0x304>
  if (huart->gState == HAL_UART_STATE_RESET)
 800958a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800958e:	b570      	push	{r4, r5, r6, lr}
 8009590:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009592:	2b00      	cmp	r3, #0
 8009594:	d056      	beq.n	8009644 <HAL_UART_Init+0xc0>
  __HAL_UART_DISABLE(huart);
 8009596:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009598:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800959a:	49c1      	ldr	r1, [pc, #772]	; (80098a0 <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 800959c:	2224      	movs	r2, #36	; 0x24
 800959e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80095a2:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095a4:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80095a6:	f020 0001 	bic.w	r0, r0, #1
 80095aa:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095ac:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095ae:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095b0:	4332      	orrs	r2, r6
 80095b2:	4302      	orrs	r2, r0
 80095b4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095b6:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095b8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095ba:	430a      	orrs	r2, r1
 80095bc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095c2:	49b8      	ldr	r1, [pc, #736]	; (80098a4 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80095c8:	432a      	orrs	r2, r5
 80095ca:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095cc:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095ce:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095d0:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095d2:	d03c      	beq.n	800964e <HAL_UART_Init+0xca>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095d4:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095d8:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80095dc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80095e0:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095e2:	430a      	orrs	r2, r1
 80095e4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e8:	49af      	ldr	r1, [pc, #700]	; (80098a8 <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095ea:	f022 020f 	bic.w	r2, r2, #15
 80095ee:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095f0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095f2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095f4:	d012      	beq.n	800961c <HAL_UART_Init+0x98>
 80095f6:	4aad      	ldr	r2, [pc, #692]	; (80098ac <HAL_UART_Init+0x328>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d07b      	beq.n	80096f4 <HAL_UART_Init+0x170>
 80095fc:	4aac      	ldr	r2, [pc, #688]	; (80098b0 <HAL_UART_Init+0x32c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	f000 8130 	beq.w	8009864 <HAL_UART_Init+0x2e0>
 8009604:	4aab      	ldr	r2, [pc, #684]	; (80098b4 <HAL_UART_Init+0x330>)
 8009606:	4293      	cmp	r3, r2
 8009608:	f000 80cf 	beq.w	80097aa <HAL_UART_Init+0x226>
  huart->NbRxDataToProcess = 1;
 800960c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8009610:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8009612:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009616:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8009618:	2001      	movs	r0, #1
 800961a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800961c:	4ba6      	ldr	r3, [pc, #664]	; (80098b8 <HAL_UART_Init+0x334>)
 800961e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	3b01      	subs	r3, #1
 8009628:	2b02      	cmp	r3, #2
 800962a:	f240 80d7 	bls.w	80097dc <HAL_UART_Init+0x258>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800962e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009632:	f000 8131 	beq.w	8009898 <HAL_UART_Init+0x314>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009636:	f7fe fb59 	bl	8007cec <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800963a:	2800      	cmp	r0, #0
 800963c:	f000 80d1 	beq.w	80097e2 <HAL_UART_Init+0x25e>
 8009640:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009642:	e081      	b.n	8009748 <HAL_UART_Init+0x1c4>
    huart->Lock = HAL_UNLOCKED;
 8009644:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009648:	f7fb fc26 	bl	8004e98 <HAL_UART_MspInit>
 800964c:	e7a3      	b.n	8009596 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800964e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009652:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009656:	430a      	orrs	r2, r1
 8009658:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800965e:	4896      	ldr	r0, [pc, #600]	; (80098b8 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009660:	f022 020f 	bic.w	r2, r2, #15
 8009664:	430a      	orrs	r2, r1
 8009666:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009668:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800966c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009674:	f000 8134 	beq.w	80098e0 <HAL_UART_Init+0x35c>
 8009678:	d80c      	bhi.n	8009694 <HAL_UART_Init+0x110>
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 812b 	beq.w	80098d6 <HAL_UART_Init+0x352>
 8009680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009684:	d1c2      	bne.n	800960c <HAL_UART_Init+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 8009686:	f7fe f9e1 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800968a:	2800      	cmp	r0, #0
 800968c:	f000 80a9 	beq.w	80097e2 <HAL_UART_Init+0x25e>
 8009690:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009692:	e004      	b.n	800969e <HAL_UART_Init+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009698:	d1b8      	bne.n	800960c <HAL_UART_Init+0x88>
        pclk = (uint32_t) LSE_VALUE;
 800969a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800969e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096a0:	4b86      	ldr	r3, [pc, #536]	; (80098bc <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096a2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096a6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80096aa:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096ae:	42b3      	cmp	r3, r6
 80096b0:	d3ac      	bcc.n	800960c <HAL_UART_Init+0x88>
 80096b2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80096b6:	d8a9      	bhi.n	800960c <HAL_UART_Init+0x88>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b8:	2600      	movs	r6, #0
 80096ba:	2300      	movs	r3, #0
 80096bc:	4631      	mov	r1, r6
 80096be:	f7f7 f9f1 	bl	8000aa4 <__aeabi_uldivmod>
 80096c2:	020b      	lsls	r3, r1, #8
 80096c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096c8:	0202      	lsls	r2, r0, #8
 80096ca:	0868      	lsrs	r0, r5, #1
 80096cc:	1810      	adds	r0, r2, r0
 80096ce:	f143 0100 	adc.w	r1, r3, #0
 80096d2:	462a      	mov	r2, r5
 80096d4:	4633      	mov	r3, r6
 80096d6:	f7f7 f9e5 	bl	8000aa4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096da:	4b79      	ldr	r3, [pc, #484]	; (80098c0 <HAL_UART_Init+0x33c>)
 80096dc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d893      	bhi.n	800960c <HAL_UART_Init+0x88>
          huart->Instance->BRR = usartdiv;
 80096e4:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80096e6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80096ea:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80096ec:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80096f0:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 80096f2:	e043      	b.n	800977c <HAL_UART_Init+0x1f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096f4:	4b70      	ldr	r3, [pc, #448]	; (80098b8 <HAL_UART_Init+0x334>)
 80096f6:	4a73      	ldr	r2, [pc, #460]	; (80098c4 <HAL_UART_Init+0x340>)
 80096f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fc:	f003 030c 	and.w	r3, r3, #12
 8009700:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009702:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009706:	d079      	beq.n	80097fc <HAL_UART_Init+0x278>
    switch (clocksource)
 8009708:	2b08      	cmp	r3, #8
 800970a:	f63f af7f 	bhi.w	800960c <HAL_UART_Init+0x88>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <HAL_UART_Init+0x190>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	080097d7 	.word	0x080097d7
 8009718:	08009637 	.word	0x08009637
 800971c:	080097a7 	.word	0x080097a7
 8009720:	0800960d 	.word	0x0800960d
 8009724:	080097cb 	.word	0x080097cb
 8009728:	0800960d 	.word	0x0800960d
 800972c:	0800960d 	.word	0x0800960d
 8009730:	0800960d 	.word	0x0800960d
 8009734:	08009745 	.word	0x08009745
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009738:	2b30      	cmp	r3, #48	; 0x30
 800973a:	f47f af67 	bne.w	800960c <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800973e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009742:	d074      	beq.n	800982e <HAL_UART_Init+0x2aa>
 8009744:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009748:	6862      	ldr	r2, [r4, #4]
 800974a:	4b5c      	ldr	r3, [pc, #368]	; (80098bc <HAL_UART_Init+0x338>)
 800974c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8009750:	fbb0 f3f3 	udiv	r3, r0, r3
 8009754:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009758:	fbb3 f3f2 	udiv	r3, r3, r2
 800975c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800975e:	f1a3 0110 	sub.w	r1, r3, #16
 8009762:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009766:	4291      	cmp	r1, r2
 8009768:	f63f af50 	bhi.w	800960c <HAL_UART_Init+0x88>
        huart->Instance->BRR = usartdiv;
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8009770:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8009772:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800977a:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800977c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800977e:	2b00      	cmp	r3, #0
 8009780:	d138      	bne.n	80097f4 <HAL_UART_Init+0x270>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800978a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009792:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800979a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 80097a2:	f7ff be8b 	b.w	80094bc <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 80097a6:	4848      	ldr	r0, [pc, #288]	; (80098c8 <HAL_UART_Init+0x344>)
 80097a8:	e7ce      	b.n	8009748 <HAL_UART_Init+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097aa:	4b43      	ldr	r3, [pc, #268]	; (80098b8 <HAL_UART_Init+0x334>)
 80097ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80097b4:	2b80      	cmp	r3, #128	; 0x80
 80097b6:	f000 8095 	beq.w	80098e4 <HAL_UART_Init+0x360>
 80097ba:	d861      	bhi.n	8009880 <HAL_UART_Init+0x2fc>
 80097bc:	b143      	cbz	r3, 80097d0 <HAL_UART_Init+0x24c>
 80097be:	2b40      	cmp	r3, #64	; 0x40
 80097c0:	f47f af24 	bne.w	800960c <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80097c8:	d060      	beq.n	800988c <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 80097ca:	f7fe f93f 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
        break;
 80097ce:	e734      	b.n	800963a <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80097d4:	d07c      	beq.n	80098d0 <HAL_UART_Init+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d6:	f7fe fa77 	bl	8007cc8 <HAL_RCC_GetPCLK1Freq>
        break;
 80097da:	e72e      	b.n	800963a <HAL_UART_Init+0xb6>
 80097dc:	4a3b      	ldr	r2, [pc, #236]	; (80098cc <HAL_UART_Init+0x348>)
 80097de:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80097e0:	e78f      	b.n	8009702 <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 80097e2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80097e4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 80097ea:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80097ee:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0c6      	beq.n	8009782 <HAL_UART_Init+0x1fe>
    UART_AdvFeatureConfig(huart);
 80097f4:	4620      	mov	r0, r4
 80097f6:	f7ff fe09 	bl	800940c <UART_AdvFeatureConfig>
 80097fa:	e7c2      	b.n	8009782 <HAL_UART_Init+0x1fe>
    switch (clocksource)
 80097fc:	2b08      	cmp	r3, #8
 80097fe:	f63f af05 	bhi.w	800960c <HAL_UART_Init+0x88>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <HAL_UART_Init+0x284>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	080098d1 	.word	0x080098d1
 800980c:	08009899 	.word	0x08009899
 8009810:	0800982d 	.word	0x0800982d
 8009814:	0800960d 	.word	0x0800960d
 8009818:	0800988d 	.word	0x0800988d
 800981c:	0800960d 	.word	0x0800960d
 8009820:	0800960d 	.word	0x0800960d
 8009824:	0800960d 	.word	0x0800960d
 8009828:	0800982f 	.word	0x0800982f
        pclk = (uint32_t) HSI_VALUE;
 800982c:	4826      	ldr	r0, [pc, #152]	; (80098c8 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	4922      	ldr	r1, [pc, #136]	; (80098bc <HAL_UART_Init+0x338>)
 8009832:	0853      	lsrs	r3, r2, #1
 8009834:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8009838:	fbb0 f0f1 	udiv	r0, r0, r1
 800983c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009840:	fbb0 f0f2 	udiv	r0, r0, r2
 8009844:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009846:	f1a2 0110 	sub.w	r1, r2, #16
 800984a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800984e:	4299      	cmp	r1, r3
 8009850:	f63f aedc 	bhi.w	800960c <HAL_UART_Init+0x88>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009854:	f020 030f 	bic.w	r3, r0, #15
 8009858:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800985a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800985e:	6820      	ldr	r0, [r4, #0]
 8009860:	4313      	orrs	r3, r2
 8009862:	e784      	b.n	800976e <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009864:	4b14      	ldr	r3, [pc, #80]	; (80098b8 <HAL_UART_Init+0x334>)
 8009866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800986e:	2b20      	cmp	r3, #32
 8009870:	d038      	beq.n	80098e4 <HAL_UART_Init+0x360>
 8009872:	f63f af61 	bhi.w	8009738 <HAL_UART_Init+0x1b4>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0aa      	beq.n	80097d0 <HAL_UART_Init+0x24c>
 800987a:	2b10      	cmp	r3, #16
 800987c:	d0a2      	beq.n	80097c4 <HAL_UART_Init+0x240>
 800987e:	e6c5      	b.n	800960c <HAL_UART_Init+0x88>
 8009880:	2bc0      	cmp	r3, #192	; 0xc0
 8009882:	f43f af5c 	beq.w	800973e <HAL_UART_Init+0x1ba>
 8009886:	e6c1      	b.n	800960c <HAL_UART_Init+0x88>
}
 8009888:	2001      	movs	r0, #1
 800988a:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 800988c:	f7fe f8de 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009890:	2800      	cmp	r0, #0
 8009892:	d0a6      	beq.n	80097e2 <HAL_UART_Init+0x25e>
 8009894:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009896:	e7ca      	b.n	800982e <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009898:	f7fe fa28 	bl	8007cec <HAL_RCC_GetPCLK2Freq>
        break;
 800989c:	e7f8      	b.n	8009890 <HAL_UART_Init+0x30c>
 800989e:	bf00      	nop
 80098a0:	cfff69f3 	.word	0xcfff69f3
 80098a4:	40008000 	.word	0x40008000
 80098a8:	40013800 	.word	0x40013800
 80098ac:	40004400 	.word	0x40004400
 80098b0:	40004800 	.word	0x40004800
 80098b4:	40004c00 	.word	0x40004c00
 80098b8:	40021000 	.word	0x40021000
 80098bc:	0800b948 	.word	0x0800b948
 80098c0:	000ffcff 	.word	0x000ffcff
 80098c4:	0800b938 	.word	0x0800b938
 80098c8:	00f42400 	.word	0x00f42400
 80098cc:	0800b934 	.word	0x0800b934
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d0:	f7fe f9fa 	bl	8007cc8 <HAL_RCC_GetPCLK1Freq>
        break;
 80098d4:	e7dc      	b.n	8009890 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d6:	f7fe f9f7 	bl	8007cc8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80098da:	2800      	cmp	r0, #0
 80098dc:	d081      	beq.n	80097e2 <HAL_UART_Init+0x25e>
 80098de:	e6d7      	b.n	8009690 <HAL_UART_Init+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098e0:	4803      	ldr	r0, [pc, #12]	; (80098f0 <HAL_UART_Init+0x36c>)
 80098e2:	e6dc      	b.n	800969e <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098ea:	f47f af2d 	bne.w	8009748 <HAL_UART_Init+0x1c4>
 80098ee:	e79e      	b.n	800982e <HAL_UART_Init+0x2aa>
 80098f0:	00f42400 	.word	0x00f42400

080098f4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098f4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80098f8:	2a01      	cmp	r2, #1
 80098fa:	d017      	beq.n	800992c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098fc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80098fe:	2124      	movs	r1, #36	; 0x24
{
 8009900:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8009902:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8009906:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009908:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800990a:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800990c:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800990e:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009912:	f024 0401 	bic.w	r4, r4, #1
 8009916:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8009918:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800991a:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800991c:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800991e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8009922:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009924:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009928:	bc30      	pop	{r4, r5}
 800992a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800992c:	2002      	movs	r0, #2
}
 800992e:	4770      	bx	lr

08009930 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009930:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009934:	2a01      	cmp	r2, #1
 8009936:	d033      	beq.n	80099a0 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8009938:	4603      	mov	r3, r0
 800993a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800993c:	681a      	ldr	r2, [r3, #0]
{
 800993e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009940:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009944:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009946:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009948:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800994a:	f020 0001 	bic.w	r0, r0, #1
 800994e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009950:	6890      	ldr	r0, [r2, #8]
 8009952:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8009956:	4301      	orrs	r1, r0
 8009958:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800995a:	b1f5      	cbz	r5, 800999a <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800995c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800995e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009960:	4810      	ldr	r0, [pc, #64]	; (80099a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8009962:	4f11      	ldr	r7, [pc, #68]	; (80099a8 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009964:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009968:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800996a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800996c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800996e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009970:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009972:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009974:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009976:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800997a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800997e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009982:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8009984:	2520      	movs	r5, #32
 8009986:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800998c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009990:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009992:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009996:	bcf0      	pop	{r4, r5, r6, r7}
 8009998:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800999a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800999c:	4608      	mov	r0, r1
 800999e:	e7ee      	b.n	800997e <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80099a0:	2002      	movs	r0, #2
}
 80099a2:	4770      	bx	lr
 80099a4:	0800b968 	.word	0x0800b968
 80099a8:	0800b960 	.word	0x0800b960

080099ac <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80099ac:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80099b0:	2a01      	cmp	r2, #1
 80099b2:	d033      	beq.n	8009a1c <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80099b4:	4603      	mov	r3, r0
 80099b6:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b8:	681a      	ldr	r2, [r3, #0]
{
 80099ba:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80099bc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099c0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80099c2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099c4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80099c6:	f020 0001 	bic.w	r0, r0, #1
 80099ca:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099cc:	6890      	ldr	r0, [r2, #8]
 80099ce:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80099d2:	4301      	orrs	r1, r0
 80099d4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099d6:	b1f5      	cbz	r5, 8009a16 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099d8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099da:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099dc:	4810      	ldr	r0, [pc, #64]	; (8009a20 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80099de:	4f11      	ldr	r7, [pc, #68]	; (8009a24 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099e0:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099e4:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099e6:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099e8:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80099ea:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80099ec:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099ee:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099f0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099f2:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099f6:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099fa:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80099fe:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8009a00:	2520      	movs	r5, #32
 8009a02:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a06:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009a08:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009a0c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009a0e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009a12:	bcf0      	pop	{r4, r5, r6, r7}
 8009a14:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8009a16:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009a18:	4608      	mov	r0, r1
 8009a1a:	e7ee      	b.n	80099fa <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8009a1c:	2002      	movs	r0, #2
}
 8009a1e:	4770      	bx	lr
 8009a20:	0800b968 	.word	0x0800b968
 8009a24:	0800b960 	.word	0x0800b960

08009a28 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8009a28:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8009a2a:	8840      	ldrh	r0, [r0, #2]
 8009a2c:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8009a30:	0c00      	lsrs	r0, r0, #16
 8009a32:	4770      	bx	lr

08009a34 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8009a34:	b410      	push	{r4}
 8009a36:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009a38:	8802      	ldrh	r2, [r0, #0]
 8009a3a:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8009a3c:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009a40:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8009a44:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009a48:	42a2      	cmp	r2, r4
{
 8009a4a:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8009a4c:	d219      	bcs.n	8009a82 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8009a4e:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8009a52:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8009a56:	b2e4      	uxtb	r4, r4
 8009a58:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8009a5c:	8882      	ldrh	r2, [r0, #4]
 8009a5e:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8009a62:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8009a68:	bfbc      	itt	lt
 8009a6a:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8009a6e:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	bfbc      	itt	lt
 8009a74:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8009a78:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8009a7a:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8009a7e:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8009a82:	b289      	uxth	r1, r1
 8009a84:	2000      	movs	r0, #0
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	f361 000f 	bfi	r0, r1, #0, #16
 8009a8c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8009a90:	b005      	add	sp, #20
 8009a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 8009a98:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	81c4      	strh	r4, [r0, #14]
  pHandle->pVSS = pVSS;
 8009a9e:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->EncRestart = false;
}
 8009aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pENC = pENC;
 8009aa6:	6083      	str	r3, [r0, #8]
}
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop

08009aac <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 8009aac:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8009aae:	2200      	movs	r2, #0
{
 8009ab0:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	6840      	ldr	r0, [r0, #4]
 8009ab6:	f001 fe15 	bl	800b6e4 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 8009aba:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8009abe:	6860      	ldr	r0, [r4, #4]
 8009ac0:	f001 fe08 	bl	800b6d4 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8009ac4:	6820      	ldr	r0, [r4, #0]
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	f001 fb96 	bl	800b1f8 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8009acc:	2200      	movs	r2, #0
 8009ace:	4611      	mov	r1, r2
 8009ad0:	6820      	ldr	r0, [r4, #0]
 8009ad2:	f001 fb95 	bl	800b200 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 8009ad6:	8ae2      	ldrh	r2, [r4, #22]
 8009ad8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	f001 fb8f 	bl	800b200 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8009ae2:	8ae1      	ldrh	r1, [r4, #22]
 8009ae4:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 8009ae6:	4a04      	ldr	r2, [pc, #16]	; (8009af8 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8009ae8:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 8009aec:	fba2 2303 	umull	r2, r3, r2, r3
 8009af0:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 8009af2:	3301      	adds	r3, #1
 8009af4:	81a3      	strh	r3, [r4, #12]
}
 8009af6:	bd10      	pop	{r4, pc}
 8009af8:	10624dd3 	.word	0x10624dd3

08009afc <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 8009afc:	8983      	ldrh	r3, [r0, #12]
 8009afe:	b13b      	cbz	r3, 8009b10 <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29b      	uxth	r3, r3
{
 8009b04:	b510      	push	{r4, lr}
 8009b06:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 8009b08:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 8009b0a:	b11b      	cbz	r3, 8009b14 <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 8009b0c:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 8009b0e:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8009b10:	2001      	movs	r0, #1
}
 8009b12:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 8009b14:	7e03      	ldrb	r3, [r0, #24]
 8009b16:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8009b1a:	6880      	ldr	r0, [r0, #8]
 8009b1c:	fb91 f1f3 	sdiv	r1, r1, r3
 8009b20:	f000 f948 	bl	8009db4 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 8009b24:	2001      	movs	r0, #1
 8009b26:	73a0      	strb	r0, [r4, #14]
}
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	bf00      	nop

08009b2c <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 8009b2c:	7b80      	ldrb	r0, [r0, #14]
 8009b2e:	4770      	bx	lr

08009b30 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 8009b30:	73c1      	strb	r1, [r0, #15]
}
 8009b32:	4770      	bx	lr

08009b34 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 8009b34:	7bc0      	ldrb	r0, [r0, #15]
 8009b36:	4770      	bx	lr

08009b38 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 8009b38:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8009b3a:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 8009b3e:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8009b40:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8009b42:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8009b46:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009b4a:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009b4c:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8009b4e:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8009b52:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8009b54:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8009b58:	6259      	str	r1, [r3, #36]	; 0x24
 8009b5a:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8009b5e:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8009b60:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8009b62:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8009b64:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8009b68:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009b6c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8009b70:	619a      	str	r2, [r3, #24]
 8009b72:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8009b74:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8009b78:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8009b7c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009b80:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8009b84:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009b86:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	f042 0201 	orr.w	r2, r2, #1
 8009b8e:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8009b98:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8009b9c:	b13a      	cbz	r2, 8009bae <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8009b9e:	3a01      	subs	r2, #1
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	3201      	adds	r2, #1
  }
}
 8009ba4:	bc70      	pop	{r4, r5, r6}
 8009ba6:	0092      	lsls	r2, r2, #2
 8009ba8:	3028      	adds	r0, #40	; 0x28
 8009baa:	f001 be29 	b.w	800b800 <memset>
 8009bae:	bc70      	pop	{r4, r5, r6}
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop

08009bb4 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 8009bb4:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8009bb6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 8009bba:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8009bbc:	b13a      	cbz	r2, 8009bce <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8009bbe:	3a01      	subs	r2, #1
 8009bc0:	b2d2      	uxtb	r2, r2
 8009bc2:	3201      	adds	r2, #1
 8009bc4:	0092      	lsls	r2, r2, #2
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	3028      	adds	r0, #40	; 0x28
 8009bca:	f001 fe19 	bl	800b800 <memset>
  }
  pHandle->SensorIsReliable = true;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8009bd4:	bd10      	pop	{r4, pc}
 8009bd6:	bf00      	nop

08009bd8 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8009bd8:	6a01      	ldr	r1, [r0, #32]
 8009bda:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8009bdc:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 8009bde:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8009be0:	b289      	uxth	r1, r1
 8009be2:	fb02 f201 	mul.w	r2, r2, r1
{
 8009be6:	4603      	mov	r3, r0
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	bfb8      	it	lt
 8009bec:	f64f 70ff 	movwlt	r0, #65535	; 0xffff

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8009bf0:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8009bf4:	689c      	ldr	r4, [r3, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009bf6:	bfb8      	it	lt
 8009bf8:	1812      	addlt	r2, r2, r0
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8009bfa:	7858      	ldrb	r0, [r3, #1]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009bfc:	1412      	asrs	r2, r2, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8009bfe:	fb00 f002 	mul.w	r0, r0, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8009c02:	1a51      	subs	r1, r2, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8009c04:	b200      	sxth	r0, r0
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8009c06:	fa04 f181 	sxtah	r1, r4, r1
  pHandle->_Super.hElAngle = elAngle;
 8009c0a:	8098      	strh	r0, [r3, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 8009c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8009c10:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8009c12:	6099      	str	r1, [r3, #8]
}
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop

08009c18 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8009c18:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8009c1a:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8009c1c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009c20:	68dc      	ldr	r4, [r3, #12]
 8009c22:	f024 0401 	bic.w	r4, r4, #1
 8009c26:	60dc      	str	r4, [r3, #12]
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
  pHandle->TimerOverflowNb = 0;
 8009c28:	2600      	movs	r6, #0
  return (uint32_t)(READ_REG(TIMx->CNT));
 8009c2a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  OverflowCntSample = pHandle->TimerOverflowNb;
 8009c2c:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
 8009c30:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8009c34:	681e      	ldr	r6, [r3, #0]
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 8009c36:	0fef      	lsrs	r7, r5, #31
 8009c38:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009c3c:	bf1c      	itt	ne
 8009c3e:	f06f 0601 	mvnne.w	r6, #1
 8009c42:	611e      	strne	r6, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009c44:	68de      	ldr	r6, [r3, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 8009c46:	b2a4      	uxth	r4, r4
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 8009c48:	443c      	add	r4, r7
 8009c4a:	f046 0601 	orr.w	r6, r6, #1
 8009c4e:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8009c52:	60de      	str	r6, [r3, #12]
  {
    pHandle->TimerOverflowError = true;
 8009c54:	bf8a      	itet	hi
 8009c56:	2601      	movhi	r6, #1
 8009c58:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
 8009c5c:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8009c60:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8009c64:	f1bc 0f00 	cmp.w	ip, #0
 8009c68:	f000 808d 	beq.w	8009d86 <ENC_CalcAvrgMecSpeedUnit+0x16e>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8009c6c:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009c70:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8009c74:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8009c78:	1aeb      	subs	r3, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009c7a:	f10c 0c0a 	add.w	ip, ip, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8009c7e:	fb07 3414 	mls	r4, r7, r4, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009c82:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c86:	2a00      	cmp	r2, #0
 8009c88:	f000 808d 	beq.w	8009da6 <ENC_CalcAvrgMecSpeedUnit+0x18e>
 8009c8c:	2a01      	cmp	r2, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c90:	d939      	bls.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c92:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c94:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c96:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c98:	d035      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c9a:	6b04      	ldr	r4, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009c9c:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009c9e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009ca0:	d031      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009ca2:	6b44      	ldr	r4, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009ca4:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009ca6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009ca8:	d02d      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009caa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cac:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cae:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cb0:	d029      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cb2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cb4:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cb6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cb8:	d025      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cba:	6c04      	ldr	r4, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cbc:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cbe:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cc0:	d021      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cc2:	6c44      	ldr	r4, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cc4:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cc6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cc8:	d01d      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cca:	6c84      	ldr	r4, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009ccc:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cce:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cd0:	d019      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cd2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cd4:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cd6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cd8:	d015      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cda:	6d04      	ldr	r4, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cdc:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cde:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009ce0:	d011      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009ce2:	6d44      	ldr	r4, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009ce4:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009ce6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009ce8:	d00d      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cea:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cec:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cee:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cf0:	d009      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cf2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cf4:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cf6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cf8:	d005      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cfa:	6e04      	ldr	r4, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009cfc:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009cfe:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009d00:	d001      	beq.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009d02:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8009d04:	4423      	add	r3, r4
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8009d06:	6a44      	ldr	r4, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8009d08:	fb07 f202 	mul.w	r2, r7, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8009d0c:	fb04 f303 	mul.w	r3, r4, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8009d10:	fb93 f3f2 	sdiv	r3, r3, r2
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8009d14:	b21f      	sxth	r7, r3
 8009d16:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009d18:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 8009d1c:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8009d20:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8009d24:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8009d28:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009d2a:	340a      	adds	r4, #10
  pHandle->DeltaCapturesIndex++;
 8009d2c:	3201      	adds	r2, #1
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009d2e:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8009d32:	69c4      	ldr	r4, [r0, #28]
  pHandle->PreviousCapture = CntCapture;
 8009d34:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8009d3e:	eba3 020c 	sub.w	r2, r3, ip
 8009d42:	8242      	strh	r2, [r0, #18]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009d44:	fb07 f30e 	mul.w	r3, r7, lr

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8009d48:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8009d4c:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8009d50:	7845      	ldrb	r5, [r0, #1]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8009d52:	42ba      	cmp	r2, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8009d54:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8009d58:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 8009d5c:	fb93 f3f5 	sdiv	r3, r3, r5
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8009d60:	fb04 f403 	mul.w	r4, r4, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8009d64:	8b43      	ldrh	r3, [r0, #26]
 8009d66:	fb94 f4f3 	sdiv	r4, r4, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 8009d6a:	bf08      	it	eq
 8009d6c:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8009d6e:	81c4      	strh	r4, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8009d70:	bf08      	it	eq
 8009d72:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8009d76:	b1c6      	cbz	r6, 8009daa <ENC_CalcAvrgMecSpeedUnit+0x192>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009d78:	78c2      	ldrb	r2, [r0, #3]
 8009d7a:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8009d86:	f8b0 c072 	ldrh.w	ip, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009d8a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8009d8e:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8009d92:	eba5 0c0c 	sub.w	ip, r5, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009d96:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8009d98:	fb07 c404 	mla	r4, r7, r4, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009d9c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8009da0:	2a00      	cmp	r2, #0
 8009da2:	f47f af73 	bne.w	8009c8c <ENC_CalcAvrgMecSpeedUnit+0x74>
  int32_t wOverallAngleVariation = 0;
 8009da6:	4613      	mov	r3, r2
 8009da8:	e7ad      	b.n	8009d06 <ENC_CalcAvrgMecSpeedUnit+0xee>
}
 8009daa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8009dae:	f001 b9bd 	b.w	800b12c <SPD_IsMecSpeedReliable>
 8009db2:	bf00      	nop

08009db4 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8009db4:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8009db6:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8009db8:	fb03 f301 	mul.w	r3, r3, r1
 8009dbc:	8083      	strh	r3, [r0, #4]
  if ( hMecAngle < 0 )
 8009dbe:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8009dc0:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8009dc2:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8009dc4:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8009dc8:	4905      	ldr	r1, [pc, #20]	; (8009de0 <ENC_SetMecAngle+0x2c>)
 8009dca:	bfbc      	itt	lt
 8009dcc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009dd0:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8009dd2:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8009dd6:	fba1 1303 	umull	r1, r3, r1, r3
 8009dda:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8009ddc:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8009dde:	4770      	bx	lr
 8009de0:	80008001 	.word	0x80008001

08009de4 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8009de4:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8009de6:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8009de8:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8009dec:	3301      	adds	r3, #1
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop

08009df8 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8009dfc:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8009dfe:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8009e02:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8009e06:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009e0a:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8009e0e:	4770      	bx	lr

08009e10 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8009e10:	b120      	cbz	r0, 8009e1c <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8009e12:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8009e16:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8009e18:	9b00      	ldr	r3, [sp, #0]
 8009e1a:	60c3      	str	r3, [r0, #12]
  }
}
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop

08009e20 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8009e20:	b190      	cbz	r0, 8009e48 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8009e22:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8009e24:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8009e26:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009e28:	b151      	cbz	r1, 8009e40 <FCP_CalcCRC+0x20>
 8009e2a:	1c82      	adds	r2, r0, #2
 8009e2c:	3901      	subs	r1, #1
 8009e2e:	fa52 f181 	uxtab	r1, r2, r1
 8009e32:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8009e34:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009e38:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009e3a:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8009e3c:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8009e3e:	d1f9      	bne.n	8009e34 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8009e40:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8009e44:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop

08009e4c <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e52:	4604      	mov	r4, r0
 8009e54:	2100      	movs	r1, #0
 8009e56:	f001 fcd3 	bl	800b800 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8009e60:	bd10      	pop	{r4, pc}
 8009e62:	bf00      	nop

08009e64 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8009e64:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8009e68:	1c53      	adds	r3, r2, #1
 8009e6a:	b29b      	uxth	r3, r3
{
 8009e6c:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8009e6e:	2b7f      	cmp	r3, #127	; 0x7f
{
 8009e70:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8009e72:	bf88      	it	hi
 8009e74:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8009e76:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8009e7a:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8009e7c:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8009e80:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009e84:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8009e88:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8009e8a:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009e8c:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009e90:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009e92:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009e94:	d1fa      	bne.n	8009e8c <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	bfb8      	it	lt
 8009e9a:	327f      	addlt	r2, #127	; 0x7f
 8009e9c:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8009e9e:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8009ea2:	bc70      	pop	{r4, r5, r6}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop

08009ea8 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8009ea8:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop

08009eb0 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8009eb0:	8a03      	ldrh	r3, [r0, #16]
 8009eb2:	8b42      	ldrh	r2, [r0, #26]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d306      	bcc.n	8009ec6 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8009eb8:	8b82      	ldrh	r2, [r0, #28]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d901      	bls.n	8009ec2 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8009ebe:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8009ec0:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8009ec2:	8ac0      	ldrh	r0, [r0, #22]
 8009ec4:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8009ec6:	2008      	movs	r0, #8
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop

08009ecc <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	8203      	strh	r3, [r0, #16]
}
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop

08009ed4 <NTC_Init>:
{
 8009ed4:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8009ed6:	7803      	ldrb	r3, [r0, #0]
{
 8009ed8:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8009eda:	b123      	cbz	r3, 8009ee6 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009edc:	8a43      	ldrh	r3, [r0, #18]
 8009ede:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	82c2      	strh	r2, [r0, #22]
}
 8009ee4:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8009ee6:	3004      	adds	r0, #4
 8009ee8:	f7fa f91e 	bl	8004128 <RCM_RegisterRegConv>
 8009eec:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f7ff ffeb 	bl	8009ecc <NTC_Clear>
}
 8009ef6:	bd10      	pop	{r4, pc}

08009ef8 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8009ef8:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009efa:	7803      	ldrb	r3, [r0, #0]
{
 8009efc:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8009efe:	b113      	cbz	r3, 8009f06 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8009f00:	2000      	movs	r0, #0
 8009f02:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8009f04:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009f06:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8009f0a:	f7fa f9e1 	bl	80042d0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8009f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f12:	4298      	cmp	r0, r3
 8009f14:	d007      	beq.n	8009f26 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8009f16:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8009f18:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8009f1a:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8009f1c:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8009f20:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8009f24:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8009f26:	4620      	mov	r0, r4
 8009f28:	f7ff ffc2 	bl	8009eb0 <NTC_SetFaultState>
 8009f2c:	82e0      	strh	r0, [r4, #22]
}
 8009f2e:	bd10      	pop	{r4, pc}

08009f30 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8009f30:	7803      	ldrb	r3, [r0, #0]
 8009f32:	b983      	cbnz	r3, 8009f56 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8009f34:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8009f36:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8009f38:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009f3c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8009f3e:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8009f40:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bfbc      	itt	lt
 8009f48:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8009f4c:	33ff      	addlt	r3, #255	; 0xff
 8009f4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8009f52:	b200      	sxth	r0, r0
 8009f54:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8009f56:	8a80      	ldrh	r0, [r0, #20]
}
 8009f58:	b200      	sxth	r0, r0
 8009f5a:	4770      	bx	lr

08009f5c <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8009f5c:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8009f5e:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009f60:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8009f62:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009f64:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8009f66:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8009f68:	6283      	str	r3, [r0, #40]	; 0x28
}
 8009f6a:	4770      	bx	lr

08009f6c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8009f6c:	8081      	strh	r1, [r0, #4]
}
 8009f6e:	4770      	bx	lr

08009f70 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8009f70:	80c1      	strh	r1, [r0, #6]
}
 8009f72:	4770      	bx	lr

08009f74 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8009f74:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop

08009f7c <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8009f7c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop

08009f84 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8009f84:	6081      	str	r1, [r0, #8]

  return;
}
 8009f86:	4770      	bx	lr

08009f88 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8009f88:	8b00      	ldrh	r0, [r0, #24]
 8009f8a:	4770      	bx	lr

08009f8c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8009f8c:	8b40      	ldrh	r0, [r0, #26]
 8009f8e:	4770      	bx	lr

08009f90 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8009f90:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8009f92:	4770      	bx	lr

08009f94 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8009f94:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop

08009f9c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009f9c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8009fa0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8009fa4:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009fa6:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009faa:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009fae:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8009fb2:	b162      	cbz	r2, 8009fce <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8009fb4:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009fb6:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8009fba:	1872      	adds	r2, r6, r1
 8009fbc:	d420      	bmi.n	800a000 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	db29      	blt.n	800a016 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8009fc2:	68c1      	ldr	r1, [r0, #12]
 8009fc4:	4291      	cmp	r1, r2
 8009fc6:	db03      	blt.n	8009fd0 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8009fc8:	6901      	ldr	r1, [r0, #16]
 8009fca:	4291      	cmp	r1, r2
 8009fcc:	dc00      	bgt.n	8009fd0 <PI_Controller+0x34>
 8009fce:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8009fd0:	8b86      	ldrh	r6, [r0, #28]
 8009fd2:	8bc2      	ldrh	r2, [r0, #30]
 8009fd4:	4133      	asrs	r3, r6
 8009fd6:	fa41 f202 	asr.w	r2, r1, r2
 8009fda:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	da05      	bge.n	8009fec <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8009fe0:	1ae3      	subs	r3, r4, r3
 8009fe2:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8009fe4:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	bc70      	pop	{r4, r5, r6}
 8009fea:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8009fec:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8009fee:	bfc9      	itett	gt
 8009ff0:	1aeb      	subgt	r3, r5, r3
 8009ff2:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8009ff4:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8009ff6:	18c9      	addgt	r1, r1, r3
 8009ff8:	6081      	str	r1, [r0, #8]
}
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	bc70      	pop	{r4, r5, r6}
 8009ffe:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 800a000:	2e00      	cmp	r6, #0
 800a002:	ddde      	ble.n	8009fc2 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 800a004:	2900      	cmp	r1, #0
 800a006:	dddc      	ble.n	8009fc2 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800a008:	68c1      	ldr	r1, [r0, #12]
 800a00a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a00e:	4291      	cmp	r1, r2
 800a010:	d1de      	bne.n	8009fd0 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 800a012:	460a      	mov	r2, r1
 800a014:	e7db      	b.n	8009fce <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 800a016:	4e03      	ldr	r6, [pc, #12]	; (800a024 <PI_Controller+0x88>)
 800a018:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 800a01c:	bf28      	it	cs
 800a01e:	4632      	movcs	r2, r6
 800a020:	e7cf      	b.n	8009fc2 <PI_Controller+0x26>
 800a022:	bf00      	nop
 800a024:	80000001 	.word	0x80000001

0800a028 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 800a028:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800a02a:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800a02e:	8b11      	ldrh	r1, [r2, #24]
 800a030:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800a032:	8995      	ldrh	r5, [r2, #12]
 800a034:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800a036:	fb13 f301 	smulbb	r3, r3, r1
{
 800a03a:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800a03c:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800a040:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800a044:	f7ff fcf0 	bl	8009a28 <VBS_GetAvBusVoltage_V>
 800a048:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 800a04c:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800a04e:	480e      	ldr	r0, [pc, #56]	; (800a088 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 800a050:	490e      	ldr	r1, [pc, #56]	; (800a08c <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 800a052:	bfb8      	it	lt
 800a054:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800a058:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 800a05c:	bfb8      	it	lt
 800a05e:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800a060:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 800a062:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800a064:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 800a068:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800a06c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a070:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800a072:	fb81 2103 	smull	r2, r1, r1, r3
 800a076:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800a078:	4630      	mov	r0, r6
 800a07a:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 800a07e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800a082:	f7ff beef 	b.w	8009e64 <MPM_CalcElMotorPower>
 800a086:	bf00      	nop
 800a088:	1b4e81b5 	.word	0x1b4e81b5
 800a08c:	66666667 	.word	0x66666667

0800a090 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 800a090:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800a092:	4b18      	ldr	r3, [pc, #96]	; (800a0f4 <startTimers+0x64>)
 800a094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a096:	07d2      	lsls	r2, r2, #31
 800a098:	b082      	sub	sp, #8
 800a09a:	d415      	bmi.n	800a0c8 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a09c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a09e:	f042 0201 	orr.w	r2, r2, #1
 800a0a2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a0a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a0a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a0aa:	f002 0201 	and.w	r2, r2, #1
 800a0ae:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800a0b0:	9a01      	ldr	r2, [sp, #4]
 800a0b2:	694a      	ldr	r2, [r1, #20]
 800a0b4:	f042 0201 	orr.w	r2, r2, #1
 800a0b8:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800a0ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0bc:	f022 0201 	bic.w	r2, r2, #1
 800a0c0:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800a0c2:	b002      	add	sp, #8
 800a0c4:	bc30      	pop	{r4, r5}
 800a0c6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800a0c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a0cc:	4c0a      	ldr	r4, [pc, #40]	; (800a0f8 <startTimers+0x68>)
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	6859      	ldr	r1, [r3, #4]
 800a0d2:	4d0a      	ldr	r5, [pc, #40]	; (800a0fc <startTimers+0x6c>)
 800a0d4:	4021      	ands	r1, r4
 800a0d6:	f041 0120 	orr.w	r1, r1, #32
 800a0da:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a0dc:	6958      	ldr	r0, [r3, #20]
 800a0de:	f040 0001 	orr.w	r0, r0, #1
 800a0e2:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a0e4:	6859      	ldr	r1, [r3, #4]
 800a0e6:	402a      	ands	r2, r5
 800a0e8:	4021      	ands	r1, r4
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
}
 800a0ee:	b002      	add	sp, #8
 800a0f0:	bc30      	pop	{r4, r5}
 800a0f2:	4770      	bx	lr
 800a0f4:	40021000 	.word	0x40021000
 800a0f8:	fdffff8f 	.word	0xfdffff8f
 800a0fc:	02000070 	.word	0x02000070

0800a100 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 800a100:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 800a102:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 800a104:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 800a108:	d11a      	bne.n	800a140 <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800a10a:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800a10c:	3201      	adds	r2, #1
 800a10e:	0856      	lsrs	r6, r2, #1
 800a110:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a112:	f06f 0702 	mvn.w	r7, #2
 800a116:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800a118:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 800a11a:	781c      	ldrb	r4, [r3, #0]
 800a11c:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 800a11e:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 800a122:	d80b      	bhi.n	800a13c <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800a124:	6904      	ldr	r4, [r0, #16]
 800a126:	07a4      	lsls	r4, r4, #30
 800a128:	d5f7      	bpl.n	800a11a <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 800a12a:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800a12c:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a12e:	6107      	str	r7, [r0, #16]
 800a130:	d8f3      	bhi.n	800a11a <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 800a132:	781c      	ldrb	r4, [r3, #0]
 800a134:	2c0f      	cmp	r4, #15
 800a136:	d8f0      	bhi.n	800a11a <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 800a138:	2301      	movs	r3, #1
 800a13a:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 800a13c:	bcf0      	pop	{r4, r5, r6, r7}
 800a13e:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800a140:	2c60      	cmp	r4, #96	; 0x60
 800a142:	d1e3      	bne.n	800a10c <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800a144:	3201      	adds	r2, #1
 800a146:	0156      	lsls	r6, r2, #5
 800a148:	e7e3      	b.n	800a112 <waitForPolarizationEnd+0x12>
 800a14a:	bf00      	nop

0800a14c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800a14c:	6843      	ldr	r3, [r0, #4]
 800a14e:	4718      	bx	r3

0800a150 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800a150:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a152:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a156:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 800a158:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a15a:	140c      	asrs	r4, r1, #16
{
 800a15c:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a15e:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a162:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a164:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800a168:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 800a16c:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a170:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800a174:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a178:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800a17c:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800a180:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800a184:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800a188:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 800a18c:	db77      	blt.n	800a27e <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800a18e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a192:	db4e      	blt.n	800a232 <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a194:	1aad      	subs	r5, r5, r2
 800a196:	bf44      	itt	mi
 800a198:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a19c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800a1a0:	2900      	cmp	r1, #0
 800a1a2:	bfbc      	itt	lt
 800a1a4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800a1a8:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	bfb8      	it	lt
 800a1b0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a1b4:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a1b8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a1bc:	bfb8      	it	lt
 800a1be:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 800a1c2:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 800a1c4:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a1c8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 800a1cc:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 800a1d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 800a1d4:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a1d6:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 800a1d8:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 800a1dc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800a1e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1e8:	b292      	uxth	r2, r2
 800a1ea:	b289      	uxth	r1, r1
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800a1f0:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 800a1f2:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 800a1f4:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 800a1f6:	d118      	bne.n	800a22a <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800a1f8:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 800a1fc:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 800a200:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 800a202:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 800a206:	bfcc      	ite	gt
 800a208:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800a20a:	1b12      	suble	r2, r2, r4
 800a20c:	b292      	uxth	r2, r2
 800a20e:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 800a210:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 800a214:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 800a216:	bfcc      	ite	gt
 800a218:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800a21a:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 800a21c:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800a21e:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800a220:	bfcc      	ite	gt
 800a222:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800a224:	1b1b      	suble	r3, r3, r4
 800a226:	8681      	strh	r1, [r0, #52]	; 0x34
 800a228:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800a22a:	6983      	ldr	r3, [r0, #24]
}
 800a22c:	b003      	add	sp, #12
 800a22e:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800a230:	4718      	bx	r3
      if ( wX <= 0 )
 800a232:	2c00      	cmp	r4, #0
 800a234:	dd47      	ble.n	800a2c6 <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a236:	1aa5      	subs	r5, r4, r2
 800a238:	bf44      	itt	mi
 800a23a:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a23e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800a242:	2900      	cmp	r1, #0
 800a244:	bfb8      	it	lt
 800a246:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 800a24a:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 800a24e:	bfb8      	it	lt
 800a250:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 800a254:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a258:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 800a25a:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a25c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a260:	bfb8      	it	lt
 800a262:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800a266:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a26a:	bfb8      	it	lt
 800a26c:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800a270:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 800a274:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800a278:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a27a:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800a27c:	e7ac      	b.n	800a1d8 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 800a27e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a282:	db69      	blt.n	800a358 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 800a284:	2c00      	cmp	r4, #0
 800a286:	dd43      	ble.n	800a310 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a288:	1b2d      	subs	r5, r5, r4
 800a28a:	bf48      	it	mi
 800a28c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800a290:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a294:	bf48      	it	mi
 800a296:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bfb8      	it	lt
 800a29e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800a2a2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a2a6:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a2aa:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 800a2ae:	bfb8      	it	lt
 800a2b0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 800a2b4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800a2b8:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 800a2bc:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a2be:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a2c0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800a2c4:	e788      	b.n	800a1d8 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a2c6:	1b2d      	subs	r5, r5, r4
 800a2c8:	bf44      	itt	mi
 800a2ca:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a2ce:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	bfb8      	it	lt
 800a2d6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 800a2da:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 800a2de:	bfb8      	it	lt
 800a2e0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 800a2e4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 800a2e8:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800a2ea:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a2ee:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800a2f2:	bfb8      	it	lt
 800a2f4:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800a2f8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800a2fc:	bfb8      	it	lt
 800a2fe:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800a302:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 800a306:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800a30a:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800a30c:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800a30e:	e763      	b.n	800a1d8 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a310:	1aa5      	subs	r5, r4, r2
 800a312:	bf44      	itt	mi
 800a314:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a318:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 800a31c:	2900      	cmp	r1, #0
 800a31e:	bfb8      	it	lt
 800a320:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 800a324:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 800a328:	bfb8      	it	lt
 800a32a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800a32e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a332:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 800a334:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800a336:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a33a:	bfb8      	it	lt
 800a33c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800a340:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800a344:	bfb8      	it	lt
 800a346:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800a34a:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800a34e:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800a350:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800a352:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800a356:	e73f      	b.n	800a1d8 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a358:	1aad      	subs	r5, r5, r2
 800a35a:	bf44      	itt	mi
 800a35c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800a360:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800a364:	2900      	cmp	r1, #0
 800a366:	bfbc      	itt	lt
 800a368:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800a36c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfb8      	it	lt
 800a374:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800a378:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800a37c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a380:	bfb8      	it	lt
 800a382:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800a386:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 800a388:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800a38c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 800a390:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 800a394:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800a396:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800a398:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800a39c:	e71c      	b.n	800a1d8 <PWMC_SetPhaseVoltage+0x88>
 800a39e:	bf00      	nop

0800a3a0 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 800a3a0:	6883      	ldr	r3, [r0, #8]
 800a3a2:	4718      	bx	r3

0800a3a4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800a3a4:	b510      	push	{r4, lr}
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800a3aa:	b199      	cbz	r1, 800a3d4 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800a3ac:	2901      	cmp	r1, #1
 800a3ae:	d002      	beq.n	800a3b6 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 800a3b0:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800a3b2:	b002      	add	sp, #8
 800a3b4:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800a3b6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800a3ba:	b1cb      	cbz	r3, 800a3f0 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	9101      	str	r1, [sp, #4]
 800a3c2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1f2      	bne.n	800a3b0 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800a3ca:	6903      	ldr	r3, [r0, #16]
 800a3cc:	4798      	blx	r3
        retVal = true;
 800a3ce:	9901      	ldr	r1, [sp, #4]
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	e7ee      	b.n	800a3b2 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 800a3d4:	f7ff ffe4 	bl	800a3a0 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800a3d8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800a3dc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1e5      	bne.n	800a3b0 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	4798      	blx	r3
      retVal = true;
 800a3ea:	2001      	movs	r0, #1
}
 800a3ec:	b002      	add	sp, #8
 800a3ee:	bd10      	pop	{r4, pc}
      retVal = true;
 800a3f0:	4608      	mov	r0, r1
}
 800a3f2:	b002      	add	sp, #8
 800a3f4:	bd10      	pop	{r4, pc}
 800a3f6:	bf00      	nop

0800a3f8 <PWMC_TurnOnLowSides>:
  *
  * @param  pHandle: handle on the target instance of the PWMC component
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle )
{
  pHandle->pFctTurnOnLowSides( pHandle );
 800a3f8:	6943      	ldr	r3, [r0, #20]
 800a3fa:	4718      	bx	r3

0800a3fc <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800a3fc:	69c3      	ldr	r3, [r0, #28]
 800a3fe:	4718      	bx	r3

0800a400 <PWMC_GetTurnOnLowSidesAction>:
 *         controlled by the @p pHandle PWMC component: true if it
 *         is active, false otherwise*/
__weak bool PWMC_GetTurnOnLowSidesAction( PWMC_Handle_t * pHandle )
{
  return pHandle->TurnOnLowSidesAction;
}
 800a400:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop

0800a408 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a408:	6883      	ldr	r3, [r0, #8]
 800a40a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a40e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a412:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a414:	6883      	ldr	r3, [r0, #8]
 800a416:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 800a418:	b082      	sub	sp, #8
 800a41a:	d418      	bmi.n	800a44e <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800a41c:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 800a41e:	6882      	ldr	r2, [r0, #8]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4924      	ldr	r1, [pc, #144]	; (800a4b4 <R3_2_ADCxInit+0xac>)
 800a424:	099b      	lsrs	r3, r3, #6
 800a426:	fba1 1303 	umull	r1, r3, r1, r3
 800a42a:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800a42e:	099b      	lsrs	r3, r3, #6
 800a430:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a43a:	6082      	str	r2, [r0, #8]
 800a43c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	b12b      	cbz	r3, 800a44e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	3b01      	subs	r3, #1
 800a446:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a448:	9b01      	ldr	r3, [sp, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f9      	bne.n	800a442 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800a44e:	6883      	ldr	r3, [r0, #8]
 800a450:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a45c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a45e:	6883      	ldr	r3, [r0, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	dbfc      	blt.n	800a45e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a464:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800a466:	07da      	lsls	r2, r3, #31
 800a468:	d408      	bmi.n	800a47c <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800a46a:	4a13      	ldr	r2, [pc, #76]	; (800a4b8 <R3_2_ADCxInit+0xb0>)
 800a46c:	6883      	ldr	r3, [r0, #8]
 800a46e:	4013      	ands	r3, r2
 800a470:	f043 0301 	orr.w	r3, r3, #1
 800a474:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a476:	6803      	ldr	r3, [r0, #0]
 800a478:	07db      	lsls	r3, r3, #31
 800a47a:	d5f7      	bpl.n	800a46c <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 800a47c:	6882      	ldr	r2, [r0, #8]
 800a47e:	490e      	ldr	r1, [pc, #56]	; (800a4b8 <R3_2_ADCxInit+0xb0>)
 800a480:	400a      	ands	r2, r1
 800a482:	f042 0208 	orr.w	r2, r2, #8
 800a486:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a488:	6882      	ldr	r2, [r0, #8]
 800a48a:	400a      	ands	r2, r1
 800a48c:	f042 0220 	orr.w	r2, r2, #32
 800a490:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800a492:	68c3      	ldr	r3, [r0, #12]
 800a494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a49c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4a0:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 800a4a2:	6883      	ldr	r3, [r0, #8]
 800a4a4:	400b      	ands	r3, r1
 800a4a6:	f043 0304 	orr.w	r3, r3, #4
 800a4aa:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 800a4ac:	b002      	add	sp, #8
 800a4ae:	4770      	bx	lr
 800a4b0:	20000dd0 	.word	0x20000dd0
 800a4b4:	053e2d63 	.word	0x053e2d63
 800a4b8:	7fffffc0 	.word	0x7fffffc0

0800a4bc <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800a4bc:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a4be:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800a4c0:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 800a4c4:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800a4c8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a4cc:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800a4ce:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a4d0:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800a4d2:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800a4d4:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800a4d6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a4d8:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800a4da:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a4dc:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a4de:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a4e0:	4904      	ldr	r1, [pc, #16]	; (800a4f4 <R3_2_SetADCSampPointPolarization+0x38>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
}
 800a4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a4e8:	420b      	tst	r3, r1
}
 800a4ea:	bf14      	ite	ne
 800a4ec:	2001      	movne	r0, #1
 800a4ee:	2000      	moveq	r0, #0
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	02000070 	.word	0x02000070

0800a4f8 <R3_2_SetADCSampPointSectX>:
{
 800a4f8:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800a4fa:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 800a4fe:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800a500:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800a502:	1aca      	subs	r2, r1, r3
 800a504:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 800a508:	b292      	uxth	r2, r2
 800a50a:	42b2      	cmp	r2, r6
 800a50c:	d914      	bls.n	800a538 <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800a50e:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 800a510:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800a512:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 800a514:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a518:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800a51a:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800a51c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800a51e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a520:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a522:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a524:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a526:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a528:	6852      	ldr	r2, [r2, #4]
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <R3_2_SetADCSampPointSectX+0x70>)
 800a52c:	421a      	tst	r2, r3
}
 800a52e:	bf14      	ite	ne
 800a530:	2001      	movne	r0, #1
 800a532:	2000      	moveq	r0, #0
 800a534:	bc70      	pop	{r4, r5, r6}
 800a536:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800a538:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 800a53a:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800a53c:	b2ad      	uxth	r5, r5
 800a53e:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 800a542:	d904      	bls.n	800a54e <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800a544:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 800a548:	1a9b      	subs	r3, r3, r2
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	e7e4      	b.n	800a518 <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800a54e:	4433      	add	r3, r6
 800a550:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800a552:	4299      	cmp	r1, r3
 800a554:	d8e0      	bhi.n	800a518 <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800a556:	43db      	mvns	r3, r3
 800a558:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800a55c:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800a560:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800a562:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800a566:	e7d7      	b.n	800a518 <R3_2_SetADCSampPointSectX+0x20>
 800a568:	02000070 	.word	0x02000070

0800a56c <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800a56c:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a56e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a570:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 800a574:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800a576:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a57a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800a57e:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a580:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a582:	6853      	ldr	r3, [r2, #4]
 800a584:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a58c:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800a58e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800a592:	2b0f      	cmp	r3, #15
 800a594:	d80b      	bhi.n	800a5ae <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 800a596:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800a59a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 800a59e:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 800a5a0:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 800a5a2:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 800a5a4:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800a5ae:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800a5b0:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 800a5b2:	600b      	str	r3, [r1, #0]
}
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop

0800a5b8 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a5b8:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800a5ba:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a5bc:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a5c0:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800a5c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5c8:	681c      	ldr	r4, [r3, #0]
 800a5ca:	6853      	ldr	r3, [r2, #4]
 800a5cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a5d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d4:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800a5d6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800a5da:	2b0f      	cmp	r3, #15
 800a5dc:	d808      	bhi.n	800a5f0 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 800a5de:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800a5e2:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800a5e8:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800a5ea:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800a5ee:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800a5f0:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800a5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 800a5f6:	600b      	str	r3, [r1, #0]
}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop

0800a5fc <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a5fc:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 800a5fe:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a600:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800a602:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a606:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a608:	f06f 0001 	mvn.w	r0, #1
 800a60c:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a60e:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a610:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a612:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a614:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800a616:	07db      	lsls	r3, r3, #31
 800a618:	d5fc      	bpl.n	800a614 <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a61a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a61c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a620:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a622:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800a626:	2b02      	cmp	r3, #2
 800a628:	d000      	beq.n	800a62c <R3_2_TurnOnLowSides+0x30>
 800a62a:	4770      	bx	lr
{
 800a62c:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a62e:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a632:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a634:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a638:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a63c:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a640:	61ae      	str	r6, [r5, #24]
 800a642:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800a644:	bc70      	pop	{r4, r5, r6}
 800a646:	619a      	str	r2, [r3, #24]
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop

0800a64c <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a64c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800a64e:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a652:	688b      	ldr	r3, [r1, #8]
{
 800a654:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 800a656:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a658:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 800a65a:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a65e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800a662:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a666:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800a66a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a66c:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a66e:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a670:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a672:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a674:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a676:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800a678:	07d2      	lsls	r2, r2, #31
 800a67a:	d5fc      	bpl.n	800a676 <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a67c:	f06f 0201 	mvn.w	r2, #1
 800a680:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800a682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a688:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a68a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a68c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a690:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a692:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800a696:	2a02      	cmp	r2, #2
 800a698:	d008      	beq.n	800a6ac <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a69a:	f06f 0201 	mvn.w	r2, #1
 800a69e:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a6a0:	68da      	ldr	r2, [r3, #12]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 800a6a6:	bc30      	pop	{r4, r5}
 800a6a8:	60da      	str	r2, [r3, #12]
 800a6aa:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a6ac:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a6ae:	6a0c      	ldr	r4, [r1, #32]
 800a6b0:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a6b4:	f240 5255 	movw	r2, #1365	; 0x555
 800a6b8:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a6ba:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a6be:	d007      	beq.n	800a6d0 <R3_2_SwitchOnPWM+0x84>
 800a6c0:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a6c2:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a6c6:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800a6ca:	6184      	str	r4, [r0, #24]
 800a6cc:	6191      	str	r1, [r2, #24]
}
 800a6ce:	e7e4      	b.n	800a69a <R3_2_SwitchOnPWM+0x4e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800a6d0:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a6d2:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a6d6:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800a6da:	6284      	str	r4, [r0, #40]	; 0x28
 800a6dc:	6291      	str	r1, [r2, #40]	; 0x28
}
 800a6de:	e7dc      	b.n	800a69a <R3_2_SwitchOnPWM+0x4e>

0800a6e0 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a6e0:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800a6e2:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a6e4:	68d3      	ldr	r3, [r2, #12]
 800a6e6:	f023 0301 	bic.w	r3, r3, #1
{
 800a6ea:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 800a6ec:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800a6f0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a6f2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a6f4:	2500      	movs	r5, #0
 800a6f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6fa:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800a6fe:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 800a700:	b91c      	cbnz	r4, 800a70a <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a702:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800a706:	2b02      	cmp	r3, #2
 800a708:	d00d      	beq.n	800a726 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a70a:	f06f 0301 	mvn.w	r3, #1
 800a70e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a710:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800a712:	07db      	lsls	r3, r3, #31
 800a714:	d5fc      	bpl.n	800a710 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a716:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 800a71a:	2300      	movs	r3, #0
 800a71c:	6111      	str	r1, [r2, #16]
}
 800a71e:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 800a720:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 800a724:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a726:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a72a:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800a72e:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a730:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a732:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a736:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800a73a:	62a5      	str	r5, [r4, #40]	; 0x28
 800a73c:	6299      	str	r1, [r3, #40]	; 0x28
}
 800a73e:	e7e4      	b.n	800a70a <R3_2_SwitchOffPWM+0x2a>

0800a740 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800a740:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a742:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800a744:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a746:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a748:	686a      	ldr	r2, [r5, #4]
 800a74a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800a74e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a752:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800a754:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800a758:	4a0c      	ldr	r2, [pc, #48]	; (800a78c <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800a75a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800a75e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a760:	6800      	ldr	r0, [r0, #0]
 800a762:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 800a764:	4293      	cmp	r3, r2
 800a766:	db05      	blt.n	800a774 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 800a768:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a76c:	4293      	cmp	r3, r2
 800a76e:	dc0a      	bgt.n	800a786 <R3_2_RLGetPhaseCurrents+0x46>
 800a770:	b21b      	sxth	r3, r3
 800a772:	e000      	b.n	800a776 <R3_2_RLGetPhaseCurrents+0x36>
 800a774:	4b06      	ldr	r3, [pc, #24]	; (800a790 <R3_2_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 800a776:	2200      	movs	r2, #0
 800a778:	f363 020f 	bfi	r2, r3, #0, #16
 800a77c:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 800a780:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 800a782:	600a      	str	r2, [r1, #0]
}
 800a784:	4770      	bx	lr
 800a786:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800a78a:	e7f4      	b.n	800a776 <R3_2_RLGetPhaseCurrents+0x36>
 800a78c:	ffff8002 	.word	0xffff8002
 800a790:	ffff8001 	.word	0xffff8001

0800a794 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a794:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 800a796:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a798:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 800a79a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a79e:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a7a0:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a7a4:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a7a6:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a7a8:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800a7aa:	07db      	lsls	r3, r3, #31
 800a7ac:	d5fc      	bpl.n	800a7a8 <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a7ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a7b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7b4:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a7b6:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d000      	beq.n	800a7c0 <R3_2_RLTurnOnLowSides+0x2c>
 800a7be:	4770      	bx	lr
{
 800a7c0:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a7c2:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a7c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a7c8:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a7cc:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a7d0:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a7d4:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a7d6:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 800a7d8:	bc70      	pop	{r4, r5, r6}
 800a7da:	629a      	str	r2, [r3, #40]	; 0x28
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop

0800a7e0 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a7e0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 800a7e2:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a7e4:	688b      	ldr	r3, [r1, #8]
{
 800a7e6:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800a7e8:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 800a7ec:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a7f0:	f06f 0201 	mvn.w	r2, #1
 800a7f4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a7f6:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800a7f8:	07d6      	lsls	r6, r2, #31
 800a7fa:	d5fc      	bpl.n	800a7f6 <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 800a7fc:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a800:	f06f 0701 	mvn.w	r7, #1
 800a804:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a806:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a808:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a80a:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a80c:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a80e:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800a810:	07d2      	lsls	r2, r2, #31
 800a812:	d5fc      	bpl.n	800a80e <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	f042 0201 	orr.w	r2, r2, #1
 800a81a:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a81c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a81e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a822:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a82a:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a82c:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800a830:	2a02      	cmp	r2, #2
 800a832:	d00f      	beq.n	800a854 <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800a834:	2303      	movs	r3, #3
 800a836:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 800a83a:	68aa      	ldr	r2, [r5, #8]
 800a83c:	4913      	ldr	r1, [pc, #76]	; (800a88c <R3_2_RLSwitchOnPWM+0xac>)
 800a83e:	400a      	ands	r2, r1
 800a840:	f042 0208 	orr.w	r2, r2, #8
 800a844:	60aa      	str	r2, [r5, #8]
 800a846:	68a3      	ldr	r3, [r4, #8]
 800a848:	400b      	ands	r3, r1
 800a84a:	f043 0308 	orr.w	r3, r3, #8
 800a84e:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 800a850:	bcf0      	pop	{r4, r5, r6, r7}
 800a852:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a854:	6a1a      	ldr	r2, [r3, #32]
 800a856:	f240 5355 	movw	r3, #1365	; 0x555
 800a85a:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a85c:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800a860:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800a864:	d008      	beq.n	800a878 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a866:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a868:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a86a:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a86e:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800a872:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a874:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a876:	e7dd      	b.n	800a834 <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 800a878:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a87a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800a87c:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800a880:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800a884:	62b7      	str	r7, [r6, #40]	; 0x28
 800a886:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a888:	e7d4      	b.n	800a834 <R3_2_RLSwitchOnPWM+0x54>
 800a88a:	bf00      	nop
 800a88c:	7fffffc0 	.word	0x7fffffc0

0800a890 <R3_2_SetAOReferenceVoltage>:
{
 800a890:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800a892:	0c84      	lsrs	r4, r0, #18
 800a894:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 800a898:	f101 0508 	add.w	r5, r1, #8
 800a89c:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800a89e:	5963      	ldr	r3, [r4, r5]
 800a8a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 800a8ac:	684a      	ldr	r2, [r1, #4]
 800a8ae:	f000 0303 	and.w	r3, r0, #3
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800a8b6:	680a      	ldr	r2, [r1, #0]
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	f000 0010 	and.w	r0, r0, #16
 800a8be:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800a8c2:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a8c6:	4b15      	ldr	r3, [pc, #84]	; (800a91c <R3_2_SetAOReferenceVoltage+0x8c>)
 800a8c8:	d014      	beq.n	800a8f4 <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4c14      	ldr	r4, [pc, #80]	; (800a920 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 800a8ce:	680a      	ldr	r2, [r1, #0]
 800a8d0:	fba4 4303 	umull	r4, r3, r4, r3
 800a8d4:	0cdb      	lsrs	r3, r3, #19
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	4310      	orrs	r0, r2
 800a8da:	6008      	str	r0, [r1, #0]
 800a8dc:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	b12b      	cbz	r3, 800a8ee <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800a8e8:	9b00      	ldr	r3, [sp, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1f9      	bne.n	800a8e2 <R3_2_SetAOReferenceVoltage+0x52>
}
 800a8ee:	b002      	add	sp, #8
 800a8f0:	bc30      	pop	{r4, r5}
 800a8f2:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a8f4:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <R3_2_SetAOReferenceVoltage+0x90>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fc:	0cdb      	lsrs	r3, r3, #19
 800a8fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a902:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d0f1      	beq.n	800a8ee <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a90a:	9b01      	ldr	r3, [sp, #4]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1f9      	bne.n	800a90a <R3_2_SetAOReferenceVoltage+0x7a>
}
 800a916:	b002      	add	sp, #8
 800a918:	bc30      	pop	{r4, r5}
 800a91a:	4770      	bx	lr
 800a91c:	20000dd0 	.word	0x20000dd0
 800a920:	431bde83 	.word	0x431bde83

0800a924 <R3_2_Init>:
{
 800a924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a928:	4607      	mov	r7, r0
 800a92a:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a92c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 800a92e:	f8df e284 	ldr.w	lr, [pc, #644]	; 800abb4 <R3_2_Init+0x290>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800a932:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 800a934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a936:	686a      	ldr	r2, [r5, #4]
 800a938:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a93a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a93c:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a93e:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a940:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a942:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a946:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a948:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800a94c:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800a950:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a952:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a954:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a958:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 800a95c:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a95e:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a960:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a962:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a964:	f022 0220 	bic.w	r2, r2, #32
 800a968:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a96a:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a96c:	6872      	ldr	r2, [r6, #4]
 800a96e:	f022 0204 	bic.w	r2, r2, #4
 800a972:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a974:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a976:	6872      	ldr	r2, [r6, #4]
 800a978:	f022 0220 	bic.w	r2, r2, #32
 800a97c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a97e:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a980:	498b      	ldr	r1, [pc, #556]	; (800abb0 <R3_2_Init+0x28c>)
 800a982:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 800a984:	4574      	cmp	r4, lr
 800a986:	bf0c      	ite	eq
 800a988:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800a98c:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 800a990:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 800a992:	f1bc 0f00 	cmp.w	ip, #0
 800a996:	d014      	beq.n	800a9c2 <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 800a998:	f8dc 2000 	ldr.w	r2, [ip]
 800a99c:	b11a      	cbz	r2, 800a9a6 <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800a99e:	6811      	ldr	r1, [r2, #0]
 800a9a0:	f041 0101 	orr.w	r1, r1, #1
 800a9a4:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800a9a6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800a9aa:	b11a      	cbz	r2, 800a9b4 <R3_2_Init+0x90>
 800a9ac:	6811      	ldr	r1, [r2, #0]
 800a9ae:	f041 0101 	orr.w	r1, r1, #1
 800a9b2:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800a9b4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800a9b8:	b11a      	cbz	r2, 800a9c2 <R3_2_Init+0x9e>
 800a9ba:	6811      	ldr	r1, [r2, #0]
 800a9bc:	f041 0101 	orr.w	r1, r1, #1
 800a9c0:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 800a9c2:	f1bb 0f00 	cmp.w	fp, #0
 800a9c6:	d017      	beq.n	800a9f8 <R3_2_Init+0xd4>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 800a9c8:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 800a9cc:	2a01      	cmp	r2, #1
 800a9ce:	d007      	beq.n	800a9e0 <R3_2_Init+0xbc>
 800a9d0:	9a00      	ldr	r2, [sp, #0]
 800a9d2:	b12a      	cbz	r2, 800a9e0 <R3_2_Init+0xbc>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a9d8:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800a9dc:	f7ff ff58 	bl	800a890 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a9e0:	f8db 3000 	ldr.w	r3, [fp]
 800a9e4:	f043 0301 	orr.w	r3, r3, #1
 800a9e8:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a9ec:	f8db 3000 	ldr.w	r3, [fp]
 800a9f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9f4:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 800a9f8:	f1ba 0f00 	cmp.w	sl, #0
 800a9fc:	d018      	beq.n	800aa30 <R3_2_Init+0x10c>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 800a9fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa00:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 800aa04:	2a01      	cmp	r2, #1
 800aa06:	d007      	beq.n	800aa18 <R3_2_Init+0xf4>
 800aa08:	9a01      	ldr	r2, [sp, #4]
 800aa0a:	b12a      	cbz	r2, 800aa18 <R3_2_Init+0xf4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800aa10:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800aa14:	f7ff ff3c 	bl	800a890 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800aa18:	f8da 3000 	ldr.w	r3, [sl]
 800aa1c:	f043 0301 	orr.w	r3, r3, #1
 800aa20:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800aa24:	f8da 3000 	ldr.w	r3, [sl]
 800aa28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa2c:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 800aa30:	f1b9 0f00 	cmp.w	r9, #0
 800aa34:	d018      	beq.n	800aa68 <R3_2_Init+0x144>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 800aa36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa38:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 800aa3c:	2a01      	cmp	r2, #1
 800aa3e:	d007      	beq.n	800aa50 <R3_2_Init+0x12c>
 800aa40:	9a02      	ldr	r2, [sp, #8]
 800aa42:	b12a      	cbz	r2, 800aa50 <R3_2_Init+0x12c>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800aa44:	4611      	mov	r1, r2
 800aa46:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800aa48:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800aa4c:	f7ff ff20 	bl	800a890 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800aa50:	f8d9 3000 	ldr.w	r3, [r9]
 800aa54:	f043 0301 	orr.w	r3, r3, #1
 800aa58:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800aa5c:	f8d9 3000 	ldr.w	r3, [r9]
 800aa60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa64:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 800aa68:	f1b8 0f00 	cmp.w	r8, #0
 800aa6c:	d018      	beq.n	800aaa0 <R3_2_Init+0x17c>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 800aa6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa70:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 800aa74:	2a01      	cmp	r2, #1
 800aa76:	d007      	beq.n	800aa88 <R3_2_Init+0x164>
 800aa78:	9a03      	ldr	r2, [sp, #12]
 800aa7a:	b12a      	cbz	r2, 800aa88 <R3_2_Init+0x164>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800aa80:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 800aa84:	f7ff ff04 	bl	800a890 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800aa88:	f8d8 3000 	ldr.w	r3, [r8]
 800aa8c:	f043 0301 	orr.w	r3, r3, #1
 800aa90:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800aa94:	f8d8 3000 	ldr.w	r3, [r8]
 800aa98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa9c:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800aaa0:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 800aaa2:	07d8      	lsls	r0, r3, #31
 800aaa4:	d56c      	bpl.n	800ab80 <R3_2_Init+0x25c>
 800aaa6:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800aaa8:	07d9      	lsls	r1, r3, #31
 800aaaa:	d575      	bpl.n	800ab98 <R3_2_Init+0x274>
  volatile uint32_t Brk2Timeout = 1000;
 800aaac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aab0:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800aab2:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800aab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aab6:	f023 0301 	bic.w	r3, r3, #1
 800aaba:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800aabc:	6863      	ldr	r3, [r4, #4]
 800aabe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800aac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac6:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800aac8:	69a3      	ldr	r3, [r4, #24]
 800aaca:	f043 0308 	orr.w	r3, r3, #8
 800aace:	61a3      	str	r3, [r4, #24]
 800aad0:	69a3      	ldr	r3, [r4, #24]
 800aad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aad6:	61a3      	str	r3, [r4, #24]
 800aad8:	69e3      	ldr	r3, [r4, #28]
 800aada:	f043 0308 	orr.w	r3, r3, #8
 800aade:	61e3      	str	r3, [r4, #28]
 800aae0:	69e3      	ldr	r3, [r4, #28]
 800aae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aae6:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800aae8:	6963      	ldr	r3, [r4, #20]
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	6163      	str	r3, [r4, #20]
 800aaf0:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d029      	beq.n	800ab4c <R3_2_Init+0x228>
    if ( pHandle->_Super.Motor == M1 )
 800aaf8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800aafc:	b92b      	cbnz	r3, 800ab0a <R3_2_Init+0x1e6>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800aafe:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d030      	beq.n	800ab68 <R3_2_Init+0x244>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d04a      	beq.n	800aba0 <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800ab0a:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800ab0e:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800ab10:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 800ab14:	b16b      	cbz	r3, 800ab32 <R3_2_Init+0x20e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	05da      	lsls	r2, r3, #23
 800ab1a:	d50a      	bpl.n	800ab32 <R3_2_Init+0x20e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800ab1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800ab20:	9b05      	ldr	r3, [sp, #20]
 800ab22:	b133      	cbz	r3, 800ab32 <R3_2_Init+0x20e>
 800ab24:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 800ab26:	9b05      	ldr	r3, [sp, #20]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	05db      	lsls	r3, r3, #23
 800ab30:	d4f6      	bmi.n	800ab20 <R3_2_Init+0x1fc>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800ab32:	68e3      	ldr	r3, [r4, #12]
 800ab34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab38:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 800ab3a:	6a23      	ldr	r3, [r4, #32]
 800ab3c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800ab40:	f043 0305 	orr.w	r3, r3, #5
 800ab44:	6223      	str	r3, [r4, #32]
}
 800ab46:	b007      	add	sp, #28
 800ab48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800ab4c:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d109      	bne.n	800ab68 <R3_2_Init+0x244>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800ab54:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 800ab58:	2903      	cmp	r1, #3
 800ab5a:	d105      	bne.n	800ab68 <R3_2_Init+0x244>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800ab5c:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800ab5e:	6963      	ldr	r3, [r4, #20]
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800ab66:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800ab68:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800ab6c:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800ab6e:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800ab70:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800ab74:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800ab76:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1cb      	bne.n	800ab16 <R3_2_Init+0x1f2>
 800ab7e:	e7d8      	b.n	800ab32 <R3_2_Init+0x20e>
      R3_2_ADCxInit (ADCx_1);
 800ab80:	4628      	mov	r0, r5
 800ab82:	f7ff fc41 	bl	800a408 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800ab86:	2340      	movs	r3, #64	; 0x40
 800ab88:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800ab8a:	686b      	ldr	r3, [r5, #4]
 800ab8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab90:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ab92:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800ab94:	07d9      	lsls	r1, r3, #31
 800ab96:	d489      	bmi.n	800aaac <R3_2_Init+0x188>
      R3_2_ADCxInit (ADCx_2);
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff fc35 	bl	800a408 <R3_2_ADCxInit>
 800ab9e:	e785      	b.n	800aaac <R3_2_Init+0x188>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800aba0:	2101      	movs	r1, #1
 800aba2:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800aba4:	6961      	ldr	r1, [r4, #20]
 800aba6:	f041 0101 	orr.w	r1, r1, #1
 800abaa:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800abac:	6323      	str	r3, [r4, #48]	; 0x30
}
 800abae:	e7ac      	b.n	800ab0a <R3_2_Init+0x1e6>
 800abb0:	e0042000 	.word	0xe0042000
 800abb4:	40012c00 	.word	0x40012c00

0800abb8 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800abb8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800abba:	4946      	ldr	r1, [pc, #280]	; (800acd4 <R3_2_CurrentReadingPolarization+0x11c>)
{
 800abbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->PhaseAOffset = 0u;
 800abbe:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800abc0:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800abc2:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 800abc6:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 800abca:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 800abcc:	65c2      	str	r2, [r0, #92]	; 0x5c
 800abce:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800abd2:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800abd6:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 800abda:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800abdc:	4b3e      	ldr	r3, [pc, #248]	; (800acd8 <R3_2_CurrentReadingPolarization+0x120>)
 800abde:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800abe0:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 800abe2:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800abe4:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
{
 800abe8:	b083      	sub	sp, #12
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800abea:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 800abec:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 800abf0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 800abf4:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800abf6:	f7ff fd29 	bl	800a64c <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800abfa:	4a38      	ldr	r2, [pc, #224]	; (800acdc <R3_2_CurrentReadingPolarization+0x124>)
 800abfc:	686b      	ldr	r3, [r5, #4]
 800abfe:	4013      	ands	r3, r2
 800ac00:	2b70      	cmp	r3, #112	; 0x70
 800ac02:	d1fb      	bne.n	800abfc <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	4936      	ldr	r1, [pc, #216]	; (800ace0 <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 800ac08:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ac0a:	400a      	ands	r2, r1
 800ac0c:	f042 0208 	orr.w	r2, r2, #8
 800ac10:	60ba      	str	r2, [r7, #8]
 800ac12:	68b3      	ldr	r3, [r6, #8]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ac14:	4f33      	ldr	r7, [pc, #204]	; (800ace4 <R3_2_CurrentReadingPolarization+0x12c>)
 800ac16:	400b      	ands	r3, r1
 800ac18:	f043 0308 	orr.w	r3, r3, #8
 800ac1c:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 800ac1e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800ac22:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800ac26:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	e9cd 3100 	strd	r3, r1, [sp]
 800ac30:	f7ff fa66 	bl	800a100 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800ac34:	4620      	mov	r0, r4
 800ac36:	f7ff fd53 	bl	800a6e0 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 800ac3a:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800ac3c:	4a2a      	ldr	r2, [pc, #168]	; (800ace8 <R3_2_CurrentReadingPolarization+0x130>)
 800ac3e:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800ac40:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 800ac42:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 800ac46:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 800ac4a:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800ac4e:	f7ff fcfd 	bl	800a64c <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800ac52:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800ac54:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ac58:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	f7ff fa4f 	bl	800a100 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7ff fd3c 	bl	800a6e0 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800ac68:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800ac6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800ac6e:	481f      	ldr	r0, [pc, #124]	; (800acec <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ac70:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800ac72:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800ac74:	0912      	lsrs	r2, r2, #4
 800ac76:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800ac7a:	091b      	lsrs	r3, r3, #4
 800ac7c:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800ac7e:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800ac80:	61a0      	str	r0, [r4, #24]
 800ac82:	f023 0308 	bic.w	r3, r3, #8
 800ac86:	61ab      	str	r3, [r5, #24]
 800ac88:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800ac8a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800ac8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac92:	61aa      	str	r2, [r5, #24]
 800ac94:	69ea      	ldr	r2, [r5, #28]
 800ac96:	f022 0208 	bic.w	r2, r2, #8
 800ac9a:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ac9c:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ac9e:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aca0:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800aca2:	69ab      	ldr	r3, [r5, #24]
 800aca4:	f043 0308 	orr.w	r3, r3, #8
 800aca8:	61ab      	str	r3, [r5, #24]
 800acaa:	69ab      	ldr	r3, [r5, #24]
 800acac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800acb0:	61ab      	str	r3, [r5, #24]
 800acb2:	69eb      	ldr	r3, [r5, #28]
 800acb4:	f043 0308 	orr.w	r3, r3, #8
 800acb8:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800acba:	6a2b      	ldr	r3, [r5, #32]
 800acbc:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800acc0:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 800acc4:	2204      	movs	r2, #4
 800acc6:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 800acc8:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
  pHandle->_Super.Sector=SECTOR_5;
 800accc:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
}
 800acd0:	b003      	add	sp, #12
 800acd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd4:	0800a56d 	.word	0x0800a56d
 800acd8:	0800a4bd 	.word	0x0800a4bd
 800acdc:	02000070 	.word	0x02000070
 800ace0:	7fffffc0 	.word	0x7fffffc0
 800ace4:	0800295d 	.word	0x0800295d
 800ace8:	0800a5b9 	.word	0x0800a5b9
 800acec:	0800a4f9 	.word	0x0800a4f9

0800acf0 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800acf0:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800acf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800acf8:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800acfc:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d033      	beq.n	800ad6c <R3_2_TIMx_UP_IRQHandler+0x7c>
    while (ADCx_1->JSQR != 0x0u)
 800ad04:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1fc      	bne.n	800ad04 <R3_2_TIMx_UP_IRQHandler+0x14>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800ad0a:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 800ad0e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 800ad12:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 800ad14:	b12f      	cbz	r7, 800ad22 <R3_2_TIMx_UP_IRQHandler+0x32>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800ad16:	6838      	ldr	r0, [r7, #0]
 800ad18:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800ad1a:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 800ad1e:	4330      	orrs	r0, r6
 800ad20:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800ad22:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 800ad24:	b13f      	cbz	r7, 800ad36 <R3_2_TIMx_UP_IRQHandler+0x46>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800ad26:	6838      	ldr	r0, [r7, #0]
 800ad28:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 800ad2c:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 800ad30:	ea43 030e 	orr.w	r3, r3, lr
 800ad34:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ad36:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ad3a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad3e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ad40:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ad44:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ad46:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ad48:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ad4a:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ad4e:	686b      	ldr	r3, [r5, #4]
 800ad50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ad54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad58:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ad5c:	2280      	movs	r2, #128	; 0x80
 800ad5e:	606b      	str	r3, [r5, #4]
}
 800ad60:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ad64:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 800ad68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6c:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 800ad70:	e7e1      	b.n	800ad36 <R3_2_TIMx_UP_IRQHandler+0x46>
 800ad72:	bf00      	nop

0800ad74 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 800ad74:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800ad78:	b923      	cbnz	r3, 800ad84 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800ad7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ad7c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 800ad80:	2a02      	cmp	r2, #2
 800ad82:	d004      	beq.n	800ad8e <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 800ad8a:	3046      	adds	r0, #70	; 0x46
 800ad8c:	4770      	bx	lr
{
 800ad8e:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800ad90:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800ad94:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800ad98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 800ad9a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800ad9c:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800ada0:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ada4:	628c      	str	r4, [r1, #40]	; 0x28
 800ada6:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 800adae:	bc30      	pop	{r4, r5}
 800adb0:	3046      	adds	r0, #70	; 0x46
 800adb2:	4770      	bx	lr

0800adb4 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800adb4:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800adb6:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800adb8:	6890      	ldr	r0, [r2, #8]
 800adba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800adbc:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800adbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800adc2:	6442      	str	r2, [r0, #68]	; 0x44
}
 800adc4:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 800adc8:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 800adcc:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop

0800add4 <R3_2_IsOverCurrentOccurred>:
{
 800add4:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 800add6:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 800adda:	b160      	cbz	r0, 800adf6 <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 800addc:	2200      	movs	r2, #0
 800adde:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 800ade2:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 800ade4:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 800ade6:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 800adea:	b11a      	cbz	r2, 800adf4 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 800adec:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 800adee:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 800adf0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 800adf4:	4770      	bx	lr
 800adf6:	2140      	movs	r1, #64	; 0x40
 800adf8:	e7f5      	b.n	800ade6 <R3_2_IsOverCurrentOccurred+0x12>
 800adfa:	bf00      	nop

0800adfc <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 800adfc:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 800ae00:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 800ae02:	2900      	cmp	r1, #0
 800ae04:	d13c      	bne.n	800ae80 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ae06:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800ae08:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ae0a:	699a      	ldr	r2, [r3, #24]
 800ae0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae10:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ae14:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ae18:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ae1a:	6a1a      	ldr	r2, [r3, #32]
 800ae1c:	f042 0201 	orr.w	r2, r2, #1
 800ae20:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ae22:	6a1a      	ldr	r2, [r3, #32]
 800ae24:	f022 0204 	bic.w	r2, r2, #4
 800ae28:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ae2a:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800ae2c:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800ae30:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ae32:	f103 0118 	add.w	r1, r3, #24
 800ae36:	d031      	beq.n	800ae9c <R3_2_RLDetectionModeEnable+0xa0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800ae38:	2a02      	cmp	r2, #2
 800ae3a:	d10f      	bne.n	800ae5c <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ae3c:	699a      	ldr	r2, [r3, #24]
 800ae3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ae42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800ae46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae4a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ae4c:	6a1a      	ldr	r2, [r3, #32]
 800ae4e:	f042 0210 	orr.w	r2, r2, #16
 800ae52:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ae54:	6a1a      	ldr	r2, [r3, #32]
 800ae56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae5a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ae5c:	684a      	ldr	r2, [r1, #4]
 800ae5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae62:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ae66:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800ae6a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ae6c:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800ae6e:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800ae70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae74:	621a      	str	r2, [r3, #32]
 800ae76:	6a1a      	ldr	r2, [r3, #32]
 800ae78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae7c:	621a      	str	r2, [r3, #32]
 800ae7e:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800ae82:	4910      	ldr	r1, [pc, #64]	; (800aec4 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800ae84:	4a10      	ldr	r2, [pc, #64]	; (800aec8 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800ae86:	4c11      	ldr	r4, [pc, #68]	; (800aecc <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800ae88:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 800ae8a:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800ae8c:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800ae8e:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800ae92:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800ae96:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800ae9a:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800ae9c:	699a      	ldr	r2, [r3, #24]
 800ae9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800aea2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800aea6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aeaa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800aeac:	6a1a      	ldr	r2, [r3, #32]
 800aeae:	f022 0210 	bic.w	r2, r2, #16
 800aeb2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800aeb4:	6a1a      	ldr	r2, [r3, #32]
 800aeb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeba:	621a      	str	r2, [r3, #32]
}
 800aebc:	e7ce      	b.n	800ae5c <R3_2_RLDetectionModeEnable+0x60>
 800aebe:	bf00      	nop
 800aec0:	0800a741 	.word	0x0800a741
 800aec4:	0800a7e1 	.word	0x0800a7e1
 800aec8:	0800a6e1 	.word	0x0800a6e1
 800aecc:	0800a795 	.word	0x0800a795

0800aed0 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 800aed0:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d059      	beq.n	800af8c <R3_2_RLDetectionModeDisable+0xbc>
{
 800aed8:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800aeda:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800aedc:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800aede:	699a      	ldr	r2, [r3, #24]
 800aee0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aee4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800aee8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800aeec:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800aeee:	6a1a      	ldr	r2, [r3, #32]
 800aef0:	f042 0201 	orr.w	r2, r2, #1
 800aef4:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800aef6:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800aefa:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800aefc:	f103 0518 	add.w	r5, r3, #24
 800af00:	d045      	beq.n	800af8e <R3_2_RLDetectionModeDisable+0xbe>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800af02:	2a02      	cmp	r2, #2
 800af04:	d103      	bne.n	800af0e <R3_2_RLDetectionModeDisable+0x3e>
  CLEAR_BIT(TIMx->CCER, Channels);
 800af06:	6a1a      	ldr	r2, [r3, #32]
 800af08:	f022 0204 	bic.w	r2, r2, #4
 800af0c:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800af0e:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 800af12:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800af14:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800af16:	699a      	ldr	r2, [r3, #24]
 800af18:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800af1c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800af20:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800af24:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800af26:	6a1a      	ldr	r2, [r3, #32]
 800af28:	f042 0210 	orr.w	r2, r2, #16
 800af2c:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800af2e:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800af32:	2a01      	cmp	r2, #1
 800af34:	d035      	beq.n	800afa2 <R3_2_RLDetectionModeDisable+0xd2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800af36:	2a02      	cmp	r2, #2
 800af38:	d103      	bne.n	800af42 <R3_2_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 800af3a:	6a1a      	ldr	r2, [r3, #32]
 800af3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af40:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800af42:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800af44:	686a      	ldr	r2, [r5, #4]
 800af46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800af4e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800af52:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 800af54:	6a1a      	ldr	r2, [r3, #32]
 800af56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af5a:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800af5c:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800af60:	2a01      	cmp	r2, #1
 800af62:	d019      	beq.n	800af98 <R3_2_RLDetectionModeDisable+0xc8>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800af64:	2a02      	cmp	r2, #2
 800af66:	d103      	bne.n	800af70 <R3_2_RLDetectionModeDisable+0xa0>
  CLEAR_BIT(TIMx->CCER, Channels);
 800af68:	6a1a      	ldr	r2, [r3, #32]
 800af6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af6e:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800af70:	4c0e      	ldr	r4, [pc, #56]	; (800afac <R3_2_RLDetectionModeDisable+0xdc>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800af72:	4a0f      	ldr	r2, [pc, #60]	; (800afb0 <R3_2_RLDetectionModeDisable+0xe0>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800af74:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800af76:	4e0f      	ldr	r6, [pc, #60]	; (800afb4 <R3_2_RLDetectionModeDisable+0xe4>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800af78:	4d0f      	ldr	r5, [pc, #60]	; (800afb8 <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800af7a:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 800af7c:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800af7e:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800af82:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800af84:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800af88:	bc70      	pop	{r4, r5, r6}
 800af8a:	4770      	bx	lr
 800af8c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800af8e:	6a1a      	ldr	r2, [r3, #32]
 800af90:	f042 0204 	orr.w	r2, r2, #4
 800af94:	621a      	str	r2, [r3, #32]
}
 800af96:	e7ba      	b.n	800af0e <R3_2_RLDetectionModeDisable+0x3e>
  SET_BIT(TIMx->CCER, Channels);
 800af98:	6a1a      	ldr	r2, [r3, #32]
 800af9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af9e:	621a      	str	r2, [r3, #32]
}
 800afa0:	e7e6      	b.n	800af70 <R3_2_RLDetectionModeDisable+0xa0>
  SET_BIT(TIMx->CCER, Channels);
 800afa2:	6a1a      	ldr	r2, [r3, #32]
 800afa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afa8:	621a      	str	r2, [r3, #32]
}
 800afaa:	e7ca      	b.n	800af42 <R3_2_RLDetectionModeDisable+0x72>
 800afac:	0800a64d 	.word	0x0800a64d
 800afb0:	0800a6e1 	.word	0x0800a6e1
 800afb4:	0800295d 	.word	0x0800295d
 800afb8:	0800a5fd 	.word	0x0800a5fd

0800afbc <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800afbc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800afbe:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800afc0:	69da      	ldr	r2, [r3, #28]
{
 800afc2:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800afc4:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800afc8:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
 800afcc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800afd0:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 800afd4:	2501      	movs	r5, #1
 800afd6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800afda:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800afde:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 800afe0:	f8b0 5058 	ldrh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800afe4:	8641      	strh	r1, [r0, #50]	; 0x32
 800afe6:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800afea:	1ba4      	subs	r4, r4, r6
 800afec:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800afee:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aff0:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aff2:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800aff4:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800aff6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800aff8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800affc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b000:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 800b004:	2403      	movs	r4, #3
 800b006:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800b008:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 800b00a:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800b00e:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800b010:	d007      	beq.n	800b022 <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800b012:	4a06      	ldr	r2, [pc, #24]	; (800b02c <R3_2_RLDetectionModeSetDuty+0x70>)
 800b014:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 800b016:	bf14      	ite	ne
 800b018:	2101      	movne	r1, #1
 800b01a:	2100      	moveq	r1, #0
}
 800b01c:	4608      	mov	r0, r1
 800b01e:	bc70      	pop	{r4, r5, r6}
 800b020:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 800b022:	2300      	movs	r3, #0
 800b024:	8703      	strh	r3, [r0, #56]	; 0x38
}
 800b026:	bc70      	pop	{r4, r5, r6}
 800b028:	4608      	mov	r0, r1
 800b02a:	4770      	bx	lr
 800b02c:	02000070 	.word	0x02000070

0800b030 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800b030:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800b032:	8b82      	ldrh	r2, [r0, #28]
 800b034:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800b036:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800b038:	4414      	add	r4, r2
 800b03a:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800b03c:	b14b      	cbz	r3, 800b052 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 800b03e:	6a05      	ldr	r5, [r0, #32]
 800b040:	2300      	movs	r3, #0
 800b042:	b29a      	uxth	r2, r3
 800b044:	3301      	adds	r3, #1
 800b046:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800b04a:	8b01      	ldrh	r1, [r0, #24]
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	4291      	cmp	r1, r2
 800b050:	d8f7      	bhi.n	800b042 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 800b052:	2300      	movs	r3, #0
 800b054:	f364 030f 	bfi	r3, r4, #0, #16
 800b058:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 800b05c:	2200      	movs	r2, #0
}
 800b05e:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 800b060:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 800b062:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800b066:	4770      	bx	lr

0800b068 <RVBS_Init>:
{
 800b068:	b510      	push	{r4, lr}
 800b06a:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800b06c:	300c      	adds	r0, #12
 800b06e:	f7f9 f85b 	bl	8004128 <RCM_RegisterRegConv>
 800b072:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff ffda 	bl	800b030 <RVBS_Clear>
}
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop

0800b080 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800b080:	88c3      	ldrh	r3, [r0, #6]
 800b082:	8b42      	ldrh	r2, [r0, #26]
 800b084:	429a      	cmp	r2, r3
 800b086:	d305      	bcc.n	800b094 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800b088:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800b08a:	4298      	cmp	r0, r3
 800b08c:	bf8c      	ite	hi
 800b08e:	2004      	movhi	r0, #4
 800b090:	2000      	movls	r0, #0
 800b092:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800b094:	2002      	movs	r0, #2
  }
  return fault;
}
 800b096:	4770      	bx	lr

0800b098 <RVBS_CalcAvVbus>:
{
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800b09c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800b0a0:	f7f9 f916 	bl	80042d0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800b0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0a8:	4298      	cmp	r0, r3
 800b0aa:	d01c      	beq.n	800b0e6 <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 800b0ac:	6a2f      	ldr	r7, [r5, #32]
 800b0ae:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800b0b2:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800b0b6:	8b2e      	ldrh	r6, [r5, #24]
 800b0b8:	b1d6      	cbz	r6, 800b0f0 <RVBS_CalcAvVbus+0x58>
 800b0ba:	2300      	movs	r3, #0
    wtemp = 0;
 800b0bc:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800b0be:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	b2d9      	uxtb	r1, r3
 800b0c6:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 800b0c8:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	d3f7      	bcc.n	800b0be <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 800b0ce:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800b0d2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800b0d6:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800b0d8:	3e01      	subs	r6, #1
 800b0da:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 800b0dc:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800b0de:	da09      	bge.n	800b0f4 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	f7ff ffca 	bl	800b080 <RVBS_CheckFaultState>
 800b0ec:	8128      	strh	r0, [r5, #8]
}
 800b0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800b0f0:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 800b0f2:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f7ff ffc0 	bl	800b080 <RVBS_CheckFaultState>
 800b100:	8128      	strh	r0, [r5, #8]
}
 800b102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b104 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800b104:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800b106:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 800b108:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800b10c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800b110:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800b112:	4770      	bx	lr

0800b114 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800b114:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop

0800b11c <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 800b11c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop

0800b124 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800b124:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop

0800b12c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800b12c:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800b130:	8a81      	ldrh	r1, [r0, #20]
{
 800b132:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 800b134:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800b136:	bfb8      	it	lt
 800b138:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800b13a:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800b13c:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800b13e:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800b140:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800b142:	429d      	cmp	r5, r3
 800b144:	d817      	bhi.n	800b176 <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800b146:	4299      	cmp	r1, r3
 800b148:	bf2c      	ite	cs
 800b14a:	2300      	movcs	r3, #0
 800b14c:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800b14e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800b152:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 800b154:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800b156:	bfb8      	it	lt
 800b158:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800b15a:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800b15c:	428d      	cmp	r5, r1
 800b15e:	d300      	bcc.n	800b162 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800b160:	b15b      	cbz	r3, 800b17a <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800b162:	4294      	cmp	r4, r2
 800b164:	d901      	bls.n	800b16a <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 800b166:	3201      	adds	r2, #1
 800b168:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b16a:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800b16c:	1b10      	subs	r0, r2, r4
 800b16e:	bf18      	it	ne
 800b170:	2001      	movne	r0, #1
 800b172:	bc30      	pop	{r4, r5}
 800b174:	4770      	bx	lr
    SpeedError = true;
 800b176:	2301      	movs	r3, #1
 800b178:	e7e9      	b.n	800b14e <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800b17a:	4294      	cmp	r4, r2
 800b17c:	bf88      	it	hi
 800b17e:	2200      	movhi	r2, #0
 800b180:	e7f3      	b.n	800b16a <SPD_IsMecSpeedReliable+0x3e>
 800b182:	bf00      	nop

0800b184 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 800b184:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800b188:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800b18c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800b190:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800b194:	b200      	sxth	r0, r0
 800b196:	4770      	bx	lr

0800b198 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800b198:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800b19a:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800b19e:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 800b1a2:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800b1a6:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800b1a8:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800b1aa:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 800b1ac:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800b1ae:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 800b1b2:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 800b1b4:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800b1b6:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 800b1b8:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800b1ba:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800b1bc:	6183      	str	r3, [r0, #24]
}
 800b1be:	4770      	bx	lr

0800b1c0 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 800b1c0:	6141      	str	r1, [r0, #20]
}
 800b1c2:	4770      	bx	lr

0800b1c4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800b1c4:	6940      	ldr	r0, [r0, #20]
 800b1c6:	4770      	bx	lr

0800b1c8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800b1c8:	7803      	ldrb	r3, [r0, #0]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d000      	beq.n	800b1d0 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 800b1ce:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800b1d0:	6900      	ldr	r0, [r0, #16]
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	f7fe bed6 	b.w	8009f84 <PID_SetIntegralTerm>

0800b1d8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800b1d8:	6840      	ldr	r0, [r0, #4]
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	bfbc      	itt	lt
 800b1de:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800b1e2:	30ff      	addlt	r0, #255	; 0xff
}
 800b1e4:	1400      	asrs	r0, r0, #16
 800b1e6:	4770      	bx	lr

0800b1e8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800b1e8:	6880      	ldr	r0, [r0, #8]
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	bfbc      	itt	lt
 800b1ee:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800b1f2:	30ff      	addlt	r0, #255	; 0xff
}
 800b1f4:	1400      	asrs	r0, r0, #16
 800b1f6:	4770      	bx	lr

0800b1f8 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800b1f8:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800b1fa:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800b1fc:	60c3      	str	r3, [r0, #12]
}
 800b1fe:	4770      	bx	lr

0800b200 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800b202:	7806      	ldrb	r6, [r0, #0]
{
 800b204:	4604      	mov	r4, r0
 800b206:	460d      	mov	r5, r1
 800b208:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800b20a:	b326      	cbz	r6, 800b256 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800b20c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800b20e:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800b210:	2800      	cmp	r0, #0
 800b212:	bfbc      	itt	lt
 800b214:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800b218:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800b21a:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800b21c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800b220:	dd01      	ble.n	800b226 <STC_ExecRamp+0x26>
      AllowedRange = false;
 800b222:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800b224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800b226:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800b22a:	42a9      	cmp	r1, r5
 800b22c:	dcf9      	bgt.n	800b222 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800b22e:	8c23      	ldrh	r3, [r4, #32]
 800b230:	429d      	cmp	r5, r3
 800b232:	da03      	bge.n	800b23c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800b234:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800b238:	42ab      	cmp	r3, r5
 800b23a:	dbf2      	blt.n	800b222 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 800b23c:	b9af      	cbnz	r7, 800b26a <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 800b23e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800b240:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 800b242:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 800b244:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800b248:	bf0c      	ite	eq
 800b24a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800b24c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800b24e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800b250:	61a3      	str	r3, [r4, #24]
 800b252:	2001      	movs	r0, #1
}
 800b254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800b256:	f7ff ffc7 	bl	800b1e8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800b25a:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 800b25c:	42b5      	cmp	r5, r6
 800b25e:	dce0      	bgt.n	800b222 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800b260:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800b264:	42ab      	cmp	r3, r5
 800b266:	dcdc      	bgt.n	800b222 <STC_ExecRamp+0x22>
 800b268:	e7e8      	b.n	800b23c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800b26a:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800b26c:	4a07      	ldr	r2, [pc, #28]	; (800b28c <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 800b26e:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800b270:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 800b274:	fba2 2303 	umull	r2, r3, r2, r3
 800b278:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800b27a:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800b27c:	1a2d      	subs	r5, r5, r0
 800b27e:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 800b280:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800b282:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800b286:	2001      	movs	r0, #1
 800b288:	61a5      	str	r5, [r4, #24]
}
 800b28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b28c:	10624dd3 	.word	0x10624dd3

0800b290 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800b290:	2300      	movs	r3, #0
 800b292:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800b294:	6183      	str	r3, [r0, #24]
}
 800b296:	4770      	bx	lr

0800b298 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b298:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800b29a:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800b29e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800b2a0:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	bf08      	it	eq
 800b2a6:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800b2a8:	2b01      	cmp	r3, #1
{
 800b2aa:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800b2ac:	d90c      	bls.n	800b2c8 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800b2ae:	6981      	ldr	r1, [r0, #24]
 800b2b0:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	2e00      	cmp	r6, #0
 800b2b6:	60c3      	str	r3, [r0, #12]
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	db09      	blt.n	800b2d0 <STC_CalcTorqueReference+0x38>
 800b2bc:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800b2be:	2a01      	cmp	r2, #1
 800b2c0:	d00a      	beq.n	800b2d8 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800b2c2:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800b2c4:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800b2c8:	d012      	beq.n	800b2f0 <STC_CalcTorqueReference+0x58>
 800b2ca:	2e00      	cmp	r6, #0
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	daf5      	bge.n	800b2bc <STC_CalcTorqueReference+0x24>
 800b2d0:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800b2d4:	30ff      	adds	r0, #255	; 0xff
 800b2d6:	e7f1      	b.n	800b2bc <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800b2d8:	6960      	ldr	r0, [r4, #20]
 800b2da:	f7ff ff1f 	bl	800b11c <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800b2de:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800b2e0:	b201      	sxth	r1, r0
 800b2e2:	6920      	ldr	r0, [r4, #16]
 800b2e4:	f7fe fe5a 	bl	8009f9c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800b2e8:	0403      	lsls	r3, r0, #16
 800b2ea:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800b2f0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800b2f4:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800b2f6:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800b2f8:	60c3      	str	r3, [r0, #12]
 800b2fa:	e7e0      	b.n	800b2be <STC_CalcTorqueReference+0x26>

0800b2fc <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800b2fc:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop

0800b304 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800b304:	8bc0      	ldrh	r0, [r0, #30]
 800b306:	4770      	bx	lr

0800b308 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 800b308:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop

0800b310 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800b310:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800b314:	2200      	movs	r2, #0
 800b316:	b299      	uxth	r1, r3
 800b318:	f361 020f 	bfi	r2, r1, #0, #16
 800b31c:	0c1b      	lsrs	r3, r3, #16
 800b31e:	f363 421f 	bfi	r2, r3, #16, #16
{
 800b322:	b082      	sub	sp, #8
}
 800b324:	4610      	mov	r0, r2
 800b326:	b002      	add	sp, #8
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop

0800b32c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800b32c:	b510      	push	{r4, lr}
 800b32e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800b330:	6940      	ldr	r0, [r0, #20]
 800b332:	f7ff fef3 	bl	800b11c <SPD_GetAvrgMecSpeedUnit>
 800b336:	0400      	lsls	r0, r0, #16
 800b338:	6060      	str	r0, [r4, #4]
}
 800b33a:	bd10      	pop	{r4, pc}

0800b33c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800b33c:	2300      	movs	r3, #0
 800b33e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800b340:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop

0800b348 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800b348:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800b34a:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800b34c:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 800b34e:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800b350:	430b      	orrs	r3, r1
 800b352:	ea23 0202 	bic.w	r2, r3, r2
 800b356:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800b358:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800b35a:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800b35c:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800b35e:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 800b360:	d008      	beq.n	800b374 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800b362:	b912      	cbnz	r2, 800b36a <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800b364:	4620      	mov	r0, r4
 800b366:	bc30      	pop	{r4, r5}
 800b368:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800b36a:	240a      	movs	r4, #10
 800b36c:	7004      	strb	r4, [r0, #0]
}
 800b36e:	4620      	mov	r0, r4
 800b370:	bc30      	pop	{r4, r5}
 800b372:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800b374:	2a00      	cmp	r2, #0
 800b376:	d1f5      	bne.n	800b364 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800b378:	240b      	movs	r4, #11
 800b37a:	7004      	strb	r4, [r0, #0]
}
 800b37c:	4620      	mov	r0, r4
 800b37e:	bc30      	pop	{r4, r5}
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop

0800b384 <STM_NextState>:
{
 800b384:	b508      	push	{r3, lr}
 800b386:	7803      	ldrb	r3, [r0, #0]
 800b388:	2b14      	cmp	r3, #20
 800b38a:	d810      	bhi.n	800b3ae <STM_NextState+0x2a>
 800b38c:	e8df f003 	tbb	[pc, r3]
 800b390:	240d545e 	.word	0x240d545e
 800b394:	390d352e 	.word	0x390d352e
 800b398:	0f0f3f3c 	.word	0x0f0f3f3c
 800b39c:	47650b44 	.word	0x47650b44
 800b3a0:	504d1b4a 	.word	0x504d1b4a
 800b3a4:	5b          	.byte	0x5b
 800b3a5:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800b3a6:	290e      	cmp	r1, #14
 800b3a8:	d013      	beq.n	800b3d2 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 800b3aa:	2907      	cmp	r1, #7
 800b3ac:	d011      	beq.n	800b3d2 <STM_NextState+0x4e>
 800b3ae:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d018      	beq.n	800b3e8 <STM_NextState+0x64>
 800b3b6:	2907      	cmp	r1, #7
 800b3b8:	d016      	beq.n	800b3e8 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2180      	movs	r1, #128	; 0x80
 800b3be:	f7ff ffc3 	bl	800b348 <STM_FaultProcessing>
 800b3c2:	2000      	movs	r0, #0
}
 800b3c4:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800b3c6:	2914      	cmp	r1, #20
 800b3c8:	d8f1      	bhi.n	800b3ae <STM_NextState+0x2a>
 800b3ca:	4b26      	ldr	r3, [pc, #152]	; (800b464 <STM_NextState+0xe0>)
 800b3cc:	40cb      	lsrs	r3, r1
 800b3ce:	07db      	lsls	r3, r3, #31
 800b3d0:	d5ed      	bpl.n	800b3ae <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800b3d2:	7001      	strb	r1, [r0, #0]
 800b3d4:	2001      	movs	r0, #1
}
 800b3d6:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800b3d8:	2911      	cmp	r1, #17
 800b3da:	d8ee      	bhi.n	800b3ba <STM_NextState+0x36>
 800b3dc:	4b22      	ldr	r3, [pc, #136]	; (800b468 <STM_NextState+0xe4>)
 800b3de:	40cb      	lsrs	r3, r1
 800b3e0:	07da      	lsls	r2, r3, #31
 800b3e2:	d4f6      	bmi.n	800b3d2 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b3e4:	2903      	cmp	r1, #3
 800b3e6:	d1e8      	bne.n	800b3ba <STM_NextState+0x36>
 800b3e8:	2000      	movs	r0, #0
}
 800b3ea:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800b3ec:	2913      	cmp	r1, #19
 800b3ee:	d0f0      	beq.n	800b3d2 <STM_NextState+0x4e>
 800b3f0:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800b3f4:	2b05      	cmp	r3, #5
 800b3f6:	d1dc      	bne.n	800b3b2 <STM_NextState+0x2e>
 800b3f8:	e7eb      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800b3fa:	1f8b      	subs	r3, r1, #6
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d8d6      	bhi.n	800b3ae <STM_NextState+0x2a>
 800b400:	e7e7      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( bState == STOP )
 800b402:	2908      	cmp	r1, #8
 800b404:	d1d3      	bne.n	800b3ae <STM_NextState+0x2a>
 800b406:	e7e4      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 800b408:	2909      	cmp	r1, #9
 800b40a:	d1d0      	bne.n	800b3ae <STM_NextState+0x2a>
 800b40c:	e7e1      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800b40e:	2900      	cmp	r1, #0
 800b410:	d0df      	beq.n	800b3d2 <STM_NextState+0x4e>
 800b412:	290c      	cmp	r1, #12
 800b414:	d1cb      	bne.n	800b3ae <STM_NextState+0x2a>
 800b416:	e7dc      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( bState == IDLE )
 800b418:	2900      	cmp	r1, #0
 800b41a:	d0da      	beq.n	800b3d2 <STM_NextState+0x4e>
 800b41c:	e7c7      	b.n	800b3ae <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800b41e:	2902      	cmp	r1, #2
 800b420:	d1c3      	bne.n	800b3aa <STM_NextState+0x26>
 800b422:	e7d6      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800b424:	2911      	cmp	r1, #17
 800b426:	d1c0      	bne.n	800b3aa <STM_NextState+0x26>
 800b428:	e7d3      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800b42a:	2904      	cmp	r1, #4
 800b42c:	d1bd      	bne.n	800b3aa <STM_NextState+0x26>
 800b42e:	e7d0      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800b430:	1f0b      	subs	r3, r1, #4
 800b432:	2b01      	cmp	r3, #1
 800b434:	d8b9      	bhi.n	800b3aa <STM_NextState+0x26>
 800b436:	e7cc      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800b438:	2907      	cmp	r1, #7
 800b43a:	d0ca      	beq.n	800b3d2 <STM_NextState+0x4e>
 800b43c:	f1a1 030d 	sub.w	r3, r1, #13
 800b440:	2b01      	cmp	r3, #1
 800b442:	d8b4      	bhi.n	800b3ae <STM_NextState+0x2a>
 800b444:	e7c5      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800b446:	2912      	cmp	r1, #18
 800b448:	d1af      	bne.n	800b3aa <STM_NextState+0x26>
 800b44a:	e7c2      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800b44c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800b450:	2b01      	cmp	r3, #1
 800b452:	d0be      	beq.n	800b3d2 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 800b454:	290c      	cmp	r1, #12
 800b456:	d1ae      	bne.n	800b3b6 <STM_NextState+0x32>
 800b458:	e7bb      	b.n	800b3d2 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800b45a:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800b45e:	2b07      	cmp	r3, #7
 800b460:	d1a5      	bne.n	800b3ae <STM_NextState+0x2a>
 800b462:	e7b6      	b.n	800b3d2 <STM_NextState+0x4e>
 800b464:	00140080 	.word	0x00140080
 800b468:	00030092 	.word	0x00030092

0800b46c <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 800b46c:	7800      	ldrb	r0, [r0, #0]
 800b46e:	4770      	bx	lr

0800b470 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800b470:	7803      	ldrb	r3, [r0, #0]
 800b472:	2b0b      	cmp	r3, #11
 800b474:	d001      	beq.n	800b47a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800b476:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800b478:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800b47a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800b47c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800b47e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800b480:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800b482:	2001      	movs	r0, #1
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop

0800b488 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800b488:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800b48a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 800b48c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop

0800b494 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800b494:	f7fe bcb0 	b.w	8009df8 <FCP_Init>

0800b498 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800b498:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 800b49c:	b16a      	cbz	r2, 800b4ba <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800b49e:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	b1a2      	cbz	r2, 800b4d0 <UFCP_TX_IRQ_Handler+0x38>
 800b4a6:	2a01      	cmp	r2, #1
 800b4a8:	d108      	bne.n	800b4bc <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800b4aa:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b4ac:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800b4b0:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 800b4b2:	3201      	adds	r2, #1
 800b4b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800b4b8:	4770      	bx	lr
 800b4ba:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b4bc:	7d41      	ldrb	r1, [r0, #21]
 800b4be:	3101      	adds	r1, #1
 800b4c0:	428a      	cmp	r2, r1
 800b4c2:	dc07      	bgt.n	800b4d4 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800b4c4:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b4c6:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 800b4ca:	7d09      	ldrb	r1, [r1, #20]
 800b4cc:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800b4ce:	e7f0      	b.n	800b4b2 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800b4d0:	7d01      	ldrb	r1, [r0, #20]
        break;
 800b4d2:	e7eb      	b.n	800b4ac <UFCP_TX_IRQ_Handler+0x14>
{
 800b4d4:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800b4d6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 800b4da:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 800b4de:	6291      	str	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b4e0:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b4e2:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b4ec:	6011      	str	r1, [r2, #0]
 800b4ee:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b4f2:	4623      	mov	r3, r4
}
 800b4f4:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800b4f6:	4718      	bx	r3

0800b4f8 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800b4f8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800b4fc:	b10b      	cbz	r3, 800b502 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b4fe:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800b500:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800b502:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800b506:	2301      	movs	r3, #1
 800b508:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b50c:	6813      	ldr	r3, [r2, #0]
 800b50e:	f043 0320 	orr.w	r3, r3, #32
 800b512:	6013      	str	r3, [r2, #0]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800b514:	2002      	movs	r0, #2
 800b516:	4770      	bx	lr

0800b518 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800b51c:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 800b520:	b108      	cbz	r0, 800b526 <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800b522:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800b524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 800b526:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800b528:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800b52a:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 800b52c:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800b52e:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 800b532:	b34b      	cbz	r3, 800b588 <UFCP_Send+0x70>
 800b534:	f104 011a 	add.w	r1, r4, #26
 800b538:	1d17      	adds	r7, r2, #4
 800b53a:	45bc      	cmp	ip, r7
 800b53c:	bf38      	it	cc
 800b53e:	428a      	cmpcc	r2, r1
 800b540:	d336      	bcc.n	800b5b0 <UFCP_Send+0x98>
 800b542:	2807      	cmp	r0, #7
 800b544:	d934      	bls.n	800b5b0 <UFCP_Send+0x98>
 800b546:	0899      	lsrs	r1, r3, #2
 800b548:	3901      	subs	r1, #1
 800b54a:	b2c9      	uxtb	r1, r1
 800b54c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 800b550:	4665      	mov	r5, ip
 800b552:	4611      	mov	r1, r2
 800b554:	f851 6b04 	ldr.w	r6, [r1], #4
 800b558:	f845 6b04 	str.w	r6, [r5], #4
 800b55c:	42b9      	cmp	r1, r7
 800b55e:	d1f9      	bne.n	800b554 <UFCP_Send+0x3c>
 800b560:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 800b564:	1a40      	subs	r0, r0, r1
 800b566:	428b      	cmp	r3, r1
 800b568:	b2c0      	uxtb	r0, r0
 800b56a:	eb02 0601 	add.w	r6, r2, r1
 800b56e:	eb0c 0501 	add.w	r5, ip, r1
 800b572:	d009      	beq.n	800b588 <UFCP_Send+0x70>
 800b574:	5c53      	ldrb	r3, [r2, r1]
 800b576:	f80c 3001 	strb.w	r3, [ip, r1]
 800b57a:	b128      	cbz	r0, 800b588 <UFCP_Send+0x70>
 800b57c:	7873      	ldrb	r3, [r6, #1]
 800b57e:	706b      	strb	r3, [r5, #1]
 800b580:	2801      	cmp	r0, #1
 800b582:	d001      	beq.n	800b588 <UFCP_Send+0x70>
 800b584:	78b3      	ldrb	r3, [r6, #2]
 800b586:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800b588:	f104 0014 	add.w	r0, r4, #20
 800b58c:	f7fe fc48 	bl	8009e20 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800b590:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800b594:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 800b598:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800b59a:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 800b59c:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800b5a0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b5a4:	6813      	ldr	r3, [r2, #0]
 800b5a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	2002      	movs	r0, #2
}
 800b5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	4410      	add	r0, r2
 800b5b4:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 800b5b8:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b5bc:	f803 1f01 	strb.w	r1, [r3, #1]!
 800b5c0:	4282      	cmp	r2, r0
 800b5c2:	d1f9      	bne.n	800b5b8 <UFCP_Send+0xa0>
 800b5c4:	e7e0      	b.n	800b588 <UFCP_Send+0x70>
 800b5c6:	bf00      	nop

0800b5c8 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800b5c8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800b5cc:	b90b      	cbnz	r3, 800b5d2 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b5ce:	482c      	ldr	r0, [pc, #176]	; (800b680 <UFCP_RX_IRQ_Handler+0xb8>)
}
 800b5d0:	4770      	bx	lr
{
 800b5d2:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800b5d4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 800b5d8:	b083      	sub	sp, #12
 800b5da:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 800b5dc:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 800b5de:	b1d3      	cbz	r3, 800b616 <UFCP_RX_IRQ_Handler+0x4e>
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d00d      	beq.n	800b600 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800b5e4:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 800b5e8:	3101      	adds	r1, #1
 800b5ea:	428b      	cmp	r3, r1
 800b5ec:	dc1d      	bgt.n	800b62a <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800b5ee:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b5f0:	4823      	ldr	r0, [pc, #140]	; (800b680 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800b5f2:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800b5fc:	b003      	add	sp, #12
 800b5fe:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800b600:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 800b602:	bf54      	ite	pl
 800b604:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 800b606:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 800b608:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 800b60c:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800b610:	481b      	ldr	r0, [pc, #108]	; (800b680 <UFCP_RX_IRQ_Handler+0xb8>)
}
 800b612:	b003      	add	sp, #12
 800b614:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800b616:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 800b618:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 800b61c:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800b61e:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 800b620:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800b624:	4817      	ldr	r0, [pc, #92]	; (800b684 <UFCP_RX_IRQ_Handler+0xbc>)
}
 800b626:	b003      	add	sp, #12
 800b628:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800b62a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800b62e:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b632:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 800b634:	2200      	movs	r2, #0
 800b636:	f023 0320 	bic.w	r3, r3, #32
 800b63a:	8242      	strh	r2, [r0, #18]
 800b63c:	600b      	str	r3, [r1, #0]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800b63e:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b640:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800b644:	f7fe fbec 	bl	8009e20 <FCP_CalcCRC>
 800b648:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800b64c:	4283      	cmp	r3, r0
 800b64e:	d10a      	bne.n	800b666 <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800b650:	6820      	ldr	r0, [r4, #0]
 800b652:	68a5      	ldr	r5, [r4, #8]
 800b654:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800b658:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800b65c:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 800b660:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800b662:	4809      	ldr	r0, [pc, #36]	; (800b688 <UFCP_RX_IRQ_Handler+0xc0>)
 800b664:	e7d5      	b.n	800b612 <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b666:	4620      	mov	r0, r4
 800b668:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 800b66a:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b66c:	f10d 0207 	add.w	r2, sp, #7
 800b670:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 800b672:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b676:	f7ff ff4f 	bl	800b518 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800b67a:	4803      	ldr	r0, [pc, #12]	; (800b688 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800b67c:	e7c9      	b.n	800b612 <UFCP_RX_IRQ_Handler+0x4a>
 800b67e:	bf00      	nop
 800b680:	0800b970 	.word	0x0800b970
 800b684:	0800b972 	.word	0x0800b972
 800b688:	0800b974 	.word	0x0800b974

0800b68c <UFCP_OVR_IRQ_Handler>:
{
 800b68c:	b510      	push	{r4, lr}
 800b68e:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 800b690:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b692:	2301      	movs	r3, #1
 800b694:	f10d 0207 	add.w	r2, sp, #7
 800b698:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 800b69a:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800b69e:	f7ff ff3b 	bl	800b518 <UFCP_Send>
}
 800b6a2:	b002      	add	sp, #8
 800b6a4:	bd10      	pop	{r4, pc}
 800b6a6:	bf00      	nop

0800b6a8 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800b6ae:	4770      	bx	lr

0800b6b0 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800b6b0:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b6b2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800b6b4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 800b6b6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800b6ba:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 800b6bc:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b6be:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800b6c0:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 800b6c2:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 800b6c4:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 800b6c6:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop

0800b6cc <VSS_Init>:
{
 800b6cc:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800b6ce:	f7ff ffef 	bl	800b6b0 <VSS_Clear>
}
 800b6d2:	bd08      	pop	{r3, pc}

0800b6d4 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800b6d4:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 800b6d6:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 800b6d8:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800b6da:	fb91 f1f3 	sdiv	r1, r1, r3
 800b6de:	80c1      	strh	r1, [r0, #6]
}
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop

0800b6e4 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800b6e4:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800b6e6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800b6ea:	b984      	cbnz	r4, 800b70e <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 800b6ec:	b98a      	cbnz	r2, 800b712 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b6ee:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800b6f0:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800b6f2:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800b6f4:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b6f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b6fa:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800b6fc:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b700:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800b704:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 800b708:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b70a:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800b70c:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800b70e:	bc70      	pop	{r4, r5, r6}
 800b710:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800b712:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800b714:	4d11      	ldr	r5, [pc, #68]	; (800b75c <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b716:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800b718:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b71c:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800b71e:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800b722:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b726:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800b728:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800b72a:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800b72e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b732:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b734:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 800b738:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800b73a:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800b73e:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800b742:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 800b744:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800b746:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800b748:	0412      	lsls	r2, r2, #16
 800b74a:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800b74e:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800b752:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 800b756:	8503      	strh	r3, [r0, #40]	; 0x28
}
 800b758:	bc70      	pop	{r4, r5, r6}
 800b75a:	4770      	bx	lr
 800b75c:	10624dd3 	.word	0x10624dd3

0800b760 <RUC_SetPhaseDurationms>:
 800b760:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b764:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b768:	818a      	strh	r2, [r1, #12]
 800b76a:	4770      	bx	lr

0800b76c <RUC_SetPhaseFinalMecSpeedUnit>:
 800b76c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b770:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b774:	81ca      	strh	r2, [r1, #14]
 800b776:	4770      	bx	lr

0800b778 <RUC_SetPhaseFinalTorque>:
 800b778:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b77c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b780:	820a      	strh	r2, [r1, #16]
 800b782:	4770      	bx	lr

0800b784 <RUC_GetPhaseDurationms>:
 800b784:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b788:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b78c:	8988      	ldrh	r0, [r1, #12]
 800b78e:	4770      	bx	lr

0800b790 <RUC_GetPhaseFinalMecSpeedUnit>:
 800b790:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b794:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b798:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop

0800b7a0 <RUC_GetPhaseFinalTorque>:
 800b7a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b7a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7a8:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop

0800b7b0 <RUC_GetNumberOfPhases>:
 800b7b0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop

0800b7b8 <__libc_init_array>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	4d0d      	ldr	r5, [pc, #52]	; (800b7f0 <__libc_init_array+0x38>)
 800b7bc:	4c0d      	ldr	r4, [pc, #52]	; (800b7f4 <__libc_init_array+0x3c>)
 800b7be:	1b64      	subs	r4, r4, r5
 800b7c0:	10a4      	asrs	r4, r4, #2
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	42a6      	cmp	r6, r4
 800b7c6:	d109      	bne.n	800b7dc <__libc_init_array+0x24>
 800b7c8:	4d0b      	ldr	r5, [pc, #44]	; (800b7f8 <__libc_init_array+0x40>)
 800b7ca:	4c0c      	ldr	r4, [pc, #48]	; (800b7fc <__libc_init_array+0x44>)
 800b7cc:	f000 f820 	bl	800b810 <_init>
 800b7d0:	1b64      	subs	r4, r4, r5
 800b7d2:	10a4      	asrs	r4, r4, #2
 800b7d4:	2600      	movs	r6, #0
 800b7d6:	42a6      	cmp	r6, r4
 800b7d8:	d105      	bne.n	800b7e6 <__libc_init_array+0x2e>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e0:	4798      	blx	r3
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	e7ee      	b.n	800b7c4 <__libc_init_array+0xc>
 800b7e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ea:	4798      	blx	r3
 800b7ec:	3601      	adds	r6, #1
 800b7ee:	e7f2      	b.n	800b7d6 <__libc_init_array+0x1e>
 800b7f0:	0800b980 	.word	0x0800b980
 800b7f4:	0800b980 	.word	0x0800b980
 800b7f8:	0800b980 	.word	0x0800b980
 800b7fc:	0800b984 	.word	0x0800b984

0800b800 <memset>:
 800b800:	4402      	add	r2, r0
 800b802:	4603      	mov	r3, r0
 800b804:	4293      	cmp	r3, r2
 800b806:	d100      	bne.n	800b80a <memset+0xa>
 800b808:	4770      	bx	lr
 800b80a:	f803 1b01 	strb.w	r1, [r3], #1
 800b80e:	e7f9      	b.n	800b804 <memset+0x4>

0800b810 <_init>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr

0800b81c <_fini>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	bf00      	nop
 800b820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b822:	bc08      	pop	{r3}
 800b824:	469e      	mov	lr, r3
 800b826:	4770      	bx	lr
