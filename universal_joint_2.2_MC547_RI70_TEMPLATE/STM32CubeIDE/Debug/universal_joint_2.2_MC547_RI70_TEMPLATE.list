
universal_joint_2.2_MC547_RI70_TEMPLATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e8c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08009068  08009068  00019068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b8  080091b8  000205ec  2**0
                  CONTENTS
  4 .ARM          00000008  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091c0  080091c0  000205ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ec  20000000  080091c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200005ec  080097b4  000205ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  080097b4  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 12 .debug_line   000402a4  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00062f31  00000000  00000000  000608c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008580  00000000  00000000  000c37f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  000cbd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fe598  00000000  00000000  000cda48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004cb0  00000000  00000000  001cbfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00024e5c  00000000  00000000  001d0c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b4b3  00000000  00000000  001f5aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  00220f9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bb0  00000000  00000000  00221074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200005ec 	.word	0x200005ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800904c 	.word	0x0800904c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200005f0 	.word	0x200005f0
 8000214:	0800904c 	.word	0x0800904c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb2:	f002 ff59 	bl	8003d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f007 ff4f 	bl	8008d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eba:	f000 f85d 	bl	8000f78 <main>

08000ebe <LoopForever>:

LoopForever:
    b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   r0, =_estack
 8000ec0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	200005ec 	.word	0x200005ec
  ldr r2, =_sidata
 8000ecc:	080091c8 	.word	0x080091c8
  ldr r2, =_sbss
 8000ed0:	200005ec 	.word	0x200005ec
  ldr r4, =_ebss
 8000ed4:	20000af8 	.word	0x20000af8

08000ed8 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <BusFault_Handler>
	...

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	2100      	movs	r1, #0
{
 8000ee0:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee2:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee4:	2238      	movs	r2, #56	; 0x38
 8000ee6:	a806      	add	r0, sp, #24
 8000ee8:	f007 ff5a 	bl	8008da0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	4621      	mov	r1, r4
 8000eee:	2244      	movs	r2, #68	; 0x44
 8000ef0:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef2:	e9cd 4400 	strd	r4, r4, [sp]
 8000ef6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000efa:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	f007 ff50 	bl	8008da0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f00:	4620      	mov	r0, r4
 8000f02:	f003 ffeb 	bl	8004edc <HAL_PWREx_ControlVoltageScaling>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f06:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f08:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0a:	2601      	movs	r6, #1
 8000f0c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f10:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000f12:	2150      	movs	r1, #80	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000f14:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f16:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f18:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f1c:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f20:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000f24:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f28:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f004 f85d 	bl	8004fe8 <HAL_RCC_OscConfig>
 8000f2e:	b108      	cbz	r0, 8000f34 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <SystemClock_Config+0x56>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f34:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f36:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f38:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f3e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	240f      	movs	r4, #15
 8000f42:	2503      	movs	r5, #3
 8000f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f48:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f4c:	f004 fac6 	bl	80054dc <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b108      	cbz	r0, 8000f58 <SystemClock_Config+0x7c>
 8000f54:	b672      	cpsid	i
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000f58:	f248 0102 	movw	r1, #32770	; 0x8002
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f60:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f62:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000f64:	9115      	str	r1, [sp, #84]	; 0x54
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000f66:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f004 fbec 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	b108      	cbz	r0, 8000f72 <SystemClock_Config+0x96>
 8000f6e:	b672      	cpsid	i
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <SystemClock_Config+0x94>
}
 8000f72:	b027      	add	sp, #156	; 0x9c
 8000f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f76:	bf00      	nop

08000f78 <main>:
{
 8000f78:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	2400      	movs	r4, #0
{
 8000f7e:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 8000f80:	f002 ff22 	bl	8003dc8 <HAL_Init>
  SystemClock_Config();
 8000f84:	f7ff ffaa 	bl	8000edc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8000f8c:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f90:	4ab5      	ldr	r2, [pc, #724]	; (8001268 <main+0x2f0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	941c      	str	r4, [sp, #112]	; 0x70
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f94:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 8000f96:	48b5      	ldr	r0, [pc, #724]	; (800126c <main+0x2f4>)
  hadc1.Instance = ADC1;
 8000f98:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 8001298 <main+0x320>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9c:	f041 0120 	orr.w	r1, r1, #32
 8000fa0:	64d1      	str	r1, [r2, #76]	; 0x4c
 8000fa2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8000fa4:	f001 0120 	and.w	r1, r1, #32
 8000fa8:	9103      	str	r1, [sp, #12]
 8000faa:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8000fae:	f041 0101 	orr.w	r1, r1, #1
 8000fb2:	64d1      	str	r1, [r2, #76]	; 0x4c
 8000fb4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8000fb6:	f001 0101 	and.w	r1, r1, #1
 8000fba:	9104      	str	r1, [sp, #16]
 8000fbc:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8000fc0:	f041 0102 	orr.w	r1, r1, #2
 8000fc4:	64d1      	str	r1, [r2, #76]	; 0x4c
 8000fc6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000fc8:	f002 0202 	and.w	r2, r2, #2
 8000fcc:	9205      	str	r2, [sp, #20]
  HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4622      	mov	r2, r4
  GPIO_InitStruct.Pin = MA730_CS_Pin;
 8000fd2:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	9d05      	ldr	r5, [sp, #20]
  GPIO_InitStruct.Pin = MA730_CS_Pin;
 8000fd6:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 8000fda:	f003 ff79 	bl	8004ed0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MA730_CS_Pin;
 8000fde:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_Init(MA730_CS_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	48a2      	ldr	r0, [pc, #648]	; (800126c <main+0x2f4>)
 8000fe4:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = MA730_CS_Pin;
 8000fe6:	2700      	movs	r7, #0
 8000fe8:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8000fec:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(MA730_CS_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f003 fe7a 	bl	8004ce8 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	223c      	movs	r2, #60	; 0x3c
 8000ff8:	a818      	add	r0, sp, #96	; 0x60
  ADC_MultiModeTypeDef multimode = {0};
 8000ffa:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000ffe:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001000:	f007 fece 	bl	8008da0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001004:	2220      	movs	r2, #32
 8001006:	4621      	mov	r1, r4
 8001008:	a810      	add	r0, sp, #64	; 0x40
 800100a:	f007 fec9 	bl	8008da0 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800100e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001012:	2601      	movs	r6, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001014:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8001018:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800101c:	f8ca 300c 	str.w	r3, [sl, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	4650      	mov	r0, sl
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001022:	2304      	movs	r3, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001024:	f8aa 401c 	strh.w	r4, [sl, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001028:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800102c:	e9ca 2b00 	strd	r2, fp, [sl]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	f8ca 4008 	str.w	r4, [sl, #8]
  hadc1.Init.GainCompensation = 0;
 8001034:	f8ca 4010 	str.w	r4, [sl, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001038:	f88a 4024 	strb.w	r4, [sl, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103c:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001040:	f8ca 403c 	str.w	r4, [sl, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001044:	f88a 4040 	strb.w	r4, [sl, #64]	; 0x40
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001048:	f8ca 6014 	str.w	r6, [sl, #20]
  hadc1.Init.NbrOfConversion = 1;
 800104c:	f8ca 6020 	str.w	r6, [sl, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	f8ca 3018 	str.w	r3, [sl, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	f002 feda 	bl	8003e0c <HAL_ADC_Init>
 8001058:	b108      	cbz	r0, 800105e <main+0xe6>
 800105a:	b672      	cpsid	i
  while (1)
 800105c:	e7fe      	b.n	800105c <main+0xe4>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800105e:	4602      	mov	r2, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001060:	a90a      	add	r1, sp, #40	; 0x28
 8001062:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001064:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001066:	f003 fd45 	bl	8004af4 <HAL_ADCEx_MultiModeConfigChannel>
 800106a:	4602      	mov	r2, r0
 800106c:	b108      	cbz	r0, 8001072 <main+0xfa>
 800106e:	b672      	cpsid	i
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0xf8>
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001072:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001076:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800107a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800107e:	4a7c      	ldr	r2, [pc, #496]	; (8001270 <main+0x2f8>)
 8001080:	2309      	movs	r3, #9
 8001082:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001086:	2302      	movs	r3, #2
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001088:	f04f 0801 	mov.w	r8, #1
 800108c:	f04f 097f 	mov.w	r9, #127	; 0x7f
 8001090:	2404      	movs	r4, #4
 8001092:	2500      	movs	r5, #0
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001094:	9320      	str	r3, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800109a:	a918      	add	r1, sp, #96	; 0x60
 800109c:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800109e:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 80010a2:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80010a6:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010aa:	f003 fa1f 	bl	80044ec <HAL_ADCEx_InjectedConfigChannel>
 80010ae:	b108      	cbz	r0, 80010b4 <main+0x13c>
 80010b0:	b672      	cpsid	i
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <main+0x13a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80010b4:	4a6f      	ldr	r2, [pc, #444]	; (8001274 <main+0x2fc>)
 80010b6:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010ba:	a918      	add	r1, sp, #96	; 0x60
 80010bc:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80010be:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010c2:	f003 fa13 	bl	80044ec <HAL_ADCEx_InjectedConfigChannel>
 80010c6:	b108      	cbz	r0, 80010cc <main+0x154>
 80010c8:	b672      	cpsid	i
  while (1)
 80010ca:	e7fe      	b.n	80010ca <main+0x152>
  sConfig.Channel = ADC_CHANNEL_1;
 80010cc:	4a6a      	ldr	r2, [pc, #424]	; (8001278 <main+0x300>)
 80010ce:	2306      	movs	r3, #6
 80010d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_1;
 80010d6:	2204      	movs	r2, #4
 80010d8:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_1;
 80010dc:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80010e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	f002 ff98 	bl	8004018 <HAL_ADC_ConfigChannel>
 80010e8:	4607      	mov	r7, r0
 80010ea:	b108      	cbz	r0, 80010f0 <main+0x178>
 80010ec:	b672      	cpsid	i
  while (1)
 80010ee:	e7fe      	b.n	80010ee <main+0x176>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010f0:	4601      	mov	r1, r0
 80010f2:	223c      	movs	r2, #60	; 0x3c
 80010f4:	a818      	add	r0, sp, #96	; 0x60
  hadc2.Instance = ADC2;
 80010f6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 800129c <main+0x324>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010fa:	f007 fe51 	bl	8008da0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	2220      	movs	r2, #32
 8001100:	4639      	mov	r1, r7
 8001102:	a810      	add	r0, sp, #64	; 0x40
 8001104:	f007 fe4c 	bl	8008da0 <memset>
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hadc2.Instance = ADC2;
 800110c:	4a5b      	ldr	r2, [pc, #364]	; (800127c <main+0x304>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800110e:	f8aa 701c 	strh.w	r7, [sl, #28]
  hadc2.Init.GainCompensation = 0;
 8001112:	e9ca 3703 	strd	r3, r7, [sl, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001116:	4650      	mov	r0, sl
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001118:	2304      	movs	r3, #4
  hadc2.Instance = ADC2;
 800111a:	f8ca 2000 	str.w	r2, [sl]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	e9ca 770b 	strd	r7, r7, [sl, #44]	; 0x2c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001122:	f8ca b004 	str.w	fp, [sl, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001126:	f8ca 7008 	str.w	r7, [sl, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800112a:	f8ca 6014 	str.w	r6, [sl, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112e:	f8ca 3018 	str.w	r3, [sl, #24]
  hadc2.Init.NbrOfConversion = 1;
 8001132:	f8ca 6020 	str.w	r6, [sl, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001136:	f88a 7024 	strb.w	r7, [sl, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800113a:	f88a 7038 	strb.w	r7, [sl, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113e:	f8ca 703c 	str.w	r7, [sl, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001142:	f88a 7040 	strb.w	r7, [sl, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001146:	f002 fe61 	bl	8003e0c <HAL_ADC_Init>
 800114a:	4602      	mov	r2, r0
 800114c:	b108      	cbz	r0, 8001152 <main+0x1da>
 800114e:	b672      	cpsid	i
  while (1)
 8001150:	e7fe      	b.n	8001150 <main+0x1d8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001152:	4e48      	ldr	r6, [pc, #288]	; (8001274 <main+0x2fc>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001154:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001158:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  sConfigInjected.InjectedNbrOfConversion = 2;
 800115c:	2302      	movs	r3, #2
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800115e:	2709      	movs	r7, #9
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001160:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001164:	f04f 0980 	mov.w	r9, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001168:	a918      	add	r1, sp, #96	; 0x60
 800116a:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800116c:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001170:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001174:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001178:	9320      	str	r3, [sp, #128]	; 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 800117a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800117e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001182:	f003 f9b3 	bl	80044ec <HAL_ADCEx_InjectedConfigChannel>
 8001186:	b108      	cbz	r0, 800118c <main+0x214>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <main+0x212>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800118c:	4e3c      	ldr	r6, [pc, #240]	; (8001280 <main+0x308>)
 800118e:	f240 170f 	movw	r7, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001192:	a918      	add	r1, sp, #96	; 0x60
 8001194:	4650      	mov	r0, sl
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001196:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800119a:	f003 f9a7 	bl	80044ec <HAL_ADCEx_InjectedConfigChannel>
 800119e:	b108      	cbz	r0, 80011a4 <main+0x22c>
 80011a0:	b672      	cpsid	i
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <main+0x22a>
  sConfig.Channel = ADC_CHANNEL_13;
 80011a4:	2204      	movs	r2, #4
 80011a6:	237f      	movs	r3, #127	; 0x7f
 80011a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80011ac:	4a35      	ldr	r2, [pc, #212]	; (8001284 <main+0x30c>)
 80011ae:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011b0:	4650      	mov	r0, sl
 80011b2:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_13;
 80011b4:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80011b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011bc:	f002 ff2c 	bl	8004018 <HAL_ADC_ConfigChannel>
 80011c0:	b108      	cbz	r0, 80011c6 <main+0x24e>
 80011c2:	b672      	cpsid	i
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <main+0x24c>
  hcordic.Instance = CORDIC;
 80011c6:	4830      	ldr	r0, [pc, #192]	; (8001288 <main+0x310>)
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <main+0x314>)
 80011ca:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80011cc:	f003 fcf8 	bl	8004bc0 <HAL_CORDIC_Init>
 80011d0:	b108      	cbz	r0, 80011d6 <main+0x25e>
 80011d2:	b672      	cpsid	i
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <main+0x25c>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011d6:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 80011d8:	4d2d      	ldr	r5, [pc, #180]	; (8001290 <main+0x318>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011da:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011dc:	4621      	mov	r1, r4
 80011de:	2234      	movs	r2, #52	; 0x34
 80011e0:	a818      	add	r0, sp, #96	; 0x60
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80011e6:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 80011ee:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 80011f2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80011fa:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fc:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fe:	f007 fdcf 	bl	8008da0 <memset>
  htim1.Instance = TIM1;
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <main+0x31c>)
 8001204:	602b      	str	r3, [r5, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001206:	2020      	movs	r0, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001208:	f640 5105 	movw	r1, #3333	; 0xd05
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800120c:	f44f 7280 	mov.w	r2, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001210:	2301      	movs	r3, #1
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001212:	60a8      	str	r0, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001214:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001216:	e9c5 1203 	strd	r1, r2, [r5, #12]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800121a:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800121e:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001220:	f004 ffb0 	bl	8006184 <HAL_TIM_Base_Init>
 8001224:	b108      	cbz	r0, 800122a <main+0x2b2>
 8001226:	b672      	cpsid	i
  while (1)
 8001228:	e7fe      	b.n	8001228 <main+0x2b0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800122a:	4628      	mov	r0, r5
 800122c:	f005 f830 	bl	8006290 <HAL_TIM_PWM_Init>
 8001230:	b108      	cbz	r0, 8001236 <main+0x2be>
 8001232:	b672      	cpsid	i
  while (1)
 8001234:	e7fe      	b.n	8001234 <main+0x2bc>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001236:	2206      	movs	r2, #6
 8001238:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800123a:	a90a      	add	r1, sp, #40	; 0x28
 800123c:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800123e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001242:	f005 f95b 	bl	80064fc <HAL_TIM_SlaveConfigSynchro>
 8001246:	b108      	cbz	r0, 800124c <main+0x2d4>
 8001248:	b672      	cpsid	i
  while (1)
 800124a:	e7fe      	b.n	800124a <main+0x2d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800124c:	2270      	movs	r2, #112	; 0x70
 800124e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001252:	a906      	add	r1, sp, #24
 8001254:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001256:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125a:	f005 fb0b 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4602      	mov	r2, r0
 8001260:	b1f0      	cbz	r0, 80012a0 <main+0x328>
 8001262:	b672      	cpsid	i
  while (1)
 8001264:	e7fe      	b.n	8001264 <main+0x2ec>
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	48000400 	.word	0x48000400
 8001270:	08600004 	.word	0x08600004
 8001274:	3ac04000 	.word	0x3ac04000
 8001278:	04300002 	.word	0x04300002
 800127c:	50000100 	.word	0x50000100
 8001280:	0c900008 	.word	0x0c900008
 8001284:	36902000 	.word	0x36902000
 8001288:	200007fc 	.word	0x200007fc
 800128c:	40020c00 	.word	0x40020c00
 8001290:	20000824 	.word	0x20000824
 8001294:	40012c00 	.word	0x40012c00
 8001298:	2000078c 	.word	0x2000078c
 800129c:	2000071c 	.word	0x2000071c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a0:	2660      	movs	r6, #96	; 0x60
 80012a2:	2700      	movs	r7, #0
 80012a4:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a8:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012aa:	2600      	movs	r6, #0
 80012ac:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ae:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b0:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80012b4:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b8:	9216      	str	r2, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	f005 f9e1 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 80012be:	b108      	cbz	r0, 80012c4 <main+0x34c>
 80012c0:	b672      	cpsid	i
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <main+0x34a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c4:	2204      	movs	r2, #4
 80012c6:	a910      	add	r1, sp, #64	; 0x40
 80012c8:	4628      	mov	r0, r5
 80012ca:	f005 f9d9 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	b108      	cbz	r0, 80012d4 <main+0x35c>
 80012d0:	b672      	cpsid	i
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <main+0x35a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d4:	2208      	movs	r2, #8
 80012d6:	a910      	add	r1, sp, #64	; 0x40
 80012d8:	4628      	mov	r0, r5
 80012da:	f005 f9d1 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 80012de:	b108      	cbz	r0, 80012e4 <main+0x36c>
 80012e0:	b672      	cpsid	i
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <main+0x36a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80012e4:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e6:	220c      	movs	r2, #12
 80012e8:	a910      	add	r1, sp, #64	; 0x40
 80012ea:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80012ec:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ee:	f005 f9c7 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	b108      	cbz	r0, 80012f8 <main+0x380>
 80012f4:	b672      	cpsid	i
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <main+0x37e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80012f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8001304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800130e:	9024      	str	r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001310:	2200      	movs	r2, #0
 8001312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001316:	a918      	add	r1, sp, #96	; 0x60
 8001318:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800131a:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 800131e:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8001322:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 8001326:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800132a:	f005 faeb 	bl	8006904 <HAL_TIMEx_ConfigBreakDeadTime>
 800132e:	4604      	mov	r4, r0
 8001330:	b108      	cbz	r0, 8001336 <main+0x3be>
 8001332:	b672      	cpsid	i
  while (1)
 8001334:	e7fe      	b.n	8001334 <main+0x3bc>
  HAL_TIM_MspPostInit(&htim1);
 8001336:	4628      	mov	r0, r5
 8001338:	f001 ffee 	bl	8003318 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 800133c:	483c      	ldr	r0, [pc, #240]	; (8001430 <main+0x4b8>)
 800133e:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <main+0x4bc>)
 8001340:	6002      	str	r2, [r0, #0]
  htim4.Init.Period = M1_PULSE_NBR;
 8001342:	f243 73ff 	movw	r3, #14335	; 0x37ff
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001346:	2203      	movs	r2, #3
  htim4.Init.Period = M1_PULSE_NBR;
 8001348:	60c3      	str	r3, [r0, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800134a:	2300      	movs	r3, #0
 800134c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8001350:	2201      	movs	r2, #1
 8001352:	2300      	movs	r3, #0
 8001354:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8001358:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	e9c0 4401 	strd	r4, r4, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	9410      	str	r4, [sp, #64]	; 0x40
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	6184      	str	r4, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800136a:	220c      	movs	r2, #12
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 800136c:	240c      	movs	r4, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800136e:	2300      	movs	r3, #0
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001370:	a918      	add	r1, sp, #96	; 0x60
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001372:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8001376:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001378:	f005 f80e 	bl	8006398 <HAL_TIM_Encoder_Init>
 800137c:	b108      	cbz	r0, 8001382 <main+0x40a>
 800137e:	b672      	cpsid	i
  while (1)
 8001380:	e7fe      	b.n	8001380 <main+0x408>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001384:	482a      	ldr	r0, [pc, #168]	; (8001430 <main+0x4b8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001388:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800138c:	f005 fa72 	bl	8006874 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	b108      	cbz	r0, 8001396 <main+0x41e>
 8001392:	b672      	cpsid	i
  while (1)
 8001394:	e7fe      	b.n	8001394 <main+0x41c>
  huart2.Instance = USART2;
 8001396:	4c28      	ldr	r4, [pc, #160]	; (8001438 <main+0x4c0>)
 8001398:	4928      	ldr	r1, [pc, #160]	; (800143c <main+0x4c4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	60a0      	str	r0, [r4, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139c:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a4:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.Init.BaudRate = 115200;
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ac:	62a0      	str	r0, [r4, #40]	; 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ae:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b0:	4620      	mov	r0, r4
  huart2.Instance = USART2;
 80013b2:	6021      	str	r1, [r4, #0]
  huart2.Init.BaudRate = 115200;
 80013b4:	6062      	str	r2, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b6:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b8:	f005 fbae 	bl	8006b18 <HAL_UART_Init>
 80013bc:	4601      	mov	r1, r0
 80013be:	b108      	cbz	r0, 80013c4 <main+0x44c>
 80013c0:	b672      	cpsid	i
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <main+0x44a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c4:	4620      	mov	r0, r4
 80013c6:	f005 fd7d 	bl	8006ec4 <HAL_UARTEx_SetTxFifoThreshold>
 80013ca:	4601      	mov	r1, r0
 80013cc:	b108      	cbz	r0, 80013d2 <main+0x45a>
 80013ce:	b672      	cpsid	i
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <main+0x458>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	4620      	mov	r0, r4
 80013d4:	f005 fdb4 	bl	8006f40 <HAL_UARTEx_SetRxFifoThreshold>
 80013d8:	b108      	cbz	r0, 80013de <main+0x466>
 80013da:	b672      	cpsid	i
  while (1)
 80013dc:	e7fe      	b.n	80013dc <main+0x464>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013de:	4620      	mov	r0, r4
 80013e0:	f005 fd52 	bl	8006e88 <HAL_UARTEx_DisableFifoMode>
 80013e4:	4605      	mov	r5, r0
 80013e6:	b108      	cbz	r0, 80013ec <main+0x474>
 80013e8:	b672      	cpsid	i
  while (1)
 80013ea:	e7fe      	b.n	80013ea <main+0x472>
  hspi2.Instance = SPI2;
 80013ec:	4c14      	ldr	r4, [pc, #80]	; (8001440 <main+0x4c8>)
  MX_MotorControl_Init();
 80013ee:	f001 fbf7 	bl	8002be0 <MX_MotorControl_Init>
  hspi2.Instance = SPI2;
 80013f2:	4914      	ldr	r1, [pc, #80]	; (8001444 <main+0x4cc>)
 80013f4:	6021      	str	r1, [r4, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f6:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013fa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013fe:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001402:	6062      	str	r2, [r4, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001404:	60e3      	str	r3, [r4, #12]
  hspi2.Init.CRCPolynomial = 7;
 8001406:	2207      	movs	r2, #7
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001408:	2308      	movs	r3, #8
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800140a:	2618      	movs	r6, #24
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800140c:	4620      	mov	r0, r4
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140e:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001412:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001416:	60a5      	str	r5, [r4, #8]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001418:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800141a:	6325      	str	r5, [r4, #48]	; 0x30
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800141c:	61a1      	str	r1, [r4, #24]
  hspi2.Init.CRCPolynomial = 7;
 800141e:	62e2      	str	r2, [r4, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001420:	6363      	str	r3, [r4, #52]	; 0x34
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001422:	61e6      	str	r6, [r4, #28]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001424:	f004 fbde 	bl	8005be4 <HAL_SPI_Init>
 8001428:	4680      	mov	r8, r0
 800142a:	b168      	cbz	r0, 8001448 <main+0x4d0>
 800142c:	b672      	cpsid	i
  while (1)
 800142e:	e7fe      	b.n	800142e <main+0x4b6>
 8001430:	200006d0 	.word	0x200006d0
 8001434:	40000800 	.word	0x40000800
 8001438:	20000870 	.word	0x20000870
 800143c:	40004400 	.word	0x40004400
 8001440:	2000066c 	.word	0x2000066c
 8001444:	40003800 	.word	0x40003800
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	2104      	movs	r1, #4
 800144c:	4630      	mov	r0, r6
 800144e:	f003 fbe5 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001452:	4630      	mov	r0, r6
 8001454:	f003 fc1a 	bl	8004c8c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001458:	4642      	mov	r2, r8
 800145a:	4641      	mov	r1, r8
 800145c:	2019      	movs	r0, #25
 800145e:	f003 fbdd 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001462:	2019      	movs	r0, #25
 8001464:	f003 fc12 	bl	8004c8c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001468:	4642      	mov	r2, r8
 800146a:	2102      	movs	r1, #2
 800146c:	2012      	movs	r0, #18
 800146e:	f003 fbd5 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001472:	2012      	movs	r0, #18
 8001474:	f003 fc0a 	bl	8004c8c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001478:	4642      	mov	r2, r8
 800147a:	2103      	movs	r1, #3
 800147c:	201e      	movs	r0, #30
 800147e:	f003 fbcd 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001482:	201e      	movs	r0, #30
 8001484:	f003 fc02 	bl	8004c8c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001488:	2201      	movs	r2, #1
 800148a:	2103      	movs	r1, #3
 800148c:	2026      	movs	r0, #38	; 0x26
 800148e:	f003 fbc5 	bl	8004c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001492:	2026      	movs	r0, #38	; 0x26
 8001494:	f003 fbfa 	bl	8004c8c <HAL_NVIC_EnableIRQ>
		g_current_encoder_position_in_rad = M_TWOPI * (float) g_current_encoder_position / ENCODER_M1.PulseNumber;
 8001498:	ed9f 8b6f 	vldr	d8, [pc, #444]	; 8001658 <main+0x6e0>
 800149c:	f8df b200 	ldr.w	fp, [pc, #512]	; 80016a0 <main+0x728>
 80014a0:	4d71      	ldr	r5, [pc, #452]	; (8001668 <main+0x6f0>)
 80014a2:	4f72      	ldr	r7, [pc, #456]	; (800166c <main+0x6f4>)
 80014a4:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80016a4 <main+0x72c>
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80014a8:	4e71      	ldr	r6, [pc, #452]	; (8001670 <main+0x6f8>)
		g_current_torque 		= MC_GetPhaseCurrentAmplitudeMotor1();
 80014aa:	f000 f9c1 	bl	8001830 <MC_GetPhaseCurrentAmplitudeMotor1>
 80014ae:	4b71      	ldr	r3, [pc, #452]	; (8001674 <main+0x6fc>)
 80014b0:	8018      	strh	r0, [r3, #0]
		g_stm_state_motor 		= MC_GetSTMStateMotor1();
 80014b2:	f000 f9cf 	bl	8001854 <MC_GetSTMStateMotor1>
 80014b6:	4b70      	ldr	r3, [pc, #448]	; (8001678 <main+0x700>)
 80014b8:	7018      	strb	r0, [r3, #0]
		g_mc_current_faults_motor 	= MC_GetCurrentFaultsMotor1();
 80014ba:	f000 f9c5 	bl	8001848 <MC_GetCurrentFaultsMotor1>
 80014be:	4b6f      	ldr	r3, [pc, #444]	; (800167c <main+0x704>)
 80014c0:	8018      	strh	r0, [r3, #0]
		g_mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 80014c2:	f000 f9bb 	bl	800183c <MC_GetOccurredFaultsMotor1>
		MC_ProgramSpeedRampMotor1(g_goal, 0);
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <main+0x708>)
		g_mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 80014c8:	4603      	mov	r3, r0
		MC_ProgramSpeedRampMotor1(g_goal, 0);
 80014ca:	f9b2 0000 	ldrsh.w	r0, [r2]
		g_mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 80014ce:	4a6d      	ldr	r2, [pc, #436]	; (8001684 <main+0x70c>)
		MC_ProgramSpeedRampMotor1(g_goal, 0);
 80014d0:	2100      	movs	r1, #0
		g_mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 80014d2:	8013      	strh	r3, [r2, #0]
		MC_ProgramSpeedRampMotor1(g_goal, 0);
 80014d4:	f000 f9a4 	bl	8001820 <MC_ProgramSpeedRampMotor1>
		MC_StartMotor1();
 80014d8:	f000 f99c 	bl	8001814 <MC_StartMotor1>
		if (g_previous_mechanical_position > ENCODER_M1.PulseNumber - 4000 && g_current_mechanical_position  < 4000)
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <main+0x710>)
		g_previous_mechanical_position = g_current_mechanical_position; // store old position
 80014de:	f8db 2000 	ldr.w	r2, [fp]
		if (g_previous_mechanical_position > ENCODER_M1.PulseNumber - 4000 && g_current_mechanical_position  < 4000)
 80014e2:	f8b3 906e 	ldrh.w	r9, [r3, #110]	; 0x6e
		g_previous_mechanical_position = g_current_mechanical_position; // store old position
 80014e6:	4969      	ldr	r1, [pc, #420]	; (800168c <main+0x714>)
		g_current_mechanical_position = ENCODER_M1.PreviousCapture; // 0 ... 14336 - 1 mechanical motor rotation
 80014e8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
		g_previous_mechanical_position = g_current_mechanical_position; // store old position
 80014ec:	600a      	str	r2, [r1, #0]
		if (g_previous_mechanical_position > ENCODER_M1.PulseNumber - 4000 && g_current_mechanical_position  < 4000)
 80014ee:	f6a9 709f 	subw	r0, r9, #3999	; 0xf9f
 80014f2:	4282      	cmp	r2, r0
		g_current_mechanical_position = ENCODER_M1.PreviousCapture; // 0 ... 14336 - 1 mechanical motor rotation
 80014f4:	f8cb 3000 	str.w	r3, [fp]
		if (g_previous_mechanical_position > ENCODER_M1.PulseNumber - 4000 && g_current_mechanical_position  < 4000)
 80014f8:	db05      	blt.n	8001506 <main+0x58e>
 80014fa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80014fe:	da02      	bge.n	8001506 <main+0x58e>
			g_current_mechanical_rotation++;
 8001500:	6829      	ldr	r1, [r5, #0]
 8001502:	3101      	adds	r1, #1
 8001504:	6029      	str	r1, [r5, #0]
		if (g_current_mechanical_position  > ENCODER_M1.PulseNumber - 4000 && g_previous_mechanical_position < 4000)
 8001506:	4283      	cmp	r3, r0
 8001508:	db05      	blt.n	8001516 <main+0x59e>
 800150a:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
 800150e:	da02      	bge.n	8001516 <main+0x59e>
			g_current_mechanical_rotation--;
 8001510:	682a      	ldr	r2, [r5, #0]
 8001512:	3a01      	subs	r2, #1
 8001514:	602a      	str	r2, [r5, #0]
		g_current_encoder_position = g_current_mechanical_rotation * ENCODER_M1.PulseNumber + g_current_mechanical_position;
 8001516:	6828      	ldr	r0, [r5, #0]
 8001518:	fb00 3009 	mla	r0, r0, r9, r3
		g_current_encoder_position_in_rad = M_TWOPI * (float) g_current_encoder_position / ENCODER_M1.PulseNumber;
 800151c:	ee07 0a90 	vmov	s15, r0
		g_current_encoder_position = g_current_mechanical_rotation * ENCODER_M1.PulseNumber + g_current_mechanical_position;
 8001520:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <main+0x718>)
		g_current_encoder_position_in_rad = M_TWOPI * (float) g_current_encoder_position / ENCODER_M1.PulseNumber;
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		g_current_encoder_position = g_current_mechanical_rotation * ENCODER_M1.PulseNumber + g_current_mechanical_position;
 8001526:	6018      	str	r0, [r3, #0]
		g_current_encoder_position_in_rad = M_TWOPI * (float) g_current_encoder_position / ENCODER_M1.PulseNumber;
 8001528:	ee17 0a90 	vmov	r0, s15
 800152c:	f7fe ffd8 	bl	80004e0 <__aeabi_f2d>
 8001530:	ec53 2b18 	vmov	r2, r3, d8
 8001534:	f7ff f82c 	bl	8000590 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4648      	mov	r0, r9
 800153e:	ec43 2b19 	vmov	d9, r2, r3
 8001542:	f7fe ffbb 	bl	80004bc <__aeabi_i2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	ec51 0b19 	vmov	r0, r1, d9
 800154e:	f7ff f949 	bl	80007e4 <__aeabi_ddiv>
 8001552:	f7ff facd 	bl	8000af0 <__aeabi_d2f>
		g_current_joint_position_in_rad = fmod(g_current_encoder_position_in_rad / 121, M_TWOPI) - M_PI;
 8001556:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001694 <main+0x71c>
		g_current_encoder_position_in_rad = M_TWOPI * (float) g_current_encoder_position / ENCODER_M1.PulseNumber;
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <main+0x720>)
 800155c:	ee07 0a90 	vmov	s15, r0
		g_current_joint_position_in_rad = fmod(g_current_encoder_position_in_rad / 121, M_TWOPI) - M_PI;
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
		g_current_encoder_position_in_rad = M_TWOPI * (float) g_current_encoder_position / ENCODER_M1.PulseNumber;
 8001564:	6018      	str	r0, [r3, #0]
		g_current_joint_position_in_rad = fmod(g_current_encoder_position_in_rad / 121, M_TWOPI) - M_PI;
 8001566:	ee17 0a90 	vmov	r0, s15
 800156a:	f7fe ffb9 	bl	80004e0 <__aeabi_f2d>
 800156e:	eeb0 1a48 	vmov.f32	s2, s16
 8001572:	eef0 1a68 	vmov.f32	s3, s17
 8001576:	ec41 0b10 	vmov	d0, r0, r1
 800157a:	f007 fc19 	bl	8008db0 <fmod>
 800157e:	a338      	add	r3, pc, #224	; (adr r3, 8001660 <main+0x6e8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	ec51 0b10 	vmov	r0, r1, d0
 8001588:	f7fe fe4a 	bl	8000220 <__aeabi_dsub>
 800158c:	f7ff fab0 	bl	8000af0 <__aeabi_d2f>
 8001590:	4a42      	ldr	r2, [pc, #264]	; (800169c <main+0x724>)
	uint16_t angle_value    = 0;
 8001592:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
	uint16_t send_data      = 0b010 << 13 | (reg_number & (0b00011111)) << 8 ;
 8001596:	f44f 43b6 	mov.w	r3, #23296	; 0x5b00
		g_current_joint_position_in_rad = fmod(g_current_encoder_position_in_rad / 121, M_TWOPI) - M_PI;
 800159a:	6010      	str	r0, [r2, #0]
	uint16_t register_value = 0;
 800159c:	f8ad 8060 	strh.w	r8, [sp, #96]	; 0x60
	uint16_t send_data      = 0b010 << 13 | (reg_number & (0b00011111)) << 8 ;
 80015a0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint16_t register_value = 0;
 80015a4:	2218      	movs	r2, #24
	for (uint16_t i = 0; i < 24; i++) NOP;  // wait about 150ns
 80015a6:	bf00      	nop
 80015a8:	3a01      	subs	r2, #1
 80015aa:	b292      	uxth	r2, r2
 80015ac:	2a00      	cmp	r2, #0
 80015ae:	d1fa      	bne.n	80015a6 <main+0x62e>
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80015b0:	2104      	movs	r1, #4
 80015b2:	4630      	mov	r0, r6
 80015b4:	f003 fc8c 	bl	8004ed0 <HAL_GPIO_WritePin>
 80015b8:	2382      	movs	r3, #130	; 0x82
	for (uint16_t i = 0; i < 130; i++) NOP;  // wait about 80ns
 80015ba:	bf00      	nop
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1fa      	bne.n	80015ba <main+0x642>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &angle_value, 1, 1);
 80015c4:	2301      	movs	r3, #1
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	aa10      	add	r2, sp, #64	; 0x40
 80015ca:	a90a      	add	r1, sp, #40	; 0x28
 80015cc:	4620      	mov	r0, r4
 80015ce:	f004 fb8f 	bl	8005cf0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 80015d2:	2301      	movs	r3, #1
 80015d4:	461a      	mov	r2, r3
 80015d6:	2104      	movs	r1, #4
 80015d8:	4630      	mov	r0, r6
 80015da:	f003 fc79 	bl	8004ed0 <HAL_GPIO_WritePin>
 80015de:	2278      	movs	r2, #120	; 0x78
	for (uint16_t i = 0; i < 120; i++) NOP;  // wait about 750ns
 80015e0:	bf00      	nop
 80015e2:	3a01      	subs	r2, #1
 80015e4:	b292      	uxth	r2, r2
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d1fa      	bne.n	80015e0 <main+0x668>
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_RESET);
 80015ea:	2104      	movs	r1, #4
 80015ec:	4630      	mov	r0, r6
 80015ee:	f003 fc6f 	bl	8004ed0 <HAL_GPIO_WritePin>
 80015f2:	f04f 0c0d 	mov.w	ip, #13
	for (uint16_t i = 0; i < 13; i++) NOP;  // wait about 80ns
 80015f6:	bf00      	nop
 80015f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80015fc:	fa1f fc8c 	uxth.w	ip, ip
 8001600:	f1bc 0f00 	cmp.w	ip, #0
 8001604:	d1f7      	bne.n	80015f6 <main+0x67e>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &register_value, 1, 1);
 8001606:	2301      	movs	r3, #1
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	aa18      	add	r2, sp, #96	; 0x60
 800160c:	a90a      	add	r1, sp, #40	; 0x28
 800160e:	4620      	mov	r0, r4
	send_data      = 0x0000;
 8001610:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t * ) &send_data, (uint8_t * ) &register_value, 1, 1);
 8001614:	f004 fb6c 	bl	8005cf0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(MA730_CS_GPIO_Port, MA730_CS_Pin, GPIO_PIN_SET);
 8001618:	2301      	movs	r3, #1
 800161a:	461a      	mov	r2, r3
 800161c:	2104      	movs	r1, #4
 800161e:	4630      	mov	r0, r6
 8001620:	f003 fc56 	bl	8004ed0 <HAL_GPIO_WritePin>
 8001624:	2378      	movs	r3, #120	; 0x78
	for (uint16_t i = 0; i < 120; i++) NOP;  // wait about 750ns
 8001626:	bf00      	nop
 8001628:	3b01      	subs	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1fa      	bne.n	8001626 <main+0x6ae>
	g_ma730.angle = (angle_value >> 2) & 0b0011111111111111;
 8001630:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	register_value = register_value >> 8;
 8001634:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
		g_counter++;
 8001638:	f8da 2000 	ldr.w	r2, [sl]
	g_ma730.angle = (angle_value >> 2) & 0b0011111111111111;
 800163c:	0889      	lsrs	r1, r1, #2
 800163e:	8039      	strh	r1, [r7, #0]
		g_counter++;
 8001640:	3201      	adds	r2, #1
			g_ma730.mgl = ((uint8_t) register_value & 0b01000000) >> 6;
 8001642:	f3c3 3180 	ubfx	r1, r3, #14, #1
			g_ma730.mgh = ((uint8_t) register_value & 0b10000000) >> 7;
 8001646:	0bdb      	lsrs	r3, r3, #15
			g_ma730.mgl = ((uint8_t) register_value & 0b01000000) >> 6;
 8001648:	73b9      	strb	r1, [r7, #14]
		g_counter++;
 800164a:	f8ca 2000 	str.w	r2, [sl]
			g_ma730.mgh = ((uint8_t) register_value & 0b10000000) >> 7;
 800164e:	737b      	strb	r3, [r7, #13]
		g_current_torque 		= MC_GetPhaseCurrentAmplitudeMotor1();
 8001650:	e72b      	b.n	80014aa <main+0x532>
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	54442d18 	.word	0x54442d18
 800165c:	401921fb 	.word	0x401921fb
 8001660:	54442d18 	.word	0x54442d18
 8001664:	400921fb 	.word	0x400921fb
 8001668:	2000061c 	.word	0x2000061c
 800166c:	20000624 	.word	0x20000624
 8001670:	48000400 	.word	0x48000400
 8001674:	20000620 	.word	0x20000620
 8001678:	200007f8 	.word	0x200007f8
 800167c:	20000788 	.word	0x20000788
 8001680:	20000622 	.word	0x20000622
 8001684:	20000900 	.word	0x20000900
 8001688:	200000b4 	.word	0x200000b4
 800168c:	20000634 	.word	0x20000634
 8001690:	2000060c 	.word	0x2000060c
 8001694:	3c0767ab 	.word	0x3c0767ab
 8001698:	20000610 	.word	0x20000610
 800169c:	20000614 	.word	0x20000614
 80016a0:	20000618 	.word	0x20000618
 80016a4:	20000608 	.word	0x20000608

080016a8 <R3_2_GetPhaseCurrents>:
{
 80016a8:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80016aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
  Sector = ( uint8_t )pHandle->_Super.Sector;
 80016ac:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80016b0:	689d      	ldr	r5, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80016b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80016b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80016b8:	6e5e      	ldr	r6, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80016ba:	6812      	ldr	r2, [r2, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80016bc:	6836      	ldr	r6, [r6, #0]
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80016be:	686b      	ldr	r3, [r5, #4]
 80016c0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80016c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c8:	606b      	str	r3, [r5, #4]
  switch ( Sector )
 80016ca:	2c05      	cmp	r4, #5
 80016cc:	f200 8098 	bhi.w	8001800 <R3_2_GetPhaseCurrents+0x158>
 80016d0:	e8df f004 	tbb	[pc, r4]
 80016d4:	031e1e38 	.word	0x031e1e38
 80016d8:	3803      	.short	0x3803
		Aux = (int32_t) (ADCDataReg1) - (int32_t) (pHandle->PhaseAOffset);
 80016da:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <R3_2_GetPhaseCurrents+0x168>)
		Aux = (int32_t) (ADCDataReg1) - (int32_t) (pHandle->PhaseAOffset);
 80016de:	1b14      	subs	r4, r2, r4
      if ( Aux < -INT16_MAX )
 80016e0:	429c      	cmp	r4, r3
 80016e2:	da54      	bge.n	800178e <R3_2_GetPhaseCurrents+0xe6>
        Iab->a = INT16_MAX;
 80016e4:	800b      	strh	r3, [r1, #0]
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseBOffset );
 80016e6:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 80016e8:	4d49      	ldr	r5, [pc, #292]	; (8001810 <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseBOffset );
 80016ea:	1ab2      	subs	r2, r6, r2
      if ( Aux < -INT16_MAX )
 80016ec:	42aa      	cmp	r2, r5
 80016ee:	da54      	bge.n	800179a <R3_2_GetPhaseCurrents+0xf2>
        Iab->b = -INT16_MAX;
 80016f0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80016f4:	804d      	strh	r5, [r1, #2]
 80016f6:	b2bb      	uxth	r3, r7
 80016f8:	f248 0201 	movw	r2, #32769	; 0x8001
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80016fc:	4413      	add	r3, r2
 80016fe:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 8001700:	f8a0 7048 	strh.w	r7, [r0, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 8001704:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8001708:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800170c:	bcf0      	pop	{r4, r5, r6, r7}
 800170e:	4770      	bx	lr
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseAOffset );
 8001710:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <R3_2_GetPhaseCurrents+0x168>)
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseAOffset );
 8001714:	1b14      	subs	r4, r2, r4
      if ( Aux < -INT16_MAX )
 8001716:	429c      	cmp	r4, r3
 8001718:	db33      	blt.n	8001782 <R3_2_GetPhaseCurrents+0xda>
      else  if ( Aux > INT16_MAX )
 800171a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800171e:	db67      	blt.n	80017f0 <R3_2_GetPhaseCurrents+0x148>
        Iab->a = INT16_MAX;
 8001720:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001724:	4613      	mov	r3, r2
 8001726:	800a      	strh	r2, [r1, #0]
 8001728:	4614      	mov	r4, r2
 800172a:	4617      	mov	r7, r2
      Aux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( ADCDataReg2 ); /* -Ic */
 800172c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800172e:	1b92      	subs	r2, r2, r6
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8001730:	1b14      	subs	r4, r2, r4
      if ( Aux > INT16_MAX )
 8001732:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001736:	db43      	blt.n	80017c0 <R3_2_GetPhaseCurrents+0x118>
        Iab->b = INT16_MAX;
 8001738:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800173c:	4622      	mov	r2, r4
 800173e:	804c      	strh	r4, [r1, #2]
 8001740:	4625      	mov	r5, r4
 8001742:	e7db      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseBOffset );
 8001744:	6e03      	ldr	r3, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8001746:	4d32      	ldr	r5, [pc, #200]	; (8001810 <R3_2_GetPhaseCurrents+0x168>)
    	Aux = ( int32_t )( ADCDataReg1 ) - ( int32_t )( pHandle->PhaseBOffset );
 8001748:	1ad4      	subs	r4, r2, r3
      if ( Aux < -INT16_MAX )
 800174a:	42ac      	cmp	r4, r5
 800174c:	db14      	blt.n	8001778 <R3_2_GetPhaseCurrents+0xd0>
      else  if ( Aux > INT16_MAX )
 800174e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001752:	db42      	blt.n	80017da <R3_2_GetPhaseCurrents+0x132>
        Iab->b = INT16_MAX;
 8001754:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001758:	461a      	mov	r2, r3
 800175a:	804b      	strh	r3, [r1, #2]
 800175c:	461c      	mov	r4, r3
 800175e:	461d      	mov	r5, r3
      Aux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( ADCDataReg2 ); /* Ic reversed */
 8001760:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001762:	1b9b      	subs	r3, r3, r6
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8001764:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8001766:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800176a:	db22      	blt.n	80017b2 <R3_2_GetPhaseCurrents+0x10a>
        Iab->a = INT16_MAX;
 800176c:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8001770:	4623      	mov	r3, r4
 8001772:	800c      	strh	r4, [r1, #0]
 8001774:	4627      	mov	r7, r4
 8001776:	e7c1      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
        Iab->b = -INT16_MAX;
 8001778:	462c      	mov	r4, r5
 800177a:	804d      	strh	r5, [r1, #2]
 800177c:	f248 0201 	movw	r2, #32769	; 0x8001
 8001780:	e7ee      	b.n	8001760 <R3_2_GetPhaseCurrents+0xb8>
        Iab->a = -INT16_MAX;
 8001782:	461c      	mov	r4, r3
 8001784:	800b      	strh	r3, [r1, #0]
 8001786:	461f      	mov	r7, r3
 8001788:	f248 0301 	movw	r3, #32769	; 0x8001
 800178c:	e7ce      	b.n	800172c <R3_2_GetPhaseCurrents+0x84>
      else  if ( Aux > INT16_MAX )
 800178e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001792:	db1c      	blt.n	80017ce <R3_2_GetPhaseCurrents+0x126>
        Iab->a = INT16_MAX;
 8001794:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001798:	e7a4      	b.n	80016e4 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 800179a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800179e:	db20      	blt.n	80017e2 <R3_2_GetPhaseCurrents+0x13a>
        Iab->b = INT16_MAX;
 80017a0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80017a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80017a8:	804b      	strh	r3, [r1, #2]
 80017aa:	461a      	mov	r2, r3
 80017ac:	461d      	mov	r5, r3
 80017ae:	b2bb      	uxth	r3, r7
 80017b0:	e7a4      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 80017b2:	4f17      	ldr	r7, [pc, #92]	; (8001810 <R3_2_GetPhaseCurrents+0x168>)
 80017b4:	42bc      	cmp	r4, r7
 80017b6:	da1f      	bge.n	80017f8 <R3_2_GetPhaseCurrents+0x150>
        Iab->a = -INT16_MAX;
 80017b8:	800f      	strh	r7, [r1, #0]
 80017ba:	f248 0301 	movw	r3, #32769	; 0x8001
 80017be:	e79d      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 80017c0:	4d13      	ldr	r5, [pc, #76]	; (8001810 <R3_2_GetPhaseCurrents+0x168>)
 80017c2:	42ac      	cmp	r4, r5
 80017c4:	da05      	bge.n	80017d2 <R3_2_GetPhaseCurrents+0x12a>
        Iab->b = -INT16_MAX;
 80017c6:	804d      	strh	r5, [r1, #2]
 80017c8:	f248 0201 	movw	r2, #32769	; 0x8001
 80017cc:	e796      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 80017ce:	800c      	strh	r4, [r1, #0]
 80017d0:	e789      	b.n	80016e6 <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 80017d2:	b225      	sxth	r5, r4
 80017d4:	804d      	strh	r5, [r1, #2]
 80017d6:	b2a2      	uxth	r2, r4
 80017d8:	e790      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
        Iab->b = ( int16_t )Aux;
 80017da:	b225      	sxth	r5, r4
 80017dc:	804d      	strh	r5, [r1, #2]
 80017de:	b2a2      	uxth	r2, r4
 80017e0:	e7be      	b.n	8001760 <R3_2_GetPhaseCurrents+0xb8>
        Iab->b = ( int16_t )Aux;
 80017e2:	f9b1 7000 	ldrsh.w	r7, [r1]
 80017e6:	b215      	sxth	r5, r2
 80017e8:	b2bb      	uxth	r3, r7
 80017ea:	804d      	strh	r5, [r1, #2]
 80017ec:	b292      	uxth	r2, r2
 80017ee:	e785      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 80017f0:	b227      	sxth	r7, r4
 80017f2:	800f      	strh	r7, [r1, #0]
 80017f4:	b2a3      	uxth	r3, r4
 80017f6:	e799      	b.n	800172c <R3_2_GetPhaseCurrents+0x84>
        Iab->a = ( int16_t )Aux;
 80017f8:	b227      	sxth	r7, r4
 80017fa:	800f      	strh	r7, [r1, #0]
 80017fc:	b2a3      	uxth	r3, r4
 80017fe:	e77d      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
 8001800:	f9b1 7000 	ldrsh.w	r7, [r1]
 8001804:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8001808:	880b      	ldrh	r3, [r1, #0]
 800180a:	884a      	ldrh	r2, [r1, #2]
 800180c:	e776      	b.n	80016fc <R3_2_GetPhaseCurrents+0x54>
 800180e:	bf00      	nop
 8001810:	ffff8001 	.word	0xffff8001

08001814 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001814:	4b01      	ldr	r3, [pc, #4]	; (800181c <MC_StartMotor1+0x8>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	f000 b850 	b.w	80018bc <MCI_StartMotor>
 800181c:	200009e8 	.word	0x200009e8

08001820 <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <MC_ProgramSpeedRampMotor1+0xc>)
{
 8001822:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001824:	4601      	mov	r1, r0
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	f000 b828 	b.w	800187c <MCI_ExecSpeedRamp>
 800182c:	200009e8 	.word	0x200009e8

08001830 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8001830:	4b01      	ldr	r3, [pc, #4]	; (8001838 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	f000 b916 	b.w	8001a64 <MCI_GetPhaseCurrentAmplitude>
 8001838:	200009e8 	.word	0x200009e8

0800183c <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 800183c:	4b01      	ldr	r3, [pc, #4]	; (8001844 <MC_GetOccurredFaultsMotor1+0x8>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	f000 b892 	b.w	8001968 <MCI_GetOccurredFaults>
 8001844:	200009e8 	.word	0x200009e8

08001848 <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <MC_GetCurrentFaultsMotor1+0x8>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f000 b892 	b.w	8001974 <MCI_GetCurrentFaults>
 8001850:	200009e8 	.word	0x200009e8

08001854 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001854:	4b01      	ldr	r3, [pc, #4]	; (800185c <MC_GetSTMStateMotor1+0x8>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	f000 b882 	b.w	8001960 <MCI_GetSTMState>
 800185c:	200009e8 	.word	0x200009e8

08001860 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8001860:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001862:	2400      	movs	r4, #0
 8001864:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8001866:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8001868:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 800186a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800186c:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 800186e:	e9c0 1200 	strd	r1, r2, [r0]
}
 8001872:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8001876:	6083      	str	r3, [r0, #8]
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 800187c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800187e:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001882:	2401      	movs	r4, #1
 8001884:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001886:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001888:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 800188c:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800188e:	8303      	strh	r3, [r0, #24]
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001894:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001896:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001898:	2402      	movs	r4, #2
 800189a:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 800189c:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800189e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 80018a2:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018a4:	8303      	strh	r3, [r0, #24]
}
 80018a6:	4770      	bx	lr

080018a8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 80018a8:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80018aa:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018ac:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 80018ae:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80018b2:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018b4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80018b6:	b002      	add	sp, #8
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80018bc:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80018be:	2103      	movs	r1, #3
{
 80018c0:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80018c2:	6800      	ldr	r0, [r0, #0]
 80018c4:	f007 f828 	bl	8008918 <STM_NextState>

  if ( RetVal == true )
 80018c8:	b108      	cbz	r0, 80018ce <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018ca:	2301      	movs	r3, #1
 80018cc:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80018ce:	bd10      	pop	{r4, pc}

080018d0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80018d0:	6800      	ldr	r0, [r0, #0]
 80018d2:	2107      	movs	r1, #7
 80018d4:	f007 b820 	b.w	8008918 <STM_NextState>

080018d8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80018d8:	6800      	ldr	r0, [r0, #0]
 80018da:	f007 b893 	b.w	8008a04 <STM_FaultAcknowledged>
 80018de:	bf00      	nop

080018e0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80018e0:	6800      	ldr	r0, [r0, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	f007 b818 	b.w	8008918 <STM_NextState>

080018e8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80018e8:	b178      	cbz	r0, 800190a <MCI_ExecBufferedCommands+0x22>
{
 80018ea:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80018ec:	7e03      	ldrb	r3, [r0, #24]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	4604      	mov	r4, r0
 80018f2:	d000      	beq.n	80018f6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80018f4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80018f6:	7b01      	ldrb	r1, [r0, #12]
 80018f8:	2902      	cmp	r1, #2
 80018fa:	d020      	beq.n	800193e <MCI_ExecBufferedCommands+0x56>
 80018fc:	2903      	cmp	r1, #3
 80018fe:	d005      	beq.n	800190c <MCI_ExecBufferedCommands+0x24>
 8001900:	2901      	cmp	r1, #1
 8001902:	d00c      	beq.n	800191e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001904:	2303      	movs	r3, #3
 8001906:	7623      	strb	r3, [r4, #24]
}
 8001908:	bd10      	pop	{r4, pc}
 800190a:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800190c:	6882      	ldr	r2, [r0, #8]
 800190e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001912:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001916:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001918:	2302      	movs	r3, #2
 800191a:	7623      	strb	r3, [r4, #24]
}
 800191c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800191e:	6883      	ldr	r3, [r0, #8]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001926:	6840      	ldr	r0, [r0, #4]
 8001928:	f006 ff30 	bl	800878c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 800192c:	8ae2      	ldrh	r2, [r4, #22]
 800192e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001932:	6860      	ldr	r0, [r4, #4]
 8001934:	f006 ff2e 	bl	8008794 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001938:	2800      	cmp	r0, #0
 800193a:	d0e3      	beq.n	8001904 <MCI_ExecBufferedCommands+0x1c>
 800193c:	e7ec      	b.n	8001918 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800193e:	6883      	ldr	r3, [r0, #8]
 8001940:	2100      	movs	r1, #0
 8001942:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001946:	6840      	ldr	r0, [r0, #4]
 8001948:	f006 ff20 	bl	800878c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 800194c:	8ae2      	ldrh	r2, [r4, #22]
 800194e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001952:	6860      	ldr	r0, [r4, #4]
 8001954:	f006 ff1e 	bl	8008794 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001958:	2800      	cmp	r0, #0
 800195a:	d0d3      	beq.n	8001904 <MCI_ExecBufferedCommands+0x1c>
 800195c:	e7dc      	b.n	8001918 <MCI_ExecBufferedCommands+0x30>
 800195e:	bf00      	nop

08001960 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001960:	6800      	ldr	r0, [r0, #0]
 8001962:	f007 b84d 	b.w	8008a00 <STM_GetState>
 8001966:	bf00      	nop

08001968 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8001968:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 800196a:	6800      	ldr	r0, [r0, #0]
 800196c:	f007 f856 	bl	8008a1c <STM_GetFaultState>
}
 8001970:	b280      	uxth	r0, r0
 8001972:	bd08      	pop	{r3, pc}

08001974 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8001974:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8001976:	6800      	ldr	r0, [r0, #0]
 8001978:	f007 f850 	bl	8008a1c <STM_GetFaultState>
}
 800197c:	0c00      	lsrs	r0, r0, #16
 800197e:	bd08      	pop	{r3, pc}

08001980 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001980:	7e40      	ldrb	r0, [r0, #25]
 8001982:	4770      	bx	lr

08001984 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001984:	7b03      	ldrb	r3, [r0, #12]
 8001986:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8001988:	bf0c      	ite	eq
 800198a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 800198e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001994:	6840      	ldr	r0, [r0, #4]
 8001996:	f006 bf45 	b.w	8008824 <STC_StopRamp>
 800199a:	bf00      	nop

0800199c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 800199c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800199e:	6840      	ldr	r0, [r0, #4]
 80019a0:	f006 feda 	bl	8008758 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80019a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80019a8:	f006 be82 	b.w	80086b0 <SPD_GetAvrgMecSpeedUnit>

080019ac <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80019ac:	6840      	ldr	r0, [r0, #4]
 80019ae:	f006 bedd 	b.w	800876c <STC_GetMecSpeedRefUnit>
 80019b2:	bf00      	nop

080019b4 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80019b4:	6882      	ldr	r2, [r0, #8]
 80019b6:	6810      	ldr	r0, [r2, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	b282      	uxth	r2, r0
 80019bc:	f362 030f 	bfi	r3, r2, #0, #16
 80019c0:	0c00      	lsrs	r0, r0, #16
 80019c2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80019c6:	b082      	sub	sp, #8
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	b002      	add	sp, #8
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80019d0:	6882      	ldr	r2, [r0, #8]
 80019d2:	6850      	ldr	r0, [r2, #4]
 80019d4:	2300      	movs	r3, #0
 80019d6:	b282      	uxth	r2, r0
 80019d8:	f362 030f 	bfi	r3, r2, #0, #16
 80019dc:	0c00      	lsrs	r0, r0, #16
 80019de:	f360 431f 	bfi	r3, r0, #16, #16
{
 80019e2:	b082      	sub	sp, #8
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	b002      	add	sp, #8
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop

080019ec <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80019ec:	6882      	ldr	r2, [r0, #8]
 80019ee:	68d0      	ldr	r0, [r2, #12]
 80019f0:	2300      	movs	r3, #0
 80019f2:	b282      	uxth	r2, r0
 80019f4:	f362 030f 	bfi	r3, r2, #0, #16
 80019f8:	0c00      	lsrs	r0, r0, #16
 80019fa:	f360 431f 	bfi	r3, r0, #16, #16
{
 80019fe:	b082      	sub	sp, #8
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	b002      	add	sp, #8
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001a08:	6882      	ldr	r2, [r0, #8]
 8001a0a:	6910      	ldr	r0, [r2, #16]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	b282      	uxth	r2, r0
 8001a10:	f362 030f 	bfi	r3, r2, #0, #16
 8001a14:	0c00      	lsrs	r0, r0, #16
 8001a16:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a1a:	b082      	sub	sp, #8
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	b002      	add	sp, #8
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001a24:	6882      	ldr	r2, [r0, #8]
 8001a26:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	b282      	uxth	r2, r0
 8001a2e:	f362 030f 	bfi	r3, r2, #0, #16
 8001a32:	0c00      	lsrs	r0, r0, #16
 8001a34:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a38:	b082      	sub	sp, #8
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	b002      	add	sp, #8
 8001a3e:	4770      	bx	lr

08001a40 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001a40:	6882      	ldr	r2, [r0, #8]
 8001a42:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001a46:	2300      	movs	r3, #0
 8001a48:	b282      	uxth	r2, r0
 8001a4a:	f362 030f 	bfi	r3, r2, #0, #16
 8001a4e:	0c00      	lsrs	r0, r0, #16
 8001a50:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a54:	b082      	sub	sp, #8
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	b002      	add	sp, #8
 8001a5a:	4770      	bx	lr

08001a5c <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001a5c:	6883      	ldr	r3, [r0, #8]
}
 8001a5e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001a62:	4770      	bx	lr

08001a64 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001a64:	6882      	ldr	r2, [r0, #8]
{
 8001a66:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001a68:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8001a6c:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8001a70:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8001a74:	fb00 3000 	mla	r0, r0, r0, r3
 8001a78:	f000 f8c0 	bl	8001bfc <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8001a7c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001a80:	4298      	cmp	r0, r3
 8001a82:	bfa8      	it	ge
 8001a84:	4618      	movge	r0, r3
}
 8001a86:	b200      	sxth	r0, r0
 8001a88:	bd08      	pop	{r3, pc}
 8001a8a:	bf00      	nop

08001a8c <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6882      	ldr	r2, [r0, #8]
 8001a90:	f361 030f 	bfi	r3, r1, #0, #16
 8001a94:	f361 431f 	bfi	r3, r1, #16, #16
 8001a98:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001aa0:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001aa2:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001aa6:	f006 fefd 	bl	80088a4 <STC_GetDefaultIqdref>
 8001aaa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001aae:	8220      	strh	r0, [r4, #16]
 8001ab0:	8263      	strh	r3, [r4, #18]
}
 8001ab2:	bd10      	pop	{r4, pc}

08001ab4 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8001ab4:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001ab6:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001aba:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001abe:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001ac2:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001ac6:	4250      	negs	r0, r2
 8001ac8:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001acc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001ad0:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8001ad2:	da05      	bge.n	8001ae0 <MCM_Clarke+0x2c>
 8001ad4:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001ad6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001ada:	da0c      	bge.n	8001af6 <MCM_Clarke+0x42>
 8001adc:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <MCM_Clarke+0x50>)
 8001ade:	e001      	b.n	8001ae4 <MCM_Clarke+0x30>
 8001ae0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	b292      	uxth	r2, r2
 8001aea:	f363 000f 	bfi	r0, r3, #0, #16
 8001aee:	f362 401f 	bfi	r0, r2, #16, #16
}
 8001af2:	b004      	add	sp, #16
 8001af4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MCM_Clarke+0x50>)
 8001af8:	b20a      	sxth	r2, r1
 8001afa:	4282      	cmp	r2, r0
 8001afc:	bfb8      	it	lt
 8001afe:	4602      	movlt	r2, r0
 8001b00:	e7f0      	b.n	8001ae4 <MCM_Clarke+0x30>
 8001b02:	bf00      	nop
 8001b04:	ffff8001 	.word	0xffff8001

08001b08 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MCM_Trig_Functions+0x28>)
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <MCM_Trig_Functions+0x2c>)
 8001b0c:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8001b0e:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8001b12:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001b16:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001b18:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f362 000f 	bfi	r0, r2, #0, #16
 8001b22:	0c1b      	lsrs	r3, r3, #16
{
 8001b24:	b082      	sub	sp, #8
  return (CosSin.Components);
 8001b26:	f363 401f 	bfi	r0, r3, #16, #16

}
 8001b2a:	b002      	add	sp, #8
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	00600040 	.word	0x00600040

08001b38 <MCM_Park>:
{
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	4605      	mov	r5, r0
 8001b3e:	9001      	str	r0, [sp, #4]
 8001b40:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001b42:	4608      	mov	r0, r1
 8001b44:	f7ff ffe0 	bl	8001b08 <MCM_Trig_Functions>
 8001b48:	b22d      	sxth	r5, r5
 8001b4a:	b204      	sxth	r4, r0
 8001b4c:	1436      	asrs	r6, r6, #16
 8001b4e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001b50:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001b54:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8001b58:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001b5c:	da12      	bge.n	8001b84 <MCM_Park+0x4c>
 8001b5e:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001b60:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001b64:	4914      	ldr	r1, [pc, #80]	; (8001bb8 <MCM_Park+0x80>)
 8001b66:	da21      	bge.n	8001bac <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001b68:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001b6c:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8001b70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001b74:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8001b78:	da07      	bge.n	8001b8a <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8001b7a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001b7e:	da0f      	bge.n	8001ba0 <MCM_Park+0x68>
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <MCM_Park+0x80>)
 8001b82:	e004      	b.n	8001b8e <MCM_Park+0x56>
 8001b84:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b88:	e7ee      	b.n	8001b68 <MCM_Park+0x30>
 8001b8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8001b8e:	b28a      	uxth	r2, r1
 8001b90:	2000      	movs	r0, #0
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f362 000f 	bfi	r0, r2, #0, #16
 8001b98:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MCM_Park+0x80>)
 8001ba2:	b213      	sxth	r3, r2
 8001ba4:	4283      	cmp	r3, r0
 8001ba6:	bfb8      	it	lt
 8001ba8:	4603      	movlt	r3, r0
 8001baa:	e7f0      	b.n	8001b8e <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4291      	cmp	r1, r2
 8001bb0:	bfb8      	it	lt
 8001bb2:	4611      	movlt	r1, r2
 8001bb4:	e7d8      	b.n	8001b68 <MCM_Park+0x30>
 8001bb6:	bf00      	nop
 8001bb8:	ffff8001 	.word	0xffff8001

08001bbc <MCM_Rev_Park>:
{
 8001bbc:	b530      	push	{r4, r5, lr}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	9001      	str	r0, [sp, #4]
 8001bc4:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001bc6:	4608      	mov	r0, r1
 8001bc8:	f7ff ff9e 	bl	8001b08 <MCM_Trig_Functions>
 8001bcc:	142d      	asrs	r5, r5, #16
 8001bce:	1403      	asrs	r3, r0, #16
 8001bd0:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001bd2:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001bd6:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001bd8:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001bdc:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001be0:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8001be4:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8001be8:	2000      	movs	r0, #0
 8001bea:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001bee:	f362 000f 	bfi	r0, r2, #0, #16
 8001bf2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001bf6:	b005      	add	sp, #20
 8001bf8:	bd30      	pop	{r4, r5, pc}
 8001bfa:	bf00      	nop

08001bfc <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8001bfc:	1e03      	subs	r3, r0, #0
 8001bfe:	dd32      	ble.n	8001c66 <MCM_Sqrt+0x6a>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if ( wInput <= ( int32_t )2097152 )
 8001c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8001c04:	bfd4      	ite	le
 8001c06:	2080      	movle	r0, #128	; 0x80
 8001c08:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c0c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001c10:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001c12:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c16:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001c1a:	d025      	beq.n	8001c68 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c1c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001c20:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8001c22:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c26:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001c2a:	d01d      	beq.n	8001c68 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c2c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001c30:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001c32:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c36:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001c3a:	d015      	beq.n	8001c68 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c3c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001c40:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8001c42:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c46:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001c4a:	d00d      	beq.n	8001c68 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c4c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001c50:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001c52:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c56:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001c5a:	d005      	beq.n	8001c68 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001c5c:	fb93 f0f1 	sdiv	r0, r3, r1
 8001c60:	4408      	add	r0, r1
 8001c62:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 8001c64:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 8001c66:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop

08001c6c <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <FOC_Clear+0x74>)
 8001c74:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8001c78:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001c7c:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8001c7e:	2500      	movs	r5, #0
{
 8001c80:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8001c82:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001c86:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8001c88:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8001c8a:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001c8e:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8001c92:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001c96:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8001c9a:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001c9e:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ca0:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001ca2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001ca6:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001caa:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001cac:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001cae:	50d5      	str	r5, [r2, r3]
 8001cb0:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001cb4:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001cb6:	f005 fc2f 	bl	8007518 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <FOC_Clear+0x7c>)
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001cc2:	f005 fc29 	bl	8007518 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <FOC_Clear+0x80>)
 8001cc8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001ccc:	f006 fd46 	bl	800875c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <FOC_Clear+0x84>)
 8001cd2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001cda:	f005 be2b 	b.w	8007934 <PWMC_SwitchOffPWM>
 8001cde:	bf00      	nop
 8001ce0:	20000930 	.word	0x20000930
 8001ce4:	20000924 	.word	0x20000924
 8001ce8:	200009e0 	.word	0x200009e0
 8001cec:	200009e4 	.word	0x200009e4
 8001cf0:	20000918 	.word	0x20000918

08001cf4 <MCboot>:
{
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf8:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8001cfc:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8001ef0 <MCboot+0x1fc>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001d00:	4e63      	ldr	r6, [pc, #396]	; (8001e90 <MCboot+0x19c>)
  ENC_Init (&ENCODER_M1);
 8001d02:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8001e94 <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001d06:	4d64      	ldr	r5, [pc, #400]	; (8001e98 <MCboot+0x1a4>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001d08:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8001ef4 <MCboot+0x200>
 8001d0c:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8001ef8 <MCboot+0x204>
  PID_HandleInit(&PIDIqHandle_M1);
 8001d10:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8001efc <MCboot+0x208>
  PID_HandleInit(&PIDIdHandle_M1);
 8001d14:	4f61      	ldr	r7, [pc, #388]	; (8001e9c <MCboot+0x1a8>)
{
 8001d16:	b085      	sub	sp, #20
 8001d18:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8001d1a:	4658      	mov	r0, fp
{
 8001d1c:	e9cd 3100 	strd	r3, r1, [sp]
  STM_Init(&STM[M1]);
 8001d20:	f006 fdd6 	bl	80088d0 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8001d24:	4b5e      	ldr	r3, [pc, #376]	; (8001ea0 <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 8001d26:	495f      	ldr	r1, [pc, #380]	; (8001ea4 <MCboot+0x1b0>)
  pCLM[M1] = &CircleLimitationM1;
 8001d28:	4a5f      	ldr	r2, [pc, #380]	; (8001ea8 <MCboot+0x1b4>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001d2a:	4860      	ldr	r0, [pc, #384]	; (8001eac <MCboot+0x1b8>)
  pCLM[M1] = &CircleLimitationM1;
 8001d2c:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 8001d2e:	2400      	movs	r4, #0
 8001d30:	700c      	strb	r4, [r1, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001d32:	6030      	str	r0, [r6, #0]
  R3_2_Init(&PWM_Handle_M1);
 8001d34:	f006 f8c0 	bl	8007eb8 <R3_2_Init>
  startTimers();
 8001d38:	f005 fc74 	bl	8007624 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001d3c:	485c      	ldr	r0, [pc, #368]	; (8001eb0 <MCboot+0x1bc>)
 8001d3e:	f005 fbd7 	bl	80074f0 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001d42:	4a5c      	ldr	r2, [pc, #368]	; (8001eb4 <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001d44:	4b5c      	ldr	r3, [pc, #368]	; (8001eb8 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001d46:	495a      	ldr	r1, [pc, #360]	; (8001eb0 <MCboot+0x1bc>)
 8001d48:	6011      	str	r1, [r2, #0]
  ENC_Init (&ENCODER_M1);
 8001d4a:	ee18 0a10 	vmov	r0, s16
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001d4e:	602b      	str	r3, [r5, #0]
  ENC_Init (&ENCODER_M1);
 8001d50:	f005 f9bc 	bl	80070cc <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001d54:	ee18 3a10 	vmov	r3, s16
 8001d58:	6829      	ldr	r1, [r5, #0]
 8001d5a:	464a      	mov	r2, r9
 8001d5c:	4650      	mov	r0, sl
 8001d5e:	f005 f965 	bl	800702c <EAC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001d62:	4a54      	ldr	r2, [pc, #336]	; (8001eb4 <MCboot+0x1c0>)
  pEAC[M1] = &EncAlignCtrlM1;
 8001d64:	4b55      	ldr	r3, [pc, #340]	; (8001ebc <MCboot+0x1c8>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001d66:	6811      	ldr	r1, [r2, #0]
 8001d68:	6828      	ldr	r0, [r5, #0]
  pEAC[M1] = &EncAlignCtrlM1;
 8001d6a:	f8c3 a000 	str.w	sl, [r3]
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001d6e:	ee18 2a10 	vmov	r2, s16
 8001d72:	f006 fcdb 	bl	800872c <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8001d76:	4648      	mov	r0, r9
 8001d78:	f006 ff72 	bl	8008c60 <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	f005 fbb7 	bl	80074f0 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001d82:	4638      	mov	r0, r7
 8001d84:	f005 fbb4 	bl	80074f0 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001d88:	4b4d      	ldr	r3, [pc, #308]	; (8001ec0 <MCboot+0x1cc>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001d8a:	484e      	ldr	r0, [pc, #312]	; (8001ec4 <MCboot+0x1d0>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001d8c:	f8c3 8000 	str.w	r8, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <MCboot+0x1d4>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001d92:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8001f00 <MCboot+0x20c>
  pPIDId[M1] = &PIDIdHandle_M1;
 8001d96:	601f      	str	r7, [r3, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001d98:	4f4c      	ldr	r7, [pc, #304]	; (8001ecc <MCboot+0x1d8>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001d9a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001f04 <MCboot+0x210>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001d9e:	6038      	str	r0, [r7, #0]
  RVBS_Init(pBusSensorM1);
 8001da0:	f006 fc2c 	bl	80085fc <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001da4:	683a      	ldr	r2, [r7, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <MCboot+0x1dc>)
 8001da8:	4f4a      	ldr	r7, [pc, #296]	; (8001ed4 <MCboot+0x1e0>)
  NTC_Init(&TempSensorParamsM1);
 8001daa:	484b      	ldr	r0, [pc, #300]	; (8001ed8 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001dac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001db0:	603b      	str	r3, [r7, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001db2:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8001db6:	f005 fb57 	bl	8007468 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <MCboot+0x1e8>)
 8001dbc:	4848      	ldr	r0, [pc, #288]	; (8001ee0 <MCboot+0x1ec>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001dbe:	4f46      	ldr	r7, [pc, #280]	; (8001ed8 <MCboot+0x1e4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001dc0:	6018      	str	r0, [r3, #0]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001dc2:	f8c8 7000 	str.w	r7, [r8]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001dc6:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8001dca:	f006 fc65 	bl	8008698 <REMNG_Init>
  FOC_Clear(M1);
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff ff4c 	bl	8001c6c <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001dd4:	f88a 9024 	strb.w	r9, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001dd8:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001dda:	4f42      	ldr	r7, [pc, #264]	; (8001ee4 <MCboot+0x1f0>)
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001ddc:	f006 fd62 	bl	80088a4 <STC_GetDefaultIqdref>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8001de6:	f8aa 3010 	strh.w	r3, [sl, #16]
 8001dea:	f8aa 2012 	strh.w	r2, [sl, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001dee:	6828      	ldr	r0, [r5, #0]
 8001df0:	f006 fd58 	bl	80088a4 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8001df4:	493c      	ldr	r1, [pc, #240]	; (8001ee8 <MCboot+0x1f4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001df6:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001df8:	6039      	str	r1, [r7, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001dfa:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001dfe:	4653      	mov	r3, sl
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001e00:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001e04:	4608      	mov	r0, r1
 8001e06:	4659      	mov	r1, fp
 8001e08:	f7ff fd2a 	bl	8001860 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001e0c:	6828      	ldr	r0, [r5, #0]
 8001e0e:	f8d7 a000 	ldr.w	sl, [r7]
 8001e12:	f006 fd3d 	bl	8008890 <STC_GetMecSpeedRefUnitDefault>
 8001e16:	4622      	mov	r2, r4
 8001e18:	4601      	mov	r1, r0
 8001e1a:	4650      	mov	r0, sl
 8001e1c:	f7ff fd2e 	bl	800187c <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001e20:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <MCboot+0x1c0>)
  pMCIList[M1] = oMCInterface[M1];
 8001e22:	f8d7 c000 	ldr.w	ip, [r7]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001e26:	6817      	ldr	r7, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001e28:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <MCboot+0x1cc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001e2a:	f8d8 e000 	ldr.w	lr, [r8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001e2e:	6810      	ldr	r0, [r2, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001e30:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <MCboot+0x1d4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001e32:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <MCboot+0x1f8>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001e34:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001e36:	6832      	ldr	r2, [r6, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001e38:	4e24      	ldr	r6, [pc, #144]	; (8001ecc <MCboot+0x1d8>)
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001e3a:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001e3c:	f8d6 8000 	ldr.w	r8, [r6]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001e40:	4e24      	ldr	r6, [pc, #144]	; (8001ed4 <MCboot+0x1e0>)
 8001e42:	f8d6 a000 	ldr.w	sl, [r6]
  pMCIList[M1] = oMCInterface[M1];
 8001e46:	9e00      	ldr	r6, [sp, #0]
 8001e48:	f8c6 c000 	str.w	ip, [r6]
  MCT[M1].pPIDId = pPIDId[M1];
 8001e4c:	6099      	str	r1, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001e4e:	e9c3 7000 	strd	r7, r0, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001e52:	e9c3 e80b 	strd	lr, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001e56:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001e5a:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8001e5e:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8001e62:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 8001e66:	490f      	ldr	r1, [pc, #60]	; (8001ea4 <MCboot+0x1b0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001e68:	611a      	str	r2, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001e6a:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001e6c:	f8c3 a03c 	str.w	sl, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001e70:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8001e72:	615c      	str	r4, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 8001e74:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pStateMachine = &STM[M1];
 8001e78:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8001e7c:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001e7e:	9a01      	ldr	r2, [sp, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8001e82:	f881 9000 	strb.w	r9, [r1]
}
 8001e86:	b005      	add	sp, #20
 8001e88:	ecbd 8b02 	vpop	{d8}
 8001e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e90:	20000918 	.word	0x20000918
 8001e94:	200000b4 	.word	0x200000b4
 8001e98:	200009e4 	.word	0x200009e4
 8001e9c:	2000014c 	.word	0x2000014c
 8001ea0:	200009ac 	.word	0x200009ac
 8001ea4:	20000650 	.word	0x20000650
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	200002e4 	.word	0x200002e4
 8001eb0:	200001a4 	.word	0x200001a4
 8001eb4:	2000091c 	.word	0x2000091c
 8001eb8:	200003a0 	.word	0x200003a0
 8001ebc:	20000920 	.word	0x20000920
 8001ec0:	20000924 	.word	0x20000924
 8001ec4:	20000378 	.word	0x20000378
 8001ec8:	200009e0 	.word	0x200009e0
 8001ecc:	200009b0 	.word	0x200009b0
 8001ed0:	200001d0 	.word	0x200001d0
 8001ed4:	200009dc 	.word	0x200009dc
 8001ed8:	200003d4 	.word	0x200003d4
 8001edc:	200009d8 	.word	0x200009d8
 8001ee0:	20000360 	.word	0x20000360
 8001ee4:	20000928 	.word	0x20000928
 8001ee8:	200009b4 	.word	0x200009b4
 8001eec:	20000958 	.word	0x20000958
 8001ef0:	200009d0 	.word	0x200009d0
 8001ef4:	200003fc 	.word	0x200003fc
 8001ef8:	20000130 	.word	0x20000130
 8001efc:	20000178 	.word	0x20000178
 8001f00:	20000930 	.word	0x20000930
 8001f04:	20000914 	.word	0x20000914

08001f08 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop

08001f0c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001f0c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <FOC_CalcCurrRef+0x24>)
 8001f10:	2426      	movs	r4, #38	; 0x26
 8001f12:	fb04 3400 	mla	r4, r4, r0, r3
 8001f16:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001f1a:	b103      	cbz	r3, 8001f1e <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001f1c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <FOC_CalcCurrRef+0x28>)
 8001f20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001f24:	f006 fc82 	bl	800882c <STC_CalcTorqueReference>
 8001f28:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001f2a:	8220      	strh	r0, [r4, #16]
}
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000930 	.word	0x20000930
 8001f34:	200009e4 	.word	0x200009e4

08001f38 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001f38:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001f3a:	8018      	strh	r0, [r3, #0]
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000652 	.word	0x20000652

08001f44 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001f46:	8818      	ldrh	r0, [r3, #0]
 8001f48:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001f4a:	fab0 f080 	clz	r0, r0
 8001f4e:	0940      	lsrs	r0, r0, #5
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000652 	.word	0x20000652

08001f58 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001f58:	4b01      	ldr	r3, [pc, #4]	; (8001f60 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001f5a:	8018      	strh	r0, [r3, #0]
}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000656 	.word	0x20000656

08001f64 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001f66:	8818      	ldrh	r0, [r3, #0]
 8001f68:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001f6a:	fab0 f080 	clz	r0, r0
 8001f6e:	0940      	lsrs	r0, r0, #5
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000656 	.word	0x20000656

08001f78 <TSK_MediumFrequencyTaskM1>:
{
 8001f78:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 8001f7a:	4c8e      	ldr	r4, [pc, #568]	; (80021b4 <TSK_MediumFrequencyTaskM1+0x23c>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001f7c:	488e      	ldr	r0, [pc, #568]	; (80021b8 <TSK_MediumFrequencyTaskM1+0x240>)
{
 8001f7e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001f80:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001f82:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 8001f86:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001f8a:	f005 f90f 	bl	80071ac <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001f8e:	6820      	ldr	r0, [r4, #0]
 8001f90:	f005 fb14 	bl	80075bc <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001f94:	4889      	ldr	r0, [pc, #548]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8001f96:	f006 fd33 	bl	8008a00 <STM_GetState>
  switch ( StateM1 )
 8001f9a:	2812      	cmp	r0, #18
 8001f9c:	d818      	bhi.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
 8001f9e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001fa2:	002a      	.short	0x002a
 8001fa4:	00440038 	.word	0x00440038
 8001fa8:	00620053 	.word	0x00620053
 8001fac:	007a0067 	.word	0x007a0067
 8001fb0:	00950082 	.word	0x00950082
 8001fb4:	00170013 	.word	0x00170013
 8001fb8:	00170017 	.word	0x00170017
 8001fbc:	00ae009f 	.word	0x00ae009f
 8001fc0:	00cf00bb 	.word	0x00cf00bb
 8001fc4:	001900de 	.word	0x001900de
    STM_NextState( &STM[M1], IDLE );
 8001fc8:	487c      	ldr	r0, [pc, #496]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f006 fca4 	bl	8008918 <STM_NextState>
}
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 8001fd4:	4878      	ldr	r0, [pc, #480]	; (80021b8 <TSK_MediumFrequencyTaskM1+0x240>)
 8001fd6:	f005 f8b7 	bl	8007148 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001fda:	4878      	ldr	r0, [pc, #480]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8001fdc:	2104      	movs	r1, #4
 8001fde:	f006 fc9b 	bl	8008918 <STM_NextState>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d0f4      	beq.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fe40 	bl	8001c6c <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001fec:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f005 fdf6 	bl	8007be0 <R3_2_SwitchOnPWM>
 8001ff4:	e7ec      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 8001ff6:	4873      	ldr	r0, [pc, #460]	; (80021c4 <TSK_MediumFrequencyTaskM1+0x24c>)
 8001ff8:	f005 f866 	bl	80070c8 <EAC_GetRestartState>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d0e7      	beq.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 8002000:	4870      	ldr	r0, [pc, #448]	; (80021c4 <TSK_MediumFrequencyTaskM1+0x24c>)
 8002002:	2100      	movs	r1, #0
 8002004:	f005 f85e 	bl	80070c4 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 8002008:	2103      	movs	r1, #3
 800200a:	486c      	ldr	r0, [pc, #432]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 800200c:	f006 fc84 	bl	8008918 <STM_NextState>
 8002010:	e7de      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8002012:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	f005 fdbb 	bl	8007b90 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800201a:	2014      	movs	r0, #20
 800201c:	f7ff ff8c 	bl	8001f38 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 8002020:	210d      	movs	r1, #13
 8002022:	4866      	ldr	r0, [pc, #408]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8002024:	f006 fc78 	bl	8008918 <STM_NextState>
    break;
 8002028:	e7d2      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 800202a:	4866      	ldr	r0, [pc, #408]	; (80021c4 <TSK_MediumFrequencyTaskM1+0x24c>)
 800202c:	f005 f830 	bl	8007090 <EAC_Exec>
 8002030:	4604      	mov	r4, r0
 8002032:	2800      	cmp	r0, #0
 8002034:	f040 80ac 	bne.w	8002190 <TSK_MediumFrequencyTaskM1+0x218>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 8002038:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <TSK_MediumFrequencyTaskM1+0x250>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f006 fbf6 	bl	800882c <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <TSK_MediumFrequencyTaskM1+0x254>)
 8002042:	8258      	strh	r0, [r3, #18]
 8002044:	821c      	strh	r4, [r3, #16]
 8002046:	e7c3      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8002048:	485e      	ldr	r0, [pc, #376]	; (80021c4 <TSK_MediumFrequencyTaskM1+0x24c>)
 800204a:	f005 f839 	bl	80070c0 <EAC_IsAligned>
 800204e:	2800      	cmp	r0, #0
 8002050:	f040 8092 	bne.w	8002178 <TSK_MediumFrequencyTaskM1+0x200>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8002054:	485b      	ldr	r0, [pc, #364]	; (80021c4 <TSK_MediumFrequencyTaskM1+0x24c>)
 8002056:	2101      	movs	r1, #1
 8002058:	f005 f834 	bl	80070c4 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 800205c:	2101      	movs	r1, #1
 800205e:	4857      	ldr	r0, [pc, #348]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8002060:	f006 fc5a 	bl	8008918 <STM_NextState>
      break;
 8002064:	e7b4      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8002066:	2105      	movs	r1, #5
 8002068:	4854      	ldr	r0, [pc, #336]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 800206a:	f006 fc55 	bl	8008918 <STM_NextState>
    break;
 800206e:	e7af      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff ff49 	bl	8001f08 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff ff48 	bl	8001f0c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800207c:	2106      	movs	r1, #6
 800207e:	484f      	ldr	r0, [pc, #316]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8002080:	f006 fc4a 	bl	8008918 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <TSK_MediumFrequencyTaskM1+0x250>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	f006 fc1a 	bl	80088c0 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <TSK_MediumFrequencyTaskM1+0x258>)
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	f7ff fc2a 	bl	80018e8 <MCI_ExecBufferedCommands>
    break;
 8002094:	e79c      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8002096:	4b4e      	ldr	r3, [pc, #312]	; (80021d0 <TSK_MediumFrequencyTaskM1+0x258>)
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	f7ff fc25 	bl	80018e8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff ff34 	bl	8001f0c <FOC_CalcCurrRef>
    break;
 80020a4:	e794      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80020a6:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f005 fde3 	bl	8007c74 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff fddc 	bl	8001c6c <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	f005 f993 	bl	80073e0 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80020ba:	f44f 7048 	mov.w	r0, #800	; 0x320
 80020be:	f7ff ff4b 	bl	8001f58 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80020c2:	2108      	movs	r1, #8
 80020c4:	483d      	ldr	r0, [pc, #244]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 80020c6:	f006 fc27 	bl	8008918 <STM_NextState>
    break;
 80020ca:	e781      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80020cc:	f7ff ff4a 	bl	8001f64 <TSK_StopPermanencyTimeHasElapsedM1>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	f43f af7d 	beq.w	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 80020d6:	2109      	movs	r1, #9
 80020d8:	4838      	ldr	r0, [pc, #224]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 80020da:	f006 fc1d 	bl	8008918 <STM_NextState>
 80020de:	e777      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80020e0:	f7ff ff30 	bl	8001f44 <TSK_ChargeBootCapDelayHasElapsedM1>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	f43f af73 	beq.w	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 80020ec:	2100      	movs	r1, #0
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	f005 fc22 	bl	8007938 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 80020f4:	210e      	movs	r1, #14
 80020f6:	4831      	ldr	r0, [pc, #196]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 80020f8:	f006 fc0e 	bl	8008918 <STM_NextState>
 80020fc:	e768      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 8002100:	2101      	movs	r1, #1
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	f005 fc18 	bl	8007938 <PWMC_CurrentReadingCalibr>
 8002108:	2800      	cmp	r0, #0
 800210a:	f43f af61 	beq.w	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 800210e:	210f      	movs	r1, #15
 8002110:	482a      	ldr	r0, [pc, #168]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8002112:	f006 fc01 	bl	8008918 <STM_NextState>
 8002116:	e75b      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002118:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <TSK_MediumFrequencyTaskM1+0x250>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <TSK_MediumFrequencyTaskM1+0x254>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800211c:	6810      	ldr	r0, [r2, #0]
 800211e:	492d      	ldr	r1, [pc, #180]	; (80021d4 <TSK_MediumFrequencyTaskM1+0x25c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002126:	f006 fb15 	bl	8008754 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 800212a:	4826      	ldr	r0, [pc, #152]	; (80021c4 <TSK_MediumFrequencyTaskM1+0x24c>)
 800212c:	f004 ff88 	bl	8007040 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 8002130:	4822      	ldr	r0, [pc, #136]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8002132:	2102      	movs	r1, #2
 8002134:	f006 fbf0 	bl	8008918 <STM_NextState>
 8002138:	2800      	cmp	r0, #0
 800213a:	f43f af49 	beq.w	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
 800213e:	e752      	b.n	8001fe6 <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8002140:	f7ff ff00 	bl	8001f44 <TSK_ChargeBootCapDelayHasElapsedM1>
 8002144:	2800      	cmp	r0, #0
 8002146:	f43f af43 	beq.w	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 800214c:	2100      	movs	r1, #0
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	f005 fbf2 	bl	8007938 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8002154:	2111      	movs	r1, #17
 8002156:	4819      	ldr	r0, [pc, #100]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8002158:	f006 fbde 	bl	8008918 <STM_NextState>
 800215c:	e738      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 8002160:	2101      	movs	r1, #1
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	f005 fbe8 	bl	8007938 <PWMC_CurrentReadingCalibr>
 8002168:	2800      	cmp	r0, #0
 800216a:	f43f af31 	beq.w	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 800216e:	2112      	movs	r1, #18
 8002170:	4812      	ldr	r0, [pc, #72]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 8002172:	f006 fbd1 	bl	8008918 <STM_NextState>
 8002176:	e72b      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	f005 fd08 	bl	8007b90 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8002180:	2014      	movs	r0, #20
 8002182:	f7ff fed9 	bl	8001f38 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8002186:	2110      	movs	r1, #16
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 800218a:	f006 fbc5 	bl	8008918 <STM_NextState>
    break;
 800218e:	e71f      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <TSK_MediumFrequencyTaskM1+0x248>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8002192:	4c0d      	ldr	r4, [pc, #52]	; (80021c8 <TSK_MediumFrequencyTaskM1+0x250>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	f005 fd6d 	bl	8007c74 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800219a:	6820      	ldr	r0, [r4, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	f006 faf5 	bl	800878c <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	4904      	ldr	r1, [pc, #16]	; (80021b8 <TSK_MediumFrequencyTaskM1+0x240>)
 80021a6:	f006 fad5 	bl	8008754 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 80021aa:	2107      	movs	r1, #7
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <TSK_MediumFrequencyTaskM1+0x244>)
 80021ae:	f006 fbb3 	bl	8008918 <STM_NextState>
 80021b2:	e70d      	b.n	8001fd0 <TSK_MediumFrequencyTaskM1+0x58>
 80021b4:	200009dc 	.word	0x200009dc
 80021b8:	200000b4 	.word	0x200000b4
 80021bc:	200009d0 	.word	0x200009d0
 80021c0:	20000918 	.word	0x20000918
 80021c4:	20000130 	.word	0x20000130
 80021c8:	200009e4 	.word	0x200009e4
 80021cc:	20000930 	.word	0x20000930
 80021d0:	20000928 	.word	0x20000928
 80021d4:	200003fc 	.word	0x200003fc

080021d8 <MC_Scheduler>:
{
 80021d8:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MC_Scheduler+0x48>)
 80021dc:	781c      	ldrb	r4, [r3, #0]
 80021de:	2c01      	cmp	r4, #1
 80021e0:	d000      	beq.n	80021e4 <MC_Scheduler+0xc>
}
 80021e2:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80021e4:	4d0f      	ldr	r5, [pc, #60]	; (8002224 <MC_Scheduler+0x4c>)
 80021e6:	882b      	ldrh	r3, [r5, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	b1ab      	cbz	r3, 8002218 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80021ec:	882b      	ldrh	r3, [r5, #0]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <MC_Scheduler+0x50>)
 80021f6:	8813      	ldrh	r3, [r2, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b11b      	cbz	r3, 8002204 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80021fc:	8813      	ldrh	r3, [r2, #0]
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29b      	uxth	r3, r3
 8002202:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <MC_Scheduler+0x54>)
 8002206:	8813      	ldrh	r3, [r2, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0e9      	beq.n	80021e2 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800220e:	8813      	ldrh	r3, [r2, #0]
 8002210:	3b01      	subs	r3, #1
 8002212:	b29b      	uxth	r3, r3
 8002214:	8013      	strh	r3, [r2, #0]
}
 8002216:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8002218:	f7ff feae 	bl	8001f78 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800221c:	802c      	strh	r4, [r5, #0]
 800221e:	e7e9      	b.n	80021f4 <MC_Scheduler+0x1c>
 8002220:	20000650 	.word	0x20000650
 8002224:	20000654 	.word	0x20000654
 8002228:	20000652 	.word	0x20000652
 800222c:	20000656 	.word	0x20000656

08002230 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8002234:	4832      	ldr	r0, [pc, #200]	; (8002300 <TSK_HighFrequencyTask+0xd0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002236:	4f33      	ldr	r7, [pc, #204]	; (8002304 <TSK_HighFrequencyTask+0xd4>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002238:	4c33      	ldr	r4, [pc, #204]	; (8002308 <TSK_HighFrequencyTask+0xd8>)
{
 800223a:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800223c:	f004 ff96 	bl	800716c <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <TSK_HighFrequencyTask+0xdc>)
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	f006 fa88 	bl	8008758 <STC_GetSpeedSensor>
 8002248:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800224a:	f006 fa2d 	bl	80086a8 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800224e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8002250:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002252:	6838      	ldr	r0, [r7, #0]
 8002254:	f005 fa44 	bl	80076e0 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8002258:	f000 fef8 	bl	800304c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800225c:	f000 feac 	bl	8002fb8 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002260:	9803      	ldr	r0, [sp, #12]
 8002262:	f7ff fc27 	bl	8001ab4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002266:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002268:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800226a:	f7ff fc65 	bl	8001b38 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800226e:	4a28      	ldr	r2, [pc, #160]	; (8002310 <TSK_HighFrequencyTask+0xe0>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002270:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002274:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002276:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002278:	1ac9      	subs	r1, r1, r3
 800227a:	6810      	ldr	r0, [r2, #0]
 800227c:	f005 f958 	bl	8007530 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002280:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <TSK_HighFrequencyTask+0xe4>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002286:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800228a:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800228c:	1a89      	subs	r1, r1, r2
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	f005 f94e 	bl	8007530 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <TSK_HighFrequencyTask+0xe8>)
 8002296:	f8ad 8008 	strh.w	r8, [sp, #8]
 800229a:	f8ad 000a 	strh.w	r0, [sp, #10]
 800229e:	9902      	ldr	r1, [sp, #8]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	f004 fe91 	bl	8006fc8 <Circle_Limitation>
 80022a6:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80022a8:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80022aa:	fa0f f883 	sxth.w	r8, r3
 80022ae:	141d      	asrs	r5, r3, #16
 80022b0:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80022b2:	f006 fa01 	bl	80086b8 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80022b6:	4631      	mov	r1, r6
 80022b8:	9802      	ldr	r0, [sp, #8]
 80022ba:	f7ff fc7f 	bl	8001bbc <MCM_Rev_Park>
 80022be:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80022c0:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80022c2:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80022c4:	f005 fa0e 	bl	80076e4 <PWMC_SetPhaseVoltage>
 80022c8:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80022ca:	9803      	ldr	r0, [sp, #12]
 80022cc:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80022ce:	9804      	ldr	r0, [sp, #16]
 80022d0:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80022d2:	9801      	ldr	r0, [sp, #4]
 80022d4:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 80022d6:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80022d8:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80022da:	f8a4 8016 	strh.w	r8, [r4, #22]
 80022de:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 80022e0:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80022e2:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80022e6:	d003      	beq.n	80022f0 <TSK_HighFrequencyTask+0xc0>
}
 80022e8:	2000      	movs	r0, #0
 80022ea:	b006      	add	sp, #24
 80022ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	480a      	ldr	r0, [pc, #40]	; (800231c <TSK_HighFrequencyTask+0xec>)
 80022f4:	f006 faf2 	bl	80088dc <STM_FaultProcessing>
}
 80022f8:	2000      	movs	r0, #0
 80022fa:	b006      	add	sp, #24
 80022fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002300:	200000b4 	.word	0x200000b4
 8002304:	20000918 	.word	0x20000918
 8002308:	20000930 	.word	0x20000930
 800230c:	200009e4 	.word	0x200009e4
 8002310:	20000924 	.word	0x20000924
 8002314:	200009e0 	.word	0x200009e0
 8002318:	200009ac 	.word	0x200009ac
 800231c:	200009d0 	.word	0x200009d0

08002320 <TSK_SafetyTask_LSON>:
  * @param  motor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_LSON(uint8_t bMotor)
{
 8002320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END TSK_SafetyTask_LSON 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  bool TurnOnLowSideAction;

  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 8002324:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002424 <TSK_SafetyTask_LSON+0x104>
{
 8002328:	4604      	mov	r4, r0
  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 800232a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800232e:	f005 fb31 	bl	8007994 <PWMC_GetTurnOnLowSidesAction>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 8002332:	4b37      	ldr	r3, [pc, #220]	; (8002410 <TSK_SafetyTask_LSON+0xf0>)
  TurnOnLowSideAction = PWMC_GetTurnOnLowSidesAction(pwmcHandle[bMotor]);
 8002334:	4607      	mov	r7, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 8002336:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800233a:	f005 f8a7 	bl	800748c <NTC_CalcAvTemp>
 800233e:	4606      	mov	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002340:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8002344:	f005 fb24 	bl	8007990 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. */
 8002348:	f026 0608 	bic.w	r6, r6, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800234c:	4330      	orrs	r0, r6
 800234e:	b285      	uxth	r5, r0
                                                                                (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  /* USER CODE BEGIN TSK_SafetyTask_LSON 1 */

  /* USER CODE END TSK_SafetyTask_LSON 1 */
  if(bMotor == M1)
 8002350:	2c00      	cmp	r4, #0
 8002352:	d039      	beq.n	80023c8 <TSK_SafetyTask_LSON+0xa8>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(pBusSensorM1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002354:	4e2f      	ldr	r6, [pc, #188]	; (8002414 <TSK_SafetyTask_LSON+0xf4>)
 8002356:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800235a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800235e:	43ea      	mvns	r2, r5
 8002360:	4630      	mov	r0, r6
 8002362:	b292      	uxth	r2, r2
 8002364:	4629      	mov	r1, r5
 8002366:	f006 fab9 	bl	80088dc <STM_FaultProcessing>
  if (((CodeReturn & MC_OVER_VOLT) == MC_OVER_VOLT) && (TurnOnLowSideAction == false))
 800236a:	07ab      	lsls	r3, r5, #30
 800236c:	d51b      	bpl.n	80023a6 <TSK_SafetyTask_LSON+0x86>
 800236e:	b14f      	cbz	r7, 8002384 <TSK_SafetyTask_LSON+0x64>
    /* USER CODE END TSK_SafetyTask_LSON 2 */
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
  }
  else
  {
    switch (STM_GetState(&STM[bMotor])) /* Is state equal to FAULT_NOW or FAULT_OVER */
 8002370:	4630      	mov	r0, r6
 8002372:	f006 fb45 	bl	8008a00 <STM_GetState>
 8002376:	280a      	cmp	r0, #10
 8002378:	d002      	beq.n	8002380 <TSK_SafetyTask_LSON+0x60>
 800237a:	280b      	cmp	r0, #11
 800237c:	d000      	beq.n	8002380 <TSK_SafetyTask_LSON+0x60>
 800237e:	b1e8      	cbz	r0, 80023bc <TSK_SafetyTask_LSON+0x9c>
    }
  }
  /* USER CODE BEGIN TSK_SafetyTask_LSON 6 */

  /* USER CODE END TSK_SafetyTask_LSON 6 */
}
 8002380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pEAC[bMotor] != MC_NULL)
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <TSK_SafetyTask_LSON+0xf8>)
 8002386:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800238a:	b110      	cbz	r0, 8002392 <TSK_SafetyTask_LSON+0x72>
      EAC_SetRestartState( pEAC[bMotor], false );
 800238c:	4639      	mov	r1, r7
 800238e:	f004 fe99 	bl	80070c4 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]); /* Required before //PWMC_TurnOnLowSides */
 8002392:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8002396:	f005 facd 	bl	8007934 <PWMC_SwitchOffPWM>
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
 800239a:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
}
 800239e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    PWMC_TurnOnLowSides(pwmcHandle[bMotor]); /* Turn on Low side switches */
 80023a2:	f005 baf3 	b.w	800798c <PWMC_TurnOnLowSides>
    switch (STM_GetState(&STM[bMotor])) /* Is state equal to FAULT_NOW or FAULT_OVER */
 80023a6:	4630      	mov	r0, r6
 80023a8:	f006 fb2a 	bl	8008a00 <STM_GetState>
 80023ac:	280a      	cmp	r0, #10
 80023ae:	d014      	beq.n	80023da <TSK_SafetyTask_LSON+0xba>
 80023b0:	280b      	cmp	r0, #11
 80023b2:	d029      	beq.n	8002408 <TSK_SafetyTask_LSON+0xe8>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d1e3      	bne.n	8002380 <TSK_SafetyTask_LSON+0x60>
        if (TurnOnLowSideAction == true)
 80023b8:	2f00      	cmp	r7, #0
 80023ba:	d0e1      	beq.n	8002380 <TSK_SafetyTask_LSON+0x60>
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80023bc:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
}
 80023c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80023c4:	f005 bab6 	b.w	8007934 <PWMC_SwitchOffPWM>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(pBusSensorM1);
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <TSK_SafetyTask_LSON+0xfc>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	f006 f92e 	bl	800862c <RVBS_CalcAvVbus>
 80023d0:	f020 0008 	bic.w	r0, r0, #8
 80023d4:	4305      	orrs	r5, r0
 80023d6:	b2ad      	uxth	r5, r5
 80023d8:	e7bc      	b.n	8002354 <TSK_SafetyTask_LSON+0x34>
        if (TurnOnLowSideAction == false)
 80023da:	2f00      	cmp	r7, #0
 80023dc:	d1d0      	bne.n	8002380 <TSK_SafetyTask_LSON+0x60>
          if (pEAC[bMotor] != MC_NULL)
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <TSK_SafetyTask_LSON+0xf8>)
 80023e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80023e4:	b110      	cbz	r0, 80023ec <TSK_SafetyTask_LSON+0xcc>
            EAC_SetRestartState( pEAC[bMotor], false );
 80023e6:	4639      	mov	r1, r7
 80023e8:	f004 fe6c 	bl	80070c4 <EAC_SetRestartState>
          PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80023ec:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80023f0:	f005 faa0 	bl	8007934 <PWMC_SwitchOffPWM>
          FOC_Clear(bMotor);
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff fc39 	bl	8001c6c <FOC_Clear>
          MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <TSK_SafetyTask_LSON+0x100>)
 80023fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002404:	f004 bfec 	b.w	80073e0 <MPM_Clear>
        if (TurnOnLowSideAction == false)
 8002408:	2f00      	cmp	r7, #0
 800240a:	d0d7      	beq.n	80023bc <TSK_SafetyTask_LSON+0x9c>
 800240c:	e7b8      	b.n	8002380 <TSK_SafetyTask_LSON+0x60>
 800240e:	bf00      	nop
 8002410:	20000914 	.word	0x20000914
 8002414:	200009d0 	.word	0x200009d0
 8002418:	20000920 	.word	0x20000920
 800241c:	200009b0 	.word	0x200009b0
 8002420:	200009dc 	.word	0x200009dc
 8002424:	20000918 	.word	0x20000918

08002428 <TSK_SafetyTask>:
{
 8002428:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <TSK_SafetyTask+0x1c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d000      	beq.n	8002434 <TSK_SafetyTask+0xc>
}
 8002432:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_LSON(M1);
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff ff73 	bl	8002320 <TSK_SafetyTask_LSON>
}
 800243a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800243e:	f000 bd8b 	b.w	8002f58 <RCM_ExecUserConv>
 8002442:	bf00      	nop
 8002444:	20000650 	.word	0x20000650

08002448 <MC_RunMotorControlTasks>:
{
 8002448:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <MC_RunMotorControlTasks+0x1c>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b903      	cbnz	r3, 8002452 <MC_RunMotorControlTasks+0xa>
}
 8002450:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002452:	f7ff fec1 	bl	80021d8 <MC_Scheduler>
    TSK_SafetyTask();
 8002456:	f7ff ffe7 	bl	8002428 <TSK_SafetyTask>
}
 800245a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800245e:	f001 b8db 	b.w	8003618 <UI_Scheduler>
 8002462:	bf00      	nop
 8002464:	20000650 	.word	0x20000650

08002468 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002468:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <TSK_HardwareFaultTask+0x18>)
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	f005 fc01 	bl	8007c74 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <TSK_HardwareFaultTask+0x1c>)
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	f006 ba2e 	b.w	80088dc <STM_FaultProcessing>
 8002480:	20000918 	.word	0x20000918
 8002484:	200009d0 	.word	0x200009d0

08002488 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002488:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <mc_lock_pins+0xe8>)
 800248c:	4939      	ldr	r1, [pc, #228]	; (8002574 <mc_lock_pins+0xec>)
 800248e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002490:	2040      	movs	r0, #64	; 0x40
 8002492:	61d0      	str	r0, [r2, #28]
 8002494:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002496:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002498:	69d3      	ldr	r3, [r2, #28]
 800249a:	930d      	str	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800249c:	4c36      	ldr	r4, [pc, #216]	; (8002578 <mc_lock_pins+0xf0>)
  (void) temp;
 800249e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024a0:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024a2:	2780      	movs	r7, #128	; 0x80
 80024a4:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024a6:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024a8:	69d3      	ldr	r3, [r2, #28]
 80024aa:	930c      	str	r3, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  (void) temp;
 80024b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024b2:	4d32      	ldr	r5, [pc, #200]	; (800257c <mc_lock_pins+0xf4>)
 80024b4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024b6:	2620      	movs	r6, #32
 80024b8:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ba:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024bc:	69dd      	ldr	r5, [r3, #28]
 80024be:	950b      	str	r5, [sp, #44]	; 0x2c
  (void) temp;
 80024c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024c2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024c4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024c6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024c8:	69d9      	ldr	r1, [r3, #28]
 80024ca:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 80024cc:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ce:	492c      	ldr	r1, [pc, #176]	; (8002580 <mc_lock_pins+0xf8>)
 80024d0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024d6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024d8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024da:	69d9      	ldr	r1, [r3, #28]
 80024dc:	9109      	str	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024de:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024e2:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 80024e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024e8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024ea:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ec:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024ee:	69d9      	ldr	r1, [r3, #28]
 80024f0:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024f2:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 80024f8:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024fa:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024fc:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024fe:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002500:	69d0      	ldr	r0, [r2, #28]
 8002502:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002504:	f44f 6680 	mov.w	r6, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002508:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  (void) temp;
 800250c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002510:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002512:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002514:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002516:	69d8      	ldr	r0, [r3, #28]
 8002518:	9006      	str	r0, [sp, #24]
  (void) temp;
 800251a:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800251c:	4819      	ldr	r0, [pc, #100]	; (8002584 <mc_lock_pins+0xfc>)
 800251e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002520:	2602      	movs	r6, #2
 8002522:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002524:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002526:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800252a:	f8cd c014 	str.w	ip, [sp, #20]
  (void) temp;
 800252e:	f8dd c014 	ldr.w	ip, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002532:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002534:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002536:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002538:	69dc      	ldr	r4, [r3, #28]
 800253a:	9404      	str	r4, [sp, #16]
  (void) temp;
 800253c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800253e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002540:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002542:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002544:	69d8      	ldr	r0, [r3, #28]
 8002546:	9003      	str	r0, [sp, #12]
  (void) temp;
 8002548:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800254a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800254c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800254e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002554:	f44f 6100 	mov.w	r1, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002558:	f44f 3384 	mov.w	r3, #67584	; 0x10800
  (void) temp;
 800255c:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800255e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002560:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002562:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002564:	69d3      	ldr	r3, [r2, #28]
 8002566:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002568:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 800256a:	b00e      	add	sp, #56	; 0x38
 800256c:	bcf0      	pop	{r4, r5, r6, r7}
 800256e:	4770      	bx	lr
 8002570:	48000400 	.word	0x48000400
 8002574:	00010040 	.word	0x00010040
 8002578:	00010080 	.word	0x00010080
 800257c:	00010020 	.word	0x00010020
 8002580:	00010100 	.word	0x00010100
 8002584:	00010002 	.word	0x00010002

08002588 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	460c      	mov	r4, r1
 800258c:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800258e:	2100      	movs	r1, #0
{
 8002590:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8002592:	0962      	lsrs	r2, r4, #5
{
 8002594:	461f      	mov	r7, r3
 8002596:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8002598:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 800259c:	d122      	bne.n	80025e4 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800259e:	2c12      	cmp	r4, #18
 80025a0:	d814      	bhi.n	80025cc <MCP_ReceivedFrame+0x44>
 80025a2:	e8df f014 	tbh	[pc, r4, lsl #1]
 80025a6:	0016      	.short	0x0016
 80025a8:	00d1003f 	.word	0x00d1003f
 80025ac:	00130163 	.word	0x00130163
 80025b0:	01700013 	.word	0x01700013
 80025b4:	01f80241 	.word	0x01f80241
 80025b8:	019d021c 	.word	0x019d021c
 80025bc:	01cc01b5 	.word	0x01cc01b5
 80025c0:	001301e5 	.word	0x001301e5
 80025c4:	00130013 	.word	0x00130013
 80025c8:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80025d2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80025d6:	2301      	movs	r3, #1
 80025d8:	f10d 020e 	add.w	r2, sp, #14
 80025dc:	21ff      	movs	r1, #255	; 0xff
 80025de:	47a0      	blx	r4
    }
  }
}
 80025e0:	b00d      	add	sp, #52	; 0x34
 80025e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80025e4:	3a01      	subs	r2, #1
 80025e6:	f001 f859 	bl	800369c <UI_SetReg>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	f000 8234 	beq.w	8002a58 <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 80025f0:	f004 041f 	and.w	r4, r4, #31
 80025f4:	2c12      	cmp	r4, #18
 80025f6:	f200 8238 	bhi.w	8002a6a <MCP_ReceivedFrame+0x4e2>
 80025fa:	e8df f014 	tbh	[pc, r4, lsl #1]
 80025fe:	01ea      	.short	0x01ea
 8002600:	00a50013 	.word	0x00a50013
 8002604:	02360137 	.word	0x02360137
 8002608:	01440236 	.word	0x01440236
 800260c:	01cc0215 	.word	0x01cc0215
 8002610:	017101f0 	.word	0x017101f0
 8002614:	01a00189 	.word	0x01a00189
 8002618:	023601b9 	.word	0x023601b9
 800261c:	02360236 	.word	0x02360236
 8002620:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002624:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002626:	2305      	movs	r3, #5
 8002628:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 800262c:	2988      	cmp	r1, #136	; 0x88
 800262e:	f200 8237 	bhi.w	8002aa0 <MCP_ReceivedFrame+0x518>
 8002632:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002636:	028c      	.short	0x028c
 8002638:	02350235 	.word	0x02350235
 800263c:	02350282 	.word	0x02350282
 8002640:	023e023e 	.word	0x023e023e
 8002644:	023e023e 	.word	0x023e023e
 8002648:	023e023e 	.word	0x023e023e
 800264c:	023e023e 	.word	0x023e023e
 8002650:	023e023e 	.word	0x023e023e
 8002654:	025d023e 	.word	0x025d023e
 8002658:	0235025d 	.word	0x0235025d
 800265c:	023e0235 	.word	0x023e0235
 8002660:	023e023e 	.word	0x023e023e
 8002664:	023e023e 	.word	0x023e023e
 8002668:	02350235 	.word	0x02350235
 800266c:	01510235 	.word	0x01510235
 8002670:	02350151 	.word	0x02350151
 8002674:	02350235 	.word	0x02350235
 8002678:	02350235 	.word	0x02350235
 800267c:	02350235 	.word	0x02350235
 8002680:	02350235 	.word	0x02350235
 8002684:	02350235 	.word	0x02350235
 8002688:	02350235 	.word	0x02350235
 800268c:	02350235 	.word	0x02350235
 8002690:	02350235 	.word	0x02350235
 8002694:	02350235 	.word	0x02350235
 8002698:	02350235 	.word	0x02350235
 800269c:	02350235 	.word	0x02350235
 80026a0:	02350235 	.word	0x02350235
 80026a4:	02350235 	.word	0x02350235
 80026a8:	02350235 	.word	0x02350235
 80026ac:	02350235 	.word	0x02350235
 80026b0:	02350235 	.word	0x02350235
 80026b4:	02350235 	.word	0x02350235
 80026b8:	0235023e 	.word	0x0235023e
 80026bc:	02350235 	.word	0x02350235
 80026c0:	025d0235 	.word	0x025d0235
 80026c4:	025d025d 	.word	0x025d025d
 80026c8:	02350235 	.word	0x02350235
 80026cc:	02350235 	.word	0x02350235
 80026d0:	02350235 	.word	0x02350235
 80026d4:	0235023e 	.word	0x0235023e
 80026d8:	02350235 	.word	0x02350235
 80026dc:	023e023e 	.word	0x023e023e
 80026e0:	023e023e 	.word	0x023e023e
 80026e4:	023e023e 	.word	0x023e023e
 80026e8:	0235023e 	.word	0x0235023e
 80026ec:	0235025d 	.word	0x0235025d
 80026f0:	02350235 	.word	0x02350235
 80026f4:	02350235 	.word	0x02350235
 80026f8:	0235023e 	.word	0x0235023e
 80026fc:	023e0235 	.word	0x023e0235
 8002700:	0235023e 	.word	0x0235023e
 8002704:	02350235 	.word	0x02350235
 8002708:	02350235 	.word	0x02350235
 800270c:	02350235 	.word	0x02350235
 8002710:	02350235 	.word	0x02350235
 8002714:	02350235 	.word	0x02350235
 8002718:	02350235 	.word	0x02350235
 800271c:	02820235 	.word	0x02820235
 8002720:	025d025d 	.word	0x025d025d
 8002724:	025d025d 	.word	0x025d025d
 8002728:	0235025d 	.word	0x0235025d
 800272c:	02350235 	.word	0x02350235
 8002730:	025d025d 	.word	0x025d025d
 8002734:	02350235 	.word	0x02350235
 8002738:	02350235 	.word	0x02350235
 800273c:	02350235 	.word	0x02350235
 8002740:	023e0235 	.word	0x023e0235
 8002744:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002748:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800274a:	2303      	movs	r3, #3
 800274c:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8002750:	2988      	cmp	r1, #136	; 0x88
 8002752:	f200 813e 	bhi.w	80029d2 <MCP_ReceivedFrame+0x44a>
 8002756:	e8df f011 	tbh	[pc, r1, lsl #1]
 800275a:	01de      	.short	0x01de
 800275c:	01de01b9 	.word	0x01de01b9
 8002760:	01b901de 	.word	0x01b901de
 8002764:	01910191 	.word	0x01910191
 8002768:	01910191 	.word	0x01910191
 800276c:	01910191 	.word	0x01910191
 8002770:	01910191 	.word	0x01910191
 8002774:	01910191 	.word	0x01910191
 8002778:	01910191 	.word	0x01910191
 800277c:	01910191 	.word	0x01910191
 8002780:	01910191 	.word	0x01910191
 8002784:	01910191 	.word	0x01910191
 8002788:	01910191 	.word	0x01910191
 800278c:	01910191 	.word	0x01910191
 8002790:	013c0191 	.word	0x013c0191
 8002794:	01b9013c 	.word	0x01b9013c
 8002798:	01910191 	.word	0x01910191
 800279c:	01de0191 	.word	0x01de0191
 80027a0:	013c013c 	.word	0x013c013c
 80027a4:	013c013c 	.word	0x013c013c
 80027a8:	013c013c 	.word	0x013c013c
 80027ac:	013c013c 	.word	0x013c013c
 80027b0:	013c013c 	.word	0x013c013c
 80027b4:	013c013c 	.word	0x013c013c
 80027b8:	013c013c 	.word	0x013c013c
 80027bc:	013c013c 	.word	0x013c013c
 80027c0:	013c013c 	.word	0x013c013c
 80027c4:	013c013c 	.word	0x013c013c
 80027c8:	013c013c 	.word	0x013c013c
 80027cc:	013c013c 	.word	0x013c013c
 80027d0:	013c013c 	.word	0x013c013c
 80027d4:	013c013c 	.word	0x013c013c
 80027d8:	013c013c 	.word	0x013c013c
 80027dc:	013c0191 	.word	0x013c0191
 80027e0:	013c013c 	.word	0x013c013c
 80027e4:	01b9013c 	.word	0x01b9013c
 80027e8:	01b901b9 	.word	0x01b901b9
 80027ec:	01910191 	.word	0x01910191
 80027f0:	01910191 	.word	0x01910191
 80027f4:	01b901de 	.word	0x01b901de
 80027f8:	01910191 	.word	0x01910191
 80027fc:	01910191 	.word	0x01910191
 8002800:	01910191 	.word	0x01910191
 8002804:	01910191 	.word	0x01910191
 8002808:	01910191 	.word	0x01910191
 800280c:	01de0191 	.word	0x01de0191
 8002810:	013c01b9 	.word	0x013c01b9
 8002814:	01910191 	.word	0x01910191
 8002818:	01910191 	.word	0x01910191
 800281c:	013c0191 	.word	0x013c0191
 8002820:	0191013c 	.word	0x0191013c
 8002824:	01de0191 	.word	0x01de0191
 8002828:	01b901de 	.word	0x01b901de
 800282c:	01b901b9 	.word	0x01b901b9
 8002830:	01b901b9 	.word	0x01b901b9
 8002834:	019101de 	.word	0x019101de
 8002838:	01b90191 	.word	0x01b90191
 800283c:	0191013c 	.word	0x0191013c
 8002840:	01de0191 	.word	0x01de0191
 8002844:	01b901b9 	.word	0x01b901b9
 8002848:	01b901b9 	.word	0x01b901b9
 800284c:	01b901b9 	.word	0x01b901b9
 8002850:	01b901b9 	.word	0x01b901b9
 8002854:	01b901b9 	.word	0x01b901b9
 8002858:	01de01b9 	.word	0x01de01b9
 800285c:	01de013c 	.word	0x01de013c
 8002860:	01b901b9 	.word	0x01b901b9
 8002864:	019101b9 	.word	0x019101b9
 8002868:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 800286c:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800286e:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002870:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002874:	4628      	mov	r0, r5
 8002876:	f001 f9d3 	bl	8003c20 <UI_ExecCmd>
 800287a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800287e:	2800      	cmp	r0, #0
 8002880:	f43f aea7 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002884:	e03c      	b.n	8002900 <MCP_ReceivedFrame+0x378>
 8002886:	ac04      	add	r4, sp, #16
 8002888:	2100      	movs	r1, #0
 800288a:	4620      	mov	r0, r4
 800288c:	2220      	movs	r2, #32
 800288e:	f006 fa87 	bl	8008da0 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002892:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8002896:	f10d 0012 	add.w	r0, sp, #18
 800289a:	1e71      	subs	r1, r6, #1
 800289c:	2300      	movs	r3, #0
 800289e:	e005      	b.n	80028ac <MCP_ReceivedFrame+0x324>
 80028a0:	3301      	adds	r3, #1
 80028a2:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80028a4:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80028a8:	f000 815c 	beq.w	8002b64 <MCP_ReceivedFrame+0x5dc>
 80028ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80028b0:	2a09      	cmp	r2, #9
 80028b2:	d1f5      	bne.n	80028a0 <MCP_ReceivedFrame+0x318>
 80028b4:	1d5a      	adds	r2, r3, #5
 80028b6:	1dd9      	adds	r1, r3, #7
 80028b8:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80028ba:	5cb2      	ldrb	r2, [r6, r2]
 80028bc:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80028c0:	5c72      	ldrb	r2, [r6, r1]
 80028c2:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80028c6:	5cf3      	ldrb	r3, [r6, r3]
 80028c8:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80028cc:	4622      	mov	r2, r4
 80028ce:	2320      	movs	r3, #32
 80028d0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80028d4:	21f0      	movs	r1, #240	; 0xf0
 80028d6:	47a0      	blx	r4
      bNoError = true;
 80028d8:	2301      	movs	r3, #1
 80028da:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 80028de:	e00f      	b.n	8002900 <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 80028e0:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80028e2:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80028e4:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80028e6:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80028e8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 80028ec:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80028f0:	b212      	sxth	r2, r2
 80028f2:	b209      	sxth	r1, r1
 80028f4:	4628      	mov	r0, r5
 80028f6:	f001 fa25 	bl	8003d44 <UI_SetCurrentReferences>
      bNoError = true;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002900:	2300      	movs	r3, #0
 8002902:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002906:	461a      	mov	r2, r3
 8002908:	21f0      	movs	r1, #240	; 0xf0
 800290a:	47a0      	blx	r4
}
 800290c:	b00d      	add	sp, #52	; 0x34
 800290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002910:	4c96      	ldr	r4, [pc, #600]	; (8002b6c <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 8002912:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002914:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002916:	4621      	mov	r1, r4
 8002918:	a804      	add	r0, sp, #16
      stepList.len = Size;
 800291a:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800291e:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002922:	f001 fa1f 	bl	8003d64 <UI_GetMPInfo>
 8002926:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 800292a:	2800      	cmp	r0, #0
 800292c:	f43f ae51 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8002930:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8002934:	7923      	ldrb	r3, [r4, #4]
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	21f0      	movs	r1, #240	; 0xf0
 800293a:	47b0      	blx	r6
  if (RequireAck)
 800293c:	e650      	b.n	80025e0 <MCP_ReceivedFrame+0x58>
 800293e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8002942:	ac04      	add	r4, sp, #16
 8002944:	3b01      	subs	r3, #1
 8002946:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002948:	2000      	movs	r0, #0
 800294a:	e004      	b.n	8002956 <MCP_ReceivedFrame+0x3ce>
 800294c:	3001      	adds	r0, #1
 800294e:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8002950:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002954:	d0ba      	beq.n	80028cc <MCP_ReceivedFrame+0x344>
 8002956:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800295a:	b2c6      	uxtb	r6, r0
 800295c:	2900      	cmp	r1, #0
 800295e:	d1f5      	bne.n	800294c <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 8002960:	f1c6 021f 	rsb	r2, r6, #31
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	3201      	adds	r2, #1
 8002968:	4420      	add	r0, r4
 800296a:	f006 fa19 	bl	8008da0 <memset>
 800296e:	e7ad      	b.n	80028cc <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002970:	7970      	ldrb	r0, [r6, #5]
 8002972:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002974:	7873      	ldrb	r3, [r6, #1]
 8002976:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002978:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800297c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002980:	b292      	uxth	r2, r2
 8002982:	b209      	sxth	r1, r1
 8002984:	4628      	mov	r0, r5
 8002986:	f001 f999 	bl	8003cbc <UI_ExecTorqueRamp>
 800298a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800298e:	2800      	cmp	r0, #0
 8002990:	f43f ae1f 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002994:	e7b4      	b.n	8002900 <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002996:	f10d 030e 	add.w	r3, sp, #14
 800299a:	7831      	ldrb	r1, [r6, #0]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f10d 020a 	add.w	r2, sp, #10
 80029a2:	ab03      	add	r3, sp, #12
 80029a4:	4628      	mov	r0, r5
 80029a6:	f001 f993 	bl	8003cd0 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80029aa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 80029ae:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 80029b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 80029b6:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80029ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80029be:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 80029c0:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 80029c2:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80029c6:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80029ca:	2308      	movs	r3, #8
 80029cc:	aa04      	add	r2, sp, #16
 80029ce:	21f0      	movs	r1, #240	; 0xf0
 80029d0:	47a0      	blx	r4
  if (RequireAck)
 80029d2:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 80029d6:	2800      	cmp	r0, #0
 80029d8:	f43f adfb 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 80029dc:	e790      	b.n	8002900 <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80029de:	78b1      	ldrb	r1, [r6, #2]
 80029e0:	7873      	ldrb	r3, [r6, #1]
 80029e2:	78f2      	ldrb	r2, [r6, #3]
 80029e4:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80029e6:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80029e8:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80029ea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80029ee:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80029f2:	4a5f      	ldr	r2, [pc, #380]	; (8002b70 <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80029f4:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80029f6:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80029fa:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 80029fe:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8002a00:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002a04:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002a08:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002a0a:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002a0e:	7831      	ldrb	r1, [r6, #0]
 8002a10:	9000      	str	r0, [sp, #0]
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	b292      	uxth	r2, r2
 8002a16:	4628      	mov	r0, r5
 8002a18:	f001 f978 	bl	8003d0c <UI_SetRevupData>
 8002a1c:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002a20:	2800      	cmp	r0, #0
 8002a22:	f43f add6 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002a26:	e76b      	b.n	8002900 <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002a28:	7877      	ldrb	r7, [r6, #1]
 8002a2a:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002a2c:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002a2e:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002a30:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002a32:	78f1      	ldrb	r1, [r6, #3]
 8002a34:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8002a38:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002a3c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002a40:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8002a44:	b292      	uxth	r2, r2
 8002a46:	4628      	mov	r0, r5
 8002a48:	f001 f926 	bl	8003c98 <UI_ExecSpeedRamp>
 8002a4c:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f43f adbe 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002a56:	e753      	b.n	8002900 <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002a58:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002a5c:	230b      	movs	r3, #11
 8002a5e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002a62:	2800      	cmp	r0, #0
 8002a64:	f43f adb5 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002a68:	e74a      	b.n	8002900 <MCP_ReceivedFrame+0x378>
 8002a6a:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002a74:	2800      	cmp	r0, #0
 8002a76:	f43f adac 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002a7a:	e741      	b.n	8002900 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002a7c:	f10d 0209 	add.w	r2, sp, #9
 8002a80:	4628      	mov	r0, r5
 8002a82:	f000 fecb 	bl	800381c <UI_GetReg>
          if ( bNoError == true )
 8002a86:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002a8a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f43f ada0 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002a92:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002a96:	2302      	movs	r3, #2
 8002a98:	aa04      	add	r2, sp, #16
 8002a9a:	21f0      	movs	r1, #240	; 0xf0
 8002a9c:	47a0      	blx	r4
  if (RequireAck)
 8002a9e:	e59f      	b.n	80025e0 <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002aa0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	f43f ad91 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002ab0:	e726      	b.n	8002900 <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8002ab2:	78b2      	ldrb	r2, [r6, #2]
 8002ab4:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8002abc:	f000 fdee 	bl	800369c <UI_SetReg>
 8002ac0:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	f43f ad84 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002aca:	e719      	b.n	8002900 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002acc:	f10d 0209 	add.w	r2, sp, #9
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f000 fea3 	bl	800381c <UI_GetReg>
          if ( bNoError == true )
 8002ad6:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002ada:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f43f ad78 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002ae2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	aa04      	add	r2, sp, #16
 8002aea:	21f0      	movs	r1, #240	; 0xf0
 8002aec:	47a0      	blx	r4
  if (RequireAck)
 8002aee:	e577      	b.n	80025e0 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002af0:	78b4      	ldrb	r4, [r6, #2]
 8002af2:	7873      	ldrb	r3, [r6, #1]
 8002af4:	78f0      	ldrb	r0, [r6, #3]
 8002af6:	7932      	ldrb	r2, [r6, #4]
 8002af8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8002afc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002b00:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8002b04:	4628      	mov	r0, r5
 8002b06:	f000 fdc9 	bl	800369c <UI_SetReg>
 8002b0a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	f43f ad5f 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002b14:	e6f4      	b.n	8002900 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002b16:	f10d 0209 	add.w	r2, sp, #9
 8002b1a:	4628      	mov	r0, r5
 8002b1c:	f000 fe7e 	bl	800381c <UI_GetReg>
           if ( bNoError == true )
 8002b20:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002b24:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f43f ad53 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002b2c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002b30:	2301      	movs	r3, #1
 8002b32:	aa04      	add	r2, sp, #16
 8002b34:	21f0      	movs	r1, #240	; 0xf0
 8002b36:	47a0      	blx	r4
  if (RequireAck)
 8002b38:	e552      	b.n	80025e0 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8002b3a:	7872      	ldrb	r2, [r6, #1]
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f000 fdad 	bl	800369c <UI_SetReg>
 8002b42:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002b46:	2800      	cmp	r0, #0
 8002b48:	f43f ad43 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002b4c:	e6d8      	b.n	8002900 <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002b4e:	7872      	ldrb	r2, [r6, #1]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4628      	mov	r0, r5
 8002b54:	f000 fda2 	bl	800369c <UI_SetReg>
 8002b58:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f43f ad38 	beq.w	80025d2 <MCP_ReceivedFrame+0x4a>
 8002b62:	e6cd      	b.n	8002900 <MCP_ReceivedFrame+0x378>
 8002b64:	2326      	movs	r3, #38	; 0x26
 8002b66:	2124      	movs	r1, #36	; 0x24
 8002b68:	2222      	movs	r2, #34	; 0x22
 8002b6a:	e6a6      	b.n	80028ba <MCP_ReceivedFrame+0x332>
 8002b6c:	20000658 	.word	0x20000658
 8002b70:	2aaaaaab 	.word	0x2aaaaaab

08002b74 <MCP_WaitNextFrame>:
{
 8002b74:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002b76:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002b78:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002b7a:	6980      	ldr	r0, [r0, #24]
 8002b7c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002b84:	69a0      	ldr	r0, [r4, #24]
 8002b86:	6a23      	ldr	r3, [r4, #32]
}
 8002b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8002b8c:	4718      	bx	r3
 8002b8e:	bf00      	nop

08002b90 <MCP_Init>:
{
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8002b96:	4f0b      	ldr	r7, [pc, #44]	; (8002bc4 <MCP_Init+0x34>)
{
 8002b98:	4608      	mov	r0, r1
 8002b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8002b9c:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 8002b9e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 8002ba2:	4616      	mov	r6, r2
 8002ba4:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 8002ba6:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <MCP_Init+0x38>)
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <MCP_Init+0x3c>)
 8002baa:	9700      	str	r7, [sp, #0]
 8002bac:	4621      	mov	r1, r4
{
 8002bae:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8002bb0:	f004 fbf8 	bl	80073a4 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8002bb4:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002bb8:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff ffda 	bl	8002b74 <MCP_WaitNextFrame>
}
 8002bc0:	b003      	add	sp, #12
 8002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc4:	08002bd1 	.word	0x08002bd1
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002589 	.word	0x08002589

08002bd0 <MCP_OnTimeOut>:
{
 8002bd0:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8002bd2:	f7ff ffcf 	bl	8002b74 <MCP_WaitNextFrame>
}
 8002bd6:	bd08      	pop	{r3, pc}

08002bd8 <MCP_SentFrame>:
{
 8002bd8:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8002bda:	f7ff ffcb 	bl	8002b74 <MCP_WaitNextFrame>
}
 8002bde:	bd08      	pop	{r3, pc}

08002be0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002be0:	b530      	push	{r4, r5, lr}
 8002be2:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002be4:	f002 fd84 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002bea:	4d0c      	ldr	r5, [pc, #48]	; (8002c1c <MX_MotorControl_Init+0x3c>)
 8002bec:	4c0c      	ldr	r4, [pc, #48]	; (8002c20 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002bee:	fba3 3000 	umull	r3, r0, r3, r0
 8002bf2:	09c0      	lsrs	r0, r0, #7
 8002bf4:	f002 f858 	bl	8004ca8 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff f87a 	bl	8001cf4 <MCboot>
  mc_lock_pins();
 8002c00:	f7ff fc42 	bl	8002488 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <MX_MotorControl_Init+0x44>)
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4807      	ldr	r0, [pc, #28]	; (8002c28 <MX_MotorControl_Init+0x48>)
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f000 fcc2 	bl	8003598 <UI_TaskInit>
}
 8002c14:	b003      	add	sp, #12
 8002c16:	bd30      	pop	{r4, r5, pc}
 8002c18:	10624dd3 	.word	0x10624dd3
 8002c1c:	200009ec 	.word	0x200009ec
 8002c20:	200009e8 	.word	0x200009e8
 8002c24:	0800912c 	.word	0x0800912c
 8002c28:	20000570 	.word	0x20000570

08002c2c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002c2c:	4a65      	ldr	r2, [pc, #404]	; (8002dc4 <RCM_RegisterRegConv+0x198>)
 8002c2e:	6813      	ldr	r3, [r2, #0]
{
 8002c30:	b470      	push	{r4, r5, r6}
 8002c32:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07e      	beq.n	8002d36 <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002c38:	7904      	ldrb	r4, [r0, #4]
 8002c3a:	7918      	ldrb	r0, [r3, #4]
 8002c3c:	4284      	cmp	r4, r0
 8002c3e:	d01e      	beq.n	8002c7e <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002c40:	6855      	ldr	r5, [r2, #4]
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	f000 808b 	beq.w	8002d5e <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002c48:	792b      	ldrb	r3, [r5, #4]
 8002c4a:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 8002c4c:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002c50:	d079      	beq.n	8002d46 <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002c52:	6893      	ldr	r3, [r2, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a2 	beq.w	8002d9e <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002c5a:	791d      	ldrb	r5, [r3, #4]
 8002c5c:	42a5      	cmp	r5, r4
 8002c5e:	d078      	beq.n	8002d52 <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002c60:	68d3      	ldr	r3, [r2, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a0 	beq.w	8002da8 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002c68:	791d      	ldrb	r5, [r3, #4]
 8002c6a:	42a5      	cmp	r5, r4
 8002c6c:	f000 8082 	beq.w	8002d74 <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002c70:	2803      	cmp	r0, #3
 8002c72:	bf88      	it	hi
 8002c74:	20ff      	movhi	r0, #255	; 0xff
 8002c76:	f240 80a0 	bls.w	8002dba <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002c7a:	bc70      	pop	{r4, r5, r6}
 8002c7c:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	680b      	ldr	r3, [r1, #0]
 8002c82:	4283      	cmp	r3, r0
 8002c84:	d1dc      	bne.n	8002c40 <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8002c86:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c88:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002c8a:	4d4f      	ldr	r5, [pc, #316]	; (8002dc8 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 8002c8c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002c90:	2200      	movs	r2, #0
 8002c92:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002c96:	07e5      	lsls	r5, r4, #31
 8002c98:	d422      	bmi.n	8002ce0 <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002c9a:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002c9c:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002ca4:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002ca6:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002ca8:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002caa:	f022 0220 	bic.w	r2, r2, #32
 8002cae:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002cb0:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002cb8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002cbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cc0:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	dbfc      	blt.n	8002cc2 <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002cc8:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 8002cca:	07d4      	lsls	r4, r2, #31
 8002ccc:	d408      	bmi.n	8002ce0 <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 8002cce:	4c3f      	ldr	r4, [pc, #252]	; (8002dcc <RCM_RegisterRegConv+0x1a0>)
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	4022      	ands	r2, r4
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	07d2      	lsls	r2, r2, #31
 8002cde:	d5f7      	bpl.n	8002cd0 <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 8002ce0:	4d3b      	ldr	r5, [pc, #236]	; (8002dd0 <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002ce2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002ce4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002ce8:	0056      	lsls	r6, r2, #1
 8002cea:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002cee:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 8002cf2:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 8002cf4:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	55aa      	strb	r2, [r5, r6]
 8002cfa:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002cfc:	790c      	ldrb	r4, [r1, #4]
 8002cfe:	2c09      	cmp	r4, #9
 8002d00:	d83f      	bhi.n	8002d82 <RCM_RegisterRegConv+0x156>
 8002d02:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8002d06:	06a2      	lsls	r2, r4, #26
 8002d08:	2501      	movs	r5, #1
 8002d0a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8002d0e:	fa05 f404 	lsl.w	r4, r5, r4
 8002d12:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d14:	0dd4      	lsrs	r4, r2, #23
 8002d16:	f004 0404 	and.w	r4, r4, #4
 8002d1a:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8002d1c:	688d      	ldr	r5, [r1, #8]
 8002d1e:	58e1      	ldr	r1, [r4, r3]
 8002d20:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002d24:	2607      	movs	r6, #7
 8002d26:	4096      	lsls	r6, r2
 8002d28:	4095      	lsls	r5, r2
 8002d2a:	ea21 0206 	bic.w	r2, r1, r6
 8002d2e:	432a      	orrs	r2, r5
 8002d30:	50e2      	str	r2, [r4, r3]
}
 8002d32:	bc70      	pop	{r4, r5, r6}
 8002d34:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002d36:	6855      	ldr	r5, [r2, #4]
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	d039      	beq.n	8002db0 <RCM_RegisterRegConv+0x184>
 8002d3c:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 8002d3e:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002d40:	792b      	ldrb	r3, [r5, #4]
 8002d42:	42a3      	cmp	r3, r4
 8002d44:	d185      	bne.n	8002c52 <RCM_RegisterRegConv+0x26>
 8002d46:	682d      	ldr	r5, [r5, #0]
 8002d48:	680b      	ldr	r3, [r1, #0]
 8002d4a:	429d      	cmp	r5, r3
 8002d4c:	d181      	bne.n	8002c52 <RCM_RegisterRegConv+0x26>
 8002d4e:	2001      	movs	r0, #1
 8002d50:	e79a      	b.n	8002c88 <RCM_RegisterRegConv+0x5c>
 8002d52:	681d      	ldr	r5, [r3, #0]
 8002d54:	680b      	ldr	r3, [r1, #0]
 8002d56:	429d      	cmp	r5, r3
 8002d58:	d182      	bne.n	8002c60 <RCM_RegisterRegConv+0x34>
      i++;
 8002d5a:	2002      	movs	r0, #2
 8002d5c:	e794      	b.n	8002c88 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002d5e:	6893      	ldr	r3, [r2, #8]
 8002d60:	2001      	movs	r0, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f47f af79 	bne.w	8002c5a <RCM_RegisterRegConv+0x2e>
 8002d68:	68d3      	ldr	r3, [r2, #12]
 8002d6a:	b333      	cbz	r3, 8002dba <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002d6c:	791d      	ldrb	r5, [r3, #4]
 8002d6e:	790c      	ldrb	r4, [r1, #4]
 8002d70:	42a5      	cmp	r5, r4
 8002d72:	d122      	bne.n	8002dba <RCM_RegisterRegConv+0x18e>
 8002d74:	681c      	ldr	r4, [r3, #0]
 8002d76:	680b      	ldr	r3, [r1, #0]
 8002d78:	429c      	cmp	r4, r3
 8002d7a:	f47f af79 	bne.w	8002c70 <RCM_RegisterRegConv+0x44>
      i++;
 8002d7e:	2003      	movs	r0, #3
 8002d80:	e782      	b.n	8002c88 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002d82:	2503      	movs	r5, #3
 8002d84:	f06f 061d 	mvn.w	r6, #29
 8002d88:	2201      	movs	r2, #1
 8002d8a:	fb15 6504 	smlabb	r5, r5, r4, r6
 8002d8e:	40a2      	lsls	r2, r4
 8002d90:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8002d94:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8002d98:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002d9c:	e7ba      	b.n	8002d14 <RCM_RegisterRegConv+0xe8>
      i++;
 8002d9e:	2805      	cmp	r0, #5
 8002da0:	bf34      	ite	cc
 8002da2:	2000      	movcc	r0, #0
 8002da4:	2002      	movcs	r0, #2
 8002da6:	e7df      	b.n	8002d68 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002da8:	2804      	cmp	r0, #4
 8002daa:	680b      	ldr	r3, [r1, #0]
 8002dac:	d8e7      	bhi.n	8002d7e <RCM_RegisterRegConv+0x152>
 8002dae:	e76b      	b.n	8002c88 <RCM_RegisterRegConv+0x5c>
 8002db0:	6893      	ldr	r3, [r2, #8]
 8002db2:	b123      	cbz	r3, 8002dbe <RCM_RegisterRegConv+0x192>
 8002db4:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8002db6:	4628      	mov	r0, r5
 8002db8:	e74f      	b.n	8002c5a <RCM_RegisterRegConv+0x2e>
 8002dba:	680b      	ldr	r3, [r1, #0]
 8002dbc:	e764      	b.n	8002c88 <RCM_RegisterRegConv+0x5c>
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	e7d2      	b.n	8002d68 <RCM_RegisterRegConv+0x13c>
 8002dc2:	bf00      	nop
 8002dc4:	20000a30 	.word	0x20000a30
 8002dc8:	20000a0c 	.word	0x20000a0c
 8002dcc:	7fffffc0 	.word	0x7fffffc0
 8002dd0:	200009f4 	.word	0x200009f4

08002dd4 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8002dd4:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <RCM_ExecRegularConv+0x174>)
 8002dd6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8002dda:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 8002ddc:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002de0:	0044      	lsls	r4, r0, #1
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d136      	bne.n	8002e54 <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8002de6:	7819      	ldrb	r1, [r3, #0]
 8002de8:	2900      	cmp	r1, #0
 8002dea:	d179      	bne.n	8002ee0 <RCM_ExecRegularConv+0x10c>
 8002dec:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 8002dee:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 8002df0:	2900      	cmp	r1, #0
 8002df2:	d07b      	beq.n	8002eec <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 8002df4:	7ade      	ldrb	r6, [r3, #11]
 8002df6:	42b0      	cmp	r0, r6
 8002df8:	f0c0 8098 	bcc.w	8002f2c <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 8002dfc:	7b1a      	ldrb	r2, [r3, #12]
 8002dfe:	2a00      	cmp	r2, #0
 8002e00:	f000 8097 	beq.w	8002f32 <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 8002e04:	7c5e      	ldrb	r6, [r3, #17]
 8002e06:	42b0      	cmp	r0, r6
 8002e08:	d305      	bcc.n	8002e16 <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 8002e0a:	7c9a      	ldrb	r2, [r3, #18]
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	f040 8094 	bne.w	8002f3a <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 8002e12:	2202      	movs	r2, #2
 8002e14:	e071      	b.n	8002efa <RCM_ExecRegularConv+0x126>
 8002e16:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8002e18:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 8002e1a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8002e1e:	1821      	adds	r1, r4, r0
 8002e20:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002e24:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8002e28:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 8002e2a:	4e48      	ldr	r6, [pc, #288]	; (8002f4c <RCM_ExecRegularConv+0x178>)
 8002e2c:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 8002e2e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002e32:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8002e36:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 8002e38:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8002e3a:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 8002e3c:	1821      	adds	r1, r4, r0
 8002e3e:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002e40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8002e44:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002e48:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002e4c:	7852      	ldrb	r2, [r2, #1]
 8002e4e:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8002e50:	bf18      	it	ne
 8002e52:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8002e54:	4a3e      	ldr	r2, [pc, #248]	; (8002f50 <RCM_ExecRegularConv+0x17c>)
 8002e56:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8002e5a:	bb8a      	cbnz	r2, 8002ec0 <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002e5c:	4a3d      	ldr	r2, [pc, #244]	; (8002f54 <RCM_ExecRegularConv+0x180>)
 8002e5e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002e62:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002e64:	6811      	ldr	r1, [r2, #0]
 8002e66:	2d09      	cmp	r5, #9
 8002e68:	d930      	bls.n	8002ecc <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002e6a:	2603      	movs	r6, #3
 8002e6c:	f06f 071d 	mvn.w	r7, #29
 8002e70:	2201      	movs	r2, #1
 8002e72:	fb16 7605 	smlabb	r6, r6, r5, r7
 8002e76:	40aa      	lsls	r2, r5
 8002e78:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8002e7c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002e80:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8002e84:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002e86:	0d12      	lsrs	r2, r2, #20
 8002e88:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8002e8c:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8002e90:	432a      	orrs	r2, r5
 8002e92:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002e94:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002e96:	688a      	ldr	r2, [r1, #8]
 8002e98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e9c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ea0:	f042 0204 	orr.w	r2, r2, #4
 8002ea4:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002ea6:	680a      	ldr	r2, [r1, #0]
 8002ea8:	0752      	lsls	r2, r2, #29
 8002eaa:	d5fc      	bpl.n	8002ea6 <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8002eac:	1822      	adds	r2, r4, r0
 8002eae:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb4:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002eb6:	4d25      	ldr	r5, [pc, #148]	; (8002f4c <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 8002eb8:	2102      	movs	r1, #2
 8002eba:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002ebc:	7952      	ldrb	r2, [r2, #5]
 8002ebe:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 8002ec0:	4420      	add	r0, r4
 8002ec2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8002ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8002ec8:	8858      	ldrh	r0, [r3, #2]
 8002eca:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002ecc:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002ed0:	06aa      	lsls	r2, r5, #26
 8002ed2:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002ed4:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002ed8:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002edc:	432a      	orrs	r2, r5
 8002ede:	e7d1      	b.n	8002e84 <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 8002ee0:	795e      	ldrb	r6, [r3, #5]
 8002ee2:	4286      	cmp	r6, r0
 8002ee4:	d898      	bhi.n	8002e18 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 8002ee6:	7999      	ldrb	r1, [r3, #6]
 8002ee8:	2900      	cmp	r1, #0
 8002eea:	d183      	bne.n	8002df4 <RCM_ExecRegularConv+0x20>
 8002eec:	7b19      	ldrb	r1, [r3, #12]
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	d188      	bne.n	8002e04 <RCM_ExecRegularConv+0x30>
 8002ef2:	7c99      	ldrb	r1, [r3, #18]
 8002ef4:	bb09      	cbnz	r1, 8002f3a <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 8002ef6:	2a04      	cmp	r2, #4
 8002ef8:	d014      	beq.n	8002f24 <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002efa:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8002efe:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002f02:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002f04:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8002f08:	4e10      	ldr	r6, [pc, #64]	; (8002f4c <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 8002f0a:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002f0e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 8002f12:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8002f16:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 8002f18:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8002f1c:	7832      	ldrb	r2, [r6, #0]
 8002f1e:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8002f20:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 8002f22:	e78b      	b.n	8002e3c <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 8002f24:	4e09      	ldr	r6, [pc, #36]	; (8002f4c <RCM_ExecRegularConv+0x178>)
 8002f26:	4602      	mov	r2, r0
 8002f28:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 8002f2a:	e787      	b.n	8002e3c <RCM_ExecRegularConv+0x68>
      i++;
 8002f2c:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 8002f2e:	4611      	mov	r1, r2
 8002f30:	e773      	b.n	8002e1a <RCM_ExecRegularConv+0x46>
 8002f32:	7c9a      	ldrb	r2, [r3, #18]
 8002f34:	b90a      	cbnz	r2, 8002f3a <RCM_ExecRegularConv+0x166>
      i++;
 8002f36:	2201      	movs	r2, #1
 8002f38:	e7df      	b.n	8002efa <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 8002f3a:	7dde      	ldrb	r6, [r3, #23]
 8002f3c:	4286      	cmp	r6, r0
      i++;
 8002f3e:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 8002f42:	d9da      	bls.n	8002efa <RCM_ExecRegularConv+0x126>
 8002f44:	e768      	b.n	8002e18 <RCM_ExecRegularConv+0x44>
 8002f46:	bf00      	nop
 8002f48:	200009f4 	.word	0x200009f4
 8002f4c:	200009f0 	.word	0x200009f0
 8002f50:	200002e4 	.word	0x200002e4
 8002f54:	20000a30 	.word	0x20000a30

08002f58 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002f58:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002f5a:	4c12      	ldr	r4, [pc, #72]	; (8002fa4 <RCM_ExecUserConv+0x4c>)
 8002f5c:	7823      	ldrb	r3, [r4, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d000      	beq.n	8002f64 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002f64:	4d10      	ldr	r5, [pc, #64]	; (8002fa8 <RCM_ExecUserConv+0x50>)
 8002f66:	7828      	ldrb	r0, [r5, #0]
 8002f68:	f7ff ff34 	bl	8002dd4 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002f6c:	782b      	ldrb	r3, [r5, #0]
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002f70:	490f      	ldr	r1, [pc, #60]	; (8002fb0 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002f72:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8002f76:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002f7a:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002f7c:	7852      	ldrb	r2, [r2, #1]
 8002f7e:	b10a      	cbz	r2, 8002f84 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8002f80:	2202      	movs	r2, #2
 8002f82:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002f84:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <RCM_ExecUserConv+0x5c>)
 8002f86:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002f8a:	2d00      	cmp	r5, #0
 8002f8c:	d0e9      	beq.n	8002f62 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002f8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002f92:	2100      	movs	r1, #0
 8002f94:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002f96:	6852      	ldr	r2, [r2, #4]
 8002f98:	4601      	mov	r1, r0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	462b      	mov	r3, r5
}
 8002f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002fa2:	4718      	bx	r3
 8002fa4:	20000a2c 	.word	0x20000a2c
 8002fa8:	200009f1 	.word	0x200009f1
 8002fac:	200009f4 	.word	0x200009f4
 8002fb0:	20000a40 	.word	0x20000a40
 8002fb4:	20000a0c 	.word	0x20000a0c

08002fb8 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <RCM_ExecNextConv+0x88>)
 8002fba:	4822      	ldr	r0, [pc, #136]	; (8003044 <RCM_ExecNextConv+0x8c>)
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002fc2:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002fc6:	b383      	cbz	r3, 800302a <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <RCM_ExecNextConv+0x90>)
{
 8002fca:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8002fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd0:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002fd2:	2504      	movs	r5, #4
 8002fd4:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002fd6:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002fd8:	2d09      	cmp	r5, #9
 8002fda:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8002fde:	d925      	bls.n	800302c <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002fe0:	2603      	movs	r6, #3
 8002fe2:	f06f 071d 	mvn.w	r7, #29
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	fb16 7605 	smlabb	r6, r6, r5, r7
 8002fec:	40ab      	lsls	r3, r5
 8002fee:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 8002ff2:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8002ffa:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002ffc:	0d1b      	lsrs	r3, r3, #20
 8002ffe:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003002:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003006:	432b      	orrs	r3, r5
 8003008:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800300a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800300c:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800300e:	4422      	add	r2, r4
 8003010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003014:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	2201      	movs	r2, #1
 8003022:	608b      	str	r3, [r1, #8]
 8003024:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003026:	bcf0      	pop	{r4, r5, r6, r7}
 8003028:	4770      	bx	lr
 800302a:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800302c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003030:	06ab      	lsls	r3, r5, #26
 8003032:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003034:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003038:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800303c:	432b      	orrs	r3, r5
 800303e:	e7dc      	b.n	8002ffa <RCM_ExecNextConv+0x42>
 8003040:	200009f0 	.word	0x200009f0
 8003044:	200009f4 	.word	0x200009f4
 8003048:	20000a30 	.word	0x20000a30

0800304c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 800304c:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 800304e:	4c0f      	ldr	r4, [pc, #60]	; (800308c <RCM_ReadOngoingConv+0x40>)
 8003050:	4a0f      	ldr	r2, [pc, #60]	; (8003090 <RCM_ReadOngoingConv+0x44>)
 8003052:	7823      	ldrb	r3, [r4, #0]
 8003054:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003058:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800305c:	0058      	lsls	r0, r3, #1
 800305e:	784d      	ldrb	r5, [r1, #1]
 8003060:	2d01      	cmp	r5, #1
 8003062:	d006      	beq.n	8003072 <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003064:	4403      	add	r3, r0
 8003066:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800306a:	7953      	ldrb	r3, [r2, #5]
 800306c:	7023      	strb	r3, [r4, #0]
}
 800306e:	bc70      	pop	{r4, r5, r6}
 8003070:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8003072:	4d08      	ldr	r5, [pc, #32]	; (8003094 <RCM_ReadOngoingConv+0x48>)
 8003074:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8003078:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800307a:	682e      	ldr	r6, [r5, #0]
 800307c:	0776      	lsls	r6, r6, #29
 800307e:	d5f1      	bpl.n	8003064 <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003080:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8003082:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8003084:	2502      	movs	r5, #2
 8003086:	704d      	strb	r5, [r1, #1]
 8003088:	e7ec      	b.n	8003064 <RCM_ReadOngoingConv+0x18>
 800308a:	bf00      	nop
 800308c:	200009f0 	.word	0x200009f0
 8003090:	200009f4 	.word	0x200009f4
 8003094:	20000a30 	.word	0x20000a30

08003098 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_MspInit+0x3c>)
{
 800309a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	661a      	str	r2, [r3, #96]	; 0x60
 80030a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80030a6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a8:	f002 0201 	and.w	r2, r2, #1
 80030ac:	9200      	str	r2, [sp, #0]
 80030ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030b6:	659a      	str	r2, [r3, #88]	; 0x58
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80030c0:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80030c4:	f001 fd96 	bl	8004bf4 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c8:	b003      	add	sp, #12
 80030ca:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80030ce:	f001 bf83 	b.w	8004fd8 <HAL_PWREx_DisableUCPDDeadBattery>
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000

080030d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030d8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80030da:	6802      	ldr	r2, [r0, #0]
{
 80030dc:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030de:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80030e0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80030e8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80030ec:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80030ee:	d034      	beq.n	800315a <HAL_ADC_MspInit+0x82>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <HAL_ADC_MspInit+0xf0>)
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d001      	beq.n	80030fa <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030f6:	b00d      	add	sp, #52	; 0x34
 80030f8:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80030fa:	4a34      	ldr	r2, [pc, #208]	; (80031cc <HAL_ADC_MspInit+0xf4>)
 80030fc:	6813      	ldr	r3, [r2, #0]
 80030fe:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003100:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003102:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003104:	d054      	beq.n	80031b0 <HAL_ADC_MspInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_ADC_MspInit+0xf8>)
 8003108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003112:	f002 0201 	and.w	r2, r2, #1
 8003116:	9204      	str	r2, [sp, #16]
 8003118:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800311c:	f042 0202 	orr.w	r2, r2, #2
 8003120:	64da      	str	r2, [r3, #76]	; 0x4c
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	9305      	str	r3, [sp, #20]
 800312a:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_CURR_AMPL_W_Pin;
 800312c:	2260      	movs	r2, #96	; 0x60
 800312e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	a906      	add	r1, sp, #24
 8003134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_CURR_AMPL_W_Pin;
 8003138:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	f001 fdd3 	bl	8004ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003146:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003148:	4822      	ldr	r0, [pc, #136]	; (80031d4 <HAL_ADC_MspInit+0xfc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800314c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800314e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003152:	f001 fdc9 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003156:	b00d      	add	sp, #52	; 0x34
 8003158:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_ADC_MspInit+0xf4>)
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003160:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003162:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003164:	d019      	beq.n	800319a <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_ADC_MspInit+0xf8>)
 8003168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003170:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003172:	f002 0201 	and.w	r2, r2, #1
 8003176:	9201      	str	r2, [sp, #4]
 8003178:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800317c:	f042 0202 	orr.w	r2, r2, #2
 8003180:	64da      	str	r2, [r3, #76]	; 0x4c
 8003182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	9302      	str	r3, [sp, #8]
 800318a:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 800318c:	2203      	movs	r2, #3
 800318e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	a906      	add	r1, sp, #24
 8003194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003198:	e7ce      	b.n	8003138 <HAL_ADC_MspInit+0x60>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_ADC_MspInit+0xf8>)
 800319c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800319e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	9b00      	ldr	r3, [sp, #0]
 80031ae:	e7da      	b.n	8003166 <HAL_ADC_MspInit+0x8e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_ADC_MspInit+0xf8>)
 80031b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c0:	9303      	str	r3, [sp, #12]
 80031c2:	9b03      	ldr	r3, [sp, #12]
 80031c4:	e79f      	b.n	8003106 <HAL_ADC_MspInit+0x2e>
 80031c6:	bf00      	nop
 80031c8:	50000100 	.word	0x50000100
 80031cc:	20000660 	.word	0x20000660
 80031d0:	40021000 	.word	0x40021000
 80031d4:	48000400 	.word	0x48000400

080031d8 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_CORDIC_MspInit+0x2c>)
 80031da:	6802      	ldr	r2, [r0, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d000      	beq.n	80031e2 <HAL_CORDIC_MspInit+0xa>
 80031e0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80031e2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80031e6:	f042 0208 	orr.w	r2, r2, #8
 80031ea:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80031ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80031f2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80031f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80031fe:	b002      	add	sp, #8
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40020c00 	.word	0x40020c00

08003208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003208:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 800320a:	6801      	ldr	r1, [r0, #0]
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <HAL_SPI_MspInit+0x6c>)
{
 800320e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	2300      	movs	r3, #0
  if(hspi->Instance==SPI2)
 8003212:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003218:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800321c:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI2)
 800321e:	d001      	beq.n	8003224 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003220:	b009      	add	sp, #36	; 0x24
 8003222:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003228:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	4812      	ldr	r0, [pc, #72]	; (8003278 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800322e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003234:	659a      	str	r2, [r3, #88]	; 0x58
 8003236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003238:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800323c:	9200      	str	r2, [sp, #0]
 800323e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003242:	f042 0202 	orr.w	r2, r2, #2
 8003246:	64da      	str	r2, [r3, #76]	; 0x4c
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003250:	2305      	movs	r3, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003252:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003254:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003256:	2200      	movs	r2, #0
 8003258:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800325c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
 8003260:	2502      	movs	r5, #2
 8003262:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003266:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	f001 fd3d 	bl	8004ce8 <HAL_GPIO_Init>
}
 800326e:	b009      	add	sp, #36	; 0x24
 8003270:	bd30      	pop	{r4, r5, pc}
 8003272:	bf00      	nop
 8003274:	40003800 	.word	0x40003800
 8003278:	48000400 	.word	0x48000400

0800327c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_TIM_Base_MspInit+0x28>)
 800327e:	6802      	ldr	r2, [r0, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d000      	beq.n	8003286 <HAL_TIM_Base_MspInit+0xa>
 8003284:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003286:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 800328a:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 800328c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800328e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003292:	661a      	str	r2, [r3, #96]	; 0x60
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800329e:	b002      	add	sp, #8
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00

080032a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032a8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80032aa:	6801      	ldr	r1, [r0, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIM_Encoder_MspInit+0x68>)
{
 80032ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80032b2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80032b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80032bc:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032c0:	b009      	add	sp, #36	; 0x24
 80032c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	4811      	ldr	r0, [pc, #68]	; (8003314 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032d0:	f042 0204 	orr.w	r2, r2, #4
 80032d4:	659a      	str	r2, [r3, #88]	; 0x58
 80032d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032d8:	f002 0204 	and.w	r2, r2, #4
 80032dc:	9200      	str	r2, [sp, #0]
 80032de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032e2:	f042 0202 	orr.w	r2, r2, #2
 80032e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032f0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 80032f6:	2200      	movs	r2, #0
 80032f8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 80032fc:	24c0      	movs	r4, #192	; 0xc0
 80032fe:	2502      	movs	r5, #2
 8003300:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003304:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	f001 fcee 	bl	8004ce8 <HAL_GPIO_Init>
}
 800330c:	b009      	add	sp, #36	; 0x24
 800330e:	bd30      	pop	{r4, r5, pc}
 8003310:	40000800 	.word	0x40000800
 8003314:	48000400 	.word	0x48000400

08003318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003318:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800331a:	6801      	ldr	r1, [r0, #0]
 800331c:	4a1f      	ldr	r2, [pc, #124]	; (800339c <HAL_TIM_MspPostInit+0x84>)
{
 800331e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003322:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003328:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800332c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800332e:	d001      	beq.n	8003334 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003330:	b008      	add	sp, #32
 8003332:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003338:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800333c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	64da      	str	r2, [r3, #76]	; 0x4c
 8003346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003348:	f002 0201 	and.w	r2, r2, #1
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003352:	f042 0202 	orr.w	r2, r2, #2
 8003356:	64da      	str	r2, [r3, #76]	; 0x4c
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003362:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8003366:	2302      	movs	r3, #2
 8003368:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800336a:	2606      	movs	r6, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336c:	a902      	add	r1, sp, #8
 800336e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003372:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003376:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800337a:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f001 fcb4 	bl	8004ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003380:	2203      	movs	r2, #3
 8003382:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	4806      	ldr	r0, [pc, #24]	; (80033a0 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003386:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800338a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800338e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003392:	f001 fca9 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003396:	b008      	add	sp, #32
 8003398:	bd70      	pop	{r4, r5, r6, pc}
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	48000400 	.word	0x48000400

080033a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80033a6:	6801      	ldr	r1, [r0, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_UART_MspInit+0x6c>)
{
 80033aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80033ae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80033b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80033b8:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033bc:	b008      	add	sp, #32
 80033be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033c8:	2007      	movs	r0, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033d0:	659a      	str	r2, [r3, #88]	; 0x58
 80033d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033d4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80033d8:	9200      	str	r2, [sp, #0]
 80033da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033e6:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80033ee:	2200      	movs	r2, #0
 80033f0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80033f4:	240c      	movs	r4, #12
 80033f6:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80033fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003400:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003404:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f001 fc6f 	bl	8004ce8 <HAL_GPIO_Init>
}
 800340a:	b008      	add	sp, #32
 800340c:	bd70      	pop	{r4, r5, r6, pc}
 800340e:	bf00      	nop
 8003410:	40004400 	.word	0x40004400

08003414 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003414:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 800341c:	f7fe bf08 	b.w	8002230 <TSK_HighFrequencyTask>

08003420 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003422:	4804      	ldr	r0, [pc, #16]	; (8003434 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003424:	f06f 0201 	mvn.w	r2, #1
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	f004 bf2b 	b.w	8008284 <R3_2_TIMx_UP_IRQHandler>
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	200002e4 	.word	0x200002e4

08003438 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003438:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	0611      	lsls	r1, r2, #24
 8003440:	d505      	bpl.n	800344e <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003442:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8003446:	480a      	ldr	r0, [pc, #40]	; (8003470 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	f004 ff7d 	bl	8008348 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	05d2      	lsls	r2, r2, #23
 8003454:	d505      	bpl.n	8003462 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003456:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 800345a:	4805      	ldr	r0, [pc, #20]	; (8003470 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800345c:	611a      	str	r2, [r3, #16]
 800345e:	f004 ff53 	bl	8008308 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003466:	f7fe beb7 	b.w	80021d8 <MC_Scheduler>
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	200002e4 	.word	0x200002e4

08003474 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8003474:	4806      	ldr	r0, [pc, #24]	; (8003490 <TIM4_IRQHandler+0x1c>)
 8003476:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	07d1      	lsls	r1, r2, #31
 800347c:	d502      	bpl.n	8003484 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	07d2      	lsls	r2, r2, #31
 8003482:	d400      	bmi.n	8003486 <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003484:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003486:	f06f 0201 	mvn.w	r2, #1
 800348a:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 800348c:	f003 bf74 	b.w	8007378 <ENC_IRQHandler>
 8003490:	200000b4 	.word	0x200000b4

08003494 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003494:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003496:	4c18      	ldr	r4, [pc, #96]	; (80034f8 <USART2_IRQHandler+0x64>)
 8003498:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	0691      	lsls	r1, r2, #26
 80034a0:	d50b      	bpl.n	80034ba <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80034a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80034a4:	4620      	mov	r0, r4
 80034a6:	b2c9      	uxtb	r1, r1
 80034a8:	f005 fb58 	bl	8008b5c <UFCP_RX_IRQ_Handler>
 80034ac:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d01a      	beq.n	80034e8 <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d01d      	beq.n	80034f2 <USART2_IRQHandler+0x5e>
 80034b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	0612      	lsls	r2, r2, #24
 80034be:	d504      	bpl.n	80034ca <USART2_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 80034c0:	480d      	ldr	r0, [pc, #52]	; (80034f8 <USART2_IRQHandler+0x64>)
 80034c2:	f005 fab3 	bl	8008a2c <UFCP_TX_IRQ_Handler>
 80034c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	071b      	lsls	r3, r3, #28
 80034ce:	d50a      	bpl.n	80034e6 <USART2_IRQHandler+0x52>
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 80034d0:	4809      	ldr	r0, [pc, #36]	; (80034f8 <USART2_IRQHandler+0x64>)
 80034d2:	f005 fba5 	bl	8008c20 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80034d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80034da:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80034dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e0:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 80034e2:	f000 b8bb 	b.w	800365c <UI_SerialCommunicationTimeOutStop>
}
 80034e6:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 80034e8:	f000 f8be 	bl	8003668 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 80034ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80034f0:	e7e3      	b.n	80034ba <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 80034f2:	f000 f8b3 	bl	800365c <UI_SerialCommunicationTimeOutStop>
 80034f6:	e7de      	b.n	80034b6 <USART2_IRQHandler+0x22>
 80034f8:	20000434 	.word	0x20000434

080034fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80034fc:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80034fe:	f7fe ffb3 	bl	8002468 <TSK_HardwareFaultTask>
 8003502:	4d18      	ldr	r5, [pc, #96]	; (8003564 <HardFault_Handler+0x68>)
 8003504:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8003506:	462c      	mov	r4, r5
 8003508:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	0711      	lsls	r1, r2, #28
 8003510:	4620      	mov	r0, r4
 8003512:	d508      	bpl.n	8003526 <HardFault_Handler+0x2a>
 8003514:	f005 fb84 	bl	8008c20 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003518:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800351c:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 800351e:	f000 f89d 	bl	800365c <UI_SerialCommunicationTimeOutStop>
 8003522:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	0612      	lsls	r2, r2, #24
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 800352a:	4620      	mov	r0, r4
 800352c:	d513      	bpl.n	8003556 <HardFault_Handler+0x5a>
 800352e:	f005 fa7d 	bl	8008a2c <UFCP_TX_IRQ_Handler>
 8003532:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	0691      	lsls	r1, r2, #26
 800353a:	d5e7      	bpl.n	800350c <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800353c:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800353e:	4620      	mov	r0, r4
 8003540:	b2c9      	uxtb	r1, r1
 8003542:	f005 fb0b 	bl	8008b5c <UFCP_RX_IRQ_Handler>
 8003546:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8003548:	2b01      	cmp	r3, #1
 800354a:	d008      	beq.n	800355e <HardFault_Handler+0x62>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 800354c:	2b02      	cmp	r3, #2
 800354e:	d1db      	bne.n	8003508 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8003550:	f000 f884 	bl	800365c <UI_SerialCommunicationTimeOutStop>
 8003554:	e7d8      	b.n	8003508 <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	0692      	lsls	r2, r2, #26
 800355a:	d5d7      	bpl.n	800350c <HardFault_Handler+0x10>
 800355c:	e7ee      	b.n	800353c <HardFault_Handler+0x40>
          UI_SerialCommunicationTimeOutStart();
 800355e:	f000 f883 	bl	8003668 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8003562:	e7d1      	b.n	8003508 <HardFault_Handler+0xc>
 8003564:	20000434 	.word	0x20000434

08003568 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003568:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800356a:	4c0a      	ldr	r4, [pc, #40]	; (8003594 <SysTick_Handler+0x2c>)
 800356c:	7823      	ldrb	r3, [r4, #0]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d006      	beq.n	8003580 <SysTick_Handler+0x18>
 8003572:	3301      	adds	r3, #1
 8003574:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003576:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800357c:	f7fe bf64 	b.w	8002448 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003580:	f000 fc32 	bl	8003de8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003584:	f001 fbac 	bl	8004ce0 <HAL_SYSTICK_IRQHandler>
 8003588:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 800358a:	7023      	strb	r3, [r4, #0]
}
 800358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003590:	f7fe bf5a 	b.w	8002448 <MC_RunMotorControlTasks>
 8003594:	20000574 	.word	0x20000574

08003598 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8003598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 800359c:	4d17      	ldr	r5, [pc, #92]	; (80035fc <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 800359e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003610 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 80035a2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003614 <UI_TaskInit+0x7c>
{
 80035a6:	468e      	mov	lr, r1
 80035a8:	4681      	mov	r9, r0
 80035aa:	4616      	mov	r6, r2
 80035ac:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 80035ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035b0:	4664      	mov	r4, ip
 80035b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035b4:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 80035b8:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 80035ba:	4d11      	ldr	r5, [pc, #68]	; (8003600 <UI_TaskInit+0x68>)
{
 80035bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 80035c0:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 80035c4:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 80035c8:	4640      	mov	r0, r8
{
 80035ca:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 80035cc:	f005 fa2c 	bl	8008a28 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 80035d0:	f8cd a004 	str.w	sl, [sp, #4]
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <UI_TaskInit+0x6c>)
 80035d6:	6828      	ldr	r0, [r5, #0]
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <UI_TaskInit+0x70>)
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4641      	mov	r1, r8
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <UI_TaskInit+0x74>)
 80035e0:	f7ff fad6 	bl	8002b90 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80035e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80035e8:	6828      	ldr	r0, [r5, #0]
 80035ea:	463b      	mov	r3, r7
 80035ec:	4632      	mov	r2, r6
 80035ee:	4621      	mov	r1, r4

}
 80035f0:	b002      	add	sp, #8
 80035f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80035f6:	f000 b83d 	b.w	8003674 <UI_Init>
 80035fa:	bf00      	nop
 80035fc:	20000638 	.word	0x20000638
 8003600:	20000668 	.word	0x20000668
 8003604:	08008c3d 	.word	0x08008c3d
 8003608:	08008aad 	.word	0x08008aad
 800360c:	08008a8d 	.word	0x08008a8d
 8003610:	20000a44 	.word	0x20000a44
 8003614:	20000434 	.word	0x20000434

08003618 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8003618:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <UI_Scheduler+0x38>)
 800361a:	8813      	ldrh	r3, [r2, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	b11b      	cbz	r3, 8003628 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8003620:	8813      	ldrh	r3, [r2, #0]
 8003622:	3b01      	subs	r3, #1
 8003624:	b29b      	uxth	r3, r3
 8003626:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003628:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <UI_Scheduler+0x3c>)
 800362a:	8813      	ldrh	r3, [r2, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d903      	bls.n	800363a <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8003632:	8813      	ldrh	r3, [r2, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	b29b      	uxth	r3, r3
 8003638:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 800363a:	4a07      	ldr	r2, [pc, #28]	; (8003658 <UI_Scheduler+0x40>)
 800363c:	8813      	ldrh	r3, [r2, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d903      	bls.n	800364c <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8003644:	8813      	ldrh	r3, [r2, #0]
 8003646:	3b01      	subs	r3, #1
 8003648:	b29b      	uxth	r3, r3
 800364a:	8013      	strh	r3, [r2, #0]
  }
}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000666 	.word	0x20000666
 8003654:	20000664 	.word	0x20000664
 8003658:	20000576 	.word	0x20000576

0800365c <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 800365c:	4b01      	ldr	r3, [pc, #4]	; (8003664 <UI_SerialCommunicationTimeOutStop+0x8>)
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
}
 8003662:	4770      	bx	lr
 8003664:	20000664 	.word	0x20000664

08003668 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8003668:	4b01      	ldr	r3, [pc, #4]	; (8003670 <UI_SerialCommunicationTimeOutStart+0x8>)
 800366a:	224f      	movs	r2, #79	; 0x4f
 800366c:	801a      	strh	r2, [r3, #0]
}
 800366e:	4770      	bx	lr
 8003670:	20000664 	.word	0x20000664

08003674 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8003674:	b430      	push	{r4, r5}
 8003676:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8003678:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 800367a:	2500      	movs	r5, #0
 800367c:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 800367e:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8003682:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8003684:	7101      	strb	r1, [r0, #4]
}
 8003686:	4770      	bx	lr

08003688 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8003688:	7903      	ldrb	r3, [r0, #4]
 800368a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 800368c:	bf86      	itte	hi
 800368e:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8003690:	2001      	movhi	r0, #1
    retVal = false;
 8003692:	2000      	movls	r0, #0
  }
  return retVal;
}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop

08003698 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8003698:	7d00      	ldrb	r0, [r0, #20]
 800369a:	4770      	bx	lr

0800369c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 800369c:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800369e:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80036a2:	7d03      	ldrb	r3, [r0, #20]
{
 80036a4:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80036a6:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80036aa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
{
 80036ae:	4614      	mov	r4, r2
 80036b0:	295b      	cmp	r1, #91	; 0x5b
 80036b2:	d82f      	bhi.n	8003714 <UI_SetReg+0x78>
 80036b4:	e8df f001 	tbb	[pc, r1]
 80036b8:	412e2e3d 	.word	0x412e2e3d
 80036bc:	544e482e 	.word	0x544e482e
 80036c0:	726c665a 	.word	0x726c665a
 80036c4:	908a8478 	.word	0x908a8478
 80036c8:	2e2e2e2e 	.word	0x2e2e2e2e
 80036cc:	2e2e2e2e 	.word	0x2e2e2e2e
 80036d0:	2e2e2e2e 	.word	0x2e2e2e2e
 80036d4:	2e2e2e2e 	.word	0x2e2e2e2e
 80036d8:	2e2e2e2e 	.word	0x2e2e2e2e
 80036dc:	2e2e2e2e 	.word	0x2e2e2e2e
 80036e0:	2e2e2e2e 	.word	0x2e2e2e2e
 80036e4:	2e2e2e2e 	.word	0x2e2e2e2e
 80036e8:	2e2e2e2e 	.word	0x2e2e2e2e
 80036ec:	2e2e2e2e 	.word	0x2e2e2e2e
 80036f0:	2e2e2e2e 	.word	0x2e2e2e2e
 80036f4:	2e2e2e2e 	.word	0x2e2e2e2e
 80036f8:	2e2e962e 	.word	0x2e2e962e
 80036fc:	2e2e2e2e 	.word	0x2e2e2e2e
 8003700:	2e2e2e2e 	.word	0x2e2e2e2e
 8003704:	2e2e2e2e 	.word	0x2e2e2e2e
 8003708:	2e2e2e2e 	.word	0x2e2e2e2e
 800370c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003710:	312e2e2e 	.word	0x312e2e2e
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003714:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8003716:	b003      	add	sp, #12
 8003718:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 800371a:	493f      	ldr	r1, [pc, #252]	; (8003818 <UI_SetReg+0x17c>)
 800371c:	fb81 3104 	smull	r3, r1, r1, r4
 8003720:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8003724:	4628      	mov	r0, r5
 8003726:	b209      	sxth	r1, r1
 8003728:	2200      	movs	r2, #0
 800372a:	f7fe f8a7 	bl	800187c <MCI_ExecSpeedRamp>
  bool retVal = true;
 800372e:	2001      	movs	r0, #1
    break;
 8003730:	e7f1      	b.n	8003716 <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003732:	b2e1      	uxtb	r1, r4
 8003734:	f7ff ffa8 	bl	8003688 <UI_SelectMC>
    break;
 8003738:	e7ed      	b.n	8003716 <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800373a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800373e:	d057      	beq.n	80037f0 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003740:	2c01      	cmp	r4, #1
 8003742:	d05f      	beq.n	8003804 <UI_SetReg+0x168>
  bool retVal = true;
 8003744:	2001      	movs	r0, #1
 8003746:	e7e6      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	b221      	sxth	r1, r4
 800374c:	f003 fed8 	bl	8007500 <PID_SetKP>
  bool retVal = true;
 8003750:	2001      	movs	r0, #1
    break;
 8003752:	e7e0      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	b221      	sxth	r1, r4
 8003758:	f003 fed4 	bl	8007504 <PID_SetKI>
  bool retVal = true;
 800375c:	2001      	movs	r0, #1
    break;
 800375e:	e7da      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	b221      	sxth	r1, r4
 8003764:	f003 fede 	bl	8007524 <PID_SetKD>
  bool retVal = true;
 8003768:	2001      	movs	r0, #1
    break;
 800376a:	e7d4      	b.n	8003716 <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 800376c:	4628      	mov	r0, r5
 800376e:	f7fe f94b 	bl	8001a08 <MCI_GetIqdref>
 8003772:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8003774:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003778:	4628      	mov	r0, r5
 800377a:	9901      	ldr	r1, [sp, #4]
 800377c:	f7fe f894 	bl	80018a8 <MCI_SetCurrentReferences>
  bool retVal = true;
 8003780:	2001      	movs	r0, #1
    break;
 8003782:	e7c8      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003784:	6858      	ldr	r0, [r3, #4]
 8003786:	b221      	sxth	r1, r4
 8003788:	f003 feba 	bl	8007500 <PID_SetKP>
  bool retVal = true;
 800378c:	2001      	movs	r0, #1
    break;
 800378e:	e7c2      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003790:	6858      	ldr	r0, [r3, #4]
 8003792:	b221      	sxth	r1, r4
 8003794:	f003 feb6 	bl	8007504 <PID_SetKI>
  bool retVal = true;
 8003798:	2001      	movs	r0, #1
    break;
 800379a:	e7bc      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 800379c:	6858      	ldr	r0, [r3, #4]
 800379e:	b221      	sxth	r1, r4
 80037a0:	f003 fec0 	bl	8007524 <PID_SetKD>
  bool retVal = true;
 80037a4:	2001      	movs	r0, #1
    break;
 80037a6:	e7b6      	b.n	8003716 <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 80037a8:	4628      	mov	r0, r5
 80037aa:	f7fe f92d 	bl	8001a08 <MCI_GetIqdref>
 80037ae:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80037b0:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80037b4:	4628      	mov	r0, r5
 80037b6:	9901      	ldr	r1, [sp, #4]
 80037b8:	f7fe f876 	bl	80018a8 <MCI_SetCurrentReferences>
  bool retVal = true;
 80037bc:	2001      	movs	r0, #1
    break;
 80037be:	e7aa      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80037c0:	6898      	ldr	r0, [r3, #8]
 80037c2:	b221      	sxth	r1, r4
 80037c4:	f003 fe9c 	bl	8007500 <PID_SetKP>
  bool retVal = true;
 80037c8:	2001      	movs	r0, #1
    break;
 80037ca:	e7a4      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80037cc:	6898      	ldr	r0, [r3, #8]
 80037ce:	b221      	sxth	r1, r4
 80037d0:	f003 fe98 	bl	8007504 <PID_SetKI>
  bool retVal = true;
 80037d4:	2001      	movs	r0, #1
    break;
 80037d6:	e79e      	b.n	8003716 <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80037d8:	6898      	ldr	r0, [r3, #8]
 80037da:	b221      	sxth	r1, r4
 80037dc:	f003 fea2 	bl	8007524 <PID_SetKD>
  bool retVal = true;
 80037e0:	2001      	movs	r0, #1
    break;
 80037e2:	e798      	b.n	8003716 <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80037e4:	4628      	mov	r0, r5
 80037e6:	b221      	sxth	r1, r4
 80037e8:	f7fe f950 	bl	8001a8c <MCI_SetIdref>
  bool retVal = true;
 80037ec:	2001      	movs	r0, #1
    break;
 80037ee:	e792      	b.n	8003716 <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80037f0:	4628      	mov	r0, r5
 80037f2:	f7fe f933 	bl	8001a5c <MCI_GetTeref>
 80037f6:	4622      	mov	r2, r4
 80037f8:	4601      	mov	r1, r0
 80037fa:	4628      	mov	r0, r5
 80037fc:	f7fe f84a 	bl	8001894 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8003800:	2001      	movs	r0, #1
 8003802:	e788      	b.n	8003716 <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003804:	4628      	mov	r0, r5
 8003806:	f7fe f8d1 	bl	80019ac <MCI_GetMecSpeedRefUnit>
 800380a:	2200      	movs	r2, #0
 800380c:	4601      	mov	r1, r0
 800380e:	4628      	mov	r0, r5
 8003810:	f7fe f834 	bl	800187c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8003814:	4620      	mov	r0, r4
 8003816:	e77e      	b.n	8003716 <UI_SetReg+0x7a>
 8003818:	2aaaaaab 	.word	0x2aaaaaab

0800381c <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 800381c:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800381e:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003822:	7d03      	ldrb	r3, [r0, #20]
{
 8003824:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003826:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800382a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 800382e:	2a00      	cmp	r2, #0
 8003830:	f000 8089 	beq.w	8003946 <UI_GetReg+0x12a>
  {
    *success = true;
 8003834:	2601      	movs	r6, #1
 8003836:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 8003838:	2981      	cmp	r1, #129	; 0x81
 800383a:	f200 81db 	bhi.w	8003bf4 <UI_GetReg+0x3d8>
 800383e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003842:	0163      	.short	0x0163
 8003844:	0159015d 	.word	0x0159015d
 8003848:	01b601bd 	.word	0x01b601bd
 800384c:	01ae01b2 	.word	0x01ae01b2
 8003850:	00ff01aa 	.word	0x00ff01aa
 8003854:	0178017c 	.word	0x0178017c
 8003858:	00fa0174 	.word	0x00fa0174
 800385c:	016a016e 	.word	0x016a016e
 8003860:	01d90166 	.word	0x01d90166
 8003864:	01d901d9 	.word	0x01d901d9
 8003868:	01d901d9 	.word	0x01d901d9
 800386c:	01d901d9 	.word	0x01d901d9
 8003870:	01d901d9 	.word	0x01d901d9
 8003874:	01a201a6 	.word	0x01a201a6
 8003878:	01d9019e 	.word	0x01d9019e
 800387c:	01d201d9 	.word	0x01d201d9
 8003880:	01c801cd 	.word	0x01c801cd
 8003884:	01c101d9 	.word	0x01c101d9
 8003888:	014f0154 	.word	0x014f0154
 800388c:	01940199 	.word	0x01940199
 8003890:	01c801cd 	.word	0x01c801cd
 8003894:	00fa00ff 	.word	0x00fa00ff
 8003898:	018a018f 	.word	0x018a018f
 800389c:	01800185 	.word	0x01800185
 80038a0:	0127013b 	.word	0x0127013b
 80038a4:	01d901d9 	.word	0x01d901d9
 80038a8:	01d901d9 	.word	0x01d901d9
 80038ac:	01d901d9 	.word	0x01d901d9
 80038b0:	01d901d9 	.word	0x01d901d9
 80038b4:	01d901d9 	.word	0x01d901d9
 80038b8:	01d901d9 	.word	0x01d901d9
 80038bc:	01d901d9 	.word	0x01d901d9
 80038c0:	01190120 	.word	0x01190120
 80038c4:	01d900fa 	.word	0x01d900fa
 80038c8:	01d901d9 	.word	0x01d901d9
 80038cc:	01d901d9 	.word	0x01d901d9
 80038d0:	01d901d9 	.word	0x01d901d9
 80038d4:	01d901d9 	.word	0x01d901d9
 80038d8:	01d901d9 	.word	0x01d901d9
 80038dc:	01d901d9 	.word	0x01d901d9
 80038e0:	01d901d9 	.word	0x01d901d9
 80038e4:	01d901d9 	.word	0x01d901d9
 80038e8:	01d901d9 	.word	0x01d901d9
 80038ec:	01d901d9 	.word	0x01d901d9
 80038f0:	01d901d9 	.word	0x01d901d9
 80038f4:	01d901d9 	.word	0x01d901d9
 80038f8:	01d90108 	.word	0x01d90108
 80038fc:	01d901d9 	.word	0x01d901d9
 8003900:	01d901d9 	.word	0x01d901d9
 8003904:	01d901d9 	.word	0x01d901d9
 8003908:	01d901d9 	.word	0x01d901d9
 800390c:	01d901d9 	.word	0x01d901d9
 8003910:	01d901d9 	.word	0x01d901d9
 8003914:	01d901d9 	.word	0x01d901d9
 8003918:	01d901d9 	.word	0x01d901d9
 800391c:	010401d9 	.word	0x010401d9
 8003920:	01720115 	.word	0x01720115
 8003924:	00f701d9 	.word	0x00f701d9
 8003928:	01d900f7 	.word	0x01d900f7
 800392c:	01d901d9 	.word	0x01d901d9
 8003930:	01d901d9 	.word	0x01d901d9
 8003934:	01d901d9 	.word	0x01d901d9
 8003938:	01d901d9 	.word	0x01d901d9
 800393c:	01d901d9 	.word	0x01d901d9
 8003940:	01d901d9 	.word	0x01d901d9
 8003944:	00f7      	.short	0x00f7
 8003946:	2970      	cmp	r1, #112	; 0x70
 8003948:	d872      	bhi.n	8003a30 <UI_GetReg+0x214>
 800394a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800394e:	00dd      	.short	0x00dd
 8003950:	00d300d7 	.word	0x00d300d7
 8003954:	01300137 	.word	0x01300137
 8003958:	0128012c 	.word	0x0128012c
 800395c:	00790124 	.word	0x00790124
 8003960:	00f200f6 	.word	0x00f200f6
 8003964:	007400ee 	.word	0x007400ee
 8003968:	00e400e8 	.word	0x00e400e8
 800396c:	007100e0 	.word	0x007100e0
 8003970:	00710071 	.word	0x00710071
 8003974:	00710071 	.word	0x00710071
 8003978:	00710071 	.word	0x00710071
 800397c:	00710071 	.word	0x00710071
 8003980:	011c0120 	.word	0x011c0120
 8003984:	00710118 	.word	0x00710118
 8003988:	014c0071 	.word	0x014c0071
 800398c:	01420147 	.word	0x01420147
 8003990:	013b0071 	.word	0x013b0071
 8003994:	00c900ce 	.word	0x00c900ce
 8003998:	010e0113 	.word	0x010e0113
 800399c:	01420147 	.word	0x01420147
 80039a0:	00740079 	.word	0x00740079
 80039a4:	01040109 	.word	0x01040109
 80039a8:	00fa00ff 	.word	0x00fa00ff
 80039ac:	00a100b5 	.word	0x00a100b5
 80039b0:	00710071 	.word	0x00710071
 80039b4:	00710071 	.word	0x00710071
 80039b8:	00710071 	.word	0x00710071
 80039bc:	00710071 	.word	0x00710071
 80039c0:	00710071 	.word	0x00710071
 80039c4:	00710071 	.word	0x00710071
 80039c8:	00710071 	.word	0x00710071
 80039cc:	0093009a 	.word	0x0093009a
 80039d0:	00710074 	.word	0x00710074
 80039d4:	00710071 	.word	0x00710071
 80039d8:	00710071 	.word	0x00710071
 80039dc:	00710071 	.word	0x00710071
 80039e0:	00710071 	.word	0x00710071
 80039e4:	00710071 	.word	0x00710071
 80039e8:	00710071 	.word	0x00710071
 80039ec:	00710071 	.word	0x00710071
 80039f0:	00710071 	.word	0x00710071
 80039f4:	00710071 	.word	0x00710071
 80039f8:	00710071 	.word	0x00710071
 80039fc:	00710071 	.word	0x00710071
 8003a00:	00710071 	.word	0x00710071
 8003a04:	00710082 	.word	0x00710082
 8003a08:	00710071 	.word	0x00710071
 8003a0c:	00710071 	.word	0x00710071
 8003a10:	00710071 	.word	0x00710071
 8003a14:	00710071 	.word	0x00710071
 8003a18:	00710071 	.word	0x00710071
 8003a1c:	00710071 	.word	0x00710071
 8003a20:	00710071 	.word	0x00710071
 8003a24:	00710071 	.word	0x00710071
 8003a28:	007e0071 	.word	0x007e0071
 8003a2c:	00ec008f 	.word	0x00ec008f
  int32_t bRetVal = 0;
 8003a30:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8003a32:	b00c      	add	sp, #48	; 0x30
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7fd ffe6 	bl	8001a08 <MCI_GetIqdref>
 8003a3c:	1400      	asrs	r0, r0, #16
    break;
 8003a3e:	e7f8      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8003a40:	4620      	mov	r0, r4
 8003a42:	f7fd ffe1 	bl	8001a08 <MCI_GetIqdref>
 8003a46:	b200      	sxth	r0, r0
    break;
 8003a48:	e7f3      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003a4a:	6828      	ldr	r0, [r5, #0]
 8003a4c:	f003 fd66 	bl	800751c <PID_GetKPDivisor>
    break;
 8003a50:	e7ef      	b.n	8003a32 <UI_GetReg+0x216>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7fd ff94 	bl	8001980 <MCI_GetControlMode>
 8003a58:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003a5a:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003a5c:	f000 80d7 	beq.w	8003c0e <UI_GetReg+0x3f2>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8003a60:	f7fd ffa4 	bl	80019ac <MCI_GetMecSpeedRefUnit>
 8003a64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a68:	0040      	lsls	r0, r0, #1
 8003a6a:	e7e2      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003a6c:	6828      	ldr	r0, [r5, #0]
 8003a6e:	f003 fd57 	bl	8007520 <PID_GetKIDivisor>
    break;
 8003a72:	e7de      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003a74:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003a76:	f004 ff11 	bl	800889c <STC_GetMinAppNegativeMecSpeedUnit>
 8003a7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a7e:	0040      	lsls	r0, r0, #1
    break;
 8003a80:	e7d7      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003a82:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003a84:	f004 ff08 	bl	8008898 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003a88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a8c:	0040      	lsls	r0, r0, #1
    break;
 8003a8e:	e7d0      	b.n	8003a32 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003a90:	6902      	ldr	r2, [r0, #16]
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003a96:	0f1a      	lsrs	r2, r3, #28
 8003a98:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003a9a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003a9e:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003aa0:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003aa4:	f240 80ae 	bls.w	8003c04 <UI_GetReg+0x3e8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d8c1      	bhi.n	8003a30 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8003aac:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d0be      	beq.n	8003a30 <UI_GetReg+0x214>
        bRetVal = SPD_GetS16Speed(pSPD);
 8003ab2:	f004 fe31 	bl	8008718 <SPD_GetS16Speed>
 8003ab6:	e7bc      	b.n	8003a32 <UI_GetReg+0x216>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003ab8:	6902      	ldr	r2, [r0, #16]
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003abe:	0f1a      	lsrs	r2, r3, #28
 8003ac0:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ac2:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ac6:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ac8:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003acc:	f240 8095 	bls.w	8003bfa <UI_GetReg+0x3de>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d8ad      	bhi.n	8003a30 <UI_GetReg+0x214>
        pSPD = pMCT->pSpeedSensorAux;
 8003ad4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d0aa      	beq.n	8003a30 <UI_GetReg+0x214>
        bRetVal = SPD_GetElAngle(pSPD);
 8003ada:	f004 fde5 	bl	80086a8 <SPD_GetElAngle>
 8003ade:	e7a8      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).b;
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f7fd ff67 	bl	80019b4 <MCI_GetIab>
 8003ae6:	1400      	asrs	r0, r0, #16
    break;
 8003ae8:	e7a3      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetIab(pMCI).a;
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7fd ff62 	bl	80019b4 <MCI_GetIab>
 8003af0:	b200      	sxth	r0, r0
    break;
 8003af2:	e79e      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003af4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003af6:	f004 ff83 	bl	8008a00 <STM_GetState>
	break;
 8003afa:	e79a      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003afc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 8003afe:	b00c      	add	sp, #48	; 0x30
 8003b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003b04:	f004 bf8a 	b.w	8008a1c <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003b08:	f7ff fdc6 	bl	8003698 <UI_GetSelectedMC>
    break;
 8003b0c:	e791      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003b0e:	68a8      	ldr	r0, [r5, #8]
 8003b10:	f003 fd0a 	bl	8007528 <PID_GetKD>
    break;
 8003b14:	e78d      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003b16:	68a8      	ldr	r0, [r5, #8]
 8003b18:	f003 fcfa 	bl	8007510 <PID_GetKI>
    break;
 8003b1c:	e789      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003b1e:	68a8      	ldr	r0, [r5, #8]
 8003b20:	f003 fcf2 	bl	8007508 <PID_GetKP>
    break;
 8003b24:	e785      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)(MC_UID);
 8003b26:	483d      	ldr	r0, [pc, #244]	; (8003c1c <UI_GetReg+0x400>)
 8003b28:	e783      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003b2a:	6868      	ldr	r0, [r5, #4]
 8003b2c:	f003 fcfc 	bl	8007528 <PID_GetKD>
    break;
 8003b30:	e77f      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003b32:	6868      	ldr	r0, [r5, #4]
 8003b34:	f003 fcec 	bl	8007510 <PID_GetKI>
    break;
 8003b38:	e77b      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003b3a:	6868      	ldr	r0, [r5, #4]
 8003b3c:	f003 fce4 	bl	8007508 <PID_GetKP>
    break;
 8003b40:	e777      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7fd ff7c 	bl	8001a40 <MCI_GetValphabeta>
 8003b48:	1400      	asrs	r0, r0, #16
    break;
 8003b4a:	e772      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f7fd ff77 	bl	8001a40 <MCI_GetValphabeta>
 8003b52:	b200      	sxth	r0, r0
    break;
 8003b54:	e76d      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fd ff64 	bl	8001a24 <MCI_GetVqd>
 8003b5c:	1400      	asrs	r0, r0, #16
    break;
 8003b5e:	e768      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7fd ff5f 	bl	8001a24 <MCI_GetVqd>
 8003b66:	b200      	sxth	r0, r0
    break;
 8003b68:	e763      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f7fd ff30 	bl	80019d0 <MCI_GetIalphabeta>
 8003b70:	1400      	asrs	r0, r0, #16
    break;
 8003b72:	e75e      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7fd ff2b 	bl	80019d0 <MCI_GetIalphabeta>
 8003b7a:	b200      	sxth	r0, r0
    break;
 8003b7c:	e759      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003b7e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003b80:	f003 fc5c 	bl	800743c <MPM_GetAvrgElMotorPowerW>
    break;
 8003b84:	e755      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003b86:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003b88:	f003 fc9c 	bl	80074c4 <NTC_GetAvTemp_C>
    break;
 8003b8c:	e751      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003b8e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003b90:	f003 fa14 	bl	8006fbc <VBS_GetAvBusVoltage_V>
    break;
 8003b94:	e74d      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003b96:	6828      	ldr	r0, [r5, #0]
 8003b98:	f003 fcc6 	bl	8007528 <PID_GetKD>
    break;
 8003b9c:	e749      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003b9e:	6828      	ldr	r0, [r5, #0]
 8003ba0:	f003 fcb6 	bl	8007510 <PID_GetKI>
    break;
 8003ba4:	e745      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003ba6:	6828      	ldr	r0, [r5, #0]
 8003ba8:	f003 fcae 	bl	8007508 <PID_GetKP>
    break;
 8003bac:	e741      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7fd fefc 	bl	80019ac <MCI_GetMecSpeedRefUnit>
 8003bb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003bb8:	0040      	lsls	r0, r0, #1
    break;
 8003bba:	e73a      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7fd fedf 	bl	8001980 <MCI_GetControlMode>
    break;
 8003bc2:	e736      	b.n	8003a32 <UI_GetReg+0x216>
      if (pMCT->pRevupCtrl)
 8003bc4:	6968      	ldr	r0, [r5, #20]
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	f43f af32 	beq.w	8003a30 <UI_GetReg+0x214>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003bcc:	f005 f8ba 	bl	8008d44 <RUC_GetNumberOfPhases>
 8003bd0:	e72f      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7fd ff0a 	bl	80019ec <MCI_GetIqd>
 8003bd8:	1400      	asrs	r0, r0, #16
    break;
 8003bda:	e72a      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7fd ff05 	bl	80019ec <MCI_GetIqd>
 8003be2:	b200      	sxth	r0, r0
    break;
 8003be4:	e725      	b.n	8003a32 <UI_GetReg+0x216>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7fd fed8 	bl	800199c <MCI_GetAvrgMecSpeedUnit>
 8003bec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003bf0:	0040      	lsls	r0, r0, #1
    break;
 8003bf2:	e71e      	b.n	8003a32 <UI_GetReg+0x216>
        *success = false;
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8003bf8:	e71b      	b.n	8003a32 <UI_GetReg+0x216>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003bfa:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003bfc:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003bfe:	f63f af6a 	bhi.w	8003ad6 <UI_GetReg+0x2ba>
 8003c02:	e767      	b.n	8003ad4 <UI_GetReg+0x2b8>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003c04:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003c06:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003c08:	f63f af51 	bhi.w	8003aae <UI_GetReg+0x292>
 8003c0c:	e74e      	b.n	8003aac <UI_GetReg+0x290>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003c0e:	f7fd feb9 	bl	8001984 <MCI_GetLastRampFinalSpeed>
 8003c12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c16:	0040      	lsls	r0, r0, #1
 8003c18:	e70b      	b.n	8003a32 <UI_GetReg+0x216>
 8003c1a:	bf00      	nop
 8003c1c:	34a6847a 	.word	0x34a6847a

08003c20 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003c20:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003c22:	6883      	ldr	r3, [r0, #8]
 8003c24:	7d02      	ldrb	r2, [r0, #20]
 8003c26:	3901      	subs	r1, #1
 8003c28:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8003c2c:	290d      	cmp	r1, #13
 8003c2e:	d808      	bhi.n	8003c42 <UI_ExecCmd+0x22>
 8003c30:	e8df f001 	tbb	[pc, r1]
 8003c34:	0e091419 	.word	0x0e091419
 8003c38:	231e100e 	.word	0x231e100e
 8003c3c:	07070728 	.word	0x07070728
 8003c40:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003c42:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8003c44:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8003c46:	4620      	mov	r0, r4
 8003c48:	f7fd fe8a 	bl	8001960 <MCI_GetSTMState>
 8003c4c:	2806      	cmp	r0, #6
 8003c4e:	d01e      	beq.n	8003c8e <UI_ExecCmd+0x6e>
  bool retVal = true;
 8003c50:	2001      	movs	r0, #1
}
 8003c52:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7fd fe83 	bl	8001960 <MCI_GetSTMState>
 8003c5a:	b120      	cbz	r0, 8003c66 <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7fd fe37 	bl	80018d0 <MCI_StopMotor>
  bool retVal = true;
 8003c62:	2001      	movs	r0, #1
}
 8003c64:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7fd fe28 	bl	80018bc <MCI_StartMotor>
  bool retVal = true;
 8003c6c:	2001      	movs	r0, #1
}
 8003c6e:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7fd fe31 	bl	80018d8 <MCI_FaultAcknowledged>
  bool retVal = true;
 8003c76:	2001      	movs	r0, #1
}
 8003c78:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f7fd fe30 	bl	80018e0 <MCI_EncoderAlign>
  bool retVal = true;
 8003c80:	2001      	movs	r0, #1
}
 8003c82:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7fd ff0b 	bl	8001aa0 <MCI_Clear_Iqdref>
  bool retVal = true;
 8003c8a:	2001      	movs	r0, #1
}
 8003c8c:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f7fd fe80 	bl	8001994 <MCI_StopRamp>
  bool retVal = true;
 8003c94:	2001      	movs	r0, #1
}
 8003c96:	bd10      	pop	{r4, pc}

08003c98 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003c98:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003c9c:	7d04      	ldrb	r4, [r0, #20]
 8003c9e:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003ca0:	fb83 c301 	smull	ip, r3, r3, r1
 8003ca4:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003ca8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003cac:	b209      	sxth	r1, r1
 8003cae:	f7fd fde5 	bl	800187c <MCI_ExecSpeedRamp>
  return true;
}
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2aaaaaab 	.word	0x2aaaaaab

08003cbc <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003cbc:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003cbe:	6883      	ldr	r3, [r0, #8]
 8003cc0:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8003cc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003cc6:	f7fd fde5 	bl	8001894 <MCI_ExecTorqueRamp>
  return true;
}
 8003cca:	2001      	movs	r0, #1
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop

08003cd0 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003cd2:	7d04      	ldrb	r4, [r0, #20]
 8003cd4:	68c0      	ldr	r0, [r0, #12]
 8003cd6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003cda:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8003cdc:	b19c      	cbz	r4, 8003d06 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003cde:	4620      	mov	r0, r4
 8003ce0:	461e      	mov	r6, r3
 8003ce2:	4617      	mov	r7, r2
 8003ce4:	460d      	mov	r5, r1
 8003ce6:	f005 f817 	bl	8008d18 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003cea:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003cec:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f005 f818 	bl	8008d24 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003cf4:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003cf6:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f005 f81b 	bl	8008d34 <RUC_GetPhaseFinalTorque>
 8003cfe:	9b06      	ldr	r3, [sp, #24]
 8003d00:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8003d02:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8003d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8003d06:	4620      	mov	r0, r4
}
 8003d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0a:	bf00      	nop

08003d0c <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003d0c:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003d0e:	7d04      	ldrb	r4, [r0, #20]
 8003d10:	68c0      	ldr	r0, [r0, #12]
{
 8003d12:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003d14:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8003d18:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003d1c:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003d1e:	9001      	str	r0, [sp, #4]
{
 8003d20:	461d      	mov	r5, r3
 8003d22:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003d24:	f004 ffe6 	bl	8008cf4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8003d28:	9801      	ldr	r0, [sp, #4]
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	f004 ffe7 	bl	8008d00 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8003d32:	9801      	ldr	r0, [sp, #4]
 8003d34:	4632      	mov	r2, r6
 8003d36:	4621      	mov	r1, r4
 8003d38:	f004 ffe8 	bl	8008d0c <RUC_SetPhaseFinalTorque>
  return true;
}
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd70      	pop	{r4, r5, r6, pc}
 8003d42:	bf00      	nop

08003d44 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8003d44:	b410      	push	{r4}
 8003d46:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003d48:	7d04      	ldrb	r4, [r0, #20]
 8003d4a:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8003d4c:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003d50:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8003d54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003d58:	9901      	ldr	r1, [sp, #4]
}
 8003d5a:	b003      	add	sp, #12
 8003d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8003d60:	f7fd bda2 	b.w	80018a8 <MCI_SetCurrentReferences>

08003d64 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	4770      	bx	lr

08003d68 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d68:	4a03      	ldr	r2, [pc, #12]	; (8003d78 <SystemInit+0x10>)
 8003d6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d7c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_InitTick+0x40>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b90b      	cbnz	r3, 8003d88 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d84:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d88:	490d      	ldr	r1, [pc, #52]	; (8003dc0 <HAL_InitTick+0x44>)
 8003d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d8e:	4605      	mov	r5, r0
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	6808      	ldr	r0, [r1, #0]
 8003d96:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d9a:	f000 ff85 	bl	8004ca8 <HAL_SYSTICK_Config>
 8003d9e:	4604      	mov	r4, r0
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d1ef      	bne.n	8003d84 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003da4:	2d0f      	cmp	r5, #15
 8003da6:	d8ed      	bhi.n	8003d84 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003da8:	4602      	mov	r2, r0
 8003daa:	4629      	mov	r1, r5
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	f000 ff34 	bl	8004c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_InitTick+0x48>)
 8003db6:	4620      	mov	r0, r4
 8003db8:	601d      	str	r5, [r3, #0]
}
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	2000057c 	.word	0x2000057c
 8003dc0:	20000578 	.word	0x20000578
 8003dc4:	20000580 	.word	0x20000580

08003dc8 <HAL_Init>:
{
 8003dc8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dca:	2003      	movs	r0, #3
 8003dcc:	f000 ff12 	bl	8004bf4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dd0:	2004      	movs	r0, #4
 8003dd2:	f7ff ffd3 	bl	8003d7c <HAL_InitTick>
 8003dd6:	b110      	cbz	r0, 8003dde <HAL_Init+0x16>
    status = HAL_ERROR;
 8003dd8:	2401      	movs	r4, #1
}
 8003dda:	4620      	mov	r0, r4
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	4604      	mov	r4, r0
    HAL_MspInit();
 8003de0:	f7ff f95a 	bl	8003098 <HAL_MspInit>
}
 8003de4:	4620      	mov	r0, r4
 8003de6:	bd10      	pop	{r4, pc}

08003de8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003de8:	4a03      	ldr	r2, [pc, #12]	; (8003df8 <HAL_IncTick+0x10>)
 8003dea:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_IncTick+0x14>)
 8003dec:	6813      	ldr	r3, [r2, #0]
 8003dee:	6809      	ldr	r1, [r1, #0]
 8003df0:	440b      	add	r3, r1
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000af4 	.word	0x20000af4
 8003dfc:	2000057c 	.word	0x2000057c

08003e00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003e00:	4b01      	ldr	r3, [pc, #4]	; (8003e08 <HAL_GetTick+0x8>)
 8003e02:	6818      	ldr	r0, [r3, #0]
}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000af4 	.word	0x20000af4

08003e0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f000 80cb 	beq.w	8003fb0 <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e1a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	f000 8094 	beq.w	8003f4c <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e24:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e26:	6893      	ldr	r3, [r2, #8]
 8003e28:	009d      	lsls	r5, r3, #2
 8003e2a:	d505      	bpl.n	8003e38 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e2c:	6893      	ldr	r3, [r2, #8]
 8003e2e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003e32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e36:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	00d8      	lsls	r0, r3, #3
 8003e3c:	d419      	bmi.n	8003e72 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e3e:	4b71      	ldr	r3, [pc, #452]	; (8004004 <HAL_ADC_Init+0x1f8>)
 8003e40:	4871      	ldr	r0, [pc, #452]	; (8004008 <HAL_ADC_Init+0x1fc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003e44:	6891      	ldr	r1, [r2, #8]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	fba0 0303 	umull	r0, r3, r0, r3
 8003e4c:	099b      	lsrs	r3, r3, #6
 8003e4e:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003e52:	3301      	adds	r3, #1
 8003e54:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003e5e:	6091      	str	r1, [r2, #8]
 8003e60:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e62:	9b01      	ldr	r3, [sp, #4]
 8003e64:	b12b      	cbz	r3, 8003e72 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003e66:	9b01      	ldr	r3, [sp, #4]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e6c:	9b01      	ldr	r3, [sp, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f9      	bne.n	8003e66 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e72:	6893      	ldr	r3, [r2, #8]
 8003e74:	00d9      	lsls	r1, r3, #3
 8003e76:	d45b      	bmi.n	8003f30 <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e7a:	f043 0310 	orr.w	r3, r3, #16
 8003e7e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8003e8e:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e94:	d153      	bne.n	8003f3e <HAL_ADC_Init+0x132>
 8003e96:	06db      	lsls	r3, r3, #27
 8003e98:	d451      	bmi.n	8003f3e <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003e9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea6:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea8:	07de      	lsls	r6, r3, #31
 8003eaa:	d40e      	bmi.n	8003eca <HAL_ADC_Init+0xbe>
 8003eac:	4b57      	ldr	r3, [pc, #348]	; (800400c <HAL_ADC_Init+0x200>)
 8003eae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003eb2:	6889      	ldr	r1, [r1, #8]
 8003eb4:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	07dd      	lsls	r5, r3, #31
 8003eba:	d406      	bmi.n	8003eca <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ebc:	4954      	ldr	r1, [pc, #336]	; (8004010 <HAL_ADC_Init+0x204>)
 8003ebe:	6865      	ldr	r5, [r4, #4]
 8003ec0:	688b      	ldr	r3, [r1, #8]
 8003ec2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003ec6:	432b      	orrs	r3, r5
 8003ec8:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8003eca:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8003ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ed0:	432b      	orrs	r3, r5
 8003ed2:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ed4:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ed6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8003eda:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ede:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ee0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ee4:	d05f      	beq.n	8003fa6 <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ee6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ee8:	b121      	cbz	r1, 8003ef4 <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003eea:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eec:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ef0:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ef2:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ef4:	68d6      	ldr	r6, [r2, #12]
 8003ef6:	4947      	ldr	r1, [pc, #284]	; (8004014 <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ef8:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003efa:	4031      	ands	r1, r6
 8003efc:	430b      	orrs	r3, r1
 8003efe:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f00:	6913      	ldr	r3, [r2, #16]
 8003f02:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003f06:	432b      	orrs	r3, r5
 8003f08:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f0a:	6893      	ldr	r3, [r2, #8]
 8003f0c:	0759      	lsls	r1, r3, #29
 8003f0e:	d523      	bpl.n	8003f58 <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f10:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f12:	6963      	ldr	r3, [r4, #20]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d04e      	beq.n	8003fb6 <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f18:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f1a:	f023 030f 	bic.w	r3, r3, #15
 8003f1e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f30:	6893      	ldr	r3, [r2, #8]
 8003f32:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f36:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f3c:	d0ab      	beq.n	8003e96 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003f40:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	f043 0310 	orr.w	r3, r3, #16
 8003f46:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003f4c:	f7ff f8c4 	bl	80030d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003f50:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003f52:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003f56:	e765      	b.n	8003e24 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f58:	6893      	ldr	r3, [r2, #8]
 8003f5a:	071b      	lsls	r3, r3, #28
 8003f5c:	d4d9      	bmi.n	8003f12 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f5e:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f60:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f64:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8003f66:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f68:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f6c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f6e:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f72:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f76:	430b      	orrs	r3, r1
 8003f78:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f7a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003f7c:	bb1d      	cbnz	r5, 8003fc6 <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f84:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003f88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f90:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003f94:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d021      	beq.n	8003fe0 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f9c:	6913      	ldr	r3, [r2, #16]
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	6113      	str	r3, [r2, #16]
 8003fa4:	e7b5      	b.n	8003f12 <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fa6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003fa8:	3901      	subs	r1, #1
 8003faa:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003fae:	e79a      	b.n	8003ee6 <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8003fb0:	2001      	movs	r0, #1
}
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fb6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003fb8:	6a23      	ldr	r3, [r4, #32]
 8003fba:	f021 010f 	bic.w	r1, r1, #15
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc4:	e7ac      	b.n	8003f20 <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fca:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003fcc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003fd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fd8:	432b      	orrs	r3, r5
 8003fda:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003fde:	e7d9      	b.n	8003f94 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fe0:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8003fe4:	6911      	ldr	r1, [r2, #16]
 8003fe6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003fe8:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003fec:	f021 0104 	bic.w	r1, r1, #4
 8003ff0:	4333      	orrs	r3, r6
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ff6:	432b      	orrs	r3, r5
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6113      	str	r3, [r2, #16]
 8004000:	e787      	b.n	8003f12 <HAL_ADC_Init+0x106>
 8004002:	bf00      	nop
 8004004:	20000578 	.word	0x20000578
 8004008:	053e2d63 	.word	0x053e2d63
 800400c:	50000100 	.word	0x50000100
 8004010:	50000300 	.word	0x50000300
 8004014:	fff04007 	.word	0xfff04007

08004018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800401a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800401e:	b083      	sub	sp, #12
 8004020:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004022:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004024:	f04f 0000 	mov.w	r0, #0
 8004028:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800402a:	f000 8143 	beq.w	80042b4 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800402e:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004030:	2001      	movs	r0, #1
 8004032:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004036:	6894      	ldr	r4, [r2, #8]
 8004038:	0766      	lsls	r6, r4, #29
 800403a:	d43d      	bmi.n	80040b8 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 800403c:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004040:	09a6      	lsrs	r6, r4, #6
 8004042:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004046:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 800404a:	f004 041f 	and.w	r4, r4, #31
 800404e:	5977      	ldr	r7, [r6, r5]
 8004050:	f04f 0c1f 	mov.w	ip, #31
 8004054:	fa0c fc04 	lsl.w	ip, ip, r4
 8004058:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800405c:	ea27 070c 	bic.w	r7, r7, ip
 8004060:	40a0      	lsls	r0, r4
 8004062:	4338      	orrs	r0, r7
 8004064:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004066:	6890      	ldr	r0, [r2, #8]
 8004068:	0745      	lsls	r5, r0, #29
 800406a:	f140 809a 	bpl.w	80041a2 <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800406e:	6890      	ldr	r0, [r2, #8]
 8004070:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004072:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004074:	07e4      	lsls	r4, r4, #31
 8004076:	d530      	bpl.n	80040da <HAL_ADC_ConfigChannel+0xc2>
 8004078:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800407a:	49c2      	ldr	r1, [pc, #776]	; (8004384 <HAL_ADC_ConfigChannel+0x36c>)
 800407c:	420c      	tst	r4, r1
 800407e:	d02a      	beq.n	80040d6 <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004080:	49c1      	ldr	r1, [pc, #772]	; (8004388 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004082:	4dc2      	ldr	r5, [pc, #776]	; (800438c <HAL_ADC_ConfigChannel+0x374>)
 8004084:	6888      	ldr	r0, [r1, #8]
 8004086:	42ac      	cmp	r4, r5
 8004088:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800408c:	d01d      	beq.n	80040ca <HAL_ADC_ConfigChannel+0xb2>
 800408e:	4dc0      	ldr	r5, [pc, #768]	; (8004390 <HAL_ADC_ConfigChannel+0x378>)
 8004090:	42ac      	cmp	r4, r5
 8004092:	d01a      	beq.n	80040ca <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004094:	4dbf      	ldr	r5, [pc, #764]	; (8004394 <HAL_ADC_ConfigChannel+0x37c>)
 8004096:	42ac      	cmp	r4, r5
 8004098:	f040 813e 	bne.w	8004318 <HAL_ADC_ConfigChannel+0x300>
 800409c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80040a0:	d119      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040a2:	4cbd      	ldr	r4, [pc, #756]	; (8004398 <HAL_ADC_ConfigChannel+0x380>)
 80040a4:	42a2      	cmp	r2, r4
 80040a6:	d016      	beq.n	80040d6 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80040a8:	688a      	ldr	r2, [r1, #8]
 80040aa:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80040ae:	4316      	orrs	r6, r2
 80040b0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80040b4:	608e      	str	r6, [r1, #8]
}
 80040b6:	e003      	b.n	80040c0 <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ba:	f042 0220 	orr.w	r2, r2, #32
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80040c6:	b003      	add	sp, #12
 80040c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040ca:	0201      	lsls	r1, r0, #8
 80040cc:	d403      	bmi.n	80040d6 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ce:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80040d2:	f000 8102 	beq.w	80042da <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d6:	2000      	movs	r0, #0
 80040d8:	e7f2      	b.n	80040c0 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040da:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80040dc:	4caf      	ldr	r4, [pc, #700]	; (800439c <HAL_ADC_ConfigChannel+0x384>)
 80040de:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040e2:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 80043ac <HAL_ADC_ConfigChannel+0x394>
 80040e6:	f006 0718 	and.w	r7, r6, #24
 80040ea:	40fc      	lsrs	r4, r7
 80040ec:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80040f0:	4004      	ands	r4, r0
 80040f2:	ea25 0507 	bic.w	r5, r5, r7
 80040f6:	432c      	orrs	r4, r5
 80040f8:	4566      	cmp	r6, ip
 80040fa:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040fe:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004100:	d1bb      	bne.n	800407a <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004102:	2f00      	cmp	r7, #0
 8004104:	f000 80d9 	beq.w	80042ba <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800410c:	2c00      	cmp	r4, #0
 800410e:	f000 8181 	beq.w	8004414 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004112:	fab4 f484 	clz	r4, r4
 8004116:	3401      	adds	r4, #1
 8004118:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800411c:	2c09      	cmp	r4, #9
 800411e:	f240 8179 	bls.w	8004414 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004126:	2d00      	cmp	r5, #0
 8004128:	f000 81d7 	beq.w	80044da <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 800412c:	fab5 f585 	clz	r5, r5
 8004130:	3501      	adds	r5, #1
 8004132:	06ad      	lsls	r5, r5, #26
 8004134:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800413c:	2c00      	cmp	r4, #0
 800413e:	f000 81d1 	beq.w	80044e4 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8004142:	fab4 f484 	clz	r4, r4
 8004146:	3401      	adds	r4, #1
 8004148:	f004 041f 	and.w	r4, r4, #31
 800414c:	2601      	movs	r6, #1
 800414e:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004152:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004158:	2800      	cmp	r0, #0
 800415a:	f000 81c1 	beq.w	80044e0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800415e:	fab0 f480 	clz	r4, r0
 8004162:	3401      	adds	r4, #1
 8004164:	f004 041f 	and.w	r4, r4, #31
 8004168:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800416c:	f1a4 001e 	sub.w	r0, r4, #30
 8004170:	0500      	lsls	r0, r0, #20
 8004172:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004176:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004178:	0dc7      	lsrs	r7, r0, #23
 800417a:	f007 0704 	and.w	r7, r7, #4
 800417e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004182:	688e      	ldr	r6, [r1, #8]
 8004184:	597c      	ldr	r4, [r7, r5]
 8004186:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800418a:	f04f 0c07 	mov.w	ip, #7
 800418e:	fa0c fc00 	lsl.w	ip, ip, r0
 8004192:	ea24 040c 	bic.w	r4, r4, ip
 8004196:	fa06 f000 	lsl.w	r0, r6, r0
 800419a:	4320      	orrs	r0, r4
 800419c:	5178      	str	r0, [r7, r5]
 800419e:	680c      	ldr	r4, [r1, #0]
}
 80041a0:	e76b      	b.n	800407a <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041a2:	6890      	ldr	r0, [r2, #8]
 80041a4:	f010 0008 	ands.w	r0, r0, #8
 80041a8:	f040 8082 	bne.w	80042b0 <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041ac:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041ae:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041b0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80041b4:	f000 80c4 	beq.w	8004340 <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041b8:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 80041bc:	f00c 0c04 	and.w	ip, ip, #4
 80041c0:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80041c4:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80041c8:	f85c 5007 	ldr.w	r5, [ip, r7]
 80041cc:	f04f 0e07 	mov.w	lr, #7
 80041d0:	fa0e fe06 	lsl.w	lr, lr, r6
 80041d4:	40b4      	lsls	r4, r6
 80041d6:	ea25 050e 	bic.w	r5, r5, lr
 80041da:	432c      	orrs	r4, r5
 80041dc:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041e0:	6954      	ldr	r4, [r2, #20]
 80041e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80041e6:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041e8:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041ec:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041ee:	f1bc 0f04 	cmp.w	ip, #4
 80041f2:	d02e      	beq.n	8004252 <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041f4:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 80041f8:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 80043b0 <HAL_ADC_ConfigChannel+0x398>
 80041fc:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8004200:	680f      	ldr	r7, [r1, #0]
 8004202:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004206:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 800420a:	694d      	ldr	r5, [r1, #20]
 800420c:	0076      	lsls	r6, r6, #1
 800420e:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8004212:	40b5      	lsls	r5, r6
 8004214:	ea47 070e 	orr.w	r7, r7, lr
 8004218:	433d      	orrs	r5, r7
 800421a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800421e:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004222:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004224:	698e      	ldr	r6, [r1, #24]
 8004226:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 800422a:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800422e:	4335      	orrs	r5, r6
 8004230:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004234:	690e      	ldr	r6, [r1, #16]
 8004236:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8004238:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 800423c:	2f01      	cmp	r7, #1
 800423e:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004242:	bf08      	it	eq
 8004244:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8004248:	4328      	orrs	r0, r5
 800424a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 800424e:	6808      	ldr	r0, [r1, #0]
}
 8004250:	e70f      	b.n	8004072 <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004252:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004254:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004256:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004258:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800425c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004260:	2d00      	cmp	r5, #0
 8004262:	f040 80a7 	bne.w	80043b4 <HAL_ADC_ConfigChannel+0x39c>
 8004266:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800426a:	42ac      	cmp	r4, r5
 800426c:	f000 8119 	beq.w	80044a2 <HAL_ADC_ConfigChannel+0x48a>
 8004270:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004272:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004274:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004278:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800427c:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8004280:	42ae      	cmp	r6, r5
 8004282:	f000 80fc 	beq.w	800447e <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004286:	68a6      	ldr	r6, [r4, #8]
 8004288:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800428a:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800428e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004292:	42ae      	cmp	r6, r5
 8004294:	f000 80e2 	beq.w	800445c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004298:	68e6      	ldr	r6, [r4, #12]
 800429a:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800429c:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800429e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80042a2:	42b5      	cmp	r5, r6
 80042a4:	f47f aee5 	bne.w	8004072 <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80042ae:	6020      	str	r0, [r4, #0]
 80042b0:	6808      	ldr	r0, [r1, #0]
}
 80042b2:	e6de      	b.n	8004072 <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 80042b4:	2002      	movs	r0, #2
}
 80042b6:	b003      	add	sp, #12
 80042b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042ba:	0e80      	lsrs	r0, r0, #26
 80042bc:	1c44      	adds	r4, r0, #1
 80042be:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c2:	2e09      	cmp	r6, #9
 80042c4:	d850      	bhi.n	8004368 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042c6:	06a5      	lsls	r5, r4, #26
 80042c8:	2401      	movs	r4, #1
 80042ca:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80042ce:	40b4      	lsls	r4, r6
 80042d0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80042d4:	4325      	orrs	r5, r4
 80042d6:	0500      	lsls	r0, r0, #20
 80042d8:	e74d      	b.n	8004176 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80042da:	482b      	ldr	r0, [pc, #172]	; (8004388 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042dc:	4a30      	ldr	r2, [pc, #192]	; (80043a0 <HAL_ADC_ConfigChannel+0x388>)
 80042de:	6881      	ldr	r1, [r0, #8]
 80042e0:	4c30      	ldr	r4, [pc, #192]	; (80043a4 <HAL_ADC_ConfigChannel+0x38c>)
 80042e2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80042e6:	430e      	orrs	r6, r1
 80042e8:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 80042ec:	6086      	str	r6, [r0, #8]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	0992      	lsrs	r2, r2, #6
 80042f2:	fba4 1202 	umull	r1, r2, r4, r2
 80042f6:	0992      	lsrs	r2, r2, #6
 80042f8:	3201      	adds	r2, #1
 80042fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042fe:	0092      	lsls	r2, r2, #2
 8004300:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004302:	9a01      	ldr	r2, [sp, #4]
 8004304:	2a00      	cmp	r2, #0
 8004306:	f43f aee6 	beq.w	80040d6 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 800430a:	9a01      	ldr	r2, [sp, #4]
 800430c:	3a01      	subs	r2, #1
 800430e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004310:	9a01      	ldr	r2, [sp, #4]
 8004312:	2a00      	cmp	r2, #0
 8004314:	d1f9      	bne.n	800430a <HAL_ADC_ConfigChannel+0x2f2>
 8004316:	e6de      	b.n	80040d6 <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004318:	4d23      	ldr	r5, [pc, #140]	; (80043a8 <HAL_ADC_ConfigChannel+0x390>)
 800431a:	42ac      	cmp	r4, r5
 800431c:	f47f aedb 	bne.w	80040d6 <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004320:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004324:	f47f aed7 	bne.w	80040d6 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004328:	4c1b      	ldr	r4, [pc, #108]	; (8004398 <HAL_ADC_ConfigChannel+0x380>)
 800432a:	42a2      	cmp	r2, r4
 800432c:	f43f aed3 	beq.w	80040d6 <HAL_ADC_ConfigChannel+0xbe>
 8004330:	688a      	ldr	r2, [r1, #8]
 8004332:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004336:	4332      	orrs	r2, r6
 8004338:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800433c:	608a      	str	r2, [r1, #8]
}
 800433e:	e6bf      	b.n	80040c0 <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004340:	0df5      	lsrs	r5, r6, #23
 8004342:	f102 0414 	add.w	r4, r2, #20
 8004346:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800434a:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800434e:	592f      	ldr	r7, [r5, r4]
 8004350:	f04f 0c07 	mov.w	ip, #7
 8004354:	fa0c f606 	lsl.w	r6, ip, r6
 8004358:	ea27 0606 	bic.w	r6, r7, r6
 800435c:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800435e:	6954      	ldr	r4, [r2, #20]
 8004360:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004364:	6154      	str	r4, [r2, #20]
}
 8004366:	e73f      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004368:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800436c:	06a5      	lsls	r5, r4, #26
 800436e:	381e      	subs	r0, #30
 8004370:	2401      	movs	r4, #1
 8004372:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004376:	fa04 f606 	lsl.w	r6, r4, r6
 800437a:	0500      	lsls	r0, r0, #20
 800437c:	4335      	orrs	r5, r6
 800437e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004382:	e6f8      	b.n	8004176 <HAL_ADC_ConfigChannel+0x15e>
 8004384:	80080000 	.word	0x80080000
 8004388:	50000300 	.word	0x50000300
 800438c:	c3210000 	.word	0xc3210000
 8004390:	90c00010 	.word	0x90c00010
 8004394:	c7520000 	.word	0xc7520000
 8004398:	50000100 	.word	0x50000100
 800439c:	0007ffff 	.word	0x0007ffff
 80043a0:	20000578 	.word	0x20000578
 80043a4:	053e2d63 	.word	0x053e2d63
 80043a8:	cb840000 	.word	0xcb840000
 80043ac:	407f0000 	.word	0x407f0000
 80043b0:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80043b8:	b11d      	cbz	r5, 80043c2 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 80043ba:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043be:	42ac      	cmp	r4, r5
 80043c0:	d06f      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043c2:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80043c4:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c6:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043ca:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80043ce:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80043d6:	b11d      	cbz	r5, 80043e0 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 80043d8:	fab5 f585 	clz	r5, r5
 80043dc:	42ae      	cmp	r6, r5
 80043de:	d04e      	beq.n	800447e <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043e0:	68a5      	ldr	r5, [r4, #8]
 80043e2:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043e4:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043e8:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80043f0:	b11d      	cbz	r5, 80043fa <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 80043f2:	fab5 f585 	clz	r5, r5
 80043f6:	42ae      	cmp	r6, r5
 80043f8:	d030      	beq.n	800445c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043fa:	68e5      	ldr	r5, [r4, #12]
 80043fc:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043fe:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004400:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004408:	2d00      	cmp	r5, #0
 800440a:	f43f ae32 	beq.w	8004072 <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 800440e:	fab5 f585 	clz	r5, r5
 8004412:	e746      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004418:	2d00      	cmp	r5, #0
 800441a:	d058      	beq.n	80044ce <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 800441c:	fab5 f585 	clz	r5, r5
 8004420:	3501      	adds	r5, #1
 8004422:	06ad      	lsls	r5, r5, #26
 8004424:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800442c:	2c00      	cmp	r4, #0
 800442e:	d04c      	beq.n	80044ca <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8004430:	fab4 f484 	clz	r4, r4
 8004434:	3401      	adds	r4, #1
 8004436:	f004 041f 	and.w	r4, r4, #31
 800443a:	2601      	movs	r6, #1
 800443c:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004440:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004446:	2800      	cmp	r0, #0
 8004448:	d044      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 800444a:	fab0 f480 	clz	r4, r0
 800444e:	3401      	adds	r4, #1
 8004450:	f004 041f 	and.w	r4, r4, #31
 8004454:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004458:	0520      	lsls	r0, r4, #20
 800445a:	e68c      	b.n	8004176 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 800445c:	6838      	ldr	r0, [r7, #0]
 800445e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004462:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004464:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004466:	68e5      	ldr	r5, [r4, #12]
 8004468:	68e6      	ldr	r6, [r4, #12]
 800446a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800446e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004472:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004474:	2d00      	cmp	r5, #0
 8004476:	d1c5      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x3ec>
 8004478:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800447c:	e711      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 800447e:	6838      	ldr	r0, [r7, #0]
 8004480:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004484:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004486:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004488:	68a5      	ldr	r5, [r4, #8]
 800448a:	68a6      	ldr	r6, [r4, #8]
 800448c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004490:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004494:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004498:	2d00      	cmp	r5, #0
 800449a:	d1a7      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x3d4>
 800449c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80044a0:	e6f7      	b.n	8004292 <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 80044a2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80044a4:	4614      	mov	r4, r2
 80044a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80044aa:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044ae:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044b0:	6e55      	ldr	r5, [r2, #100]	; 0x64
 80044b2:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80044b4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044b8:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044bc:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	d186      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x3ba>
 80044c4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80044c8:	e6da      	b.n	8004280 <HAL_ADC_ConfigChannel+0x268>
 80044ca:	2402      	movs	r4, #2
 80044cc:	e7b8      	b.n	8004440 <HAL_ADC_ConfigChannel+0x428>
 80044ce:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80044d2:	e7a9      	b.n	8004428 <HAL_ADC_ConfigChannel+0x410>
 80044d4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80044d8:	e64d      	b.n	8004176 <HAL_ADC_ConfigChannel+0x15e>
 80044da:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80044de:	e62b      	b.n	8004138 <HAL_ADC_ConfigChannel+0x120>
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <HAL_ADC_ConfigChannel+0x4d0>)
 80044e2:	e648      	b.n	8004176 <HAL_ADC_ConfigChannel+0x15e>
 80044e4:	2402      	movs	r4, #2
 80044e6:	e634      	b.n	8004152 <HAL_ADC_ConfigChannel+0x13a>
 80044e8:	fe500000 	.word	0xfe500000

080044ec <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80044ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044f0:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044f4:	6944      	ldr	r4, [r0, #20]
{
 80044f6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80044f8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80044fa:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 80044fc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80044fe:	f000 8187 	beq.w	8004810 <HAL_ADCEx_InjectedConfigChannel+0x324>
 8004502:	2301      	movs	r3, #1
 8004504:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004508:	b1e4      	cbz	r4, 8004544 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800450a:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800450c:	2b01      	cmp	r3, #1
 800450e:	d019      	beq.n	8004544 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004510:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004512:	2c00      	cmp	r4, #0
 8004514:	f040 8126 	bne.w	8004764 <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004518:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800451a:	2a00      	cmp	r2, #0
 800451c:	f000 8248 	beq.w	80049b0 <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004520:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004522:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004526:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004528:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800452a:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800452c:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004530:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004532:	f005 051f 	and.w	r5, r5, #31
 8004536:	f3c2 6484 	ubfx	r4, r2, #26, #5
 800453a:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800453c:	4323      	orrs	r3, r4
 800453e:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004540:	6803      	ldr	r3, [r0, #0]
 8004542:	e005      	b.n	8004550 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004544:	684b      	ldr	r3, [r1, #4]
 8004546:	2b09      	cmp	r3, #9
 8004548:	f000 80f8 	beq.w	800473c <HAL_ADCEx_InjectedConfigChannel+0x250>
 800454c:	680a      	ldr	r2, [r1, #0]
 800454e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004550:	689c      	ldr	r4, [r3, #8]
 8004552:	0724      	lsls	r4, r4, #28
 8004554:	d410      	bmi.n	8004578 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004556:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 800455a:	2c00      	cmp	r4, #0
 800455c:	f040 80e5 	bne.w	800472a <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004560:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8004564:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004568:	68dd      	ldr	r5, [r3, #12]
 800456a:	0524      	lsls	r4, r4, #20
 800456c:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004570:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004574:	432c      	orrs	r4, r5
 8004576:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004578:	689c      	ldr	r4, [r3, #8]
 800457a:	f014 0404 	ands.w	r4, r4, #4
 800457e:	d060      	beq.n	8004642 <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004580:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004582:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004584:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004586:	07ef      	lsls	r7, r5, #31
 8004588:	d414      	bmi.n	80045b4 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800458a:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800458c:	4dbe      	ldr	r5, [pc, #760]	; (8004888 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 800458e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004592:	f8df e320 	ldr.w	lr, [pc, #800]	; 80048b4 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8004596:	f007 0c18 	and.w	ip, r7, #24
 800459a:	fa25 f50c 	lsr.w	r5, r5, ip
 800459e:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80045a2:	4015      	ands	r5, r2
 80045a4:	ea26 060c 	bic.w	r6, r6, ip
 80045a8:	4335      	orrs	r5, r6
 80045aa:	4577      	cmp	r7, lr
 80045ac:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80045b0:	f000 80fd 	beq.w	80047ae <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80045b4:	49b5      	ldr	r1, [pc, #724]	; (800488c <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 80045b6:	420a      	tst	r2, r1
 80045b8:	d019      	beq.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80045ba:	4db5      	ldr	r5, [pc, #724]	; (8004890 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80045bc:	4eb5      	ldr	r6, [pc, #724]	; (8004894 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 80045be:	68a9      	ldr	r1, [r5, #8]
 80045c0:	42b2      	cmp	r2, r6
 80045c2:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 80045c6:	d019      	beq.n	80045fc <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80045c8:	4eb3      	ldr	r6, [pc, #716]	; (8004898 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 80045ca:	42b2      	cmp	r2, r6
 80045cc:	d016      	beq.n	80045fc <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80045ce:	4eb3      	ldr	r6, [pc, #716]	; (800489c <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 80045d0:	42b2      	cmp	r2, r6
 80045d2:	f040 8126 	bne.w	8004822 <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045d6:	01ce      	lsls	r6, r1, #7
 80045d8:	d409      	bmi.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045da:	4ab1      	ldr	r2, [pc, #708]	; (80048a0 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d006      	beq.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80045e0:	68ab      	ldr	r3, [r5, #8]
 80045e2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80045e6:	431f      	orrs	r7, r3
 80045e8:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 80045ec:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045ee:	2300      	movs	r3, #0
 80045f0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80045f4:	4620      	mov	r0, r4
 80045f6:	b002      	add	sp, #8
 80045f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045fc:	020a      	lsls	r2, r1, #8
 80045fe:	d4f6      	bmi.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004604:	d1f3      	bne.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
 8004606:	4aa2      	ldr	r2, [pc, #648]	; (8004890 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004608:	49a6      	ldr	r1, [pc, #664]	; (80048a4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 800460a:	6893      	ldr	r3, [r2, #8]
 800460c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004610:	431f      	orrs	r7, r3
 8004612:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8004616:	6097      	str	r7, [r2, #8]
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	4aa3      	ldr	r2, [pc, #652]	; (80048a8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	099b      	lsrs	r3, r3, #6
 8004624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	3318      	adds	r3, #24
 800462c:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0dc      	beq.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 8004634:	9b01      	ldr	r3, [sp, #4]
 8004636:	3b01      	subs	r3, #1
 8004638:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800463a:	9b01      	ldr	r3, [sp, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f9      	bne.n	8004634 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8004640:	e7d5      	b.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004642:	689d      	ldr	r5, [r3, #8]
 8004644:	f015 0508 	ands.w	r5, r5, #8
 8004648:	d19c      	bne.n	8004584 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800464a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800464c:	2c00      	cmp	r4, #0
 800464e:	f040 809f 	bne.w	8004790 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004652:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004656:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004658:	68dc      	ldr	r4, [r3, #12]
 800465a:	bf0c      	ite	eq
 800465c:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004660:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004664:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004666:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004668:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 800466c:	2e01      	cmp	r6, #1
 800466e:	f000 80ff 	beq.w	8004870 <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004672:	691e      	ldr	r6, [r3, #16]
 8004674:	f026 0602 	bic.w	r6, r6, #2
 8004678:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800467a:	688e      	ldr	r6, [r1, #8]
 800467c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004680:	f000 80e2 	beq.w	8004848 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004684:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8004688:	f00e 0e04 	and.w	lr, lr, #4
 800468c:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004690:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004694:	f85e 700c 	ldr.w	r7, [lr, ip]
 8004698:	f04f 0807 	mov.w	r8, #7
 800469c:	fa08 f802 	lsl.w	r8, r8, r2
 80046a0:	4096      	lsls	r6, r2
 80046a2:	ea27 0208 	bic.w	r2, r7, r8
 80046a6:	4316      	orrs	r6, r2
 80046a8:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046b2:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80046b4:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80046b8:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80046ba:	f1be 0f04 	cmp.w	lr, #4
 80046be:	f000 80fd 	beq.w	80048bc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046c2:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 80046c6:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80048b8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 80046ca:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 80046ce:	ea06 0808 	and.w	r8, r6, r8
 80046d2:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80046d4:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80046d8:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 80046dc:	694e      	ldr	r6, [r1, #20]
 80046de:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80046e2:	fa06 f60c 	lsl.w	r6, r6, ip
 80046e6:	ea47 0708 	orr.w	r7, r7, r8
 80046ea:	433e      	orrs	r6, r7
 80046ec:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80046f0:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046f4:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 80046f8:	698f      	ldr	r7, [r1, #24]
 80046fa:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 80046fe:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004702:	433e      	orrs	r6, r7
 8004704:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004708:	690f      	ldr	r7, [r1, #16]
 800470a:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 800470e:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8004712:	f1bc 0f01 	cmp.w	ip, #1
 8004716:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 800471a:	bf08      	it	eq
 800471c:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004720:	4335      	orrs	r5, r6
 8004722:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8004726:	680a      	ldr	r2, [r1, #0]
}
 8004728:	e72c      	b.n	8004584 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 800472a:	68dc      	ldr	r4, [r3, #12]
 800472c:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004730:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004734:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004738:	60dc      	str	r4, [r3, #12]
 800473a:	e71d      	b.n	8004578 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800473c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800473e:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004740:	2b00      	cmp	r3, #0
 8004742:	d06a      	beq.n	800481a <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004744:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004746:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800474a:	0c55      	lsrs	r5, r2, #17
 800474c:	4323      	orrs	r3, r4
 800474e:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004752:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004754:	6803      	ldr	r3, [r0, #0]
 8004756:	4e55      	ldr	r6, [pc, #340]	; (80048ac <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004758:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800475a:	4034      	ands	r4, r6
 800475c:	432c      	orrs	r4, r5
 800475e:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004760:	6645      	str	r5, [r0, #100]	; 0x64
 8004762:	e6f5      	b.n	8004550 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004764:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004768:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800476a:	f3c2 6584 	ubfx	r5, r2, #26, #5
 800476e:	f006 061f 	and.w	r6, r6, #31
 8004772:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004774:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004776:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004778:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800477c:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800477e:	2c00      	cmp	r4, #0
 8004780:	f47f aee6 	bne.w	8004550 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004784:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004786:	4e49      	ldr	r6, [pc, #292]	; (80048ac <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004788:	4034      	ands	r4, r6
 800478a:	4325      	orrs	r5, r4
 800478c:	64dd      	str	r5, [r3, #76]	; 0x4c
 800478e:	e6df      	b.n	8004550 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004790:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004792:	2c00      	cmp	r4, #0
 8004794:	f43f af5d 	beq.w	8004652 <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004798:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 800479c:	2c01      	cmp	r4, #1
 800479e:	f000 8154 	beq.w	8004a4a <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80047a2:	68dc      	ldr	r4, [r3, #12]
 80047a4:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80047a8:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047aa:	462c      	mov	r4, r5
 80047ac:	e75c      	b.n	8004668 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80047ae:	f1bc 0f00 	cmp.w	ip, #0
 80047b2:	f040 80c7 	bne.w	8004944 <HAL_ADCEx_InjectedConfigChannel+0x458>
 80047b6:	0e92      	lsrs	r2, r2, #26
 80047b8:	1c55      	adds	r5, r2, #1
 80047ba:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047be:	2f09      	cmp	r7, #9
 80047c0:	f240 80f9 	bls.w	80049b6 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80047c4:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80047c8:	06ae      	lsls	r6, r5, #26
 80047ca:	3a1e      	subs	r2, #30
 80047cc:	2501      	movs	r5, #1
 80047ce:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80047d2:	fa05 f707 	lsl.w	r7, r5, r7
 80047d6:	0512      	lsls	r2, r2, #20
 80047d8:	433e      	orrs	r6, r7
 80047da:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047de:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80047e0:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 80047e4:	f00c 0c04 	and.w	ip, ip, #4
 80047e8:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80047ec:	688e      	ldr	r6, [r1, #8]
 80047ee:	f85c 5007 	ldr.w	r5, [ip, r7]
 80047f2:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80047f6:	f04f 0e07 	mov.w	lr, #7
 80047fa:	fa0e fe02 	lsl.w	lr, lr, r2
 80047fe:	ea25 050e 	bic.w	r5, r5, lr
 8004802:	fa06 f202 	lsl.w	r2, r6, r2
 8004806:	432a      	orrs	r2, r5
 8004808:	f84c 2007 	str.w	r2, [ip, r7]
 800480c:	680a      	ldr	r2, [r1, #0]
}
 800480e:	e6d1      	b.n	80045b4 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8004810:	2402      	movs	r4, #2
}
 8004812:	4620      	mov	r0, r4
 8004814:	b002      	add	sp, #8
 8004816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800481a:	0c55      	lsrs	r5, r2, #17
 800481c:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004820:	e798      	b.n	8004754 <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004822:	4e23      	ldr	r6, [pc, #140]	; (80048b0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 8004824:	42b2      	cmp	r2, r6
 8004826:	f47f aee2 	bne.w	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800482a:	0249      	lsls	r1, r1, #9
 800482c:	f53f aedf 	bmi.w	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	f43f aedb 	beq.w	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004838:	68ab      	ldr	r3, [r5, #8]
 800483a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800483e:	431f      	orrs	r7, r3
 8004840:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004844:	60af      	str	r7, [r5, #8]
}
 8004846:	e6d2      	b.n	80045ee <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004848:	0dd7      	lsrs	r7, r2, #23
 800484a:	f007 0704 	and.w	r7, r7, #4
 800484e:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004852:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 8004856:	f04f 0c07 	mov.w	ip, #7
 800485a:	59ba      	ldr	r2, [r7, r6]
 800485c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004860:	ea22 020c 	bic.w	r2, r2, ip
 8004864:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	e721      	b.n	80046b4 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004870:	691f      	ldr	r7, [r3, #16]
 8004872:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004874:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 8004878:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 800487a:	433e      	orrs	r6, r7
 800487c:	ea46 060c 	orr.w	r6, r6, ip
 8004880:	f046 0602 	orr.w	r6, r6, #2
 8004884:	611e      	str	r6, [r3, #16]
 8004886:	e6f8      	b.n	800467a <HAL_ADCEx_InjectedConfigChannel+0x18e>
 8004888:	0007ffff 	.word	0x0007ffff
 800488c:	80080000 	.word	0x80080000
 8004890:	50000300 	.word	0x50000300
 8004894:	c3210000 	.word	0xc3210000
 8004898:	90c00010 	.word	0x90c00010
 800489c:	c7520000 	.word	0xc7520000
 80048a0:	50000100 	.word	0x50000100
 80048a4:	20000578 	.word	0x20000578
 80048a8:	053e2d63 	.word	0x053e2d63
 80048ac:	04104000 	.word	0x04104000
 80048b0:	cb840000 	.word	0xcb840000
 80048b4:	407f0000 	.word	0x407f0000
 80048b8:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80048bc:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048be:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80048c0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80048c2:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048c6:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80048ca:	2e00      	cmp	r6, #0
 80048cc:	d07d      	beq.n	80049ca <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80048d2:	b126      	cbz	r6, 80048de <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 80048d4:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048d8:	42b5      	cmp	r5, r6
 80048da:	f000 80bb 	beq.w	8004a54 <HAL_ADCEx_InjectedConfigChannel+0x568>
 80048de:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80048e0:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048e2:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048e6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80048ea:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80048f2:	b126      	cbz	r6, 80048fe <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 80048f4:	fab6 f686 	clz	r6, r6
 80048f8:	42b7      	cmp	r7, r6
 80048fa:	f000 80c0 	beq.w	8004a7e <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048fe:	68ae      	ldr	r6, [r5, #8]
 8004900:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004902:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004906:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800490e:	b126      	cbz	r6, 800491a <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 8004910:	fab6 f686 	clz	r6, r6
 8004914:	42b7      	cmp	r7, r6
 8004916:	f000 80c7 	beq.w	8004aa8 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800491a:	68ee      	ldr	r6, [r5, #12]
 800491c:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800491e:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004920:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004928:	2e00      	cmp	r6, #0
 800492a:	f43f ae2b 	beq.w	8004584 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 800492e:	fab6 f686 	clz	r6, r6
 8004932:	42be      	cmp	r6, r7
 8004934:	f47f ae26 	bne.w	8004584 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004938:	682a      	ldr	r2, [r5, #0]
 800493a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	680a      	ldr	r2, [r1, #0]
}
 8004942:	e61f      	b.n	8004584 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004948:	2d00      	cmp	r5, #0
 800494a:	d05a      	beq.n	8004a02 <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 800494c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004950:	3501      	adds	r5, #1
 8004952:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004956:	2d09      	cmp	r5, #9
 8004958:	d953      	bls.n	8004a02 <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800495e:	2e00      	cmp	r6, #0
 8004960:	f000 80c2 	beq.w	8004ae8 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 8004964:	fab6 f686 	clz	r6, r6
 8004968:	3601      	adds	r6, #1
 800496a:	06b6      	lsls	r6, r6, #26
 800496c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004974:	2d00      	cmp	r5, #0
 8004976:	f000 80b5 	beq.w	8004ae4 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 800497a:	fab5 f585 	clz	r5, r5
 800497e:	3501      	adds	r5, #1
 8004980:	f005 051f 	and.w	r5, r5, #31
 8004984:	2701      	movs	r7, #1
 8004986:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800498a:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004990:	2a00      	cmp	r2, #0
 8004992:	f000 80a5 	beq.w	8004ae0 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 8004996:	fab2 f582 	clz	r5, r2
 800499a:	3501      	adds	r5, #1
 800499c:	f005 051f 	and.w	r5, r5, #31
 80049a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049a4:	f1a5 021e 	sub.w	r2, r5, #30
 80049a8:	0512      	lsls	r2, r2, #20
 80049aa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80049ae:	e716      	b.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80049b0:	3b01      	subs	r3, #1
 80049b2:	461c      	mov	r4, r3
 80049b4:	e5ba      	b.n	800452c <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80049b6:	06ae      	lsls	r6, r5, #26
 80049b8:	2501      	movs	r5, #1
 80049ba:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80049be:	40bd      	lsls	r5, r7
 80049c0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80049c4:	432e      	orrs	r6, r5
 80049c6:	0512      	lsls	r2, r2, #20
 80049c8:	e709      	b.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80049ca:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049ce:	42b5      	cmp	r5, r6
 80049d0:	d040      	beq.n	8004a54 <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049d2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80049d4:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049d6:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049da:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80049de:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80049e2:	42b7      	cmp	r7, r6
 80049e4:	d04b      	beq.n	8004a7e <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049e6:	68af      	ldr	r7, [r5, #8]
 80049e8:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ea:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049ee:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80049f2:	42b7      	cmp	r7, r6
 80049f4:	d058      	beq.n	8004aa8 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049f6:	68ef      	ldr	r7, [r5, #12]
 80049f8:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049fa:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049fc:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004a00:	e797      	b.n	8004932 <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004a06:	2e00      	cmp	r6, #0
 8004a08:	d064      	beq.n	8004ad4 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8004a0a:	fab6 f686 	clz	r6, r6
 8004a0e:	3601      	adds	r6, #1
 8004a10:	06b6      	lsls	r6, r6, #26
 8004a12:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	d058      	beq.n	8004ad0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 8004a1e:	fab5 f585 	clz	r5, r5
 8004a22:	3501      	adds	r5, #1
 8004a24:	f005 051f 	and.w	r5, r5, #31
 8004a28:	2701      	movs	r7, #1
 8004a2a:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004a2e:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a30:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	d050      	beq.n	8004ada <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8004a38:	fab2 f582 	clz	r5, r2
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	f005 051f 	and.w	r5, r5, #31
 8004a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a46:	052a      	lsls	r2, r5, #20
 8004a48:	e6c9      	b.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a4a:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8004a4c:	f046 0620 	orr.w	r6, r6, #32
 8004a50:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004a52:	e609      	b.n	8004668 <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 8004a54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a56:	461d      	mov	r5, r3
 8004a58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a5c:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a60:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a62:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8004a64:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004a66:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a6a:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a6e:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	f47f af3b 	bne.w	80048ee <HAL_ADCEx_InjectedConfigChannel+0x402>
 8004a78:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004a7c:	e7b1      	b.n	80049e2 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 8004a7e:	f8dc 2000 	ldr.w	r2, [ip]
 8004a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a86:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a8a:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a8c:	68ae      	ldr	r6, [r5, #8]
 8004a8e:	68af      	ldr	r7, [r5, #8]
 8004a90:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a94:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a98:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a9c:	2e00      	cmp	r6, #0
 8004a9e:	f47f af34 	bne.w	800490a <HAL_ADCEx_InjectedConfigChannel+0x41e>
 8004aa2:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004aa6:	e7a4      	b.n	80049f2 <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 8004aa8:	f8dc 2000 	ldr.w	r2, [ip]
 8004aac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ab0:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004ab4:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ab6:	68ee      	ldr	r6, [r5, #12]
 8004ab8:	68ef      	ldr	r7, [r5, #12]
 8004aba:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004abe:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ac2:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004ac4:	2e00      	cmp	r6, #0
 8004ac6:	f47f af2d 	bne.w	8004924 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8004aca:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004ace:	e730      	b.n	8004932 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8004ad0:	2502      	movs	r5, #2
 8004ad2:	e7ac      	b.n	8004a2e <HAL_ADCEx_InjectedConfigChannel+0x542>
 8004ad4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8004ad8:	e79d      	b.n	8004a16 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 8004ada:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004ade:	e67e      	b.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8004ae0:	4a03      	ldr	r2, [pc, #12]	; (8004af0 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 8004ae2:	e67c      	b.n	80047de <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8004ae4:	2502      	movs	r5, #2
 8004ae6:	e750      	b.n	800498a <HAL_ADCEx_InjectedConfigChannel+0x49e>
 8004ae8:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8004aec:	e740      	b.n	8004970 <HAL_ADCEx_InjectedConfigChannel+0x484>
 8004aee:	bf00      	nop
 8004af0:	fe500000 	.word	0xfe500000

08004af4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004af4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004af6:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004afa:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004afc:	2a01      	cmp	r2, #1
{
 8004afe:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004b00:	d04f      	beq.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b02:	6804      	ldr	r4, [r0, #0]
 8004b04:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b06:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004b08:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b0a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b0e:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004b10:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004b14:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b16:	d008      	beq.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b18:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b1e:	f041 0120 	orr.w	r1, r1, #32
 8004b22:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004b24:	b01c      	add	sp, #112	; 0x70
 8004b26:	bcf0      	pop	{r4, r5, r6, r7}
 8004b28:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b2a:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004b2c:	6890      	ldr	r0, [r2, #8]
 8004b2e:	0740      	lsls	r0, r0, #29
 8004b30:	d50b      	bpl.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b32:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b36:	f042 0220 	orr.w	r2, r2, #32
 8004b3a:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004b3c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004b44:	b01c      	add	sp, #112	; 0x70
 8004b46:	bcf0      	pop	{r4, r5, r6, r7}
 8004b48:	4770      	bx	lr
 8004b4a:	68a0      	ldr	r0, [r4, #8]
 8004b4c:	0746      	lsls	r6, r0, #29
 8004b4e:	d4f1      	bmi.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b50:	b1d5      	cbz	r5, 8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b52:	4e1a      	ldr	r6, [pc, #104]	; (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004b54:	684f      	ldr	r7, [r1, #4]
 8004b56:	68b0      	ldr	r0, [r6, #8]
 8004b58:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004b5c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004b60:	4338      	orrs	r0, r7
 8004b62:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8004b66:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b68:	68a4      	ldr	r4, [r4, #8]
 8004b6a:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b6c:	4320      	orrs	r0, r4
 8004b6e:	f010 0001 	ands.w	r0, r0, #1
 8004b72:	d114      	bne.n	8004b9e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8004b74:	68b4      	ldr	r4, [r6, #8]
 8004b76:	688a      	ldr	r2, [r1, #8]
 8004b78:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8004b7c:	4315      	orrs	r5, r2
 8004b7e:	f021 010f 	bic.w	r1, r1, #15
 8004b82:	430d      	orrs	r5, r1
 8004b84:	60b5      	str	r5, [r6, #8]
 8004b86:	e7da      	b.n	8004b3e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b88:	4d0c      	ldr	r5, [pc, #48]	; (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004b8a:	68a9      	ldr	r1, [r5, #8]
 8004b8c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004b90:	60a9      	str	r1, [r5, #8]
 8004b92:	68a1      	ldr	r1, [r4, #8]
 8004b94:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b96:	4308      	orrs	r0, r1
 8004b98:	f010 0001 	ands.w	r0, r0, #1
 8004b9c:	d005      	beq.n	8004baa <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e7cd      	b.n	8004b3e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8004ba2:	2002      	movs	r0, #2
}
 8004ba4:	b01c      	add	sp, #112	; 0x70
 8004ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ba8:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004baa:	68aa      	ldr	r2, [r5, #8]
 8004bac:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004bb0:	f022 020f 	bic.w	r2, r2, #15
 8004bb4:	60aa      	str	r2, [r5, #8]
 8004bb6:	e7c2      	b.n	8004b3e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004bb8:	50000100 	.word	0x50000100
 8004bbc:	50000300 	.word	0x50000300

08004bc0 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004bc0:	b1b0      	cbz	r0, 8004bf0 <HAL_CORDIC_Init+0x30>
{
 8004bc2:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004bc4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004bc8:	4604      	mov	r4, r0
 8004bca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bce:	b153      	cbz	r3, 8004be6 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004bd0:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004bd2:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004bd4:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004bd6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8004bda:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004bde:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004be2:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004be4:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8004be6:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004bea:	f7fe faf5 	bl	80031d8 <HAL_CORDIC_MspInit>
 8004bee:	e7ef      	b.n	8004bd0 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004bf0:	2001      	movs	r0, #1
}
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bf4:	4908      	ldr	r1, [pc, #32]	; (8004c18 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8004bf6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bfa:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bfc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004c00:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c02:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c10:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004c14:	60cb      	str	r3, [r1, #12]
 8004c16:	4770      	bx	lr
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_NVIC_SetPriority+0x68>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c24:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c26:	f1c3 0507 	rsb	r5, r3, #7
 8004c2a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	bf28      	it	cs
 8004c32:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c34:	2c06      	cmp	r4, #6
 8004c36:	d919      	bls.n	8004c6c <HAL_NVIC_SetPriority+0x50>
 8004c38:	3b03      	subs	r3, #3
 8004c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c3e:	409c      	lsls	r4, r3
 8004c40:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	f04f 34ff 	mov.w	r4, #4294967295
 8004c48:	40ac      	lsls	r4, r5
 8004c4a:	ea21 0104 	bic.w	r1, r1, r4
 8004c4e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004c50:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c52:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004c56:	db0c      	blt.n	8004c72 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c60:	0109      	lsls	r1, r1, #4
 8004c62:	b2c9      	uxtb	r1, r1
 8004c64:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c68:	bc30      	pop	{r4, r5}
 8004c6a:	4770      	bx	lr
 8004c6c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	4613      	mov	r3, r2
 8004c70:	e7e8      	b.n	8004c44 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_NVIC_SetPriority+0x6c>)
 8004c74:	f000 000f 	and.w	r0, r0, #15
 8004c78:	0109      	lsls	r1, r1, #4
 8004c7a:	4403      	add	r3, r0
 8004c7c:	b2c9      	uxtb	r1, r1
 8004c7e:	7619      	strb	r1, [r3, #24]
 8004c80:	bc30      	pop	{r4, r5}
 8004c82:	4770      	bx	lr
 8004c84:	e000ed00 	.word	0xe000ed00
 8004c88:	e000ecfc 	.word	0xe000ecfc

08004c8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	db07      	blt.n	8004ca0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <HAL_NVIC_EnableIRQ+0x18>)
 8004c92:	f000 011f 	and.w	r1, r0, #31
 8004c96:	2301      	movs	r3, #1
 8004c98:	0940      	lsrs	r0, r0, #5
 8004c9a:	408b      	lsls	r3, r1
 8004c9c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	e000e100 	.word	0xe000e100

08004ca8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca8:	3801      	subs	r0, #1
 8004caa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004cae:	d20e      	bcs.n	8004cce <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cb2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb4:	4c08      	ldr	r4, [pc, #32]	; (8004cd8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb8:	20f0      	movs	r0, #240	; 0xf0
 8004cba:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cbe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cc0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc4:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8004cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cca:	6019      	str	r1, [r3, #0]
 8004ccc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004cce:	2001      	movs	r0, #1
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	e000e010 	.word	0xe000e010
 8004cd8:	e000ed00 	.word	0xe000ed00

08004cdc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <HAL_SYSTICK_IRQHandler>:
{
 8004ce0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004ce2:	f7ff fffb 	bl	8004cdc <HAL_SYSTICK_Callback>
}
 8004ce6:	bd08      	pop	{r3, pc}

08004ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cec:	680e      	ldr	r6, [r1, #0]
{
 8004cee:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cf0:	2e00      	cmp	r6, #0
 8004cf2:	f000 808b 	beq.w	8004e0c <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cf6:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8004ecc <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 8004cfa:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8004d02:	ea14 0c06 	ands.w	ip, r4, r6
 8004d06:	d07c      	beq.n	8004e02 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d08:	684d      	ldr	r5, [r1, #4]
 8004d0a:	f025 0a10 	bic.w	sl, r5, #16
 8004d0e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004d12:	2a01      	cmp	r2, #1
 8004d14:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d18:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d1c:	d979      	bls.n	8004e12 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8004d1e:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d20:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d22:	fa02 f208 	lsl.w	r2, r2, r8
 8004d26:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d2a:	fa04 f408 	lsl.w	r4, r4, r8
 8004d2e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8004d30:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d32:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8004d34:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d36:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d3a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d3c:	fa02 f208 	lsl.w	r2, r2, r8
 8004d40:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d42:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8004d44:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d46:	d55c      	bpl.n	8004e02 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d48:	4c5a      	ldr	r4, [pc, #360]	; (8004eb4 <HAL_GPIO_Init+0x1cc>)
 8004d4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004d4c:	f042 0201 	orr.w	r2, r2, #1
 8004d50:	6622      	str	r2, [r4, #96]	; 0x60
 8004d52:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004d54:	f023 0403 	bic.w	r4, r3, #3
 8004d58:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004d5c:	f002 0201 	and.w	r2, r2, #1
 8004d60:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8004d64:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d66:	f003 0203 	and.w	r2, r3, #3
 8004d6a:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d6e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d70:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d72:	220f      	movs	r2, #15
 8004d74:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d78:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d7c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d80:	d018      	beq.n	8004db4 <HAL_GPIO_Init+0xcc>
 8004d82:	4a4d      	ldr	r2, [pc, #308]	; (8004eb8 <HAL_GPIO_Init+0x1d0>)
 8004d84:	4290      	cmp	r0, r2
 8004d86:	f000 8084 	beq.w	8004e92 <HAL_GPIO_Init+0x1aa>
 8004d8a:	4a4c      	ldr	r2, [pc, #304]	; (8004ebc <HAL_GPIO_Init+0x1d4>)
 8004d8c:	4290      	cmp	r0, r2
 8004d8e:	f000 8085 	beq.w	8004e9c <HAL_GPIO_Init+0x1b4>
 8004d92:	4a4b      	ldr	r2, [pc, #300]	; (8004ec0 <HAL_GPIO_Init+0x1d8>)
 8004d94:	4290      	cmp	r0, r2
 8004d96:	d076      	beq.n	8004e86 <HAL_GPIO_Init+0x19e>
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <HAL_GPIO_Init+0x1dc>)
 8004d9a:	4290      	cmp	r0, r2
 8004d9c:	f000 8084 	beq.w	8004ea8 <HAL_GPIO_Init+0x1c0>
 8004da0:	4a49      	ldr	r2, [pc, #292]	; (8004ec8 <HAL_GPIO_Init+0x1e0>)
 8004da2:	4290      	cmp	r0, r2
 8004da4:	bf0c      	ite	eq
 8004da6:	f04f 0805 	moveq.w	r8, #5
 8004daa:	f04f 0806 	movne.w	r8, #6
 8004dae:	fa08 f209 	lsl.w	r2, r8, r9
 8004db2:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004db4:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 8004db6:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8004dba:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dbe:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8004dc0:	bf54      	ite	pl
 8004dc2:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004dc4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8004dc8:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8004dcc:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dd0:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8004dd2:	bf54      	ite	pl
 8004dd4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004dd6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 8004dda:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dde:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004de2:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8004de4:	bf54      	ite	pl
 8004de6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004de8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8004dec:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8004df0:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004df4:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8004df6:	bf54      	ite	pl
 8004df8:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8004dfa:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 8004dfe:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8004e02:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e04:	fa36 f203 	lsrs.w	r2, r6, r3
 8004e08:	f47f af78 	bne.w	8004cfc <HAL_GPIO_Init+0x14>
  }
}
 8004e0c:	b003      	add	sp, #12
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004e12:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e14:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e18:	fa02 f208 	lsl.w	r2, r2, r8
 8004e1c:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e20:	68cf      	ldr	r7, [r1, #12]
 8004e22:	fa07 f708 	lsl.w	r7, r7, r8
 8004e26:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8004e2a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004e2c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e2e:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e32:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e36:	465c      	mov	r4, fp
 8004e38:	409c      	lsls	r4, r3
 8004e3a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8004e3c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8004e3e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e40:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e44:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e48:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e4c:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e50:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8004e54:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e56:	f47f af6d 	bne.w	8004d34 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8004e5a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004e5e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e62:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004e66:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	f04f 0a0f 	mov.w	sl, #15
 8004e70:	fa0a fb02 	lsl.w	fp, sl, r2
 8004e74:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e78:	690c      	ldr	r4, [r1, #16]
 8004e7a:	4094      	lsls	r4, r2
 8004e7c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004e80:	f8c9 4020 	str.w	r4, [r9, #32]
 8004e84:	e756      	b.n	8004d34 <HAL_GPIO_Init+0x4c>
 8004e86:	f04f 0803 	mov.w	r8, #3
 8004e8a:	fa08 f209 	lsl.w	r2, r8, r9
 8004e8e:	4317      	orrs	r7, r2
 8004e90:	e790      	b.n	8004db4 <HAL_GPIO_Init+0xcc>
 8004e92:	2201      	movs	r2, #1
 8004e94:	fa02 f209 	lsl.w	r2, r2, r9
 8004e98:	4317      	orrs	r7, r2
 8004e9a:	e78b      	b.n	8004db4 <HAL_GPIO_Init+0xcc>
 8004e9c:	f04f 0802 	mov.w	r8, #2
 8004ea0:	fa08 f209 	lsl.w	r2, r8, r9
 8004ea4:	4317      	orrs	r7, r2
 8004ea6:	e785      	b.n	8004db4 <HAL_GPIO_Init+0xcc>
 8004ea8:	f04f 0804 	mov.w	r8, #4
 8004eac:	fa08 f209 	lsl.w	r2, r8, r9
 8004eb0:	4317      	orrs	r7, r2
 8004eb2:	e77f      	b.n	8004db4 <HAL_GPIO_Init+0xcc>
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	48000400 	.word	0x48000400
 8004ebc:	48000800 	.word	0x48000800
 8004ec0:	48000c00 	.word	0x48000c00
 8004ec4:	48001000 	.word	0x48001000
 8004ec8:	48001400 	.word	0x48001400
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed0:	b10a      	cbz	r2, 8004ed6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ed2:	6181      	str	r1, [r0, #24]
 8004ed4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ed6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop

08004edc <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004edc:	4a3b      	ldr	r2, [pc, #236]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8004ede:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ee0:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ee2:	b968      	cbnz	r0, 8004f00 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d014      	beq.n	8004f18 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004ef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004efe:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f00:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004f04:	d02f      	beq.n	8004f66 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f0e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004f10:	2000      	movs	r0, #0
}
 8004f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f16:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f18:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004f1e:	482d      	ldr	r0, [pc, #180]	; (8004fd4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f20:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004f24:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f28:	6811      	ldr	r1, [r2, #0]
 8004f2a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004f2e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004f32:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f34:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f36:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f38:	2332      	movs	r3, #50	; 0x32
 8004f3a:	fb03 f304 	mul.w	r3, r3, r4
 8004f3e:	fba0 0303 	umull	r0, r3, r0, r3
 8004f42:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f44:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f46:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f4a:	d506      	bpl.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004f4c:	e000      	b.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x74>
 8004f4e:	b123      	cbz	r3, 8004f5a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004f50:	6951      	ldr	r1, [r2, #20]
 8004f52:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004f54:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f58:	d4f9      	bmi.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	055c      	lsls	r4, r3, #21
 8004f60:	d5d6      	bpl.n	8004f10 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004f62:	2003      	movs	r0, #3
 8004f64:	e7c9      	b.n	8004efa <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6e:	d009      	beq.n	8004f84 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8004f74:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004f7c:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004f82:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f84:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f88:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004f8a:	4812      	ldr	r0, [pc, #72]	; (8004fd4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f8c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004f90:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f94:	6811      	ldr	r1, [r2, #0]
 8004f96:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004f9a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004f9e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fa0:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fa4:	2332      	movs	r3, #50	; 0x32
 8004fa6:	fb03 f304 	mul.w	r3, r3, r4
 8004faa:	fba0 0303 	umull	r0, r3, r0, r3
 8004fae:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb0:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fb2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb6:	d5d0      	bpl.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004fb8:	e001      	b.n	8004fbe <HAL_PWREx_ControlVoltageScaling+0xe2>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0cd      	beq.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004fbe:	6951      	ldr	r1, [r2, #20]
 8004fc0:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004fc2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc6:	d5c8      	bpl.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004fc8:	e7f7      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0xde>
 8004fca:	bf00      	nop
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	20000578 	.word	0x20000578
 8004fd4:	431bde83 	.word	0x431bde83

08004fd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fd8:	4a02      	ldr	r2, [pc, #8]	; (8004fe4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004fda:	6893      	ldr	r3, [r2, #8]
 8004fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe0:	6093      	str	r3, [r2, #8]
}
 8004fe2:	4770      	bx	lr
 8004fe4:	40007000 	.word	0x40007000

08004fe8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	f000 81c3 	beq.w	8005374 <HAL_RCC_OscConfig+0x38c>
{
 8004fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff2:	6803      	ldr	r3, [r0, #0]
 8004ff4:	07d9      	lsls	r1, r3, #31
{
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffa:	d52d      	bpl.n	8005058 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffc:	49b5      	ldr	r1, [pc, #724]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 8004ffe:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005000:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005002:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005006:	2a0c      	cmp	r2, #12
 8005008:	f000 810a 	beq.w	8005220 <HAL_RCC_OscConfig+0x238>
 800500c:	2a08      	cmp	r2, #8
 800500e:	f000 810c 	beq.w	800522a <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005018:	f000 8133 	beq.w	8005282 <HAL_RCC_OscConfig+0x29a>
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005020:	f000 819b 	beq.w	800535a <HAL_RCC_OscConfig+0x372>
 8005024:	4dab      	ldr	r5, [pc, #684]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 8005026:	682a      	ldr	r2, [r5, #0]
 8005028:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800502c:	602a      	str	r2, [r5, #0]
 800502e:	682a      	ldr	r2, [r5, #0]
 8005030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005034:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005036:	2b00      	cmp	r3, #0
 8005038:	f040 8128 	bne.w	800528c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fe fee0 	bl	8003e00 <HAL_GetTick>
 8005040:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005042:	e005      	b.n	8005050 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005044:	f7fe fedc 	bl	8003e00 <HAL_GetTick>
 8005048:	1b80      	subs	r0, r0, r6
 800504a:	2864      	cmp	r0, #100	; 0x64
 800504c:	f200 813b 	bhi.w	80052c6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	039f      	lsls	r7, r3, #14
 8005054:	d4f6      	bmi.n	8005044 <HAL_RCC_OscConfig+0x5c>
 8005056:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005058:	079e      	lsls	r6, r3, #30
 800505a:	d528      	bpl.n	80050ae <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505c:	4a9d      	ldr	r2, [pc, #628]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 800505e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005060:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005062:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005066:	2b0c      	cmp	r3, #12
 8005068:	f000 80ec 	beq.w	8005244 <HAL_RCC_OscConfig+0x25c>
 800506c:	2b04      	cmp	r3, #4
 800506e:	f000 80ee 	beq.w	800524e <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005072:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005074:	4d97      	ldr	r5, [pc, #604]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8116 	beq.w	80052a8 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005082:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fe febc 	bl	8003e00 <HAL_GetTick>
 8005088:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508a:	e005      	b.n	8005098 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508c:	f7fe feb8 	bl	8003e00 <HAL_GetTick>
 8005090:	1b80      	subs	r0, r0, r6
 8005092:	2802      	cmp	r0, #2
 8005094:	f200 8117 	bhi.w	80052c6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	0558      	lsls	r0, r3, #21
 800509c:	d5f6      	bpl.n	800508c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509e:	686b      	ldr	r3, [r5, #4]
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80050aa:	606b      	str	r3, [r5, #4]
 80050ac:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ae:	071a      	lsls	r2, r3, #28
 80050b0:	d519      	bpl.n	80050e6 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b2:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b4:	4d87      	ldr	r5, [pc, #540]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 809e 	beq.w	80051f8 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80050bc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7fe fe9a 	bl	8003e00 <HAL_GetTick>
 80050cc:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ce:	e005      	b.n	80050dc <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d0:	f7fe fe96 	bl	8003e00 <HAL_GetTick>
 80050d4:	1b80      	subs	r0, r0, r6
 80050d6:	2802      	cmp	r0, #2
 80050d8:	f200 80f5 	bhi.w	80052c6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050dc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80050e0:	079f      	lsls	r7, r3, #30
 80050e2:	d5f5      	bpl.n	80050d0 <HAL_RCC_OscConfig+0xe8>
 80050e4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e6:	0759      	lsls	r1, r3, #29
 80050e8:	d541      	bpl.n	800516e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ea:	4b7a      	ldr	r3, [pc, #488]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 80050ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050ee:	00d2      	lsls	r2, r2, #3
 80050f0:	f100 80ed 	bmi.w	80052ce <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050fa:	659a      	str	r2, [r3, #88]	; 0x58
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005106:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005108:	4e73      	ldr	r6, [pc, #460]	; (80052d8 <HAL_RCC_OscConfig+0x2f0>)
 800510a:	6833      	ldr	r3, [r6, #0]
 800510c:	05df      	lsls	r7, r3, #23
 800510e:	f140 8113 	bpl.w	8005338 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	2b01      	cmp	r3, #1
 8005116:	f000 80e3 	beq.w	80052e0 <HAL_RCC_OscConfig+0x2f8>
 800511a:	2b05      	cmp	r3, #5
 800511c:	f000 8169 	beq.w	80053f2 <HAL_RCC_OscConfig+0x40a>
 8005120:	4e6c      	ldr	r6, [pc, #432]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 8005122:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005126:	f022 0201 	bic.w	r2, r2, #1
 800512a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800512e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 80d7 	bne.w	80052ee <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005140:	f7fe fe5e 	bl	8003e00 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005144:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005148:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800514a:	e005      	b.n	8005158 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514c:	f7fe fe58 	bl	8003e00 <HAL_GetTick>
 8005150:	1bc0      	subs	r0, r0, r7
 8005152:	4540      	cmp	r0, r8
 8005154:	f200 80b7 	bhi.w	80052c6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005158:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800515c:	079a      	lsls	r2, r3, #30
 800515e:	d4f5      	bmi.n	800514c <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005160:	b125      	cbz	r5, 800516c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005162:	4a5c      	ldr	r2, [pc, #368]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 8005164:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516a:	6593      	str	r3, [r2, #88]	; 0x58
 800516c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800516e:	069b      	lsls	r3, r3, #26
 8005170:	d518      	bpl.n	80051a4 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005172:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005174:	4d57      	ldr	r5, [pc, #348]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80ca 	beq.w	8005310 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 800517c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fe fe3a 	bl	8003e00 <HAL_GetTick>
 800518c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800518e:	e005      	b.n	800519c <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005190:	f7fe fe36 	bl	8003e00 <HAL_GetTick>
 8005194:	1b80      	subs	r0, r0, r6
 8005196:	2802      	cmp	r0, #2
 8005198:	f200 8095 	bhi.w	80052c6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800519c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80051a0:	079f      	lsls	r7, r3, #30
 80051a2:	d5f5      	bpl.n	8005190 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051a4:	69e0      	ldr	r0, [r4, #28]
 80051a6:	b318      	cbz	r0, 80051f0 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a8:	4d4a      	ldr	r5, [pc, #296]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 80051aa:	68ab      	ldr	r3, [r5, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	f000 812c 	beq.w	800540e <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051b8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80051ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051be:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051c0:	f000 80da 	beq.w	8005378 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051c4:	68eb      	ldr	r3, [r5, #12]
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051cc:	68eb      	ldr	r3, [r5, #12]
 80051ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d6:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fe fe12 	bl	8003e00 <HAL_GetTick>
 80051dc:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051de:	e004      	b.n	80051ea <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fe fe0e 	bl	8003e00 <HAL_GetTick>
 80051e4:	1b00      	subs	r0, r0, r4
 80051e6:	2802      	cmp	r0, #2
 80051e8:	d86d      	bhi.n	80052c6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	d4f7      	bmi.n	80051e0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80051f0:	2000      	movs	r0, #0
}
 80051f2:	b002      	add	sp, #8
 80051f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80051f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005204:	f7fe fdfc 	bl	8003e00 <HAL_GetTick>
 8005208:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800520a:	e004      	b.n	8005216 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fe fdf8 	bl	8003e00 <HAL_GetTick>
 8005210:	1b80      	subs	r0, r0, r6
 8005212:	2802      	cmp	r0, #2
 8005214:	d857      	bhi.n	80052c6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005216:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800521a:	0798      	lsls	r0, r3, #30
 800521c:	d4f6      	bmi.n	800520c <HAL_RCC_OscConfig+0x224>
 800521e:	e761      	b.n	80050e4 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005220:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005224:	2903      	cmp	r1, #3
 8005226:	f47f aef4 	bne.w	8005012 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522a:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	0392      	lsls	r2, r2, #14
 8005230:	f57f af12 	bpl.w	8005058 <HAL_RCC_OscConfig+0x70>
 8005234:	6862      	ldr	r2, [r4, #4]
 8005236:	2a00      	cmp	r2, #0
 8005238:	f47f af0e 	bne.w	8005058 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 800523c:	2001      	movs	r0, #1
}
 800523e:	b002      	add	sp, #8
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005244:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005248:	2a02      	cmp	r2, #2
 800524a:	f47f af12 	bne.w	8005072 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800524e:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	055d      	lsls	r5, r3, #21
 8005254:	d502      	bpl.n	800525c <HAL_RCC_OscConfig+0x274>
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ef      	beq.n	800523c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525c:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 800525e:	6920      	ldr	r0, [r4, #16]
 8005260:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005262:	491e      	ldr	r1, [pc, #120]	; (80052dc <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005264:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005268:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800526c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800526e:	6808      	ldr	r0, [r1, #0]
 8005270:	f7fe fd84 	bl	8003d7c <HAL_InitTick>
 8005274:	2800      	cmp	r0, #0
 8005276:	d1e1      	bne.n	800523c <HAL_RCC_OscConfig+0x254>
 8005278:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	071a      	lsls	r2, r3, #28
 800527c:	f57f af33 	bpl.w	80050e6 <HAL_RCC_OscConfig+0xfe>
 8005280:	e717      	b.n	80050b2 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005282:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
 8005284:	6813      	ldr	r3, [r2, #0]
 8005286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800528c:	f7fe fdb8 	bl	8003e00 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005290:	4e10      	ldr	r6, [pc, #64]	; (80052d4 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8005292:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005294:	e004      	b.n	80052a0 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005296:	f7fe fdb3 	bl	8003e00 <HAL_GetTick>
 800529a:	1b40      	subs	r0, r0, r5
 800529c:	2864      	cmp	r0, #100	; 0x64
 800529e:	d812      	bhi.n	80052c6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a0:	6833      	ldr	r3, [r6, #0]
 80052a2:	039b      	lsls	r3, r3, #14
 80052a4:	d5f7      	bpl.n	8005296 <HAL_RCC_OscConfig+0x2ae>
 80052a6:	e6d6      	b.n	8005056 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80052b0:	f7fe fda6 	bl	8003e00 <HAL_GetTick>
 80052b4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	0559      	lsls	r1, r3, #21
 80052ba:	d5dd      	bpl.n	8005278 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052bc:	f7fe fda0 	bl	8003e00 <HAL_GetTick>
 80052c0:	1b80      	subs	r0, r0, r6
 80052c2:	2802      	cmp	r0, #2
 80052c4:	d9f7      	bls.n	80052b6 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 80052c6:	2003      	movs	r0, #3
}
 80052c8:	b002      	add	sp, #8
 80052ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80052ce:	2500      	movs	r5, #0
 80052d0:	e71a      	b.n	8005108 <HAL_RCC_OscConfig+0x120>
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40007000 	.word	0x40007000
 80052dc:	20000580 	.word	0x20000580
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e0:	4a65      	ldr	r2, [pc, #404]	; (8005478 <HAL_RCC_OscConfig+0x490>)
 80052e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80052ee:	f7fe fd87 	bl	8003e00 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f2:	4f61      	ldr	r7, [pc, #388]	; (8005478 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 80052f4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fa:	e004      	b.n	8005306 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fe fd80 	bl	8003e00 <HAL_GetTick>
 8005300:	1b80      	subs	r0, r0, r6
 8005302:	4540      	cmp	r0, r8
 8005304:	d8df      	bhi.n	80052c6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800530a:	0799      	lsls	r1, r3, #30
 800530c:	d5f6      	bpl.n	80052fc <HAL_RCC_OscConfig+0x314>
 800530e:	e727      	b.n	8005160 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8005310:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800531c:	f7fe fd70 	bl	8003e00 <HAL_GetTick>
 8005320:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005322:	e004      	b.n	800532e <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005324:	f7fe fd6c 	bl	8003e00 <HAL_GetTick>
 8005328:	1b80      	subs	r0, r0, r6
 800532a:	2802      	cmp	r0, #2
 800532c:	d8cb      	bhi.n	80052c6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800532e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005332:	0798      	lsls	r0, r3, #30
 8005334:	d4f6      	bmi.n	8005324 <HAL_RCC_OscConfig+0x33c>
 8005336:	e735      	b.n	80051a4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005340:	f7fe fd5e 	bl	8003e00 <HAL_GetTick>
 8005344:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	05d8      	lsls	r0, r3, #23
 800534a:	f53f aee2 	bmi.w	8005112 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534e:	f7fe fd57 	bl	8003e00 <HAL_GetTick>
 8005352:	1bc0      	subs	r0, r0, r7
 8005354:	2802      	cmp	r0, #2
 8005356:	d9f6      	bls.n	8005346 <HAL_RCC_OscConfig+0x35e>
 8005358:	e7b5      	b.n	80052c6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800535a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800535e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005370:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005372:	e78b      	b.n	800528c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005374:	2001      	movs	r0, #1
}
 8005376:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005378:	f7fe fd42 	bl	8003e00 <HAL_GetTick>
 800537c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800537e:	e004      	b.n	800538a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005380:	f7fe fd3e 	bl	8003e00 <HAL_GetTick>
 8005384:	1b80      	subs	r0, r0, r6
 8005386:	2802      	cmp	r0, #2
 8005388:	d89d      	bhi.n	80052c6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	0199      	lsls	r1, r3, #6
 800538e:	d4f7      	bmi.n	8005380 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005390:	68e9      	ldr	r1, [r5, #12]
 8005392:	4b3a      	ldr	r3, [pc, #232]	; (800547c <HAL_RCC_OscConfig+0x494>)
 8005394:	6a22      	ldr	r2, [r4, #32]
 8005396:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800539a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800539c:	400b      	ands	r3, r1
 800539e:	4313      	orrs	r3, r2
 80053a0:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80053a4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80053a8:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80053ac:	3801      	subs	r0, #1
 80053ae:	0849      	lsrs	r1, r1, #1
 80053b0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80053b4:	3901      	subs	r1, #1
 80053b6:	0852      	lsrs	r2, r2, #1
 80053b8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80053bc:	3a01      	subs	r2, #1
 80053be:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80053c2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80053c4:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c6:	4e2c      	ldr	r6, [pc, #176]	; (8005478 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 80053c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053cc:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053ce:	68eb      	ldr	r3, [r5, #12]
 80053d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053d4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80053d6:	f7fe fd13 	bl	8003e00 <HAL_GetTick>
 80053da:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053dc:	e005      	b.n	80053ea <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053de:	f7fe fd0f 	bl	8003e00 <HAL_GetTick>
 80053e2:	1b00      	subs	r0, r0, r4
 80053e4:	2802      	cmp	r0, #2
 80053e6:	f63f af6e 	bhi.w	80052c6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ea:	6833      	ldr	r3, [r6, #0]
 80053ec:	019a      	lsls	r2, r3, #6
 80053ee:	d5f6      	bpl.n	80053de <HAL_RCC_OscConfig+0x3f6>
 80053f0:	e6fe      	b.n	80051f0 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <HAL_RCC_OscConfig+0x490>)
 80053f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80053f8:	f042 0204 	orr.w	r2, r2, #4
 80053fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005400:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800540c:	e76f      	b.n	80052ee <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800540e:	2801      	cmp	r0, #1
 8005410:	f43f aeef 	beq.w	80051f2 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005414:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	6a22      	ldr	r2, [r4, #32]
 8005418:	f003 0103 	and.w	r1, r3, #3
 800541c:	4291      	cmp	r1, r2
 800541e:	f47f af0d 	bne.w	800523c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005422:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005424:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005428:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800542e:	f47f af05 	bne.w	800523c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005432:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005438:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800543c:	f47f aefe 	bne.w	800523c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005440:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005442:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005446:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800544a:	f47f aef7 	bne.w	800523c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800544e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005450:	0852      	lsrs	r2, r2, #1
 8005452:	3a01      	subs	r2, #1
 8005454:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005458:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800545c:	f47f aeee 	bne.w	800523c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005460:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005462:	0852      	lsrs	r2, r2, #1
 8005464:	3a01      	subs	r2, #1
 8005466:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800546a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800546e:	bf14      	ite	ne
 8005470:	2001      	movne	r0, #1
 8005472:	2000      	moveq	r0, #0
 8005474:	e6bd      	b.n	80051f2 <HAL_RCC_OscConfig+0x20a>
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000
 800547c:	019f800c 	.word	0x019f800c

08005480 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x54>)
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	f002 020c 	and.w	r2, r2, #12
 8005488:	2a04      	cmp	r2, #4
 800548a:	d021      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	f002 020c 	and.w	r2, r2, #12
 8005492:	2a08      	cmp	r2, #8
 8005494:	d01c      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	f002 020c 	and.w	r2, r2, #12
 800549c:	2a0c      	cmp	r2, #12
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80054a0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80054a2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054a4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054a6:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054a8:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054aa:	f3c0 1003 	ubfx	r0, r0, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054ae:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054b2:	1c42      	adds	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054b4:	4808      	ldr	r0, [pc, #32]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x58>)
 80054b6:	fbb0 f0f2 	udiv	r0, r0, r2
 80054ba:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80054c6:	3301      	adds	r3, #1
 80054c8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80054ca:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80054ce:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80054d0:	4801      	ldr	r0, [pc, #4]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x58>)
 80054d2:	4770      	bx	lr
 80054d4:	40021000 	.word	0x40021000
 80054d8:	00f42400 	.word	0x00f42400

080054dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80054dc:	2800      	cmp	r0, #0
 80054de:	f000 80e9 	beq.w	80056b4 <HAL_RCC_ClockConfig+0x1d8>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e2:	4a7c      	ldr	r2, [pc, #496]	; (80056d4 <HAL_RCC_ClockConfig+0x1f8>)
{
 80054e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e8:	6813      	ldr	r3, [r2, #0]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	428b      	cmp	r3, r1
 80054f0:	460d      	mov	r5, r1
 80054f2:	4604      	mov	r4, r0
 80054f4:	d20c      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	f023 030f 	bic.w	r3, r3, #15
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005500:	6813      	ldr	r3, [r2, #0]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	428b      	cmp	r3, r1
 8005508:	d002      	beq.n	8005510 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800550a:	2001      	movs	r0, #1
}
 800550c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	07de      	lsls	r6, r3, #31
 8005514:	d563      	bpl.n	80055de <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005516:	6862      	ldr	r2, [r4, #4]
 8005518:	2a03      	cmp	r2, #3
 800551a:	f000 809a 	beq.w	8005652 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800551e:	4b6e      	ldr	r3, [pc, #440]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005520:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005522:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005524:	f000 8091 	beq.w	800564a <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005528:	055b      	lsls	r3, r3, #21
 800552a:	d5ee      	bpl.n	800550a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800552c:	f7ff ffa8 	bl	8005480 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005530:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <HAL_RCC_ClockConfig+0x200>)
 8005532:	4298      	cmp	r0, r3
 8005534:	f200 80c0 	bhi.w	80056b8 <HAL_RCC_ClockConfig+0x1dc>
 8005538:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800553a:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800553e:	4e66      	ldr	r6, [pc, #408]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 8005540:	68b3      	ldr	r3, [r6, #8]
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	431a      	orrs	r2, r3
 8005548:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 800554a:	f7fe fc59 	bl	8003e00 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005552:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005554:	e004      	b.n	8005560 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005556:	f7fe fc53 	bl	8003e00 <HAL_GetTick>
 800555a:	1bc0      	subs	r0, r0, r7
 800555c:	4540      	cmp	r0, r8
 800555e:	d871      	bhi.n	8005644 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005560:	68b3      	ldr	r3, [r6, #8]
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800556c:	d1f3      	bne.n	8005556 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	079f      	lsls	r7, r3, #30
 8005572:	d436      	bmi.n	80055e2 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8005574:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8005578:	d103      	bne.n	8005582 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800557a:	68b3      	ldr	r3, [r6, #8]
 800557c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005580:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005582:	4e54      	ldr	r6, [pc, #336]	; (80056d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005584:	6833      	ldr	r3, [r6, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	42ab      	cmp	r3, r5
 800558c:	d846      	bhi.n	800561c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	075a      	lsls	r2, r3, #29
 8005592:	d506      	bpl.n	80055a2 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005594:	4950      	ldr	r1, [pc, #320]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 8005596:	68e0      	ldr	r0, [r4, #12]
 8005598:	688a      	ldr	r2, [r1, #8]
 800559a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800559e:	4302      	orrs	r2, r0
 80055a0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a2:	071b      	lsls	r3, r3, #28
 80055a4:	d507      	bpl.n	80055b6 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055a6:	4a4c      	ldr	r2, [pc, #304]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 80055a8:	6921      	ldr	r1, [r4, #16]
 80055aa:	6893      	ldr	r3, [r2, #8]
 80055ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80055b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80055b4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055b6:	f7ff ff63 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 80055ba:	4a47      	ldr	r2, [pc, #284]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 80055bc:	4c48      	ldr	r4, [pc, #288]	; (80056e0 <HAL_RCC_ClockConfig+0x204>)
 80055be:	6892      	ldr	r2, [r2, #8]
 80055c0:	4948      	ldr	r1, [pc, #288]	; (80056e4 <HAL_RCC_ClockConfig+0x208>)
 80055c2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80055c6:	4603      	mov	r3, r0
 80055c8:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80055ca:	4847      	ldr	r0, [pc, #284]	; (80056e8 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055cc:	f002 021f 	and.w	r2, r2, #31
 80055d0:	40d3      	lsrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80055d4:	6800      	ldr	r0, [r0, #0]
}
 80055d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80055da:	f7fe bbcf 	b.w	8003d7c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055de:	0798      	lsls	r0, r3, #30
 80055e0:	d5cf      	bpl.n	8005582 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e2:	0758      	lsls	r0, r3, #29
 80055e4:	d504      	bpl.n	80055f0 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055e6:	493c      	ldr	r1, [pc, #240]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 80055e8:	688a      	ldr	r2, [r1, #8]
 80055ea:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80055ee:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f0:	0719      	lsls	r1, r3, #28
 80055f2:	d506      	bpl.n	8005602 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055f4:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 80055f6:	6893      	ldr	r3, [r2, #8]
 80055f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005600:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005602:	4a35      	ldr	r2, [pc, #212]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 8005604:	68a1      	ldr	r1, [r4, #8]
 8005606:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005608:	4e32      	ldr	r6, [pc, #200]	; (80056d4 <HAL_RCC_ClockConfig+0x1f8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800560a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560e:	430b      	orrs	r3, r1
 8005610:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005612:	6833      	ldr	r3, [r6, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	42ab      	cmp	r3, r5
 800561a:	d9b8      	bls.n	800558e <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561c:	6833      	ldr	r3, [r6, #0]
 800561e:	f023 030f 	bic.w	r3, r3, #15
 8005622:	432b      	orrs	r3, r5
 8005624:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005626:	f7fe fbeb 	bl	8003e00 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800562e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005630:	6833      	ldr	r3, [r6, #0]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	42ab      	cmp	r3, r5
 8005638:	d0a9      	beq.n	800558e <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563a:	f7fe fbe1 	bl	8003e00 <HAL_GetTick>
 800563e:	1bc0      	subs	r0, r0, r7
 8005640:	4540      	cmp	r0, r8
 8005642:	d9f5      	bls.n	8005630 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8005644:	2003      	movs	r0, #3
}
 8005646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800564a:	039a      	lsls	r2, r3, #14
 800564c:	f53f af6e 	bmi.w	800552c <HAL_RCC_ClockConfig+0x50>
 8005650:	e75b      	b.n	800550a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005652:	4821      	ldr	r0, [pc, #132]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 8005654:	6801      	ldr	r1, [r0, #0]
 8005656:	0189      	lsls	r1, r1, #6
 8005658:	f57f af57 	bpl.w	800550a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800565c:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800565e:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005660:	68c0      	ldr	r0, [r0, #12]
      if(pllfreq > 80000000U)
 8005662:	4f1e      	ldr	r7, [pc, #120]	; (80056dc <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005664:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8005668:	1c4e      	adds	r6, r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800566a:	4920      	ldr	r1, [pc, #128]	; (80056ec <HAL_RCC_ClockConfig+0x210>)
 800566c:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005670:	4e19      	ldr	r6, [pc, #100]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005672:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005676:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800567a:	68f0      	ldr	r0, [r6, #12]
 800567c:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005680:	3001      	adds	r0, #1
 8005682:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8005684:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005688:	42b9      	cmp	r1, r7
 800568a:	d920      	bls.n	80056ce <HAL_RCC_ClockConfig+0x1f2>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800568c:	68b1      	ldr	r1, [r6, #8]
 800568e:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x1c4>
 8005694:	f013 0902 	ands.w	r9, r3, #2
 8005698:	f43f af51 	beq.w	800553e <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800569c:	68a3      	ldr	r3, [r4, #8]
 800569e:	b9b3      	cbnz	r3, 80056ce <HAL_RCC_ClockConfig+0x1f2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056a0:	490d      	ldr	r1, [pc, #52]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 80056a2:	688b      	ldr	r3, [r1, #8]
 80056a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ac:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056ae:	f04f 0980 	mov.w	r9, #128	; 0x80
 80056b2:	e744      	b.n	800553e <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 80056b4:	2001      	movs	r0, #1
}
 80056b6:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056b8:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <HAL_RCC_ClockConfig+0x1fc>)
 80056ba:	6893      	ldr	r3, [r2, #8]
 80056bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056c6:	6862      	ldr	r2, [r4, #4]
 80056c8:	f04f 0980 	mov.w	r9, #128	; 0x80
 80056cc:	e737      	b.n	800553e <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056ce:	f04f 0900 	mov.w	r9, #0
 80056d2:	e734      	b.n	800553e <HAL_RCC_ClockConfig+0x62>
 80056d4:	40022000 	.word	0x40022000
 80056d8:	40021000 	.word	0x40021000
 80056dc:	04c4b400 	.word	0x04c4b400
 80056e0:	0800914c 	.word	0x0800914c
 80056e4:	20000578 	.word	0x20000578
 80056e8:	20000580 	.word	0x20000580
 80056ec:	00f42400 	.word	0x00f42400

080056f0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80056f0:	4b01      	ldr	r3, [pc, #4]	; (80056f8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000578 	.word	0x20000578

080056fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <HAL_RCC_GetPCLK1Freq+0x18>)
 80056fe:	4a06      	ldr	r2, [pc, #24]	; (8005718 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005700:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005702:	4906      	ldr	r1, [pc, #24]	; (800571c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005704:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005708:	6808      	ldr	r0, [r1, #0]
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	f003 031f 	and.w	r3, r3, #31
}
 8005710:	40d8      	lsrs	r0, r3
 8005712:	4770      	bx	lr
 8005714:	40021000 	.word	0x40021000
 8005718:	0800915c 	.word	0x0800915c
 800571c:	20000578 	.word	0x20000578

08005720 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005722:	4a06      	ldr	r2, [pc, #24]	; (800573c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005724:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005726:	4906      	ldr	r1, [pc, #24]	; (8005740 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005728:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800572c:	6808      	ldr	r0, [r1, #0]
 800572e:	5cd3      	ldrb	r3, [r2, r3]
 8005730:	f003 031f 	and.w	r3, r3, #31
}
 8005734:	40d8      	lsrs	r0, r3
 8005736:	4770      	bx	lr
 8005738:	40021000 	.word	0x40021000
 800573c:	0800915c 	.word	0x0800915c
 8005740:	20000578 	.word	0x20000578

08005744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005748:	6803      	ldr	r3, [r0, #0]
{
 800574a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800574c:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005750:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005752:	d056      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005754:	4b9f      	ldr	r3, [pc, #636]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005756:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005758:	00d5      	lsls	r5, r2, #3
 800575a:	f140 810c 	bpl.w	8005976 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 800575e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005760:	4d9d      	ldr	r5, [pc, #628]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800576a:	f7fe fb49 	bl	8003e00 <HAL_GetTick>
 800576e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005770:	e005      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005772:	f7fe fb45 	bl	8003e00 <HAL_GetTick>
 8005776:	1b83      	subs	r3, r0, r6
 8005778:	2b02      	cmp	r3, #2
 800577a:	f200 8107 	bhi.w	800598c <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	05d8      	lsls	r0, r3, #23
 8005782:	d5f6      	bpl.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005784:	4d93      	ldr	r5, [pc, #588]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005786:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800578a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800578e:	d027      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005790:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005792:	429a      	cmp	r2, r3
 8005794:	d025      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005796:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800579a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800579e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057a6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057aa:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057b2:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80057b8:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057bc:	f140 8108 	bpl.w	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fe fb1e 	bl	8003e00 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c4:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80057c8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ca:	e005      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057cc:	f7fe fb18 	bl	8003e00 <HAL_GetTick>
 80057d0:	1b80      	subs	r0, r0, r6
 80057d2:	4540      	cmp	r0, r8
 80057d4:	f200 80da 	bhi.w	800598c <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80057dc:	079b      	lsls	r3, r3, #30
 80057de:	d5f5      	bpl.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x88>
 80057e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e2:	497c      	ldr	r1, [pc, #496]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80057e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f2:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f4:	b127      	cbz	r7, 8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f6:	4a77      	ldr	r2, [pc, #476]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80057fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005800:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005802:	07de      	lsls	r6, r3, #31
 8005804:	d508      	bpl.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005806:	4973      	ldr	r1, [pc, #460]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005808:	6865      	ldr	r5, [r4, #4]
 800580a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800580e:	f022 0203 	bic.w	r2, r2, #3
 8005812:	432a      	orrs	r2, r5
 8005814:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005818:	079d      	lsls	r5, r3, #30
 800581a:	d508      	bpl.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800581c:	496d      	ldr	r1, [pc, #436]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800581e:	68a5      	ldr	r5, [r4, #8]
 8005820:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005824:	f022 020c 	bic.w	r2, r2, #12
 8005828:	432a      	orrs	r2, r5
 800582a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800582e:	0759      	lsls	r1, r3, #29
 8005830:	d508      	bpl.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005832:	4968      	ldr	r1, [pc, #416]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005834:	68e5      	ldr	r5, [r4, #12]
 8005836:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800583a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800583e:	432a      	orrs	r2, r5
 8005840:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005844:	071a      	lsls	r2, r3, #28
 8005846:	d508      	bpl.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005848:	4962      	ldr	r1, [pc, #392]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800584a:	6925      	ldr	r5, [r4, #16]
 800584c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005850:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005854:	432a      	orrs	r2, r5
 8005856:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800585a:	069f      	lsls	r7, r3, #26
 800585c:	d508      	bpl.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800585e:	495d      	ldr	r1, [pc, #372]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005860:	6965      	ldr	r5, [r4, #20]
 8005862:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005866:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800586a:	432a      	orrs	r2, r5
 800586c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005870:	065e      	lsls	r6, r3, #25
 8005872:	d508      	bpl.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005874:	4957      	ldr	r1, [pc, #348]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005876:	69a5      	ldr	r5, [r4, #24]
 8005878:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800587c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005880:	432a      	orrs	r2, r5
 8005882:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005886:	061d      	lsls	r5, r3, #24
 8005888:	d508      	bpl.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800588a:	4952      	ldr	r1, [pc, #328]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800588c:	69e5      	ldr	r5, [r4, #28]
 800588e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005892:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005896:	432a      	orrs	r2, r5
 8005898:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800589c:	05d9      	lsls	r1, r3, #23
 800589e:	d508      	bpl.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058a0:	494c      	ldr	r1, [pc, #304]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058a2:	6a25      	ldr	r5, [r4, #32]
 80058a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80058ac:	432a      	orrs	r2, r5
 80058ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058b2:	059a      	lsls	r2, r3, #22
 80058b4:	d508      	bpl.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058b6:	4947      	ldr	r1, [pc, #284]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80058ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058be:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80058c2:	432a      	orrs	r2, r5
 80058c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058c8:	055f      	lsls	r7, r3, #21
 80058ca:	d50b      	bpl.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058cc:	4941      	ldr	r1, [pc, #260]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80058d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058d4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80058d8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058da:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058e2:	d055      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058e4:	051e      	lsls	r6, r3, #20
 80058e6:	d50b      	bpl.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058e8:	493a      	ldr	r1, [pc, #232]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058ea:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80058ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058f0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80058f4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058f6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058fe:	d04c      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005900:	04dd      	lsls	r5, r3, #19
 8005902:	d50b      	bpl.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005904:	4933      	ldr	r1, [pc, #204]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005906:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005908:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800590c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005910:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005912:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005916:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800591a:	d043      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800591c:	0499      	lsls	r1, r3, #18
 800591e:	d50b      	bpl.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005920:	492c      	ldr	r1, [pc, #176]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005922:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005924:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005928:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800592c:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800592e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005932:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005936:	d03a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005938:	045a      	lsls	r2, r3, #17
 800593a:	d50b      	bpl.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800593c:	4925      	ldr	r1, [pc, #148]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800593e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005940:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005944:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005948:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800594a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005952:	d031      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005954:	041b      	lsls	r3, r3, #16
 8005956:	d50b      	bpl.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005958:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800595a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800595c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005960:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005964:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005966:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800596a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800596e:	d028      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8005970:	b002      	add	sp, #8
 8005972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005976:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800597c:	659a      	str	r2, [r3, #88]	; 0x58
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005988:	2701      	movs	r7, #1
 800598a:	e6e9      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 800598c:	2003      	movs	r0, #3
 800598e:	e731      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005990:	68ca      	ldr	r2, [r1, #12]
 8005992:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005996:	60ca      	str	r2, [r1, #12]
 8005998:	e7a4      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800599a:	68ca      	ldr	r2, [r1, #12]
 800599c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059a0:	60ca      	str	r2, [r1, #12]
 80059a2:	e7ad      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a4:	68ca      	ldr	r2, [r1, #12]
 80059a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059aa:	60ca      	str	r2, [r1, #12]
 80059ac:	e7b6      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ae:	68ca      	ldr	r2, [r1, #12]
 80059b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059b4:	60ca      	str	r2, [r1, #12]
 80059b6:	e7bf      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b8:	68ca      	ldr	r2, [r1, #12]
 80059ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059be:	60ca      	str	r2, [r1, #12]
 80059c0:	e7c8      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059c2:	68d3      	ldr	r3, [r2, #12]
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c8:	60d3      	str	r3, [r2, #12]
}
 80059ca:	b002      	add	sp, #8
 80059cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d0:	4613      	mov	r3, r2
 80059d2:	e706      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40007000 	.word	0x40007000

080059dc <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80059dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059de:	b083      	sub	sp, #12
 80059e0:	460c      	mov	r4, r1
 80059e2:	4617      	mov	r7, r2
 80059e4:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059e6:	f7fe fa0b 	bl	8003e00 <HAL_GetTick>
 80059ea:	4427      	add	r7, r4
 80059ec:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 80059ee:	f7fe fa07 	bl	8003e00 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059f2:	4b2e      	ldr	r3, [pc, #184]	; (8005aac <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80059fe:	0d1b      	lsrs	r3, r3, #20
 8005a00:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8005a04:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a06:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a08:	682a      	ldr	r2, [r5, #0]
 8005a0a:	1c61      	adds	r1, r4, #1
 8005a0c:	6893      	ldr	r3, [r2, #8]
 8005a0e:	d10d      	bne.n	8005a2c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8005a10:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8005a14:	d007      	beq.n	8005a26 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005a16:	7b13      	ldrb	r3, [r2, #12]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005a1c:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a1e:	6893      	ldr	r3, [r2, #8]
 8005a20:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8005a24:	d1f7      	bne.n	8005a16 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8005a26:	2000      	movs	r0, #0
}
 8005a28:	b003      	add	sp, #12
 8005a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8005a2c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8005a30:	d0f9      	beq.n	8005a26 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005a32:	7b13      	ldrb	r3, [r2, #12]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8005a38:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a3a:	f7fe f9e1 	bl	8003e00 <HAL_GetTick>
 8005a3e:	1bc0      	subs	r0, r0, r7
 8005a40:	42b0      	cmp	r0, r6
 8005a42:	d208      	bcs.n	8005a56 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8005a44:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005a46:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005a48:	2a00      	cmp	r2, #0
      count--;
 8005a4a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005a4e:	bf08      	it	eq
 8005a50:	2600      	moveq	r6, #0
      count--;
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	e7d8      	b.n	8005a08 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a56:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a5a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a64:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a66:	d014      	beq.n	8005a92 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005a6a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005a6e:	d007      	beq.n	8005a80 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 8005a70:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005a72:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005a74:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005a78:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	e7d3      	b.n	8005a28 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e7ee      	b.n	8005a70 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a92:	68aa      	ldr	r2, [r5, #8]
 8005a94:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005a98:	d002      	beq.n	8005aa0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a9a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005a9e:	d1e3      	bne.n	8005a68 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e7de      	b.n	8005a68 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 8005aaa:	bf00      	nop
 8005aac:	20000578 	.word	0x20000578

08005ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	eb01 0802 	add.w	r8, r1, r2
 8005aba:	460d      	mov	r5, r1
 8005abc:	4616      	mov	r6, r2
 8005abe:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ac0:	f7fe f99e 	bl	8003e00 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ac4:	4f46      	ldr	r7, [pc, #280]	; (8005be0 <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ac6:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005aca:	f7fe f999 	bl	8003e00 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ad4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005ad8:	0d1b      	lsrs	r3, r3, #20
 8005ada:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8005ade:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ae0:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ae2:	1c68      	adds	r0, r5, #1
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	d11f      	bne.n	8005b28 <SPI_EndRxTxTransaction+0x78>
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005aee:	d1fb      	bne.n	8005ae8 <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005af0:	f7fe f986 	bl	8003e00 <HAL_GetTick>
 8005af4:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005af8:	f7fe f982 	bl	8003e00 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005b02:	fb08 f303 	mul.w	r3, r8, r3
 8005b06:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 8005b08:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b0a:	1c69      	adds	r1, r5, #1
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	d11f      	bne.n	8005b50 <SPI_EndRxTxTransaction+0xa0>
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	0612      	lsls	r2, r2, #24
 8005b14:	d4fc      	bmi.n	8005b10 <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b16:	4632      	mov	r2, r6
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f7ff ff5e 	bl	80059dc <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8005b20:	bb40      	cbnz	r0, 8005b74 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005b22:	b002      	add	sp, #8
 8005b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8005b2e:	d0df      	beq.n	8005af0 <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b30:	f7fe f966 	bl	8003e00 <HAL_GetTick>
 8005b34:	eba0 000a 	sub.w	r0, r0, sl
 8005b38:	4548      	cmp	r0, r9
 8005b3a:	d221      	bcs.n	8005b80 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8005b3c:	9a00      	ldr	r2, [sp, #0]
      count--;
 8005b3e:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 8005b40:	2a00      	cmp	r2, #0
      count--;
 8005b42:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005b46:	bf08      	it	eq
 8005b48:	f04f 0900 	moveq.w	r9, #0
      count--;
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	e7c8      	b.n	8005ae2 <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	061b      	lsls	r3, r3, #24
 8005b54:	d5df      	bpl.n	8005b16 <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b56:	f7fe f953 	bl	8003e00 <HAL_GetTick>
 8005b5a:	1bc3      	subs	r3, r0, r7
 8005b5c:	4543      	cmp	r3, r8
 8005b5e:	d20f      	bcs.n	8005b80 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8005b60:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005b62:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005b64:	2a00      	cmp	r2, #0
      count--;
 8005b66:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005b6a:	bf08      	it	eq
 8005b6c:	f04f 0800 	moveq.w	r8, #0
      count--;
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	e7ca      	b.n	8005b0a <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b76:	f043 0320 	orr.w	r3, r3, #32
 8005b7a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	e7d0      	b.n	8005b22 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b80:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b84:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b86:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b8e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b90:	d019      	beq.n	8005bc6 <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005b94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005b98:	d107      	bne.n	8005baa <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8005bb2:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb4:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8005bb8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bba:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8005bbc:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8005bc0:	b002      	add	sp, #8
 8005bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc6:	68a2      	ldr	r2, [r4, #8]
 8005bc8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005bcc:	d002      	beq.n	8005bd4 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005bd2:	d1de      	bne.n	8005b92 <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e7d9      	b.n	8005b92 <SPI_EndRxTxTransaction+0xe2>
 8005bde:	bf00      	nop
 8005be0:	20000578 	.word	0x20000578

08005be4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d07f      	beq.n	8005ce8 <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005be8:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bf2:	f1bc 0f00 	cmp.w	ip, #0
 8005bf6:	d05c      	beq.n	8005cb2 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bf8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bfe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c02:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c04:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c08:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d05e      	beq.n	8005ccc <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 8005c0e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c10:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c12:	2302      	movs	r3, #2
 8005c14:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005c18:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c1a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c22:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c24:	d94c      	bls.n	8005cc0 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c26:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8005c2a:	d15f      	bne.n	8005cec <HAL_SPI_Init+0x108>
 8005c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c2e:	2700      	movs	r7, #0
 8005c30:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c34:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8005c38:	6925      	ldr	r5, [r4, #16]
 8005c3a:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8005c3e:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8005c42:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005c46:	4333      	orrs	r3, r6
 8005c48:	f005 0502 	and.w	r5, r5, #2
 8005c4c:	432b      	orrs	r3, r5
 8005c4e:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c50:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c54:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c58:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c5a:	432b      	orrs	r3, r5
 8005c5c:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c60:	f002 0208 	and.w	r2, r2, #8
 8005c64:	ea42 0208 	orr.w	r2, r2, r8
 8005c68:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c6c:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c70:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c74:	ea43 030e 	orr.w	r3, r3, lr
 8005c78:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c7c:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c80:	4333      	orrs	r3, r6
 8005c82:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c86:	f00c 0c10 	and.w	ip, ip, #16
 8005c8a:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c8e:	432b      	orrs	r3, r5
 8005c90:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c92:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c96:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c98:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c9a:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c9c:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8005ca2:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ca4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ca6:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ca8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 8005cac:	4610      	mov	r0, r2
}
 8005cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb2:	6843      	ldr	r3, [r0, #4]
 8005cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb8:	d0a1      	beq.n	8005bfe <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cba:	f8c0 c01c 	str.w	ip, [r0, #28]
 8005cbe:	e79e      	b.n	8005bfe <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cc0:	d00c      	beq.n	8005cdc <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cc2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	62a0      	str	r0, [r4, #40]	; 0x28
 8005cca:	e7b3      	b.n	8005c34 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 8005ccc:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7fd fa99 	bl	8003208 <HAL_SPI_MspInit>
 8005cd6:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8005cda:	e798      	b.n	8005c0e <HAL_SPI_Init+0x2a>
 8005cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cde:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8005ce2:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8005ce6:	e7a5      	b.n	8005c34 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8005ce8:	2001      	movs	r0, #1
}
 8005cea:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cec:	2700      	movs	r7, #0
 8005cee:	e7ea      	b.n	8005cc6 <HAL_SPI_Init+0xe2>

08005cf0 <HAL_SPI_TransmitReceive>:
{
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005cf6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8005cfa:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8005cfc:	2801      	cmp	r0, #1
 8005cfe:	f000 809d 	beq.w	8005e3c <HAL_SPI_TransmitReceive+0x14c>
 8005d02:	4698      	mov	r8, r3
 8005d04:	2301      	movs	r3, #1
 8005d06:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005d0a:	468a      	mov	sl, r1
 8005d0c:	4691      	mov	r9, r2
 8005d0e:	f7fe f877 	bl	8003e00 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005d12:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8005d16:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d18:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 8005d1a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8005d1c:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d1e:	d010      	beq.n	8005d42 <HAL_SPI_TransmitReceive+0x52>
 8005d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d24:	d008      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8005d26:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005d28:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005d2a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005d2c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d30:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d38:	68a2      	ldr	r2, [r4, #8]
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d1f3      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x36>
 8005d3e:	2904      	cmp	r1, #4
 8005d40:	d1f1      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d42:	f1ba 0f00 	cmp.w	sl, #0
 8005d46:	d07c      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x152>
 8005d48:	f1b9 0f00 	cmp.w	r9, #0
 8005d4c:	d079      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x152>
 8005d4e:	f1b8 0f00 	cmp.w	r8, #0
 8005d52:	d076      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d54:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d58:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d5c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d5e:	bf1c      	itt	ne
 8005d60:	2205      	movne	r2, #5
 8005d62:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d66:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 8005d68:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6c:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d6e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d72:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d74:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8005d76:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8005d7a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d7e:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d82:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d86:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 8005d88:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d8c:	d85b      	bhi.n	8005e46 <HAL_SPI_TransmitReceive+0x156>
 8005d8e:	f1b8 0f01 	cmp.w	r8, #1
 8005d92:	f240 80ea 	bls.w	8005f6a <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d96:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8005d9a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d9c:	6811      	ldr	r1, [r2, #0]
 8005d9e:	0649      	lsls	r1, r1, #25
 8005da0:	f140 80ea 	bpl.w	8005f78 <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da4:	b96b      	cbnz	r3, 8005dc2 <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 8005da6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	f240 8120 	bls.w	8005ff0 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db0:	4651      	mov	r1, sl
 8005db2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005db6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8005db8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dba:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dbc:	3b02      	subs	r3, #2
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005dc2:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	b92b      	cbnz	r3, 8005dd6 <HAL_SPI_TransmitReceive+0xe6>
 8005dca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8084 	beq.w	8005ede <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dd6:	6822      	ldr	r2, [r4, #0]
 8005dd8:	6893      	ldr	r3, [r2, #8]
 8005dda:	0799      	lsls	r1, r3, #30
 8005ddc:	d505      	bpl.n	8005dea <HAL_SPI_TransmitReceive+0xfa>
 8005dde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	b113      	cbz	r3, 8005dea <HAL_SPI_TransmitReceive+0xfa>
 8005de4:	2f00      	cmp	r7, #0
 8005de6:	f040 80e1 	bne.w	8005fac <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dea:	6893      	ldr	r3, [r2, #8]
 8005dec:	f013 0301 	ands.w	r3, r3, #1
 8005df0:	d01b      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0x13a>
 8005df2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005df6:	b289      	uxth	r1, r1
 8005df8:	b1b9      	cbz	r1, 8005e2a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 8005dfa:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005dfe:	b289      	uxth	r1, r1
 8005e00:	2901      	cmp	r1, #1
 8005e02:	f240 80c5 	bls.w	8005f90 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e06:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005e08:	68d1      	ldr	r1, [r2, #12]
 8005e0a:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 8005e0e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e12:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e14:	3902      	subs	r1, #2
 8005e16:	b289      	uxth	r1, r1
 8005e18:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e1c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005e20:	b289      	uxth	r1, r1
 8005e22:	2901      	cmp	r1, #1
 8005e24:	f240 80d1 	bls.w	8005fca <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 8005e28:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e2a:	f7fd ffe9 	bl	8003e00 <HAL_GetTick>
 8005e2e:	1b40      	subs	r0, r0, r5
 8005e30:	42b0      	cmp	r0, r6
 8005e32:	d3c7      	bcc.n	8005dc4 <HAL_SPI_TransmitReceive+0xd4>
 8005e34:	1c73      	adds	r3, r6, #1
 8005e36:	d0c5      	beq.n	8005dc4 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 8005e38:	2003      	movs	r0, #3
 8005e3a:	e775      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8005e3c:	2002      	movs	r0, #2
}
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8005e42:	2001      	movs	r0, #1
 8005e44:	e770      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e46:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8005e4a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	0648      	lsls	r0, r1, #25
 8005e50:	d403      	bmi.n	8005e5a <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8005e52:	6811      	ldr	r1, [r2, #0]
 8005e54:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005e58:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 8081 	bne.w	8005f62 <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e60:	4651      	mov	r1, sl
 8005e62:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005e66:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8005e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6a:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005e72:	1c72      	adds	r2, r6, #1
{
 8005e74:	f04f 0701 	mov.w	r7, #1
 8005e78:	d028      	beq.n	8005ecc <HAL_SPI_TransmitReceive+0x1dc>
 8005e7a:	e06d      	b.n	8005f58 <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	6893      	ldr	r3, [r2, #8]
 8005e80:	079b      	lsls	r3, r3, #30
 8005e82:	d50d      	bpl.n	8005ea0 <HAL_SPI_TransmitReceive+0x1b0>
 8005e84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	b153      	cbz	r3, 8005ea0 <HAL_SPI_TransmitReceive+0x1b0>
 8005e8a:	b14f      	cbz	r7, 8005ea0 <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e8e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005e92:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005e94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e96:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005e9e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ea0:	6893      	ldr	r3, [r2, #8]
 8005ea2:	f013 0301 	ands.w	r3, r3, #1
 8005ea6:	d00f      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x1d8>
 8005ea8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005eac:	b289      	uxth	r1, r1
 8005eae:	b159      	cbz	r1, 8005ec8 <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eb0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005eb2:	68d2      	ldr	r2, [r2, #12]
 8005eb4:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8005eb8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ebc:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005ebe:	3a01      	subs	r2, #1
 8005ec0:	b292      	uxth	r2, r2
        txallowed = 1U;
 8005ec2:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8005ec4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ec8:	f7fd ff9a 	bl	8003e00 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ecc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1d3      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x18c>
 8005ed4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ce      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7ff fde4 	bl	8005ab0 <SPI_EndRxTxTransaction>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	f43f af1d 	beq.w	8005d28 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eee:	2320      	movs	r3, #32
 8005ef0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	e718      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ee      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f00:	6822      	ldr	r2, [r4, #0]
 8005f02:	6893      	ldr	r3, [r2, #8]
 8005f04:	0798      	lsls	r0, r3, #30
 8005f06:	d50d      	bpl.n	8005f24 <HAL_SPI_TransmitReceive+0x234>
 8005f08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	b153      	cbz	r3, 8005f24 <HAL_SPI_TransmitReceive+0x234>
 8005f0e:	b14f      	cbz	r7, 8005f24 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f12:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005f16:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005f18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005f22:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f24:	6893      	ldr	r3, [r2, #8]
 8005f26:	f013 0301 	ands.w	r3, r3, #1
 8005f2a:	d00f      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x25c>
 8005f2c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005f30:	b289      	uxth	r1, r1
 8005f32:	b159      	cbz	r1, 8005f4c <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f36:	68d2      	ldr	r2, [r2, #12]
 8005f38:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8005f3c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f40:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005f42:	3a01      	subs	r2, #1
 8005f44:	b292      	uxth	r2, r2
        txallowed = 1U;
 8005f46:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8005f48:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f4c:	f7fd ff58 	bl	8003e00 <HAL_GetTick>
 8005f50:	1b40      	subs	r0, r0, r5
 8005f52:	42b0      	cmp	r0, r6
 8005f54:	f4bf af70 	bcs.w	8005e38 <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1cf      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x210>
 8005f60:	e7c9      	b.n	8005ef6 <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f62:	f1b8 0f01 	cmp.w	r8, #1
 8005f66:	d184      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x182>
 8005f68:	e77a      	b.n	8005e60 <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f6a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8005f6e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f70:	6811      	ldr	r1, [r2, #0]
 8005f72:	0649      	lsls	r1, r1, #25
 8005f74:	f53f af17 	bmi.w	8005da6 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8005f78:	6811      	ldr	r1, [r2, #0]
 8005f7a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005f7e:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f43f af10 	beq.w	8005da6 <HAL_SPI_TransmitReceive+0xb6>
 8005f86:	f1b8 0f01 	cmp.w	r8, #1
 8005f8a:	f47f af1a 	bne.w	8005dc2 <HAL_SPI_TransmitReceive+0xd2>
 8005f8e:	e70a      	b.n	8005da6 <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f92:	7b12      	ldrb	r2, [r2, #12]
 8005f94:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8005f96:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8005f9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005f9c:	3a01      	subs	r2, #1
 8005f9e:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8005fa0:	3101      	adds	r1, #1
        txallowed = 1U;
 8005fa2:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 8005fa4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8005fa8:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005faa:	e73e      	b.n	8005e2a <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 8005fac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d910      	bls.n	8005fd6 <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fb6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005fba:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005fbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fbe:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fc0:	3b02      	subs	r3, #2
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005fc6:	2700      	movs	r7, #0
 8005fc8:	e70f      	b.n	8005dea <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fca:	6851      	ldr	r1, [r2, #4]
 8005fcc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 8005fd0:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fd2:	6051      	str	r1, [r2, #4]
 8005fd4:	e729      	b.n	8005e2a <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005fdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005fde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fe0:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8005fe6:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8005fe8:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8005fea:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8005fec:	2700      	movs	r7, #0
 8005fee:	e6fc      	b.n	8005dea <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff4:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8005ff6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8005ff8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005ffe:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8006000:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8006002:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006004:	e6dd      	b.n	8005dc2 <HAL_SPI_TransmitReceive+0xd2>
 8006006:	bf00      	nop

08006008 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006008:	6a03      	ldr	r3, [r0, #32]
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	6203      	str	r3, [r0, #32]
{
 8006010:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006014:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006016:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006018:	4f18      	ldr	r7, [pc, #96]	; (800607c <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 800601a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800601c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800601e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8006022:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006026:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800602a:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 800602c:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8006030:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006034:	d00e      	beq.n	8006054 <TIM_OC1_SetConfig+0x4c>
 8006036:	4c12      	ldr	r4, [pc, #72]	; (8006080 <TIM_OC1_SetConfig+0x78>)
 8006038:	42a0      	cmp	r0, r4
 800603a:	d00b      	beq.n	8006054 <TIM_OC1_SetConfig+0x4c>
 800603c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006040:	42a0      	cmp	r0, r4
 8006042:	d007      	beq.n	8006054 <TIM_OC1_SetConfig+0x4c>
 8006044:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006048:	42a0      	cmp	r0, r4
 800604a:	d003      	beq.n	8006054 <TIM_OC1_SetConfig+0x4c>
 800604c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006050:	42a0      	cmp	r0, r4
 8006052:	d10b      	bne.n	800606c <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006054:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006056:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800605a:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800605c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006060:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006064:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006066:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800606a:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800606c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800606e:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006070:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006072:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8006074:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006076:	6203      	str	r3, [r0, #32]
}
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40013400 	.word	0x40013400

08006084 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006084:	6a03      	ldr	r3, [r0, #32]
 8006086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800608a:	6203      	str	r3, [r0, #32]
{
 800608c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006092:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006094:	4f19      	ldr	r7, [pc, #100]	; (80060fc <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006096:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8006098:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800609a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800609e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060a6:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060a8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80060ac:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060b0:	d00f      	beq.n	80060d2 <TIM_OC3_SetConfig+0x4e>
 80060b2:	4c13      	ldr	r4, [pc, #76]	; (8006100 <TIM_OC3_SetConfig+0x7c>)
 80060b4:	42a0      	cmp	r0, r4
 80060b6:	d00c      	beq.n	80060d2 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80060bc:	42a0      	cmp	r0, r4
 80060be:	d00f      	beq.n	80060e0 <TIM_OC3_SetConfig+0x5c>
 80060c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d00b      	beq.n	80060e0 <TIM_OC3_SetConfig+0x5c>
 80060c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d10e      	bne.n	80060ee <TIM_OC3_SetConfig+0x6a>
 80060d0:	e006      	b.n	80060e0 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060d2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80060d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060d8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80060dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060e0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060e4:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060e8:	432c      	orrs	r4, r5
 80060ea:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ee:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80060f0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80060f2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80060f4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80060f6:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80060f8:	6203      	str	r3, [r0, #32]
}
 80060fa:	4770      	bx	lr
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40013400 	.word	0x40013400

08006104 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006104:	6a03      	ldr	r3, [r0, #32]
 8006106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800610a:	6203      	str	r3, [r0, #32]
{
 800610c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006110:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006114:	4f19      	ldr	r7, [pc, #100]	; (800617c <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006116:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006118:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800611a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800611e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006122:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006126:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006128:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800612c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006130:	d00f      	beq.n	8006152 <TIM_OC4_SetConfig+0x4e>
 8006132:	4c13      	ldr	r4, [pc, #76]	; (8006180 <TIM_OC4_SetConfig+0x7c>)
 8006134:	42a0      	cmp	r0, r4
 8006136:	d00c      	beq.n	8006152 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006138:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800613c:	42a0      	cmp	r0, r4
 800613e:	d00f      	beq.n	8006160 <TIM_OC4_SetConfig+0x5c>
 8006140:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006144:	42a0      	cmp	r0, r4
 8006146:	d00b      	beq.n	8006160 <TIM_OC4_SetConfig+0x5c>
 8006148:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800614c:	42a0      	cmp	r0, r4
 800614e:	d10e      	bne.n	800616e <TIM_OC4_SetConfig+0x6a>
 8006150:	e006      	b.n	8006160 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006152:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006158:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800615c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006160:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006164:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006168:	432c      	orrs	r4, r5
 800616a:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800616e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006170:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006172:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006174:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8006176:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006178:	6203      	str	r3, [r0, #32]
}
 800617a:	4770      	bx	lr
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40013400 	.word	0x40013400

08006184 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006184:	2800      	cmp	r0, #0
 8006186:	d07d      	beq.n	8006284 <HAL_TIM_Base_Init+0x100>
{
 8006188:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800618a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800618e:	4604      	mov	r4, r0
 8006190:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006194:	2b00      	cmp	r3, #0
 8006196:	d06d      	beq.n	8006274 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006198:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800619a:	4a3b      	ldr	r2, [pc, #236]	; (8006288 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	2302      	movs	r3, #2
 800619e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a2:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80061a4:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a6:	d051      	beq.n	800624c <HAL_TIM_Base_Init+0xc8>
 80061a8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80061ac:	d021      	beq.n	80061f2 <HAL_TIM_Base_Init+0x6e>
 80061ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80061b2:	4291      	cmp	r1, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_TIM_Base_Init+0x6e>
 80061b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ba:	4291      	cmp	r1, r2
 80061bc:	d019      	beq.n	80061f2 <HAL_TIM_Base_Init+0x6e>
 80061be:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80061c2:	4291      	cmp	r1, r2
 80061c4:	d042      	beq.n	800624c <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80061ca:	4291      	cmp	r1, r2
 80061cc:	d057      	beq.n	800627e <HAL_TIM_Base_Init+0xfa>
 80061ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061d2:	4291      	cmp	r1, r2
 80061d4:	d053      	beq.n	800627e <HAL_TIM_Base_Init+0xfa>
 80061d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061da:	4291      	cmp	r1, r2
 80061dc:	d04f      	beq.n	800627e <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061de:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80061e2:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80061ea:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061ec:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061ee:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f0:	e010      	b.n	8006214 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80061f2:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061f4:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f6:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80061fc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006202:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006204:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800620c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800620e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006210:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006212:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006214:	2301      	movs	r3, #1
 8006216:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006218:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006220:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006224:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006228:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800622c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006238:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800623c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006240:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006244:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006248:	2000      	movs	r0, #0
}
 800624a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800624c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800624e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006250:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006256:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800625c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800625e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006262:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006264:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006266:	68e3      	ldr	r3, [r4, #12]
 8006268:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800626a:	6863      	ldr	r3, [r4, #4]
 800626c:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800626e:	6963      	ldr	r3, [r4, #20]
 8006270:	630b      	str	r3, [r1, #48]	; 0x30
 8006272:	e7cf      	b.n	8006214 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8006274:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006278:	f7fd f800 	bl	800327c <HAL_TIM_Base_MspInit>
 800627c:	e78c      	b.n	8006198 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006280:	69a2      	ldr	r2, [r4, #24]
 8006282:	e7e9      	b.n	8006258 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 8006284:	2001      	movs	r0, #1
}
 8006286:	4770      	bx	lr
 8006288:	40012c00 	.word	0x40012c00

0800628c <HAL_TIM_PWM_MspInit>:
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop

08006290 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006290:	2800      	cmp	r0, #0
 8006292:	d07d      	beq.n	8006390 <HAL_TIM_PWM_Init+0x100>
{
 8006294:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006296:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800629a:	4604      	mov	r4, r0
 800629c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d06d      	beq.n	8006380 <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a4:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a6:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	2302      	movs	r3, #2
 80062aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ae:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80062b0:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b2:	d051      	beq.n	8006358 <HAL_TIM_PWM_Init+0xc8>
 80062b4:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80062b8:	d021      	beq.n	80062fe <HAL_TIM_PWM_Init+0x6e>
 80062ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80062be:	4291      	cmp	r1, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_TIM_PWM_Init+0x6e>
 80062c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c6:	4291      	cmp	r1, r2
 80062c8:	d019      	beq.n	80062fe <HAL_TIM_PWM_Init+0x6e>
 80062ca:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d042      	beq.n	8006358 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80062d6:	4291      	cmp	r1, r2
 80062d8:	d057      	beq.n	800638a <HAL_TIM_PWM_Init+0xfa>
 80062da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062de:	4291      	cmp	r1, r2
 80062e0:	d053      	beq.n	800638a <HAL_TIM_PWM_Init+0xfa>
 80062e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062e6:	4291      	cmp	r1, r2
 80062e8:	d04f      	beq.n	800638a <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ea:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ec:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80062ee:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80062f6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f8:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062fa:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062fc:	e010      	b.n	8006320 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80062fe:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006300:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006302:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006308:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800630a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006310:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006316:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8006318:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800631a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800631e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006320:	2301      	movs	r3, #1
 8006322:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006324:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800632c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006330:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006334:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800633c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006344:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006348:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800634c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006350:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006354:	2000      	movs	r0, #0
}
 8006356:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006358:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800635c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006362:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006368:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800636a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006370:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800637a:	6963      	ldr	r3, [r4, #20]
 800637c:	630b      	str	r3, [r1, #48]	; 0x30
 800637e:	e7cf      	b.n	8006320 <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8006380:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006384:	f7ff ff82 	bl	800628c <HAL_TIM_PWM_MspInit>
 8006388:	e78c      	b.n	80062a4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638c:	69a2      	ldr	r2, [r4, #24]
 800638e:	e7e9      	b.n	8006364 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8006390:	2001      	movs	r0, #1
}
 8006392:	4770      	bx	lr
 8006394:	40012c00 	.word	0x40012c00

08006398 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8006398:	2800      	cmp	r0, #0
 800639a:	f000 80ab 	beq.w	80064f4 <HAL_TIM_Encoder_Init+0x15c>
{
 800639e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80063a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063a6:	460d      	mov	r5, r1
 80063a8:	4604      	mov	r4, r0
 80063aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8095 	beq.w	80064de <HAL_TIM_Encoder_Init+0x146>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063b4:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b6:	4950      	ldr	r1, [pc, #320]	; (80064f8 <HAL_TIM_Encoder_Init+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	2202      	movs	r2, #2
 80063ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 80063c4:	f022 0207 	bic.w	r2, r2, #7
 80063c8:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ca:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80063cc:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ce:	d072      	beq.n	80064b6 <HAL_TIM_Encoder_Init+0x11e>
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d021      	beq.n	800641a <HAL_TIM_Encoder_Init+0x82>
 80063d6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80063da:	428b      	cmp	r3, r1
 80063dc:	d01d      	beq.n	800641a <HAL_TIM_Encoder_Init+0x82>
 80063de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063e2:	428b      	cmp	r3, r1
 80063e4:	d019      	beq.n	800641a <HAL_TIM_Encoder_Init+0x82>
 80063e6:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80063ea:	428b      	cmp	r3, r1
 80063ec:	d063      	beq.n	80064b6 <HAL_TIM_Encoder_Init+0x11e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ee:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d078      	beq.n	80064e8 <HAL_TIM_Encoder_Init+0x150>
 80063f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d074      	beq.n	80064e8 <HAL_TIM_Encoder_Init+0x150>
 80063fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006402:	428b      	cmp	r3, r1
 8006404:	d070      	beq.n	80064e8 <HAL_TIM_Encoder_Init+0x150>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006406:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006408:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800640a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800640e:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8006410:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006412:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006414:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006416:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006418:	e010      	b.n	800643c <HAL_TIM_Encoder_Init+0xa4>
    tmpcr1 |= Structure->CounterMode;
 800641a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800641e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006422:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006424:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006428:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800642c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006430:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006432:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8006434:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006436:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006438:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800643a:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800643c:	2601      	movs	r6, #1
 800643e:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8006440:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006444:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006446:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006448:	69af      	ldr	r7, [r5, #24]
 800644a:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800644c:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006450:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006454:	69e8      	ldr	r0, [r5, #28]
 8006456:	0112      	lsls	r2, r2, #4
 8006458:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800645c:	68e8      	ldr	r0, [r5, #12]
 800645e:	4302      	orrs	r2, r0
 8006460:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006462:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006466:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800646a:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 800646e:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006470:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006474:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006478:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800647a:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800647e:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006482:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006486:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800648a:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 800648c:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006490:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8006492:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8006494:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8006496:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006498:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064a8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 80064b0:	2000      	movs	r0, #0
}
 80064b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 80064b6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80064be:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c4:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c6:	69a1      	ldr	r1, [r4, #24]
 80064c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064cc:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80064ce:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d0:	68e2      	ldr	r2, [r4, #12]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064d4:	6862      	ldr	r2, [r4, #4]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80064d8:	6962      	ldr	r2, [r4, #20]
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
 80064dc:	e7ae      	b.n	800643c <HAL_TIM_Encoder_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 80064de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80064e2:	f7fc fee1 	bl	80032a8 <HAL_TIM_Encoder_MspInit>
 80064e6:	e765      	b.n	80063b4 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ea:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064f0:	4302      	orrs	r2, r0
 80064f2:	e7e9      	b.n	80064c8 <HAL_TIM_Encoder_Init+0x130>
    return HAL_ERROR;
 80064f4:	2001      	movs	r0, #1
}
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00

080064fc <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80064fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d04d      	beq.n	80065a0 <HAL_TIM_SlaveConfigSynchro+0xa4>
 8006504:	4602      	mov	r2, r0
{
 8006506:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006508:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800650a:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800650e:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006512:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006516:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006518:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 800651c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006524:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652a:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800652e:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006530:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006532:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8006534:	d051      	beq.n	80065da <HAL_TIM_SlaveConfigSynchro+0xde>
 8006536:	d825      	bhi.n	8006584 <HAL_TIM_SlaveConfigSynchro+0x88>
 8006538:	2c40      	cmp	r4, #64	; 0x40
 800653a:	d033      	beq.n	80065a4 <HAL_TIM_SlaveConfigSynchro+0xa8>
 800653c:	2c50      	cmp	r4, #80	; 0x50
 800653e:	d110      	bne.n	8006562 <HAL_TIM_SlaveConfigSynchro+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006540:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006542:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006544:	688c      	ldr	r4, [r1, #8]
 8006546:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006548:	f026 0601 	bic.w	r6, r6, #1
 800654c:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654e:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006550:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006558:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800655a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800655e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006560:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006562:	68c3      	ldr	r3, [r0, #12]
 8006564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006568:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800656a:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 800656c:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 800656e:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006574:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006576:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800657a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 800657e:	4608      	mov	r0, r1
}
 8006580:	bcf0      	pop	{r4, r5, r6, r7}
 8006582:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006584:	2c70      	cmp	r4, #112	; 0x70
 8006586:	d1ec      	bne.n	8006562 <HAL_TIM_SlaveConfigSynchro+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006588:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800658c:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 800658e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006590:	432b      	orrs	r3, r5
 8006592:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006596:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800659a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659c:	6083      	str	r3, [r0, #8]
 800659e:	e7e0      	b.n	8006562 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80065a0:	2002      	movs	r0, #2
}
 80065a2:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80065a4:	2d05      	cmp	r5, #5
 80065a6:	d010      	beq.n	80065ca <HAL_TIM_SlaveConfigSynchro+0xce>
 80065a8:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 80065ac:	d00d      	beq.n	80065ca <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 80065ae:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80065b0:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80065b2:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80065b4:	f024 0401 	bic.w	r4, r4, #1
 80065b8:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80065ba:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80065c0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80065c4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80065c6:	6205      	str	r5, [r0, #32]
      break;
 80065c8:	e7cb      	b.n	8006562 <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 80065ca:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80065cc:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80065ce:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80065d2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80065d6:	bcf0      	pop	{r4, r5, r6, r7}
 80065d8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065da:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065dc:	688d      	ldr	r5, [r1, #8]
 80065de:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e0:	f024 0410 	bic.w	r4, r4, #16
 80065e4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e6:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 80065e8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ea:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065f2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80065fa:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 80065fc:	6203      	str	r3, [r0, #32]
 80065fe:	e7b0      	b.n	8006562 <HAL_TIM_SlaveConfigSynchro+0x66>

08006600 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006600:	6a03      	ldr	r3, [r0, #32]
 8006602:	f023 0310 	bic.w	r3, r3, #16
 8006606:	6203      	str	r3, [r0, #32]
{
 8006608:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 800660a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800660c:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800660e:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006610:	4f19      	ldr	r7, [pc, #100]	; (8006678 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006612:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006614:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006616:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800661a:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800661e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006622:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006624:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006628:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800662c:	d00f      	beq.n	800664e <TIM_OC2_SetConfig+0x4e>
 800662e:	4c13      	ldr	r4, [pc, #76]	; (800667c <TIM_OC2_SetConfig+0x7c>)
 8006630:	42a0      	cmp	r0, r4
 8006632:	d00c      	beq.n	800664e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006638:	42a0      	cmp	r0, r4
 800663a:	d00f      	beq.n	800665c <TIM_OC2_SetConfig+0x5c>
 800663c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006640:	42a0      	cmp	r0, r4
 8006642:	d00b      	beq.n	800665c <TIM_OC2_SetConfig+0x5c>
 8006644:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006648:	42a0      	cmp	r0, r4
 800664a:	d10e      	bne.n	800666a <TIM_OC2_SetConfig+0x6a>
 800664c:	e006      	b.n	800665c <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800664e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006654:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800665c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006660:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006664:	432c      	orrs	r4, r5
 8006666:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800666a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800666c:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800666e:	6182      	str	r2, [r0, #24]
}
 8006670:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8006672:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006674:	6203      	str	r3, [r0, #32]
}
 8006676:	4770      	bx	lr
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40013400 	.word	0x40013400

08006680 <HAL_TIM_PWM_ConfigChannel>:
{
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006682:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	f000 80e4 	beq.w	8006854 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 800668c:	2301      	movs	r3, #1
 800668e:	4604      	mov	r4, r0
 8006690:	460d      	mov	r5, r1
 8006692:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006696:	2a14      	cmp	r2, #20
 8006698:	d844      	bhi.n	8006724 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800669a:	e8df f002 	tbb	[pc, r2]
 800669e:	4347      	.short	0x4347
 80066a0:	435b4343 	.word	0x435b4343
 80066a4:	43704343 	.word	0x43704343
 80066a8:	43844343 	.word	0x43844343
 80066ac:	43994343 	.word	0x43994343
 80066b0:	4343      	.short	0x4343
 80066b2:	0b          	.byte	0x0b
 80066b3:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066b4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066b6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066ba:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066bc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066be:	4e6c      	ldr	r6, [pc, #432]	; (8006870 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066c0:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 80066c4:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80066c6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80066c8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80066ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066d0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066da:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066de:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e2:	d008      	beq.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x76>
 80066e4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80066e8:	42b3      	cmp	r3, r6
 80066ea:	d004      	beq.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x76>
 80066ec:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80066f0:	42b3      	cmp	r3, r6
 80066f2:	f040 80b1 	bne.w	8006858 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066f6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066f8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066fc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8006700:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8006702:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006704:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006706:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006708:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800670a:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800670c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800670e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006712:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006714:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006716:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800671a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800671c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800671e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006722:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006724:	2000      	movs	r0, #0
 8006726:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800672c:	6800      	ldr	r0, [r0, #0]
 800672e:	f7ff fc6b 	bl	8006008 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006732:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006734:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006736:	6999      	ldr	r1, [r3, #24]
 8006738:	f041 0108 	orr.w	r1, r1, #8
 800673c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800673e:	6999      	ldr	r1, [r3, #24]
 8006740:	f021 0104 	bic.w	r1, r1, #4
 8006744:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800674a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800674c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800674e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006752:	e7ea      	b.n	800672a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006754:	6800      	ldr	r0, [r0, #0]
 8006756:	f7ff ff53 	bl	8006600 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800675a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800675c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800675e:	6999      	ldr	r1, [r3, #24]
 8006760:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006764:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006766:	6999      	ldr	r1, [r3, #24]
 8006768:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800676c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8006774:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006776:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006778:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800677c:	e7d5      	b.n	800672a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800677e:	6800      	ldr	r0, [r0, #0]
 8006780:	f7ff fc80 	bl	8006084 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006784:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006786:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006788:	69d9      	ldr	r1, [r3, #28]
 800678a:	f041 0108 	orr.w	r1, r1, #8
 800678e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006790:	69d9      	ldr	r1, [r3, #28]
 8006792:	f021 0104 	bic.w	r1, r1, #4
 8006796:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800679c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80067a0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80067a4:	e7c1      	b.n	800672a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067a6:	6800      	ldr	r0, [r0, #0]
 80067a8:	f7ff fcac 	bl	8006104 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067ae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067b0:	69d9      	ldr	r1, [r3, #28]
 80067b2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80067b6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b8:	69d9      	ldr	r1, [r3, #28]
 80067ba:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80067be:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c0:	69da      	ldr	r2, [r3, #28]
 80067c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80067c6:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80067ca:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80067ce:	e7ac      	b.n	800672a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067d0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067d2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067d6:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067da:	4e25      	ldr	r6, [pc, #148]	; (8006870 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067dc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80067e0:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80067e2:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80067e4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80067e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80067ec:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f4:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80067fa:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	d00f      	beq.n	8006820 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006800:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006804:	42b3      	cmp	r3, r6
 8006806:	d00b      	beq.n	8006820 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006808:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800680c:	42b3      	cmp	r3, r6
 800680e:	d007      	beq.n	8006820 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006810:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006814:	42b3      	cmp	r3, r6
 8006816:	d003      	beq.n	8006820 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006818:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800681c:	42b3      	cmp	r3, r6
 800681e:	d104      	bne.n	800682a <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006820:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006822:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006826:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800682a:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800682c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800682e:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006830:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006832:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006834:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006836:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006838:	f041 0108 	orr.w	r1, r1, #8
 800683c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800683e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006840:	f021 0104 	bic.w	r1, r1, #4
 8006844:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006848:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800684a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800684c:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800684e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006852:	e76a      	b.n	800672a <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8006854:	2002      	movs	r0, #2
}
 8006856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800685c:	42b3      	cmp	r3, r6
 800685e:	f43f af4a 	beq.w	80066f6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8006862:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006866:	42b3      	cmp	r3, r6
 8006868:	f47f af4a 	bne.w	8006700 <HAL_TIM_PWM_ConfigChannel+0x80>
 800686c:	e743      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x76>
 800686e:	bf00      	nop
 8006870:	40012c00 	.word	0x40012c00

08006874 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d03c      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 800687c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800687e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006880:	4c1e      	ldr	r4, [pc, #120]	; (80068fc <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006888:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 800688a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800688c:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800688e:	d026      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8006890:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006894:	42a2      	cmp	r2, r4
 8006896:	d022      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006898:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800689a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a2:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80068a8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068aa:	d00a      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80068ac:	4b14      	ldr	r3, [pc, #80]	; (8006900 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d007      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80068b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d003      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80068ba:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80068be:	429a      	cmp	r2, r3
 80068c0:	d104      	bne.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068c2:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068c4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068c8:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068ca:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80068cc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80068ce:	2201      	movs	r2, #1
 80068d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80068d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80068d8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80068da:	4618      	mov	r0, r3
}
 80068dc:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068de:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068e6:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80068e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80068ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068f0:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80068f2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f4:	e7e5      	b.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 80068f6:	2002      	movs	r0, #2
}
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40000400 	.word	0x40000400

08006904 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006904:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d044      	beq.n	8006996 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 800690c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800690e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8006912:	4602      	mov	r2, r0
 8006914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006918:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800691c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800691e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006922:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006928:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800692c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800692e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006932:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006938:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800693a:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800693c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800693e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006942:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006944:	4c15      	ldr	r4, [pc, #84]	; (800699c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006946:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006948:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800694c:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800694e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006952:	d00a      	beq.n	800696a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006954:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006958:	42a0      	cmp	r0, r4
 800695a:	d006      	beq.n	800696a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800695c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800695e:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006960:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006964:	4608      	mov	r0, r1
}
 8006966:	bc30      	pop	{r4, r5}
 8006968:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800696a:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800696c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800696e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006972:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006974:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006978:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800697c:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006984:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006986:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800698a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800698c:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800698e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006992:	430b      	orrs	r3, r1
 8006994:	e7e2      	b.n	800695c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006996:	2002      	movs	r0, #2
}
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40012c00 	.word	0x40012c00

080069a0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069a2:	07da      	lsls	r2, r3, #31
{
 80069a4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a6:	d506      	bpl.n	80069b6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069a8:	6801      	ldr	r1, [r0, #0]
 80069aa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80069ac:	684a      	ldr	r2, [r1, #4]
 80069ae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80069b2:	4322      	orrs	r2, r4
 80069b4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069b6:	079c      	lsls	r4, r3, #30
 80069b8:	d506      	bpl.n	80069c8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ba:	6801      	ldr	r1, [r0, #0]
 80069bc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80069be:	684a      	ldr	r2, [r1, #4]
 80069c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80069c4:	4322      	orrs	r2, r4
 80069c6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c8:	0759      	lsls	r1, r3, #29
 80069ca:	d506      	bpl.n	80069da <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069cc:	6801      	ldr	r1, [r0, #0]
 80069ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80069d0:	684a      	ldr	r2, [r1, #4]
 80069d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069d6:	4322      	orrs	r2, r4
 80069d8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069da:	071a      	lsls	r2, r3, #28
 80069dc:	d506      	bpl.n	80069ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069de:	6801      	ldr	r1, [r0, #0]
 80069e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80069e2:	684a      	ldr	r2, [r1, #4]
 80069e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069e8:	4322      	orrs	r2, r4
 80069ea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ec:	06dc      	lsls	r4, r3, #27
 80069ee:	d506      	bpl.n	80069fe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f0:	6801      	ldr	r1, [r0, #0]
 80069f2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80069f4:	688a      	ldr	r2, [r1, #8]
 80069f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069fa:	4322      	orrs	r2, r4
 80069fc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069fe:	0699      	lsls	r1, r3, #26
 8006a00:	d506      	bpl.n	8006a10 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a02:	6801      	ldr	r1, [r0, #0]
 8006a04:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006a06:	688a      	ldr	r2, [r1, #8]
 8006a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a0c:	4322      	orrs	r2, r4
 8006a0e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a10:	065a      	lsls	r2, r3, #25
 8006a12:	d509      	bpl.n	8006a28 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a14:	6801      	ldr	r1, [r0, #0]
 8006a16:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006a18:	684a      	ldr	r2, [r1, #4]
 8006a1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006a1e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a26:	d00b      	beq.n	8006a40 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a28:	061b      	lsls	r3, r3, #24
 8006a2a:	d506      	bpl.n	8006a3a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a2c:	6802      	ldr	r2, [r0, #0]
 8006a2e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006a30:	6853      	ldr	r3, [r2, #4]
 8006a32:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006a36:	430b      	orrs	r3, r1
 8006a38:	6053      	str	r3, [r2, #4]
  }
}
 8006a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a40:	684a      	ldr	r2, [r1, #4]
 8006a42:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006a44:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006a48:	4322      	orrs	r2, r4
 8006a4a:	604a      	str	r2, [r1, #4]
 8006a4c:	e7ec      	b.n	8006a28 <UART_AdvFeatureConfig+0x88>
 8006a4e:	bf00      	nop

08006a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a50:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a52:	2300      	movs	r3, #0
{
 8006a54:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a56:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a5a:	f7fd f9d1 	bl	8003e00 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8006a64:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a66:	d40d      	bmi.n	8006a84 <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	0752      	lsls	r2, r2, #29
 8006a6c:	d431      	bmi.n	8006ad2 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006a70:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 8006a72:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8006a76:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 8006a7a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a84:	69da      	ldr	r2, [r3, #28]
 8006a86:	0292      	lsls	r2, r2, #10
 8006a88:	d4ee      	bmi.n	8006a68 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8a:	f7fd f9b9 	bl	8003e00 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a8e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a90:	1b40      	subs	r0, r0, r5
 8006a92:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a96:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a98:	d22c      	bcs.n	8006af4 <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a9a:	0750      	lsls	r0, r2, #29
 8006a9c:	d5f2      	bpl.n	8006a84 <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	0511      	lsls	r1, r2, #20
 8006aa2:	d5ef      	bpl.n	8006a84 <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ab0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab2:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab4:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	f021 0101 	bic.w	r1, r1, #1
 8006aba:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006abc:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8006abe:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8006ac2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8006ac6:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006acc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	0258      	lsls	r0, r3, #9
 8006ad6:	d4ca      	bmi.n	8006a6e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad8:	f7fd f992 	bl	8003e00 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006adc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ade:	1b40      	subs	r0, r0, r5
 8006ae0:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ae4:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae6:	d205      	bcs.n	8006af4 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ae8:	0751      	lsls	r1, r2, #29
 8006aea:	d5f2      	bpl.n	8006ad2 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	0512      	lsls	r2, r2, #20
 8006af0:	d5ef      	bpl.n	8006ad2 <UART_CheckIdleState+0x82>
 8006af2:	e7d7      	b.n	8006aa4 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afa:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8006afc:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	f022 0201 	bic.w	r2, r2, #1
 8006b02:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006b04:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8006b06:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8006b0a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8006b0e:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8006b10:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop

08006b18 <HAL_UART_Init>:
  if (huart == NULL)
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	f000 817f 	beq.w	8006e1c <HAL_UART_Init+0x304>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b1e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8006b22:	b570      	push	{r4, r5, r6, lr}
 8006b24:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d056      	beq.n	8006bd8 <HAL_UART_Init+0xc0>
  __HAL_UART_DISABLE(huart);
 8006b2a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b2c:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b2e:	49c1      	ldr	r1, [pc, #772]	; (8006e34 <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 8006b30:	2224      	movs	r2, #36	; 0x24
 8006b32:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006b36:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b38:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006b3a:	f020 0001 	bic.w	r0, r0, #1
 8006b3e:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b40:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b42:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b44:	4332      	orrs	r2, r6
 8006b46:	4302      	orrs	r2, r0
 8006b48:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b4a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b4c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b56:	49b8      	ldr	r1, [pc, #736]	; (8006e38 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006b5c:	432a      	orrs	r2, r5
 8006b5e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b60:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b62:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b64:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b66:	d03c      	beq.n	8006be2 <HAL_UART_Init+0xca>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b68:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b6c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006b70:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006b74:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b76:	430a      	orrs	r2, r1
 8006b78:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b7c:	49af      	ldr	r1, [pc, #700]	; (8006e3c <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b7e:	f022 020f 	bic.w	r2, r2, #15
 8006b82:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b84:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b86:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b88:	d012      	beq.n	8006bb0 <HAL_UART_Init+0x98>
 8006b8a:	4aad      	ldr	r2, [pc, #692]	; (8006e40 <HAL_UART_Init+0x328>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d07b      	beq.n	8006c88 <HAL_UART_Init+0x170>
 8006b90:	4aac      	ldr	r2, [pc, #688]	; (8006e44 <HAL_UART_Init+0x32c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	f000 8130 	beq.w	8006df8 <HAL_UART_Init+0x2e0>
 8006b98:	4aab      	ldr	r2, [pc, #684]	; (8006e48 <HAL_UART_Init+0x330>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	f000 80cf 	beq.w	8006d3e <HAL_UART_Init+0x226>
  huart->NbRxDataToProcess = 1;
 8006ba0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006ba4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006ba6:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006baa:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8006bac:	2001      	movs	r0, #1
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bb0:	4ba6      	ldr	r3, [pc, #664]	; (8006e4c <HAL_UART_Init+0x334>)
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	f240 80d7 	bls.w	8006d70 <HAL_UART_Init+0x258>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006bc6:	f000 8131 	beq.w	8006e2c <HAL_UART_Init+0x314>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bca:	f7fe fda9 	bl	8005720 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f000 80d1 	beq.w	8006d76 <HAL_UART_Init+0x25e>
 8006bd4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006bd6:	e081      	b.n	8006cdc <HAL_UART_Init+0x1c4>
    huart->Lock = HAL_UNLOCKED;
 8006bd8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006bdc:	f7fc fbe2 	bl	80033a4 <HAL_UART_MspInit>
 8006be0:	e7a3      	b.n	8006b2a <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be2:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006be6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf2:	4896      	ldr	r0, [pc, #600]	; (8006e4c <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bf4:	f022 020f 	bic.w	r2, r2, #15
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bfc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c08:	f000 8134 	beq.w	8006e74 <HAL_UART_Init+0x35c>
 8006c0c:	d80c      	bhi.n	8006c28 <HAL_UART_Init+0x110>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 812b 	beq.w	8006e6a <HAL_UART_Init+0x352>
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d1c2      	bne.n	8006ba0 <HAL_UART_Init+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1a:	f7fe fc31 	bl	8005480 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f000 80a9 	beq.w	8006d76 <HAL_UART_Init+0x25e>
 8006c24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c26:	e004      	b.n	8006c32 <HAL_UART_Init+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c2c:	d1b8      	bne.n	8006ba0 <HAL_UART_Init+0x88>
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c32:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c34:	4b86      	ldr	r3, [pc, #536]	; (8006e50 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c36:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c3a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8006c3e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c42:	42b3      	cmp	r3, r6
 8006c44:	d3ac      	bcc.n	8006ba0 <HAL_UART_Init+0x88>
 8006c46:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006c4a:	d8a9      	bhi.n	8006ba0 <HAL_UART_Init+0x88>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4631      	mov	r1, r6
 8006c52:	f7f9 ff9d 	bl	8000b90 <__aeabi_uldivmod>
 8006c56:	020b      	lsls	r3, r1, #8
 8006c58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c5c:	0202      	lsls	r2, r0, #8
 8006c5e:	0868      	lsrs	r0, r5, #1
 8006c60:	1810      	adds	r0, r2, r0
 8006c62:	f143 0100 	adc.w	r1, r3, #0
 8006c66:	462a      	mov	r2, r5
 8006c68:	4633      	mov	r3, r6
 8006c6a:	f7f9 ff91 	bl	8000b90 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c6e:	4b79      	ldr	r3, [pc, #484]	; (8006e54 <HAL_UART_Init+0x33c>)
 8006c70:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d893      	bhi.n	8006ba0 <HAL_UART_Init+0x88>
          huart->Instance->BRR = usartdiv;
 8006c78:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8006c7a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8006c7e:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8006c80:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006c84:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 8006c86:	e043      	b.n	8006d10 <HAL_UART_Init+0x1f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c88:	4b70      	ldr	r3, [pc, #448]	; (8006e4c <HAL_UART_Init+0x334>)
 8006c8a:	4a73      	ldr	r2, [pc, #460]	; (8006e58 <HAL_UART_Init+0x340>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	f003 030c 	and.w	r3, r3, #12
 8006c94:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c9a:	d079      	beq.n	8006d90 <HAL_UART_Init+0x278>
    switch (clocksource)
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	f63f af7f 	bhi.w	8006ba0 <HAL_UART_Init+0x88>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <HAL_UART_Init+0x190>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006d6b 	.word	0x08006d6b
 8006cac:	08006bcb 	.word	0x08006bcb
 8006cb0:	08006d3b 	.word	0x08006d3b
 8006cb4:	08006ba1 	.word	0x08006ba1
 8006cb8:	08006d5f 	.word	0x08006d5f
 8006cbc:	08006ba1 	.word	0x08006ba1
 8006cc0:	08006ba1 	.word	0x08006ba1
 8006cc4:	08006ba1 	.word	0x08006ba1
 8006cc8:	08006cd9 	.word	0x08006cd9
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ccc:	2b30      	cmp	r3, #48	; 0x30
 8006cce:	f47f af67 	bne.w	8006ba0 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006cd6:	d074      	beq.n	8006dc2 <HAL_UART_Init+0x2aa>
 8006cd8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cdc:	6862      	ldr	r2, [r4, #4]
 8006cde:	4b5c      	ldr	r3, [pc, #368]	; (8006e50 <HAL_UART_Init+0x338>)
 8006ce0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8006ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ce8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cf0:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf2:	f1a3 0110 	sub.w	r1, r3, #16
 8006cf6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	f63f af50 	bhi.w	8006ba0 <HAL_UART_Init+0x88>
        huart->Instance->BRR = usartdiv;
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8006d04:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8006d06:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006d0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d0e:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d138      	bne.n	8006d88 <HAL_UART_Init+0x270>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d26:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006d2e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006d30:	601a      	str	r2, [r3, #0]
}
 8006d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 8006d36:	f7ff be8b 	b.w	8006a50 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8006d3a:	4848      	ldr	r0, [pc, #288]	; (8006e5c <HAL_UART_Init+0x344>)
 8006d3c:	e7ce      	b.n	8006cdc <HAL_UART_Init+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d3e:	4b43      	ldr	r3, [pc, #268]	; (8006e4c <HAL_UART_Init+0x334>)
 8006d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d48:	2b80      	cmp	r3, #128	; 0x80
 8006d4a:	f000 8095 	beq.w	8006e78 <HAL_UART_Init+0x360>
 8006d4e:	d861      	bhi.n	8006e14 <HAL_UART_Init+0x2fc>
 8006d50:	b143      	cbz	r3, 8006d64 <HAL_UART_Init+0x24c>
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	f47f af24 	bne.w	8006ba0 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006d5c:	d060      	beq.n	8006e20 <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5e:	f7fe fb8f 	bl	8005480 <HAL_RCC_GetSysClockFreq>
        break;
 8006d62:	e734      	b.n	8006bce <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d64:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006d68:	d07c      	beq.n	8006e64 <HAL_UART_Init+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6a:	f7fe fcc7 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
        break;
 8006d6e:	e72e      	b.n	8006bce <HAL_UART_Init+0xb6>
 8006d70:	4a3b      	ldr	r2, [pc, #236]	; (8006e60 <HAL_UART_Init+0x348>)
 8006d72:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d74:	e78f      	b.n	8006c96 <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 8006d76:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006d78:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8006d7e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006d82:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0c6      	beq.n	8006d16 <HAL_UART_Init+0x1fe>
    UART_AdvFeatureConfig(huart);
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7ff fe09 	bl	80069a0 <UART_AdvFeatureConfig>
 8006d8e:	e7c2      	b.n	8006d16 <HAL_UART_Init+0x1fe>
    switch (clocksource)
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	f63f af05 	bhi.w	8006ba0 <HAL_UART_Init+0x88>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <HAL_UART_Init+0x284>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006e65 	.word	0x08006e65
 8006da0:	08006e2d 	.word	0x08006e2d
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	08006ba1 	.word	0x08006ba1
 8006dac:	08006e21 	.word	0x08006e21
 8006db0:	08006ba1 	.word	0x08006ba1
 8006db4:	08006ba1 	.word	0x08006ba1
 8006db8:	08006ba1 	.word	0x08006ba1
 8006dbc:	08006dc3 	.word	0x08006dc3
        pclk = (uint32_t) HSI_VALUE;
 8006dc0:	4826      	ldr	r0, [pc, #152]	; (8006e5c <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc2:	6862      	ldr	r2, [r4, #4]
 8006dc4:	4922      	ldr	r1, [pc, #136]	; (8006e50 <HAL_UART_Init+0x338>)
 8006dc6:	0853      	lsrs	r3, r2, #1
 8006dc8:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8006dcc:	fbb0 f0f1 	udiv	r0, r0, r1
 8006dd0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006dd4:	fbb0 f0f2 	udiv	r0, r0, r2
 8006dd8:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dda:	f1a2 0110 	sub.w	r1, r2, #16
 8006dde:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006de2:	4299      	cmp	r1, r3
 8006de4:	f63f aedc 	bhi.w	8006ba0 <HAL_UART_Init+0x88>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006de8:	f020 030f 	bic.w	r3, r0, #15
 8006dec:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dee:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8006df2:	6820      	ldr	r0, [r4, #0]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	e784      	b.n	8006d02 <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <HAL_UART_Init+0x334>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d038      	beq.n	8006e78 <HAL_UART_Init+0x360>
 8006e06:	f63f af61 	bhi.w	8006ccc <HAL_UART_Init+0x1b4>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0aa      	beq.n	8006d64 <HAL_UART_Init+0x24c>
 8006e0e:	2b10      	cmp	r3, #16
 8006e10:	d0a2      	beq.n	8006d58 <HAL_UART_Init+0x240>
 8006e12:	e6c5      	b.n	8006ba0 <HAL_UART_Init+0x88>
 8006e14:	2bc0      	cmp	r3, #192	; 0xc0
 8006e16:	f43f af5c 	beq.w	8006cd2 <HAL_UART_Init+0x1ba>
 8006e1a:	e6c1      	b.n	8006ba0 <HAL_UART_Init+0x88>
}
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8006e20:	f7fe fb2e 	bl	8005480 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d0a6      	beq.n	8006d76 <HAL_UART_Init+0x25e>
 8006e28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e2a:	e7ca      	b.n	8006dc2 <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7fe fc78 	bl	8005720 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e30:	e7f8      	b.n	8006e24 <HAL_UART_Init+0x30c>
 8006e32:	bf00      	nop
 8006e34:	cfff69f3 	.word	0xcfff69f3
 8006e38:	40008000 	.word	0x40008000
 8006e3c:	40013800 	.word	0x40013800
 8006e40:	40004400 	.word	0x40004400
 8006e44:	40004800 	.word	0x40004800
 8006e48:	40004c00 	.word	0x40004c00
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	08009178 	.word	0x08009178
 8006e54:	000ffcff 	.word	0x000ffcff
 8006e58:	08009168 	.word	0x08009168
 8006e5c:	00f42400 	.word	0x00f42400
 8006e60:	08009164 	.word	0x08009164
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e64:	f7fe fc4a 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
        break;
 8006e68:	e7dc      	b.n	8006e24 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6a:	f7fe fc47 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d081      	beq.n	8006d76 <HAL_UART_Init+0x25e>
 8006e72:	e6d7      	b.n	8006c24 <HAL_UART_Init+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e74:	4803      	ldr	r0, [pc, #12]	; (8006e84 <HAL_UART_Init+0x36c>)
 8006e76:	e6dc      	b.n	8006c32 <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7e:	f47f af2d 	bne.w	8006cdc <HAL_UART_Init+0x1c4>
 8006e82:	e79e      	b.n	8006dc2 <HAL_UART_Init+0x2aa>
 8006e84:	00f42400 	.word	0x00f42400

08006e88 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e88:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006e8c:	2a01      	cmp	r2, #1
 8006e8e:	d017      	beq.n	8006ec0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e90:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006e92:	2124      	movs	r1, #36	; 0x24
{
 8006e94:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8006e96:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8006e9a:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e9c:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e9e:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ea0:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ea2:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006ea6:	f024 0401 	bic.w	r4, r4, #1
 8006eaa:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8006eac:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006eae:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eb0:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eb2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8006eb6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006eb8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006ebc:	bc30      	pop	{r4, r5}
 8006ebe:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006ec0:	2002      	movs	r0, #2
}
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ec4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006ec8:	2a01      	cmp	r2, #1
 8006eca:	d033      	beq.n	8006f34 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ed0:	681a      	ldr	r2, [r3, #0]
{
 8006ed2:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006ed4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ed8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eda:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006edc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006ede:	f020 0001 	bic.w	r0, r0, #1
 8006ee2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ee4:	6890      	ldr	r0, [r2, #8]
 8006ee6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006eea:	4301      	orrs	r1, r0
 8006eec:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006eee:	b1f5      	cbz	r5, 8006f2e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ef0:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ef2:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ef4:	4810      	ldr	r0, [pc, #64]	; (8006f38 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ef6:	4f11      	ldr	r7, [pc, #68]	; (8006f3c <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ef8:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006efc:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006efe:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f00:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f02:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f04:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f06:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f08:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f0a:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f0e:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f12:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006f16:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006f18:	2520      	movs	r5, #32
 8006f1a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f1e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006f20:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8006f24:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006f26:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006f2a:	bcf0      	pop	{r4, r5, r6, r7}
 8006f2c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8006f2e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006f30:	4608      	mov	r0, r1
 8006f32:	e7ee      	b.n	8006f12 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8006f34:	2002      	movs	r0, #2
}
 8006f36:	4770      	bx	lr
 8006f38:	08009198 	.word	0x08009198
 8006f3c:	08009190 	.word	0x08009190

08006f40 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006f40:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006f44:	2a01      	cmp	r2, #1
 8006f46:	d033      	beq.n	8006fb0 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f4c:	681a      	ldr	r2, [r3, #0]
{
 8006f4e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006f50:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f54:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006f56:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f58:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006f5a:	f020 0001 	bic.w	r0, r0, #1
 8006f5e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f60:	6890      	ldr	r0, [r2, #8]
 8006f62:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006f66:	4301      	orrs	r1, r0
 8006f68:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f6a:	b1f5      	cbz	r5, 8006faa <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f6c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f6e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f70:	4810      	ldr	r0, [pc, #64]	; (8006fb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f72:	4f11      	ldr	r7, [pc, #68]	; (8006fb8 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f74:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f78:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f7a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f7c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f7e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f80:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f82:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f84:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f86:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f8a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f8e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006f92:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006f94:	2520      	movs	r5, #32
 8006f96:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f9a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006f9c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8006fa0:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006fa2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006fa6:	bcf0      	pop	{r4, r5, r6, r7}
 8006fa8:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8006faa:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006fac:	4608      	mov	r0, r1
 8006fae:	e7ee      	b.n	8006f8e <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8006fb0:	2002      	movs	r0, #2
}
 8006fb2:	4770      	bx	lr
 8006fb4:	08009198 	.word	0x08009198
 8006fb8:	08009190 	.word	0x08009190

08006fbc <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8006fbc:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8006fbe:	8840      	ldrh	r0, [r0, #2]
 8006fc0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8006fc4:	0c00      	lsrs	r0, r0, #16
 8006fc6:	4770      	bx	lr

08006fc8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8006fc8:	b410      	push	{r4}
 8006fca:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006fcc:	8802      	ldrh	r2, [r0, #0]
 8006fce:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8006fd0:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006fd4:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8006fd8:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006fdc:	42a2      	cmp	r2, r4
{
 8006fde:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8006fe0:	d219      	bcs.n	8007016 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8006fe2:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8006fe6:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8006fea:	b2e4      	uxtb	r4, r4
 8006fec:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8006ff0:	8882      	ldrh	r2, [r0, #4]
 8006ff2:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006ff6:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8006ff8:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8006ffc:	bfbc      	itt	lt
 8006ffe:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8007002:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007004:	2b00      	cmp	r3, #0
 8007006:	bfbc      	itt	lt
 8007008:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 800700c:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800700e:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007012:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8007016:	b289      	uxth	r1, r1
 8007018:	2000      	movs	r0, #0
 800701a:	b29b      	uxth	r3, r3
 800701c:	f361 000f 	bfi	r0, r1, #0, #16
 8007020:	f363 401f 	bfi	r0, r3, #16, #16
}
 8007024:	b005      	add	sp, #20
 8007026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800702a:	4770      	bx	lr

0800702c <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 800702c:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 800702e:	2400      	movs	r4, #0
 8007030:	81c4      	strh	r4, [r0, #14]
  pHandle->pVSS = pVSS;
 8007032:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->EncRestart = false;
}
 8007036:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pENC = pENC;
 800703a:	6083      	str	r3, [r0, #8]
}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop

08007040 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 8007040:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8007042:	2200      	movs	r2, #0
{
 8007044:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8007046:	4611      	mov	r1, r2
 8007048:	6840      	ldr	r0, [r0, #4]
 800704a:	f001 fe15 	bl	8008c78 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 800704e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8007052:	6860      	ldr	r0, [r4, #4]
 8007054:	f001 fe08 	bl	8008c68 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	2100      	movs	r1, #0
 800705c:	f001 fb96 	bl	800878c <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8007060:	2200      	movs	r2, #0
 8007062:	4611      	mov	r1, r2
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	f001 fb95 	bl	8008794 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 800706a:	8ae2      	ldrh	r2, [r4, #22]
 800706c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8007070:	6820      	ldr	r0, [r4, #0]
 8007072:	f001 fb8f 	bl	8008794 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8007076:	8ae1      	ldrh	r1, [r4, #22]
 8007078:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 800707a:	4a04      	ldr	r2, [pc, #16]	; (800708c <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 800707c:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 8007086:	3301      	adds	r3, #1
 8007088:	81a3      	strh	r3, [r4, #12]
}
 800708a:	bd10      	pop	{r4, pc}
 800708c:	10624dd3 	.word	0x10624dd3

08007090 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 8007090:	8983      	ldrh	r3, [r0, #12]
 8007092:	b13b      	cbz	r3, 80070a4 <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 8007094:	3b01      	subs	r3, #1
 8007096:	b29b      	uxth	r3, r3
{
 8007098:	b510      	push	{r4, lr}
 800709a:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 800709c:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 800709e:	b11b      	cbz	r3, 80070a8 <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 80070a0:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 80070a2:	bd10      	pop	{r4, pc}
  bool retVal = true;
 80070a4:	2001      	movs	r0, #1
}
 80070a6:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 80070a8:	7e03      	ldrb	r3, [r0, #24]
 80070aa:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 80070ae:	6880      	ldr	r0, [r0, #8]
 80070b0:	fb91 f1f3 	sdiv	r1, r1, r3
 80070b4:	f000 f948 	bl	8007348 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 80070b8:	2001      	movs	r0, #1
 80070ba:	73a0      	strb	r0, [r4, #14]
}
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	bf00      	nop

080070c0 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 80070c0:	7b80      	ldrb	r0, [r0, #14]
 80070c2:	4770      	bx	lr

080070c4 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 80070c4:	73c1      	strb	r1, [r0, #15]
}
 80070c6:	4770      	bx	lr

080070c8 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 80070c8:	7bc0      	ldrb	r0, [r0, #15]
 80070ca:	4770      	bx	lr

080070cc <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 80070cc:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80070ce:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 80070d2:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80070d4:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80070d6:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80070da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80070de:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 80070e0:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80070e2:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80070e6:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80070e8:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 80070ec:	6259      	str	r1, [r3, #36]	; 0x24
 80070ee:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80070f2:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80070f4:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80070f6:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 80070f8:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 80070fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007100:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007104:	619a      	str	r2, [r3, #24]
 8007106:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007108:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 800710c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007110:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007114:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007118:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800711a:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 800712c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8007130:	b13a      	cbz	r2, 8007142 <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8007132:	3a01      	subs	r2, #1
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	3201      	adds	r2, #1
  }
}
 8007138:	bc70      	pop	{r4, r5, r6}
 800713a:	0092      	lsls	r2, r2, #2
 800713c:	3028      	adds	r0, #40	; 0x28
 800713e:	f001 be2f 	b.w	8008da0 <memset>
 8007142:	bc70      	pop	{r4, r5, r6}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop

08007148 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 8007148:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 800714a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 800714e:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8007150:	b13a      	cbz	r2, 8007162 <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8007152:	3a01      	subs	r2, #1
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	3201      	adds	r2, #1
 8007158:	0092      	lsls	r2, r2, #2
 800715a:	2100      	movs	r1, #0
 800715c:	3028      	adds	r0, #40	; 0x28
 800715e:	f001 fe1f 	bl	8008da0 <memset>
  }
  pHandle->SensorIsReliable = true;
 8007162:	2301      	movs	r3, #1
 8007164:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8007168:	bd10      	pop	{r4, pc}
 800716a:	bf00      	nop

0800716c <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 800716c:	6a01      	ldr	r1, [r0, #32]
 800716e:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007170:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 8007172:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8007174:	b289      	uxth	r1, r1
 8007176:	fb02 f201 	mul.w	r2, r2, r1
{
 800717a:	4603      	mov	r3, r0
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 800717c:	2a00      	cmp	r2, #0
 800717e:	bfb8      	it	lt
 8007180:	f64f 70ff 	movwlt	r0, #65535	; 0xffff

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8007184:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8007188:	689c      	ldr	r4, [r3, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 800718a:	bfb8      	it	lt
 800718c:	1812      	addlt	r2, r2, r0
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 800718e:	7858      	ldrb	r0, [r3, #1]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8007190:	1412      	asrs	r2, r2, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8007192:	fb00 f002 	mul.w	r0, r0, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8007196:	1a51      	subs	r1, r2, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8007198:	b200      	sxth	r0, r0
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 800719a:	fa04 f181 	sxtah	r1, r4, r1
  pHandle->_Super.hElAngle = elAngle;
 800719e:	8098      	strh	r0, [r3, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 80071a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80071a4:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80071a6:	6099      	str	r1, [r3, #8]
}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop

080071ac <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 80071ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80071ae:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80071b0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80071b4:	68dc      	ldr	r4, [r3, #12]
 80071b6:	f024 0401 	bic.w	r4, r4, #1
 80071ba:	60dc      	str	r4, [r3, #12]
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
  pHandle->TimerOverflowNb = 0;
 80071bc:	2600      	movs	r6, #0
  return (uint32_t)(READ_REG(TIMx->CNT));
 80071be:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  OverflowCntSample = pHandle->TimerOverflowNb;
 80071c0:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
 80071c4:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80071c8:	681e      	ldr	r6, [r3, #0]
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 80071ca:	0fef      	lsrs	r7, r5, #31
 80071cc:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80071d0:	bf1c      	itt	ne
 80071d2:	f06f 0601 	mvnne.w	r6, #1
 80071d6:	611e      	strne	r6, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80071d8:	68de      	ldr	r6, [r3, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 80071da:	b2a4      	uxth	r4, r4
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 80071dc:	443c      	add	r4, r7
 80071de:	f046 0601 	orr.w	r6, r6, #1
 80071e2:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80071e6:	60de      	str	r6, [r3, #12]
  {
    pHandle->TimerOverflowError = true;
 80071e8:	bf8a      	itet	hi
 80071ea:	2601      	movhi	r6, #1
 80071ec:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
 80071f0:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 80071f4:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 80071f8:	f1bc 0f00 	cmp.w	ip, #0
 80071fc:	f000 808d 	beq.w	800731a <ENC_CalcAvrgMecSpeedUnit+0x16e>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8007200:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007204:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8007208:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 800720c:	1aeb      	subs	r3, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800720e:	f10c 0c0a 	add.w	ip, ip, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8007212:	fb07 3414 	mls	r4, r7, r4, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007216:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800721a:	2a00      	cmp	r2, #0
 800721c:	f000 808d 	beq.w	800733a <ENC_CalcAvrgMecSpeedUnit+0x18e>
 8007220:	2a01      	cmp	r2, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007222:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007224:	d939      	bls.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007226:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007228:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800722a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800722c:	d035      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800722e:	6b04      	ldr	r4, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007230:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007232:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007234:	d031      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007236:	6b44      	ldr	r4, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007238:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800723a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800723c:	d02d      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800723e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007240:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007242:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007244:	d029      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007246:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007248:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800724a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800724c:	d025      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800724e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007250:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007252:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007254:	d021      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007256:	6c44      	ldr	r4, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007258:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800725a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800725c:	d01d      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800725e:	6c84      	ldr	r4, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007260:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007262:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007264:	d019      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007266:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007268:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800726a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800726c:	d015      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800726e:	6d04      	ldr	r4, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007270:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007272:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007274:	d011      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007276:	6d44      	ldr	r4, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007278:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800727a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800727c:	d00d      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800727e:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007280:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007282:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007284:	d009      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007286:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007288:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800728a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800728c:	d005      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800728e:	6e04      	ldr	r4, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007290:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007292:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007294:	d001      	beq.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007296:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8007298:	4423      	add	r3, r4
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 800729a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 800729c:	fb07 f202 	mul.w	r2, r7, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 80072a0:	fb04 f303 	mul.w	r3, r4, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 80072a4:	fb93 f3f2 	sdiv	r3, r3, r2
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 80072a8:	b21f      	sxth	r7, r3
 80072aa:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80072ac:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 80072b0:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80072b4:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 80072b8:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 80072bc:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80072be:	340a      	adds	r4, #10
  pHandle->DeltaCapturesIndex++;
 80072c0:	3201      	adds	r2, #1
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80072c2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 80072c6:	69c4      	ldr	r4, [r0, #28]
  pHandle->PreviousCapture = CntCapture;
 80072c8:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80072d2:	eba3 020c 	sub.w	r2, r3, ip
 80072d6:	8242      	strh	r2, [r0, #18]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80072d8:	fb07 f30e 	mul.w	r3, r7, lr

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 80072dc:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 80072e0:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 80072e4:	7845      	ldrb	r5, [r0, #1]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 80072e6:	42ba      	cmp	r2, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80072e8:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 80072ec:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 80072f0:	fb93 f3f5 	sdiv	r3, r3, r5
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 80072f4:	fb04 f403 	mul.w	r4, r4, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 80072f8:	8b43      	ldrh	r3, [r0, #26]
 80072fa:	fb94 f4f3 	sdiv	r4, r4, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 80072fe:	bf08      	it	eq
 8007300:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8007302:	81c4      	strh	r4, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8007304:	bf08      	it	eq
 8007306:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 800730a:	b1c6      	cbz	r6, 800733e <ENC_CalcAvrgMecSpeedUnit+0x192>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800730c:	78c2      	ldrb	r2, [r0, #3]
 800730e:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8007310:	2300      	movs	r3, #0
 8007312:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8007316:	4618      	mov	r0, r3
 8007318:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 800731a:	f8b0 c072 	ldrh.w	ip, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800731e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8007322:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007326:	eba5 0c0c 	sub.w	ip, r5, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800732a:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 800732c:	fb07 c404 	mla	r4, r7, r4, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007330:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007334:	2a00      	cmp	r2, #0
 8007336:	f47f af73 	bne.w	8007220 <ENC_CalcAvrgMecSpeedUnit+0x74>
  int32_t wOverallAngleVariation = 0;
 800733a:	4613      	mov	r3, r2
 800733c:	e7ad      	b.n	800729a <ENC_CalcAvrgMecSpeedUnit+0xee>
}
 800733e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8007342:	f001 b9bd 	b.w	80086c0 <SPD_IsMecSpeedReliable>
 8007346:	bf00      	nop

08007348 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007348:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 800734a:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 800734c:	fb03 f301 	mul.w	r3, r3, r1
 8007350:	8083      	strh	r3, [r0, #4]
  if ( hMecAngle < 0 )
 8007352:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007354:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007356:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007358:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 800735c:	4905      	ldr	r1, [pc, #20]	; (8007374 <ENC_SetMecAngle+0x2c>)
 800735e:	bfbc      	itt	lt
 8007360:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007364:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8007366:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 800736a:	fba1 1303 	umull	r1, r3, r1, r3
 800736e:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8007370:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8007372:	4770      	bx	lr
 8007374:	80008001 	.word	0x80008001

08007378 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8007378:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 800737a:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 800737c:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8007380:	3301      	adds	r3, #1
 8007382:	b29b      	uxth	r3, r3
 8007384:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop

0800738c <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8007390:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8007392:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8007396:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800739a:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800739e:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 80073a2:	4770      	bx	lr

080073a4 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 80073a4:	b120      	cbz	r0, 80073b0 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 80073a6:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 80073aa:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 80073ac:	9b00      	ldr	r3, [sp, #0]
 80073ae:	60c3      	str	r3, [r0, #12]
  }
}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop

080073b4 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 80073b4:	b190      	cbz	r0, 80073dc <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 80073b6:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 80073b8:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 80073ba:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 80073bc:	b151      	cbz	r1, 80073d4 <FCP_CalcCRC+0x20>
 80073be:	1c82      	adds	r2, r0, #2
 80073c0:	3901      	subs	r1, #1
 80073c2:	fa52 f181 	uxtab	r1, r2, r1
 80073c6:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 80073c8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80073cc:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80073ce:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80073d0:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80073d2:	d1f9      	bne.n	80073c8 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80073d4:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 80073d8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80073e0:	b510      	push	{r4, lr}
 80073e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073e6:	4604      	mov	r4, r0
 80073e8:	2100      	movs	r1, #0
 80073ea:	f001 fcd9 	bl	8008da0 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80073ee:	2300      	movs	r3, #0
 80073f0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	bf00      	nop

080073f8 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80073f8:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80073fc:	1c53      	adds	r3, r2, #1
 80073fe:	b29b      	uxth	r3, r3
{
 8007400:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8007402:	2b7f      	cmp	r3, #127	; 0x7f
{
 8007404:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8007406:	bf88      	it	hi
 8007408:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800740a:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 800740e:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8007410:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8007414:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007418:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 800741c:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 800741e:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007420:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007424:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007426:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007428:	d1fa      	bne.n	8007420 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800742a:	2a00      	cmp	r2, #0
 800742c:	bfb8      	it	lt
 800742e:	327f      	addlt	r2, #127	; 0x7f
 8007430:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8007432:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8007436:	bc70      	pop	{r4, r5, r6}
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop

0800743c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 800743c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop

08007444 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8007444:	8a03      	ldrh	r3, [r0, #16]
 8007446:	8b42      	ldrh	r2, [r0, #26]
 8007448:	429a      	cmp	r2, r3
 800744a:	d306      	bcc.n	800745a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800744c:	8b82      	ldrh	r2, [r0, #28]
 800744e:	429a      	cmp	r2, r3
 8007450:	d901      	bls.n	8007456 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8007452:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8007454:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8007456:	8ac0      	ldrh	r0, [r0, #22]
 8007458:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 800745a:	2008      	movs	r0, #8
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop

08007460 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8007460:	2300      	movs	r3, #0
 8007462:	8203      	strh	r3, [r0, #16]
}
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop

08007468 <NTC_Init>:
{
 8007468:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 800746a:	7803      	ldrb	r3, [r0, #0]
{
 800746c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800746e:	b123      	cbz	r3, 800747a <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007470:	8a43      	ldrh	r3, [r0, #18]
 8007472:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8007474:	2200      	movs	r2, #0
 8007476:	82c2      	strh	r2, [r0, #22]
}
 8007478:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800747a:	3004      	adds	r0, #4
 800747c:	f7fb fbd6 	bl	8002c2c <RCM_RegisterRegConv>
 8007480:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8007484:	4620      	mov	r0, r4
 8007486:	f7ff ffeb 	bl	8007460 <NTC_Clear>
}
 800748a:	bd10      	pop	{r4, pc}

0800748c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 800748c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800748e:	7803      	ldrb	r3, [r0, #0]
{
 8007490:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007492:	b113      	cbz	r3, 800749a <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8007494:	2000      	movs	r0, #0
 8007496:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8007498:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800749a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800749e:	f7fb fc99 	bl	8002dd4 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80074a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074a6:	4298      	cmp	r0, r3
 80074a8:	d007      	beq.n	80074ba <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80074aa:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80074ac:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80074ae:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 80074b0:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80074b4:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80074b8:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff ffc2 	bl	8007444 <NTC_SetFaultState>
 80074c0:	82e0      	strh	r0, [r4, #22]
}
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80074c4:	7803      	ldrb	r3, [r0, #0]
 80074c6:	b983      	cbnz	r3, 80074ea <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80074c8:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80074ca:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80074cc:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80074d0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80074d2:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 80074d4:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bfbc      	itt	lt
 80074dc:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80074e0:	33ff      	addlt	r3, #255	; 0xff
 80074e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80074e6:	b200      	sxth	r0, r0
 80074e8:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80074ea:	8a80      	ldrh	r0, [r0, #20]
}
 80074ec:	b200      	sxth	r0, r0
 80074ee:	4770      	bx	lr

080074f0 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80074f0:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80074f2:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80074f4:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80074f6:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80074f8:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80074fa:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80074fc:	6283      	str	r3, [r0, #40]	; 0x28
}
 80074fe:	4770      	bx	lr

08007500 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8007500:	8081      	strh	r1, [r0, #4]
}
 8007502:	4770      	bx	lr

08007504 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8007504:	80c1      	strh	r1, [r0, #6]
}
 8007506:	4770      	bx	lr

08007508 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8007508:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop

08007510 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8007510:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop

08007518 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8007518:	6081      	str	r1, [r0, #8]

  return;
}
 800751a:	4770      	bx	lr

0800751c <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 800751c:	8b00      	ldrh	r0, [r0, #24]
 800751e:	4770      	bx	lr

08007520 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8007520:	8b40      	ldrh	r0, [r0, #26]
 8007522:	4770      	bx	lr

08007524 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8007524:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8007526:	4770      	bx	lr

08007528 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8007528:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop

08007530 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007530:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8007534:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8007538:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800753a:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800753e:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007542:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8007546:	b162      	cbz	r2, 8007562 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007548:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800754a:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 800754e:	1872      	adds	r2, r6, r1
 8007550:	d420      	bmi.n	8007594 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8007552:	2e00      	cmp	r6, #0
 8007554:	db29      	blt.n	80075aa <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007556:	68c1      	ldr	r1, [r0, #12]
 8007558:	4291      	cmp	r1, r2
 800755a:	db03      	blt.n	8007564 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800755c:	6901      	ldr	r1, [r0, #16]
 800755e:	4291      	cmp	r1, r2
 8007560:	dc00      	bgt.n	8007564 <PI_Controller+0x34>
 8007562:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8007564:	8b86      	ldrh	r6, [r0, #28]
 8007566:	8bc2      	ldrh	r2, [r0, #30]
 8007568:	4133      	asrs	r3, r6
 800756a:	fa41 f202 	asr.w	r2, r1, r2
 800756e:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8007570:	429c      	cmp	r4, r3
 8007572:	da05      	bge.n	8007580 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8007574:	1ae3      	subs	r3, r4, r3
 8007576:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8007578:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 800757a:	4620      	mov	r0, r4
 800757c:	bc70      	pop	{r4, r5, r6}
 800757e:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8007580:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8007582:	bfc9      	itett	gt
 8007584:	1aeb      	subgt	r3, r5, r3
 8007586:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8007588:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 800758a:	18c9      	addgt	r1, r1, r3
 800758c:	6081      	str	r1, [r0, #8]
}
 800758e:	4620      	mov	r0, r4
 8007590:	bc70      	pop	{r4, r5, r6}
 8007592:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8007594:	2e00      	cmp	r6, #0
 8007596:	ddde      	ble.n	8007556 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8007598:	2900      	cmp	r1, #0
 800759a:	dddc      	ble.n	8007556 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800759c:	68c1      	ldr	r1, [r0, #12]
 800759e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80075a2:	4291      	cmp	r1, r2
 80075a4:	d1de      	bne.n	8007564 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80075a6:	460a      	mov	r2, r1
 80075a8:	e7db      	b.n	8007562 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80075aa:	4e03      	ldr	r6, [pc, #12]	; (80075b8 <PI_Controller+0x88>)
 80075ac:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 80075b0:	bf28      	it	cs
 80075b2:	4632      	movcs	r2, r6
 80075b4:	e7cf      	b.n	8007556 <PI_Controller+0x26>
 80075b6:	bf00      	nop
 80075b8:	80000001 	.word	0x80000001

080075bc <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 80075bc:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80075be:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80075c2:	8b11      	ldrh	r1, [r2, #24]
 80075c4:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80075c6:	8995      	ldrh	r5, [r2, #12]
 80075c8:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80075ca:	fb13 f301 	smulbb	r3, r3, r1
{
 80075ce:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80075d0:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80075d4:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80075d8:	f7ff fcf0 	bl	8006fbc <VBS_GetAvBusVoltage_V>
 80075dc:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 80075e0:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80075e2:	480e      	ldr	r0, [pc, #56]	; (800761c <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 80075e4:	490e      	ldr	r1, [pc, #56]	; (8007620 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 80075e6:	bfb8      	it	lt
 80075e8:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80075ec:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 80075f0:	bfb8      	it	lt
 80075f2:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80075f4:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 80075f6:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80075f8:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 80075fc:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8007600:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007604:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8007606:	fb81 2103 	smull	r2, r1, r1, r3
 800760a:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800760c:	4630      	mov	r0, r6
 800760e:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8007612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007616:	f7ff beef 	b.w	80073f8 <MPM_CalcElMotorPower>
 800761a:	bf00      	nop
 800761c:	1b4e81b5 	.word	0x1b4e81b5
 8007620:	66666667 	.word	0x66666667

08007624 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8007624:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8007626:	4b18      	ldr	r3, [pc, #96]	; (8007688 <startTimers+0x64>)
 8007628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800762a:	07d2      	lsls	r2, r2, #31
 800762c:	b082      	sub	sp, #8
 800762e:	d415      	bmi.n	800765c <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800763a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800763e:	f002 0201 	and.w	r2, r2, #1
 8007642:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007644:	9a01      	ldr	r2, [sp, #4]
 8007646:	694a      	ldr	r2, [r1, #20]
 8007648:	f042 0201 	orr.w	r2, r2, #1
 800764c:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800764e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8007656:	b002      	add	sp, #8
 8007658:	bc30      	pop	{r4, r5}
 800765a:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800765c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007660:	4c0a      	ldr	r4, [pc, #40]	; (800768c <startTimers+0x68>)
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	4d0a      	ldr	r5, [pc, #40]	; (8007690 <startTimers+0x6c>)
 8007668:	4021      	ands	r1, r4
 800766a:	f041 0120 	orr.w	r1, r1, #32
 800766e:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007670:	6958      	ldr	r0, [r3, #20]
 8007672:	f040 0001 	orr.w	r0, r0, #1
 8007676:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007678:	6859      	ldr	r1, [r3, #4]
 800767a:	402a      	ands	r2, r5
 800767c:	4021      	ands	r1, r4
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
}
 8007682:	b002      	add	sp, #8
 8007684:	bc30      	pop	{r4, r5}
 8007686:	4770      	bx	lr
 8007688:	40021000 	.word	0x40021000
 800768c:	fdffff8f 	.word	0xfdffff8f
 8007690:	02000070 	.word	0x02000070

08007694 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8007694:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8007696:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8007698:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 800769c:	d11a      	bne.n	80076d4 <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800769e:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80076a0:	3201      	adds	r2, #1
 80076a2:	0856      	lsrs	r6, r2, #1
 80076a4:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80076a6:	f06f 0702 	mvn.w	r7, #2
 80076aa:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80076ac:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80076ae:	781c      	ldrb	r4, [r3, #0]
 80076b0:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80076b2:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 80076b6:	d80b      	bhi.n	80076d0 <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80076b8:	6904      	ldr	r4, [r0, #16]
 80076ba:	07a4      	lsls	r4, r4, #30
 80076bc:	d5f7      	bpl.n	80076ae <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 80076be:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80076c0:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80076c2:	6107      	str	r7, [r0, #16]
 80076c4:	d8f3      	bhi.n	80076ae <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 80076c6:	781c      	ldrb	r4, [r3, #0]
 80076c8:	2c0f      	cmp	r4, #15
 80076ca:	d8f0      	bhi.n	80076ae <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 80076cc:	2301      	movs	r3, #1
 80076ce:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 80076d0:	bcf0      	pop	{r4, r5, r6, r7}
 80076d2:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80076d4:	2c60      	cmp	r4, #96	; 0x60
 80076d6:	d1e3      	bne.n	80076a0 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80076d8:	3201      	adds	r2, #1
 80076da:	0156      	lsls	r6, r2, #5
 80076dc:	e7e3      	b.n	80076a6 <waitForPolarizationEnd+0x12>
 80076de:	bf00      	nop

080076e0 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80076e0:	6843      	ldr	r3, [r0, #4]
 80076e2:	4718      	bx	r3

080076e4 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80076e4:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076e6:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80076ea:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 80076ec:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076ee:	140c      	asrs	r4, r1, #16
{
 80076f0:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076f2:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80076f6:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80076f8:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80076fc:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8007700:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8007704:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007708:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 800770c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8007714:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8007718:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800771c:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8007720:	db77      	blt.n	8007812 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8007722:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007726:	db4e      	blt.n	80077c6 <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007728:	1aad      	subs	r5, r5, r2
 800772a:	bf44      	itt	mi
 800772c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007730:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8007734:	2900      	cmp	r1, #0
 8007736:	bfbc      	itt	lt
 8007738:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800773c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007740:	2b00      	cmp	r3, #0
 8007742:	bfb8      	it	lt
 8007744:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8007748:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800774c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007750:	bfb8      	it	lt
 8007752:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8007756:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8007758:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800775c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8007760:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8007764:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8007768:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800776a:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 800776c:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8007770:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007774:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800777c:	b292      	uxth	r2, r2
 800777e:	b289      	uxth	r1, r1
 8007780:	b29b      	uxth	r3, r3
 8007782:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8007784:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8007786:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8007788:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 800778a:	d118      	bne.n	80077be <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800778c:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8007790:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8007794:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8007796:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 800779a:	bfcc      	ite	gt
 800779c:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800779e:	1b12      	suble	r2, r2, r4
 80077a0:	b292      	uxth	r2, r2
 80077a2:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80077a4:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 80077a8:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 80077aa:	bfcc      	ite	gt
 80077ac:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80077ae:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 80077b0:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80077b2:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80077b4:	bfcc      	ite	gt
 80077b6:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80077b8:	1b1b      	suble	r3, r3, r4
 80077ba:	8681      	strh	r1, [r0, #52]	; 0x34
 80077bc:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80077be:	6983      	ldr	r3, [r0, #24]
}
 80077c0:	b003      	add	sp, #12
 80077c2:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80077c4:	4718      	bx	r3
      if ( wX <= 0 )
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	dd47      	ble.n	800785a <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80077ca:	1aa5      	subs	r5, r4, r2
 80077cc:	bf44      	itt	mi
 80077ce:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80077d2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80077d6:	2900      	cmp	r1, #0
 80077d8:	bfb8      	it	lt
 80077da:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 80077de:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 80077e2:	bfb8      	it	lt
 80077e4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 80077e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80077ec:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 80077ee:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80077f0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80077f4:	bfb8      	it	lt
 80077f6:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80077fa:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80077fe:	bfb8      	it	lt
 8007800:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8007804:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8007808:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800780c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800780e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8007810:	e7ac      	b.n	800776c <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8007812:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007816:	db69      	blt.n	80078ec <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8007818:	2c00      	cmp	r4, #0
 800781a:	dd43      	ble.n	80078a4 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800781c:	1b2d      	subs	r5, r5, r4
 800781e:	bf48      	it	mi
 8007820:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8007824:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8007828:	bf48      	it	mi
 800782a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfb8      	it	lt
 8007832:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8007836:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800783a:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800783e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8007842:	bfb8      	it	lt
 8007844:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8007848:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800784c:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8007850:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8007852:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8007854:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8007858:	e788      	b.n	800776c <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800785a:	1b2d      	subs	r5, r5, r4
 800785c:	bf44      	itt	mi
 800785e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8007862:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfb8      	it	lt
 800786a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 800786e:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8007872:	bfb8      	it	lt
 8007874:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8007878:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 800787c:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800787e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8007882:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007886:	bfb8      	it	lt
 8007888:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800788c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8007890:	bfb8      	it	lt
 8007892:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8007896:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 800789a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 800789e:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80078a0:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 80078a2:	e763      	b.n	800776c <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80078a4:	1aa5      	subs	r5, r4, r2
 80078a6:	bf44      	itt	mi
 80078a8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80078ac:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80078b0:	2900      	cmp	r1, #0
 80078b2:	bfb8      	it	lt
 80078b4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 80078b8:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 80078bc:	bfb8      	it	lt
 80078be:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 80078c2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80078c6:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 80078c8:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80078ca:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80078ce:	bfb8      	it	lt
 80078d0:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80078d4:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80078d8:	bfb8      	it	lt
 80078da:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80078de:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 80078e2:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 80078e4:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 80078e6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80078ea:	e73f      	b.n	800776c <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80078ec:	1aad      	subs	r5, r5, r2
 80078ee:	bf44      	itt	mi
 80078f0:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80078f4:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80078f8:	2900      	cmp	r1, #0
 80078fa:	bfbc      	itt	lt
 80078fc:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8007900:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8007904:	2b00      	cmp	r3, #0
 8007906:	bfb8      	it	lt
 8007908:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800790c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8007910:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007914:	bfb8      	it	lt
 8007916:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800791a:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 800791c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8007920:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8007924:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8007928:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800792a:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800792c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8007930:	e71c      	b.n	800776c <PWMC_SetPhaseVoltage+0x88>
 8007932:	bf00      	nop

08007934 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8007934:	6883      	ldr	r3, [r0, #8]
 8007936:	4718      	bx	r3

08007938 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8007938:	b510      	push	{r4, lr}
 800793a:	4604      	mov	r4, r0
 800793c:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800793e:	b199      	cbz	r1, 8007968 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8007940:	2901      	cmp	r1, #1
 8007942:	d002      	beq.n	800794a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8007944:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8007946:	b002      	add	sp, #8
 8007948:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800794a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800794e:	b1cb      	cbz	r3, 8007984 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8007950:	3b01      	subs	r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	9101      	str	r1, [sp, #4]
 8007956:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f2      	bne.n	8007944 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800795e:	6903      	ldr	r3, [r0, #16]
 8007960:	4798      	blx	r3
        retVal = true;
 8007962:	9901      	ldr	r1, [sp, #4]
 8007964:	4608      	mov	r0, r1
 8007966:	e7ee      	b.n	8007946 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8007968:	f7ff ffe4 	bl	8007934 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800796c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007970:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8007978:	4620      	mov	r0, r4
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	4798      	blx	r3
      retVal = true;
 800797e:	2001      	movs	r0, #1
}
 8007980:	b002      	add	sp, #8
 8007982:	bd10      	pop	{r4, pc}
      retVal = true;
 8007984:	4608      	mov	r0, r1
}
 8007986:	b002      	add	sp, #8
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop

0800798c <PWMC_TurnOnLowSides>:
  *
  * @param  pHandle: handle on the target instance of the PWMC component
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle )
{
  pHandle->pFctTurnOnLowSides( pHandle );
 800798c:	6943      	ldr	r3, [r0, #20]
 800798e:	4718      	bx	r3

08007990 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8007990:	69c3      	ldr	r3, [r0, #28]
 8007992:	4718      	bx	r3

08007994 <PWMC_GetTurnOnLowSidesAction>:
 *         controlled by the @p pHandle PWMC component: true if it
 *         is active, false otherwise*/
__weak bool PWMC_GetTurnOnLowSidesAction( PWMC_Handle_t * pHandle )
{
  return pHandle->TurnOnLowSidesAction;
}
 8007994:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop

0800799c <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800799c:	6883      	ldr	r3, [r0, #8]
 800799e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80079a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80079a6:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80079a8:	6883      	ldr	r3, [r0, #8]
 80079aa:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 80079ac:	b082      	sub	sp, #8
 80079ae:	d418      	bmi.n	80079e2 <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 80079b0:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 80079b2:	6882      	ldr	r2, [r0, #8]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4924      	ldr	r1, [pc, #144]	; (8007a48 <R3_2_ADCxInit+0xac>)
 80079b8:	099b      	lsrs	r3, r3, #6
 80079ba:	fba1 1303 	umull	r1, r3, r1, r3
 80079be:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80079c2:	099b      	lsrs	r3, r3, #6
 80079c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079ce:	6082      	str	r2, [r0, #8]
 80079d0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80079d2:	9b01      	ldr	r3, [sp, #4]
 80079d4:	b12b      	cbz	r3, 80079e2 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	3b01      	subs	r3, #1
 80079da:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f9      	bne.n	80079d6 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 80079e2:	6883      	ldr	r3, [r0, #8]
 80079e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80079e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80079ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079f0:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80079f2:	6883      	ldr	r3, [r0, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dbfc      	blt.n	80079f2 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80079f8:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 80079fa:	07da      	lsls	r2, r3, #31
 80079fc:	d408      	bmi.n	8007a10 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 80079fe:	4a13      	ldr	r2, [pc, #76]	; (8007a4c <R3_2_ADCxInit+0xb0>)
 8007a00:	6883      	ldr	r3, [r0, #8]
 8007a02:	4013      	ands	r3, r2
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007a0a:	6803      	ldr	r3, [r0, #0]
 8007a0c:	07db      	lsls	r3, r3, #31
 8007a0e:	d5f7      	bpl.n	8007a00 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8007a10:	6882      	ldr	r2, [r0, #8]
 8007a12:	490e      	ldr	r1, [pc, #56]	; (8007a4c <R3_2_ADCxInit+0xb0>)
 8007a14:	400a      	ands	r2, r1
 8007a16:	f042 0208 	orr.w	r2, r2, #8
 8007a1a:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8007a1c:	6882      	ldr	r2, [r0, #8]
 8007a1e:	400a      	ands	r2, r1
 8007a20:	f042 0220 	orr.w	r2, r2, #32
 8007a24:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8007a26:	68c3      	ldr	r3, [r0, #12]
 8007a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a34:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8007a36:	6883      	ldr	r3, [r0, #8]
 8007a38:	400b      	ands	r3, r1
 8007a3a:	f043 0304 	orr.w	r3, r3, #4
 8007a3e:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8007a40:	b002      	add	sp, #8
 8007a42:	4770      	bx	lr
 8007a44:	20000578 	.word	0x20000578
 8007a48:	053e2d63 	.word	0x053e2d63
 8007a4c:	7fffffc0 	.word	0x7fffffc0

08007a50 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8007a50:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a52:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007a54:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8007a58:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007a5c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a60:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007a62:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a64:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007a66:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8007a68:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8007a6a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a6c:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007a6e:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a70:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007a74:	4904      	ldr	r1, [pc, #16]	; (8007a88 <R3_2_SetADCSampPointPolarization+0x38>)
 8007a76:	685b      	ldr	r3, [r3, #4]
}
 8007a78:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007a7c:	420b      	tst	r3, r1
}
 8007a7e:	bf14      	ite	ne
 8007a80:	2001      	movne	r0, #1
 8007a82:	2000      	moveq	r0, #0
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	02000070 	.word	0x02000070

08007a8c <R3_2_SetADCSampPointSectX>:
{
 8007a8c:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8007a8e:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8007a92:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8007a94:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007a96:	1aca      	subs	r2, r1, r3
 8007a98:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8007a9c:	b292      	uxth	r2, r2
 8007a9e:	42b2      	cmp	r2, r6
 8007aa0:	d914      	bls.n	8007acc <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8007aa2:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8007aa4:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8007aa6:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8007aa8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007aac:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007aae:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8007ab0:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8007ab2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ab4:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ab6:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ab8:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007aba:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007abc:	6852      	ldr	r2, [r2, #4]
 8007abe:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <R3_2_SetADCSampPointSectX+0x70>)
 8007ac0:	421a      	tst	r2, r3
}
 8007ac2:	bf14      	ite	ne
 8007ac4:	2001      	movne	r0, #1
 8007ac6:	2000      	moveq	r0, #0
 8007ac8:	bc70      	pop	{r4, r5, r6}
 8007aca:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8007acc:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 8007ace:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8007ad0:	b2ad      	uxth	r5, r5
 8007ad2:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8007ad6:	d904      	bls.n	8007ae2 <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8007ad8:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	e7e4      	b.n	8007aac <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8007ae2:	4433      	add	r3, r6
 8007ae4:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	d8e0      	bhi.n	8007aac <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8007aea:	43db      	mvns	r3, r3
 8007aec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8007af0:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8007af4:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8007af6:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8007afa:	e7d7      	b.n	8007aac <R3_2_SetADCSampPointSectX+0x20>
 8007afc:	02000070 	.word	0x02000070

08007b00 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8007b00:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b02:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007b04:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8007b08:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8007b0a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8007b12:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007b14:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b16:	6853      	ldr	r3, [r2, #4]
 8007b18:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8007b22:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8007b26:	2b0f      	cmp	r3, #15
 8007b28:	d80b      	bhi.n	8007b42 <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007b2a:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8007b2e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 8007b32:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007b34:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8007b36:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007b38:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007b42:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8007b44:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 8007b46:	600b      	str	r3, [r1, #0]
}
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop

08007b4c <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b4c:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8007b4e:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007b50:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b54:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007b56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5c:	681c      	ldr	r4, [r3, #0]
 8007b5e:	6853      	ldr	r3, [r2, #4]
 8007b60:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b68:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8007b6a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	d808      	bhi.n	8007b84 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8007b72:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007b76:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007b7c:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8007b7e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007b82:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007b84:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8007b86:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8007b8a:	600b      	str	r3, [r1, #0]
}
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop

08007b90 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b90:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007b92:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b94:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007b96:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b9a:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007b9c:	f06f 0001 	mvn.w	r0, #1
 8007ba0:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ba2:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ba4:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ba6:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007ba8:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007baa:	07db      	lsls	r3, r3, #31
 8007bac:	d5fc      	bpl.n	8007ba8 <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007bae:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb4:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007bb6:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d000      	beq.n	8007bc0 <R3_2_TurnOnLowSides+0x30>
 8007bbe:	4770      	bx	lr
{
 8007bc0:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007bc2:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007bc6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007bc8:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007bcc:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007bd0:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007bd4:	61ae      	str	r6, [r5, #24]
 8007bd6:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8007bd8:	bc70      	pop	{r4, r5, r6}
 8007bda:	619a      	str	r2, [r3, #24]
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007be0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8007be2:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007be6:	688b      	ldr	r3, [r1, #8]
{
 8007be8:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 8007bea:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007bec:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 8007bee:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007bf2:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8007bf6:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007bfa:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8007bfe:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c00:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c02:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c04:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007c06:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c08:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007c0a:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007c0c:	07d2      	lsls	r2, r2, #31
 8007c0e:	d5fc      	bpl.n	8007c0a <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c10:	f06f 0201 	mvn.w	r2, #1
 8007c14:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c1c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c24:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007c26:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007c2a:	2a02      	cmp	r2, #2
 8007c2c:	d008      	beq.n	8007c40 <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c2e:	f06f 0201 	mvn.w	r2, #1
 8007c32:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8007c3a:	bc30      	pop	{r4, r5}
 8007c3c:	60da      	str	r2, [r3, #12]
 8007c3e:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007c40:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007c42:	6a0c      	ldr	r4, [r1, #32]
 8007c44:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007c48:	f240 5255 	movw	r2, #1365	; 0x555
 8007c4c:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007c4e:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007c52:	d007      	beq.n	8007c64 <R3_2_SwitchOnPWM+0x84>
 8007c54:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007c56:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007c5a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007c5e:	6184      	str	r4, [r0, #24]
 8007c60:	6191      	str	r1, [r2, #24]
}
 8007c62:	e7e4      	b.n	8007c2e <R3_2_SwitchOnPWM+0x4e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007c64:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007c66:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007c6a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007c6e:	6284      	str	r4, [r0, #40]	; 0x28
 8007c70:	6291      	str	r1, [r2, #40]	; 0x28
}
 8007c72:	e7dc      	b.n	8007c2e <R3_2_SwitchOnPWM+0x4e>

08007c74 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007c74:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8007c76:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007c78:	68d3      	ldr	r3, [r2, #12]
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
{
 8007c7e:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8007c80:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 8007c84:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007c86:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007c88:	2500      	movs	r5, #0
 8007c8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c8e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8007c92:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8007c94:	b91c      	cbnz	r4, 8007c9e <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007c96:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d00d      	beq.n	8007cba <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007c9e:	f06f 0301 	mvn.w	r3, #1
 8007ca2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007ca4:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007ca6:	07db      	lsls	r3, r3, #31
 8007ca8:	d5fc      	bpl.n	8007ca4 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007caa:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6111      	str	r1, [r2, #16]
}
 8007cb2:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 8007cb4:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 8007cb8:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007cba:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007cbe:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8007cc2:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007cc4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007cc6:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007cca:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007cce:	62a5      	str	r5, [r4, #40]	; 0x28
 8007cd0:	6299      	str	r1, [r3, #40]	; 0x28
}
 8007cd2:	e7e4      	b.n	8007c9e <R3_2_SwitchOffPWM+0x2a>

08007cd4 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8007cd4:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007cd6:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007cd8:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007cda:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007cdc:	686a      	ldr	r2, [r5, #4]
 8007cde:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007ce2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007ce6:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007ce8:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8007cec:	4a0c      	ldr	r2, [pc, #48]	; (8007d20 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8007cee:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007cf2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007cf4:	6800      	ldr	r0, [r0, #0]
 8007cf6:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	db05      	blt.n	8007d08 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 8007cfc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007d00:	4293      	cmp	r3, r2
 8007d02:	dc0a      	bgt.n	8007d1a <R3_2_RLGetPhaseCurrents+0x46>
 8007d04:	b21b      	sxth	r3, r3
 8007d06:	e000      	b.n	8007d0a <R3_2_RLGetPhaseCurrents+0x36>
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <R3_2_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f363 020f 	bfi	r2, r3, #0, #16
 8007d10:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 8007d14:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 8007d16:	600a      	str	r2, [r1, #0]
}
 8007d18:	4770      	bx	lr
 8007d1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007d1e:	e7f4      	b.n	8007d0a <R3_2_RLGetPhaseCurrents+0x36>
 8007d20:	ffff8002 	.word	0xffff8002
 8007d24:	ffff8001 	.word	0xffff8001

08007d28 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007d28:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 8007d2a:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007d2c:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 8007d2e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d32:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d34:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d38:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d3a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007d3c:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007d3e:	07db      	lsls	r3, r3, #31
 8007d40:	d5fc      	bpl.n	8007d3c <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007d42:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d48:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007d4a:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d000      	beq.n	8007d54 <R3_2_RLTurnOnLowSides+0x2c>
 8007d52:	4770      	bx	lr
{
 8007d54:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007d56:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007d5a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007d5c:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007d60:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007d64:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007d68:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007d6a:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 8007d6c:	bc70      	pop	{r4, r5, r6}
 8007d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop

08007d74 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007d74:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 8007d76:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007d78:	688b      	ldr	r3, [r1, #8]
{
 8007d7a:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007d7c:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8007d80:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d84:	f06f 0201 	mvn.w	r2, #1
 8007d88:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007d8a:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007d8c:	07d6      	lsls	r6, r2, #31
 8007d8e:	d5fc      	bpl.n	8007d8a <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8007d90:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d94:	f06f 0701 	mvn.w	r7, #1
 8007d98:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d9a:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007d9c:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d9e:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007da0:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007da2:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007da4:	07d2      	lsls	r2, r2, #31
 8007da6:	d5fc      	bpl.n	8007da2 <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	f042 0201 	orr.w	r2, r2, #1
 8007dae:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007db6:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dbe:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007dc0:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007dc4:	2a02      	cmp	r2, #2
 8007dc6:	d00f      	beq.n	8007de8 <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8007dce:	68aa      	ldr	r2, [r5, #8]
 8007dd0:	4913      	ldr	r1, [pc, #76]	; (8007e20 <R3_2_RLSwitchOnPWM+0xac>)
 8007dd2:	400a      	ands	r2, r1
 8007dd4:	f042 0208 	orr.w	r2, r2, #8
 8007dd8:	60aa      	str	r2, [r5, #8]
 8007dda:	68a3      	ldr	r3, [r4, #8]
 8007ddc:	400b      	ands	r3, r1
 8007dde:	f043 0308 	orr.w	r3, r3, #8
 8007de2:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 8007de4:	bcf0      	pop	{r4, r5, r6, r7}
 8007de6:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007de8:	6a1a      	ldr	r2, [r3, #32]
 8007dea:	f240 5355 	movw	r3, #1365	; 0x555
 8007dee:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007df0:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007df4:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007df8:	d008      	beq.n	8007e0c <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007dfa:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007dfc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007dfe:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007e02:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8007e06:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007e08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e0a:	e7dd      	b.n	8007dc8 <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 8007e0c:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007e0e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007e10:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007e14:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8007e18:	62b7      	str	r7, [r6, #40]	; 0x28
 8007e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e1c:	e7d4      	b.n	8007dc8 <R3_2_RLSwitchOnPWM+0x54>
 8007e1e:	bf00      	nop
 8007e20:	7fffffc0 	.word	0x7fffffc0

08007e24 <R3_2_SetAOReferenceVoltage>:
{
 8007e24:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8007e26:	0c84      	lsrs	r4, r0, #18
 8007e28:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 8007e2c:	f101 0508 	add.w	r5, r1, #8
 8007e30:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007e32:	5963      	ldr	r3, [r4, r5]
 8007e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 8007e40:	684a      	ldr	r2, [r1, #4]
 8007e42:	f000 0303 	and.w	r3, r0, #3
 8007e46:	4313      	orrs	r3, r2
 8007e48:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8007e4a:	680a      	ldr	r2, [r1, #0]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f000 0010 	and.w	r0, r0, #16
 8007e52:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007e56:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007e5a:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <R3_2_SetAOReferenceVoltage+0x8c>)
 8007e5c:	d014      	beq.n	8007e88 <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4c14      	ldr	r4, [pc, #80]	; (8007eb4 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 8007e62:	680a      	ldr	r2, [r1, #0]
 8007e64:	fba4 4303 	umull	r4, r3, r4, r3
 8007e68:	0cdb      	lsrs	r3, r3, #19
 8007e6a:	00db      	lsls	r3, r3, #3
 8007e6c:	4310      	orrs	r0, r2
 8007e6e:	6008      	str	r0, [r1, #0]
 8007e70:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	b12b      	cbz	r3, 8007e82 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007e7c:	9b00      	ldr	r3, [sp, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f9      	bne.n	8007e76 <R3_2_SetAOReferenceVoltage+0x52>
}
 8007e82:	b002      	add	sp, #8
 8007e84:	bc30      	pop	{r4, r5}
 8007e86:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007e88:	4a0a      	ldr	r2, [pc, #40]	; (8007eb4 <R3_2_SetAOReferenceVoltage+0x90>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e90:	0cdb      	lsrs	r3, r3, #19
 8007e92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007e96:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f1      	beq.n	8007e82 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f9      	bne.n	8007e9e <R3_2_SetAOReferenceVoltage+0x7a>
}
 8007eaa:	b002      	add	sp, #8
 8007eac:	bc30      	pop	{r4, r5}
 8007eae:	4770      	bx	lr
 8007eb0:	20000578 	.word	0x20000578
 8007eb4:	431bde83 	.word	0x431bde83

08007eb8 <R3_2_Init>:
{
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 8007ec2:	f8df e284 	ldr.w	lr, [pc, #644]	; 8008148 <R3_2_Init+0x290>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8007ec6:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 8007ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007eca:	686a      	ldr	r2, [r5, #4]
 8007ecc:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007ece:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ed0:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007ed2:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007ed6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007eda:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007edc:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007ee0:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8007ee4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007ee6:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8007ee8:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8007eec:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8007ef0:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007ef2:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007ef4:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007ef6:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007ef8:	f022 0220 	bic.w	r2, r2, #32
 8007efc:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007efe:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007f00:	6872      	ldr	r2, [r6, #4]
 8007f02:	f022 0204 	bic.w	r2, r2, #4
 8007f06:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007f08:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007f0a:	6872      	ldr	r2, [r6, #4]
 8007f0c:	f022 0220 	bic.w	r2, r2, #32
 8007f10:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007f12:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007f14:	498b      	ldr	r1, [pc, #556]	; (8008144 <R3_2_Init+0x28c>)
 8007f16:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 8007f18:	4574      	cmp	r4, lr
 8007f1a:	bf0c      	ite	eq
 8007f1c:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8007f20:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8007f24:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 8007f26:	f1bc 0f00 	cmp.w	ip, #0
 8007f2a:	d014      	beq.n	8007f56 <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8007f2c:	f8dc 2000 	ldr.w	r2, [ip]
 8007f30:	b11a      	cbz	r2, 8007f3a <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8007f32:	6811      	ldr	r1, [r2, #0]
 8007f34:	f041 0101 	orr.w	r1, r1, #1
 8007f38:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8007f3a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007f3e:	b11a      	cbz	r2, 8007f48 <R3_2_Init+0x90>
 8007f40:	6811      	ldr	r1, [r2, #0]
 8007f42:	f041 0101 	orr.w	r1, r1, #1
 8007f46:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8007f48:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007f4c:	b11a      	cbz	r2, 8007f56 <R3_2_Init+0x9e>
 8007f4e:	6811      	ldr	r1, [r2, #0]
 8007f50:	f041 0101 	orr.w	r1, r1, #1
 8007f54:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8007f56:	f1bb 0f00 	cmp.w	fp, #0
 8007f5a:	d017      	beq.n	8007f8c <R3_2_Init+0xd4>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 8007f5c:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 8007f60:	2a01      	cmp	r2, #1
 8007f62:	d007      	beq.n	8007f74 <R3_2_Init+0xbc>
 8007f64:	9a00      	ldr	r2, [sp, #0]
 8007f66:	b12a      	cbz	r2, 8007f74 <R3_2_Init+0xbc>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007f68:	4611      	mov	r1, r2
 8007f6a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007f6c:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007f70:	f7ff ff58 	bl	8007e24 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007f74:	f8db 3000 	ldr.w	r3, [fp]
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007f80:	f8db 3000 	ldr.w	r3, [fp]
 8007f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f88:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 8007f8c:	f1ba 0f00 	cmp.w	sl, #0
 8007f90:	d018      	beq.n	8007fc4 <R3_2_Init+0x10c>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8007f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f94:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8007f98:	2a01      	cmp	r2, #1
 8007f9a:	d007      	beq.n	8007fac <R3_2_Init+0xf4>
 8007f9c:	9a01      	ldr	r2, [sp, #4]
 8007f9e:	b12a      	cbz	r2, 8007fac <R3_2_Init+0xf4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007fa4:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007fa8:	f7ff ff3c 	bl	8007e24 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007fac:	f8da 3000 	ldr.w	r3, [sl]
 8007fb0:	f043 0301 	orr.w	r3, r3, #1
 8007fb4:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007fb8:	f8da 3000 	ldr.w	r3, [sl]
 8007fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fc0:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 8007fc4:	f1b9 0f00 	cmp.w	r9, #0
 8007fc8:	d018      	beq.n	8007ffc <R3_2_Init+0x144>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 8007fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fcc:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8007fd0:	2a01      	cmp	r2, #1
 8007fd2:	d007      	beq.n	8007fe4 <R3_2_Init+0x12c>
 8007fd4:	9a02      	ldr	r2, [sp, #8]
 8007fd6:	b12a      	cbz	r2, 8007fe4 <R3_2_Init+0x12c>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007fd8:	4611      	mov	r1, r2
 8007fda:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8007fdc:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007fe0:	f7ff ff20 	bl	8007e24 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007fe4:	f8d9 3000 	ldr.w	r3, [r9]
 8007fe8:	f043 0301 	orr.w	r3, r3, #1
 8007fec:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007ff0:	f8d9 3000 	ldr.w	r3, [r9]
 8007ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ff8:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 8007ffc:	f1b8 0f00 	cmp.w	r8, #0
 8008000:	d018      	beq.n	8008034 <R3_2_Init+0x17c>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 8008002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008004:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8008008:	2a01      	cmp	r2, #1
 800800a:	d007      	beq.n	800801c <R3_2_Init+0x164>
 800800c:	9a03      	ldr	r2, [sp, #12]
 800800e:	b12a      	cbz	r2, 800801c <R3_2_Init+0x164>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8008010:	4611      	mov	r1, r2
 8008012:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008014:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 8008018:	f7ff ff04 	bl	8007e24 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800801c:	f8d8 3000 	ldr.w	r3, [r8]
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008028:	f8d8 3000 	ldr.w	r3, [r8]
 800802c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008030:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008034:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 8008036:	07d8      	lsls	r0, r3, #31
 8008038:	d56c      	bpl.n	8008114 <R3_2_Init+0x25c>
 800803a:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800803c:	07d9      	lsls	r1, r3, #31
 800803e:	d575      	bpl.n	800812c <R3_2_Init+0x274>
  volatile uint32_t Brk2Timeout = 1000;
 8008040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008044:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008046:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8008048:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008050:	6863      	ldr	r3, [r4, #4]
 8008052:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805a:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800805c:	69a3      	ldr	r3, [r4, #24]
 800805e:	f043 0308 	orr.w	r3, r3, #8
 8008062:	61a3      	str	r3, [r4, #24]
 8008064:	69a3      	ldr	r3, [r4, #24]
 8008066:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800806a:	61a3      	str	r3, [r4, #24]
 800806c:	69e3      	ldr	r3, [r4, #28]
 800806e:	f043 0308 	orr.w	r3, r3, #8
 8008072:	61e3      	str	r3, [r4, #28]
 8008074:	69e3      	ldr	r3, [r4, #28]
 8008076:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800807a:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800807c:	6963      	ldr	r3, [r4, #20]
 800807e:	f043 0301 	orr.w	r3, r3, #1
 8008082:	6163      	str	r3, [r4, #20]
 8008084:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8008088:	2b02      	cmp	r3, #2
 800808a:	d029      	beq.n	80080e0 <R3_2_Init+0x228>
    if ( pHandle->_Super.Motor == M1 )
 800808c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008090:	b92b      	cbnz	r3, 800809e <R3_2_Init+0x1e6>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8008092:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 8008096:	2b01      	cmp	r3, #1
 8008098:	d030      	beq.n	80080fc <R3_2_Init+0x244>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800809a:	2b03      	cmp	r3, #3
 800809c:	d04a      	beq.n	8008134 <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800809e:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80080a2:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80080a4:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 80080a8:	b16b      	cbz	r3, 80080c6 <R3_2_Init+0x20e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	05da      	lsls	r2, r3, #23
 80080ae:	d50a      	bpl.n	80080c6 <R3_2_Init+0x20e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80080b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 80080b4:	9b05      	ldr	r3, [sp, #20]
 80080b6:	b133      	cbz	r3, 80080c6 <R3_2_Init+0x20e>
 80080b8:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	3b01      	subs	r3, #1
 80080be:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	05db      	lsls	r3, r3, #23
 80080c4:	d4f6      	bmi.n	80080b4 <R3_2_Init+0x1fc>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080cc:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80080ce:	6a23      	ldr	r3, [r4, #32]
 80080d0:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80080d4:	f043 0305 	orr.w	r3, r3, #5
 80080d8:	6223      	str	r3, [r4, #32]
}
 80080da:	b007      	add	sp, #28
 80080dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80080e0:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d109      	bne.n	80080fc <R3_2_Init+0x244>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80080e8:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 80080ec:	2903      	cmp	r1, #3
 80080ee:	d105      	bne.n	80080fc <R3_2_Init+0x244>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80080f0:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80080f2:	6963      	ldr	r3, [r4, #20]
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80080fa:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80080fc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008100:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008102:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008104:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008108:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800810a:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1cb      	bne.n	80080aa <R3_2_Init+0x1f2>
 8008112:	e7d8      	b.n	80080c6 <R3_2_Init+0x20e>
      R3_2_ADCxInit (ADCx_1);
 8008114:	4628      	mov	r0, r5
 8008116:	f7ff fc41 	bl	800799c <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800811e:	686b      	ldr	r3, [r5, #4]
 8008120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008124:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008126:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8008128:	07d9      	lsls	r1, r3, #31
 800812a:	d489      	bmi.n	8008040 <R3_2_Init+0x188>
      R3_2_ADCxInit (ADCx_2);
 800812c:	4630      	mov	r0, r6
 800812e:	f7ff fc35 	bl	800799c <R3_2_ADCxInit>
 8008132:	e785      	b.n	8008040 <R3_2_Init+0x188>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008134:	2101      	movs	r1, #1
 8008136:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008138:	6961      	ldr	r1, [r4, #20]
 800813a:	f041 0101 	orr.w	r1, r1, #1
 800813e:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008140:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008142:	e7ac      	b.n	800809e <R3_2_Init+0x1e6>
 8008144:	e0042000 	.word	0xe0042000
 8008148:	40012c00 	.word	0x40012c00

0800814c <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800814c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800814e:	4946      	ldr	r1, [pc, #280]	; (8008268 <R3_2_CurrentReadingPolarization+0x11c>)
{
 8008150:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->PhaseAOffset = 0u;
 8008152:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008154:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008156:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 800815a:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 800815e:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8008160:	65c2      	str	r2, [r0, #92]	; 0x5c
 8008162:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8008166:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800816a:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 800816e:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008170:	4b3e      	ldr	r3, [pc, #248]	; (800826c <R3_2_CurrentReadingPolarization+0x120>)
 8008172:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008174:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8008176:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008178:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
{
 800817c:	b083      	sub	sp, #12
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800817e:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 8008180:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8008184:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 8008188:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800818a:	f7ff fd29 	bl	8007be0 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800818e:	4a38      	ldr	r2, [pc, #224]	; (8008270 <R3_2_CurrentReadingPolarization+0x124>)
 8008190:	686b      	ldr	r3, [r5, #4]
 8008192:	4013      	ands	r3, r2
 8008194:	2b70      	cmp	r3, #112	; 0x70
 8008196:	d1fb      	bne.n	8008190 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	4936      	ldr	r1, [pc, #216]	; (8008274 <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 800819c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800819e:	400a      	ands	r2, r1
 80081a0:	f042 0208 	orr.w	r2, r2, #8
 80081a4:	60ba      	str	r2, [r7, #8]
 80081a6:	68b3      	ldr	r3, [r6, #8]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80081a8:	4f33      	ldr	r7, [pc, #204]	; (8008278 <R3_2_CurrentReadingPolarization+0x12c>)
 80081aa:	400b      	ands	r3, r1
 80081ac:	f043 0308 	orr.w	r3, r3, #8
 80081b0:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 80081b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80081b6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80081ba:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 80081be:	4628      	mov	r0, r5
 80081c0:	e9cd 3100 	strd	r3, r1, [sp]
 80081c4:	f7ff fa66 	bl	8007694 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80081c8:	4620      	mov	r0, r4
 80081ca:	f7ff fd53 	bl	8007c74 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 80081ce:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80081d0:	4a2a      	ldr	r2, [pc, #168]	; (800827c <R3_2_CurrentReadingPolarization+0x130>)
 80081d2:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80081d4:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 80081d6:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 80081da:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 80081de:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80081e2:	f7ff fcfd 	bl	8007be0 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80081e6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80081e8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80081ec:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 80081f0:	4628      	mov	r0, r5
 80081f2:	f7ff fa4f 	bl	8007694 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80081f6:	4620      	mov	r0, r4
 80081f8:	f7ff fd3c 	bl	8007c74 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80081fc:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008200:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8008202:	481f      	ldr	r0, [pc, #124]	; (8008280 <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008204:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008206:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008208:	0912      	lsrs	r2, r2, #4
 800820a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008212:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8008214:	61a0      	str	r0, [r4, #24]
 8008216:	f023 0308 	bic.w	r3, r3, #8
 800821a:	61ab      	str	r3, [r5, #24]
 800821c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800821e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8008222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008226:	61aa      	str	r2, [r5, #24]
 8008228:	69ea      	ldr	r2, [r5, #28]
 800822a:	f022 0208 	bic.w	r2, r2, #8
 800822e:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008230:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008232:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008234:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008236:	69ab      	ldr	r3, [r5, #24]
 8008238:	f043 0308 	orr.w	r3, r3, #8
 800823c:	61ab      	str	r3, [r5, #24]
 800823e:	69ab      	ldr	r3, [r5, #24]
 8008240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008244:	61ab      	str	r3, [r5, #24]
 8008246:	69eb      	ldr	r3, [r5, #28]
 8008248:	f043 0308 	orr.w	r3, r3, #8
 800824c:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800824e:	6a2b      	ldr	r3, [r5, #32]
 8008250:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008254:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8008258:	2204      	movs	r2, #4
 800825a:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 800825c:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
  pHandle->_Super.Sector=SECTOR_5;
 8008260:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
}
 8008264:	b003      	add	sp, #12
 8008266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008268:	08007b01 	.word	0x08007b01
 800826c:	08007a51 	.word	0x08007a51
 8008270:	02000070 	.word	0x02000070
 8008274:	7fffffc0 	.word	0x7fffffc0
 8008278:	080016a9 	.word	0x080016a9
 800827c:	08007b4d 	.word	0x08007b4d
 8008280:	08007a8d 	.word	0x08007a8d

08008284 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008284:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8008286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828a:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800828c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008290:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8008294:	2800      	cmp	r0, #0
 8008296:	d033      	beq.n	8008300 <R3_2_TIMx_UP_IRQHandler+0x7c>
    while (ADCx_1->JSQR != 0x0u)
 8008298:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1fc      	bne.n	8008298 <R3_2_TIMx_UP_IRQHandler+0x14>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800829e:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 80082a2:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 80082a6:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 80082a8:	b12f      	cbz	r7, 80082b6 <R3_2_TIMx_UP_IRQHandler+0x32>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 80082aa:	6838      	ldr	r0, [r7, #0]
 80082ac:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80082ae:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 80082b2:	4330      	orrs	r0, r6
 80082b4:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 80082b6:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 80082b8:	b13f      	cbz	r7, 80082ca <R3_2_TIMx_UP_IRQHandler+0x46>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 80082ba:	6838      	ldr	r0, [r7, #0]
 80082bc:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 80082c0:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 80082c4:	ea43 030e 	orr.w	r3, r3, lr
 80082c8:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80082ca:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80082ce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80082d2:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80082d4:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80082d8:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80082da:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80082dc:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80082de:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80082e2:	686b      	ldr	r3, [r5, #4]
 80082e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80082e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80082f0:	2280      	movs	r2, #128	; 0x80
 80082f2:	606b      	str	r3, [r5, #4]
}
 80082f4:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80082f8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 80082fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008300:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 8008304:	e7e1      	b.n	80082ca <R3_2_TIMx_UP_IRQHandler+0x46>
 8008306:	bf00      	nop

08008308 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8008308:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800830c:	b923      	cbnz	r3, 8008318 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800830e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008310:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8008314:	2a02      	cmp	r2, #2
 8008316:	d004      	beq.n	8008322 <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8008318:	2301      	movs	r3, #1
 800831a:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 800831e:	3046      	adds	r0, #70	; 0x46
 8008320:	4770      	bx	lr
{
 8008322:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008324:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008328:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800832c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 800832e:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008330:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008334:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008338:	628c      	str	r4, [r1, #40]	; 0x28
 800833a:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 800833c:	2301      	movs	r3, #1
 800833e:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8008342:	bc30      	pop	{r4, r5}
 8008344:	3046      	adds	r0, #70	; 0x46
 8008346:	4770      	bx	lr

08008348 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008348:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800834a:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800834c:	6890      	ldr	r0, [r2, #8]
 800834e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8008350:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008356:	6442      	str	r2, [r0, #68]	; 0x44
}
 8008358:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 800835c:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 8008360:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop

08008368 <R3_2_IsOverCurrentOccurred>:
{
 8008368:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 800836a:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 800836e:	b160      	cbz	r0, 800838a <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8008370:	2200      	movs	r2, #0
 8008372:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8008376:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8008378:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 800837a:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 800837e:	b11a      	cbz	r2, 8008388 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8008380:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8008382:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8008384:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8008388:	4770      	bx	lr
 800838a:	2140      	movs	r1, #64	; 0x40
 800838c:	e7f5      	b.n	800837a <R3_2_IsOverCurrentOccurred+0x12>
 800838e:	bf00      	nop

08008390 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8008390:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8008394:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8008396:	2900      	cmp	r1, #0
 8008398:	d13c      	bne.n	8008414 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800839a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800839c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083a4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80083a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80083ac:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80083ae:	6a1a      	ldr	r2, [r3, #32]
 80083b0:	f042 0201 	orr.w	r2, r2, #1
 80083b4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80083b6:	6a1a      	ldr	r2, [r3, #32]
 80083b8:	f022 0204 	bic.w	r2, r2, #4
 80083bc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80083be:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80083c0:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 80083c4:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80083c6:	f103 0118 	add.w	r1, r3, #24
 80083ca:	d031      	beq.n	8008430 <R3_2_RLDetectionModeEnable+0xa0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80083cc:	2a02      	cmp	r2, #2
 80083ce:	d10f      	bne.n	80083f0 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80083d6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80083da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083de:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80083e0:	6a1a      	ldr	r2, [r3, #32]
 80083e2:	f042 0210 	orr.w	r2, r2, #16
 80083e6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80083e8:	6a1a      	ldr	r2, [r3, #32]
 80083ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ee:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80083f0:	684a      	ldr	r2, [r1, #4]
 80083f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80083fa:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80083fe:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008400:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008402:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8008404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008408:	621a      	str	r2, [r3, #32]
 800840a:	6a1a      	ldr	r2, [r3, #32]
 800840c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008410:	621a      	str	r2, [r3, #32]
 8008412:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008414:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8008416:	4910      	ldr	r1, [pc, #64]	; (8008458 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008418:	4a10      	ldr	r2, [pc, #64]	; (800845c <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800841a:	4c11      	ldr	r4, [pc, #68]	; (8008460 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800841c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 800841e:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008420:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008422:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8008426:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800842a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800842e:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008436:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800843a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800843e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008440:	6a1a      	ldr	r2, [r3, #32]
 8008442:	f022 0210 	bic.w	r2, r2, #16
 8008446:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008448:	6a1a      	ldr	r2, [r3, #32]
 800844a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800844e:	621a      	str	r2, [r3, #32]
}
 8008450:	e7ce      	b.n	80083f0 <R3_2_RLDetectionModeEnable+0x60>
 8008452:	bf00      	nop
 8008454:	08007cd5 	.word	0x08007cd5
 8008458:	08007d75 	.word	0x08007d75
 800845c:	08007c75 	.word	0x08007c75
 8008460:	08007d29 	.word	0x08007d29

08008464 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8008464:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008468:	2b00      	cmp	r3, #0
 800846a:	d059      	beq.n	8008520 <R3_2_RLDetectionModeDisable+0xbc>
{
 800846c:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800846e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8008470:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008472:	699a      	ldr	r2, [r3, #24]
 8008474:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008478:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800847c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008480:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008482:	6a1a      	ldr	r2, [r3, #32]
 8008484:	f042 0201 	orr.w	r2, r2, #1
 8008488:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800848a:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 800848e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008490:	f103 0518 	add.w	r5, r3, #24
 8008494:	d045      	beq.n	8008522 <R3_2_RLDetectionModeDisable+0xbe>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008496:	2a02      	cmp	r2, #2
 8008498:	d103      	bne.n	80084a2 <R3_2_RLDetectionModeDisable+0x3e>
  CLEAR_BIT(TIMx->CCER, Channels);
 800849a:	6a1a      	ldr	r2, [r3, #32]
 800849c:	f022 0204 	bic.w	r2, r2, #4
 80084a0:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 80084a2:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 80084a6:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80084a8:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80084b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80084b4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80084b8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80084ba:	6a1a      	ldr	r2, [r3, #32]
 80084bc:	f042 0210 	orr.w	r2, r2, #16
 80084c0:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80084c2:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 80084c6:	2a01      	cmp	r2, #1
 80084c8:	d035      	beq.n	8008536 <R3_2_RLDetectionModeDisable+0xd2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80084ca:	2a02      	cmp	r2, #2
 80084cc:	d103      	bne.n	80084d6 <R3_2_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 80084ce:	6a1a      	ldr	r2, [r3, #32]
 80084d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d4:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80084d6:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80084d8:	686a      	ldr	r2, [r5, #4]
 80084da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80084e2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80084e6:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ee:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80084f0:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 80084f4:	2a01      	cmp	r2, #1
 80084f6:	d019      	beq.n	800852c <R3_2_RLDetectionModeDisable+0xc8>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80084f8:	2a02      	cmp	r2, #2
 80084fa:	d103      	bne.n	8008504 <R3_2_RLDetectionModeDisable+0xa0>
  CLEAR_BIT(TIMx->CCER, Channels);
 80084fc:	6a1a      	ldr	r2, [r3, #32]
 80084fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008502:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8008504:	4c0e      	ldr	r4, [pc, #56]	; (8008540 <R3_2_RLDetectionModeDisable+0xdc>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008506:	4a0f      	ldr	r2, [pc, #60]	; (8008544 <R3_2_RLDetectionModeDisable+0xe0>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008508:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800850a:	4e0f      	ldr	r6, [pc, #60]	; (8008548 <R3_2_RLDetectionModeDisable+0xe4>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800850c:	4d0f      	ldr	r5, [pc, #60]	; (800854c <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800850e:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8008510:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008512:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008516:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8008518:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800851c:	bc70      	pop	{r4, r5, r6}
 800851e:	4770      	bx	lr
 8008520:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008522:	6a1a      	ldr	r2, [r3, #32]
 8008524:	f042 0204 	orr.w	r2, r2, #4
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	e7ba      	b.n	80084a2 <R3_2_RLDetectionModeDisable+0x3e>
  SET_BIT(TIMx->CCER, Channels);
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008532:	621a      	str	r2, [r3, #32]
}
 8008534:	e7e6      	b.n	8008504 <R3_2_RLDetectionModeDisable+0xa0>
  SET_BIT(TIMx->CCER, Channels);
 8008536:	6a1a      	ldr	r2, [r3, #32]
 8008538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	e7ca      	b.n	80084d6 <R3_2_RLDetectionModeDisable+0x72>
 8008540:	08007be1 	.word	0x08007be1
 8008544:	08007c75 	.word	0x08007c75
 8008548:	080016a9 	.word	0x080016a9
 800854c:	08007b91 	.word	0x08007b91

08008550 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008550:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008552:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008554:	69da      	ldr	r2, [r3, #28]
{
 8008556:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008558:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800855c:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
 8008560:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008564:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 8008568:	2501      	movs	r5, #1
 800856a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800856e:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008572:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8008574:	f8b0 5058 	ldrh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8008578:	8641      	strh	r1, [r0, #50]	; 0x32
 800857a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800857e:	1ba4      	subs	r4, r4, r6
 8008580:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008582:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008584:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008586:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008588:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800858a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800858c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008590:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008594:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8008598:	2403      	movs	r4, #3
 800859a:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800859c:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 800859e:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80085a2:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 80085a4:	d007      	beq.n	80085b6 <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80085a6:	4a06      	ldr	r2, [pc, #24]	; (80085c0 <R3_2_RLDetectionModeSetDuty+0x70>)
 80085a8:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 80085aa:	bf14      	ite	ne
 80085ac:	2101      	movne	r1, #1
 80085ae:	2100      	moveq	r1, #0
}
 80085b0:	4608      	mov	r0, r1
 80085b2:	bc70      	pop	{r4, r5, r6}
 80085b4:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 80085b6:	2300      	movs	r3, #0
 80085b8:	8703      	strh	r3, [r0, #56]	; 0x38
}
 80085ba:	bc70      	pop	{r4, r5, r6}
 80085bc:	4608      	mov	r0, r1
 80085be:	4770      	bx	lr
 80085c0:	02000070 	.word	0x02000070

080085c4 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 80085c4:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80085c6:	8b82      	ldrh	r2, [r0, #28]
 80085c8:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80085ca:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80085cc:	4414      	add	r4, r2
 80085ce:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80085d0:	b14b      	cbz	r3, 80085e6 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 80085d2:	6a05      	ldr	r5, [r0, #32]
 80085d4:	2300      	movs	r3, #0
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	3301      	adds	r3, #1
 80085da:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80085de:	8b01      	ldrh	r1, [r0, #24]
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	4291      	cmp	r1, r2
 80085e4:	d8f7      	bhi.n	80085d6 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 80085e6:	2300      	movs	r3, #0
 80085e8:	f364 030f 	bfi	r3, r4, #0, #16
 80085ec:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80085f0:	2200      	movs	r2, #0
}
 80085f2:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 80085f4:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 80085f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80085fa:	4770      	bx	lr

080085fc <RVBS_Init>:
{
 80085fc:	b510      	push	{r4, lr}
 80085fe:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8008600:	300c      	adds	r0, #12
 8008602:	f7fa fb13 	bl	8002c2c <RCM_RegisterRegConv>
 8008606:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800860a:	4620      	mov	r0, r4
 800860c:	f7ff ffda 	bl	80085c4 <RVBS_Clear>
}
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop

08008614 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8008614:	88c3      	ldrh	r3, [r0, #6]
 8008616:	8b42      	ldrh	r2, [r0, #26]
 8008618:	429a      	cmp	r2, r3
 800861a:	d305      	bcc.n	8008628 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800861c:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800861e:	4298      	cmp	r0, r3
 8008620:	bf8c      	ite	hi
 8008622:	2004      	movhi	r0, #4
 8008624:	2000      	movls	r0, #0
 8008626:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8008628:	2002      	movs	r0, #2
  }
  return fault;
}
 800862a:	4770      	bx	lr

0800862c <RVBS_CalcAvVbus>:
{
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008630:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008634:	f7fa fbce 	bl	8002dd4 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8008638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800863c:	4298      	cmp	r0, r3
 800863e:	d01c      	beq.n	800867a <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8008640:	6a2f      	ldr	r7, [r5, #32]
 8008642:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8008646:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800864a:	8b2e      	ldrh	r6, [r5, #24]
 800864c:	b1d6      	cbz	r6, 8008684 <RVBS_CalcAvVbus+0x58>
 800864e:	2300      	movs	r3, #0
    wtemp = 0;
 8008650:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8008652:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008656:	3301      	adds	r3, #1
 8008658:	b2d9      	uxtb	r1, r3
 800865a:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 800865c:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800865e:	460b      	mov	r3, r1
 8008660:	d3f7      	bcc.n	8008652 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8008662:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008666:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800866a:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800866c:	3e01      	subs	r6, #1
 800866e:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8008670:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008672:	da09      	bge.n	8008688 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8008674:	3301      	adds	r3, #1
 8008676:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800867a:	4628      	mov	r0, r5
 800867c:	f7ff ffca 	bl	8008614 <RVBS_CheckFaultState>
 8008680:	8128      	strh	r0, [r5, #8]
}
 8008682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008684:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8008686:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800868e:	4628      	mov	r0, r5
 8008690:	f7ff ffc0 	bl	8008614 <RVBS_CheckFaultState>
 8008694:	8128      	strh	r0, [r5, #8]
}
 8008696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008698 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8008698:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800869a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 800869c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80086a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 80086a4:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80086a6:	4770      	bx	lr

080086a8 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 80086a8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop

080086b0 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 80086b0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop

080086b8 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 80086b8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 80086c0:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80086c4:	8a81      	ldrh	r1, [r0, #20]
{
 80086c6:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 80086c8:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 80086ca:	bfb8      	it	lt
 80086cc:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80086ce:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80086d0:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80086d2:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80086d4:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80086d6:	429d      	cmp	r5, r3
 80086d8:	d817      	bhi.n	800870a <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80086da:	4299      	cmp	r1, r3
 80086dc:	bf2c      	ite	cs
 80086de:	2300      	movcs	r3, #0
 80086e0:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80086e2:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80086e6:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 80086e8:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 80086ea:	bfb8      	it	lt
 80086ec:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80086ee:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80086f0:	428d      	cmp	r5, r1
 80086f2:	d300      	bcc.n	80086f6 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80086f4:	b15b      	cbz	r3, 800870e <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80086f6:	4294      	cmp	r4, r2
 80086f8:	d901      	bls.n	80086fe <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 80086fa:	3201      	adds	r2, #1
 80086fc:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80086fe:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8008700:	1b10      	subs	r0, r2, r4
 8008702:	bf18      	it	ne
 8008704:	2001      	movne	r0, #1
 8008706:	bc30      	pop	{r4, r5}
 8008708:	4770      	bx	lr
    SpeedError = true;
 800870a:	2301      	movs	r3, #1
 800870c:	e7e9      	b.n	80086e2 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800870e:	4294      	cmp	r4, r2
 8008710:	bf88      	it	hi
 8008712:	2200      	movhi	r2, #0
 8008714:	e7f3      	b.n	80086fe <SPD_IsMecSpeedReliable+0x3e>
 8008716:	bf00      	nop

08008718 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8008718:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800871c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8008720:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008724:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8008728:	b200      	sxth	r0, r0
 800872a:	4770      	bx	lr

0800872c <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800872c:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800872e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008732:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8008736:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800873a:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800873c:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800873e:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8008740:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008742:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8008746:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8008748:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800874a:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 800874c:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800874e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008750:	6183      	str	r3, [r0, #24]
}
 8008752:	4770      	bx	lr

08008754 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8008754:	6141      	str	r1, [r0, #20]
}
 8008756:	4770      	bx	lr

08008758 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8008758:	6940      	ldr	r0, [r0, #20]
 800875a:	4770      	bx	lr

0800875c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800875c:	7803      	ldrb	r3, [r0, #0]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d000      	beq.n	8008764 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008762:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008764:	6900      	ldr	r0, [r0, #16]
 8008766:	2100      	movs	r1, #0
 8008768:	f7fe bed6 	b.w	8007518 <PID_SetIntegralTerm>

0800876c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800876c:	6840      	ldr	r0, [r0, #4]
 800876e:	2800      	cmp	r0, #0
 8008770:	bfbc      	itt	lt
 8008772:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008776:	30ff      	addlt	r0, #255	; 0xff
}
 8008778:	1400      	asrs	r0, r0, #16
 800877a:	4770      	bx	lr

0800877c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800877c:	6880      	ldr	r0, [r0, #8]
 800877e:	2800      	cmp	r0, #0
 8008780:	bfbc      	itt	lt
 8008782:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008786:	30ff      	addlt	r0, #255	; 0xff
}
 8008788:	1400      	asrs	r0, r0, #16
 800878a:	4770      	bx	lr

0800878c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800878c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800878e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008790:	60c3      	str	r3, [r0, #12]
}
 8008792:	4770      	bx	lr

08008794 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008796:	7806      	ldrb	r6, [r0, #0]
{
 8008798:	4604      	mov	r4, r0
 800879a:	460d      	mov	r5, r1
 800879c:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800879e:	b326      	cbz	r6, 80087ea <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80087a0:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80087a2:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80087a4:	2800      	cmp	r0, #0
 80087a6:	bfbc      	itt	lt
 80087a8:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80087ac:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80087ae:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 80087b0:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80087b4:	dd01      	ble.n	80087ba <STC_ExecRamp+0x26>
      AllowedRange = false;
 80087b6:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 80087ba:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 80087be:	42a9      	cmp	r1, r5
 80087c0:	dcf9      	bgt.n	80087b6 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 80087c2:	8c23      	ldrh	r3, [r4, #32]
 80087c4:	429d      	cmp	r5, r3
 80087c6:	da03      	bge.n	80087d0 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80087c8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80087cc:	42ab      	cmp	r3, r5
 80087ce:	dbf2      	blt.n	80087b6 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80087d0:	b9af      	cbnz	r7, 80087fe <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80087d2:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80087d4:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80087d6:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80087d8:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80087dc:	bf0c      	ite	eq
 80087de:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80087e0:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80087e2:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80087e4:	61a3      	str	r3, [r4, #24]
 80087e6:	2001      	movs	r0, #1
}
 80087e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80087ea:	f7ff ffc7 	bl	800877c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80087ee:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 80087f0:	42b5      	cmp	r5, r6
 80087f2:	dce0      	bgt.n	80087b6 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80087f4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80087f8:	42ab      	cmp	r3, r5
 80087fa:	dcdc      	bgt.n	80087b6 <STC_ExecRamp+0x22>
 80087fc:	e7e8      	b.n	80087d0 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80087fe:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8008800:	4a07      	ldr	r2, [pc, #28]	; (8008820 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8008802:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008804:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8008808:	fba2 2303 	umull	r2, r3, r2, r3
 800880c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800880e:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8008810:	1a2d      	subs	r5, r5, r0
 8008812:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8008814:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8008816:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800881a:	2001      	movs	r0, #1
 800881c:	61a5      	str	r5, [r4, #24]
}
 800881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008820:	10624dd3 	.word	0x10624dd3

08008824 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8008824:	2300      	movs	r3, #0
 8008826:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008828:	6183      	str	r3, [r0, #24]
}
 800882a:	4770      	bx	lr

0800882c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800882c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800882e:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008832:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008834:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8008836:	2a00      	cmp	r2, #0
 8008838:	bf08      	it	eq
 800883a:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800883c:	2b01      	cmp	r3, #1
{
 800883e:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8008840:	d90c      	bls.n	800885c <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8008842:	6981      	ldr	r1, [r0, #24]
 8008844:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8008846:	3b01      	subs	r3, #1
 8008848:	2e00      	cmp	r6, #0
 800884a:	60c3      	str	r3, [r0, #12]
 800884c:	4630      	mov	r0, r6
 800884e:	db09      	blt.n	8008864 <STC_CalcTorqueReference+0x38>
 8008850:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8008852:	2a01      	cmp	r2, #1
 8008854:	d00a      	beq.n	800886c <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8008856:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8008858:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800885a:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800885c:	d012      	beq.n	8008884 <STC_CalcTorqueReference+0x58>
 800885e:	2e00      	cmp	r6, #0
 8008860:	4630      	mov	r0, r6
 8008862:	daf5      	bge.n	8008850 <STC_CalcTorqueReference+0x24>
 8008864:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8008868:	30ff      	adds	r0, #255	; 0xff
 800886a:	e7f1      	b.n	8008850 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800886c:	6960      	ldr	r0, [r4, #20]
 800886e:	f7ff ff1f 	bl	80086b0 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008872:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008874:	b201      	sxth	r1, r0
 8008876:	6920      	ldr	r0, [r4, #16]
 8008878:	f7fe fe5a 	bl	8007530 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800887c:	0403      	lsls	r3, r0, #16
 800887e:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8008882:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008884:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008888:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800888a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800888c:	60c3      	str	r3, [r0, #12]
 800888e:	e7e0      	b.n	8008852 <STC_CalcTorqueReference+0x26>

08008890 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008890:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop

08008898 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008898:	8bc0      	ldrh	r0, [r0, #30]
 800889a:	4770      	bx	lr

0800889c <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 800889c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop

080088a4 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 80088a4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 80088a8:	2200      	movs	r2, #0
 80088aa:	b299      	uxth	r1, r3
 80088ac:	f361 020f 	bfi	r2, r1, #0, #16
 80088b0:	0c1b      	lsrs	r3, r3, #16
 80088b2:	f363 421f 	bfi	r2, r3, #16, #16
{
 80088b6:	b082      	sub	sp, #8
}
 80088b8:	4610      	mov	r0, r2
 80088ba:	b002      	add	sp, #8
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop

080088c0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80088c0:	b510      	push	{r4, lr}
 80088c2:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80088c4:	6940      	ldr	r0, [r0, #20]
 80088c6:	f7ff fef3 	bl	80086b0 <SPD_GetAvrgMecSpeedUnit>
 80088ca:	0400      	lsls	r0, r0, #16
 80088cc:	6060      	str	r0, [r4, #4]
}
 80088ce:	bd10      	pop	{r4, pc}

080088d0 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80088d4:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop

080088dc <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 80088dc:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80088de:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80088e0:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 80088e2:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80088e4:	430b      	orrs	r3, r1
 80088e6:	ea23 0202 	bic.w	r2, r3, r2
 80088ea:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80088ec:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80088ee:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80088f0:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80088f2:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80088f4:	d008      	beq.n	8008908 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80088f6:	b912      	cbnz	r2, 80088fe <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80088f8:	4620      	mov	r0, r4
 80088fa:	bc30      	pop	{r4, r5}
 80088fc:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80088fe:	240a      	movs	r4, #10
 8008900:	7004      	strb	r4, [r0, #0]
}
 8008902:	4620      	mov	r0, r4
 8008904:	bc30      	pop	{r4, r5}
 8008906:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8008908:	2a00      	cmp	r2, #0
 800890a:	d1f5      	bne.n	80088f8 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800890c:	240b      	movs	r4, #11
 800890e:	7004      	strb	r4, [r0, #0]
}
 8008910:	4620      	mov	r0, r4
 8008912:	bc30      	pop	{r4, r5}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <STM_NextState>:
{
 8008918:	b508      	push	{r3, lr}
 800891a:	7803      	ldrb	r3, [r0, #0]
 800891c:	2b14      	cmp	r3, #20
 800891e:	d810      	bhi.n	8008942 <STM_NextState+0x2a>
 8008920:	e8df f003 	tbb	[pc, r3]
 8008924:	240d545e 	.word	0x240d545e
 8008928:	390d352e 	.word	0x390d352e
 800892c:	0f0f3f3c 	.word	0x0f0f3f3c
 8008930:	47650b44 	.word	0x47650b44
 8008934:	504d1b4a 	.word	0x504d1b4a
 8008938:	5b          	.byte	0x5b
 8008939:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800893a:	290e      	cmp	r1, #14
 800893c:	d013      	beq.n	8008966 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 800893e:	2907      	cmp	r1, #7
 8008940:	d011      	beq.n	8008966 <STM_NextState+0x4e>
 8008942:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008946:	2b01      	cmp	r3, #1
 8008948:	d018      	beq.n	800897c <STM_NextState+0x64>
 800894a:	2907      	cmp	r1, #7
 800894c:	d016      	beq.n	800897c <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800894e:	2200      	movs	r2, #0
 8008950:	2180      	movs	r1, #128	; 0x80
 8008952:	f7ff ffc3 	bl	80088dc <STM_FaultProcessing>
 8008956:	2000      	movs	r0, #0
}
 8008958:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800895a:	2914      	cmp	r1, #20
 800895c:	d8f1      	bhi.n	8008942 <STM_NextState+0x2a>
 800895e:	4b26      	ldr	r3, [pc, #152]	; (80089f8 <STM_NextState+0xe0>)
 8008960:	40cb      	lsrs	r3, r1
 8008962:	07db      	lsls	r3, r3, #31
 8008964:	d5ed      	bpl.n	8008942 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8008966:	7001      	strb	r1, [r0, #0]
 8008968:	2001      	movs	r0, #1
}
 800896a:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800896c:	2911      	cmp	r1, #17
 800896e:	d8ee      	bhi.n	800894e <STM_NextState+0x36>
 8008970:	4b22      	ldr	r3, [pc, #136]	; (80089fc <STM_NextState+0xe4>)
 8008972:	40cb      	lsrs	r3, r1
 8008974:	07da      	lsls	r2, r3, #31
 8008976:	d4f6      	bmi.n	8008966 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008978:	2903      	cmp	r1, #3
 800897a:	d1e8      	bne.n	800894e <STM_NextState+0x36>
 800897c:	2000      	movs	r0, #0
}
 800897e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008980:	2913      	cmp	r1, #19
 8008982:	d0f0      	beq.n	8008966 <STM_NextState+0x4e>
 8008984:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008988:	2b05      	cmp	r3, #5
 800898a:	d1dc      	bne.n	8008946 <STM_NextState+0x2e>
 800898c:	e7eb      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800898e:	1f8b      	subs	r3, r1, #6
 8008990:	2b01      	cmp	r3, #1
 8008992:	d8d6      	bhi.n	8008942 <STM_NextState+0x2a>
 8008994:	e7e7      	b.n	8008966 <STM_NextState+0x4e>
      if ( bState == STOP )
 8008996:	2908      	cmp	r1, #8
 8008998:	d1d3      	bne.n	8008942 <STM_NextState+0x2a>
 800899a:	e7e4      	b.n	8008966 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 800899c:	2909      	cmp	r1, #9
 800899e:	d1d0      	bne.n	8008942 <STM_NextState+0x2a>
 80089a0:	e7e1      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 80089a2:	2900      	cmp	r1, #0
 80089a4:	d0df      	beq.n	8008966 <STM_NextState+0x4e>
 80089a6:	290c      	cmp	r1, #12
 80089a8:	d1cb      	bne.n	8008942 <STM_NextState+0x2a>
 80089aa:	e7dc      	b.n	8008966 <STM_NextState+0x4e>
      if ( bState == IDLE )
 80089ac:	2900      	cmp	r1, #0
 80089ae:	d0da      	beq.n	8008966 <STM_NextState+0x4e>
 80089b0:	e7c7      	b.n	8008942 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80089b2:	2902      	cmp	r1, #2
 80089b4:	d1c3      	bne.n	800893e <STM_NextState+0x26>
 80089b6:	e7d6      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80089b8:	2911      	cmp	r1, #17
 80089ba:	d1c0      	bne.n	800893e <STM_NextState+0x26>
 80089bc:	e7d3      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80089be:	2904      	cmp	r1, #4
 80089c0:	d1bd      	bne.n	800893e <STM_NextState+0x26>
 80089c2:	e7d0      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80089c4:	1f0b      	subs	r3, r1, #4
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d8b9      	bhi.n	800893e <STM_NextState+0x26>
 80089ca:	e7cc      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80089cc:	2907      	cmp	r1, #7
 80089ce:	d0ca      	beq.n	8008966 <STM_NextState+0x4e>
 80089d0:	f1a1 030d 	sub.w	r3, r1, #13
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d8b4      	bhi.n	8008942 <STM_NextState+0x2a>
 80089d8:	e7c5      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80089da:	2912      	cmp	r1, #18
 80089dc:	d1af      	bne.n	800893e <STM_NextState+0x26>
 80089de:	e7c2      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80089e0:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d0be      	beq.n	8008966 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 80089e8:	290c      	cmp	r1, #12
 80089ea:	d1ae      	bne.n	800894a <STM_NextState+0x32>
 80089ec:	e7bb      	b.n	8008966 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80089ee:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80089f2:	2b07      	cmp	r3, #7
 80089f4:	d1a5      	bne.n	8008942 <STM_NextState+0x2a>
 80089f6:	e7b6      	b.n	8008966 <STM_NextState+0x4e>
 80089f8:	00140080 	.word	0x00140080
 80089fc:	00030092 	.word	0x00030092

08008a00 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8008a00:	7800      	ldrb	r0, [r0, #0]
 8008a02:	4770      	bx	lr

08008a04 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8008a04:	7803      	ldrb	r3, [r0, #0]
 8008a06:	2b0b      	cmp	r3, #11
 8008a08:	d001      	beq.n	8008a0e <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8008a0a:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8008a0c:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8008a0e:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8008a10:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8008a12:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8008a14:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8008a16:	2001      	movs	r0, #1
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop

08008a1c <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8008a1c:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8008a1e:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8008a20:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop

08008a28 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8008a28:	f7fe bcb0 	b.w	800738c <FCP_Init>

08008a2c <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8008a2c:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8008a30:	b16a      	cbz	r2, 8008a4e <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8008a32:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8008a36:	4603      	mov	r3, r0
 8008a38:	b1a2      	cbz	r2, 8008a64 <UFCP_TX_IRQ_Handler+0x38>
 8008a3a:	2a01      	cmp	r2, #1
 8008a3c:	d108      	bne.n	8008a50 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8008a3e:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008a40:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8008a44:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8008a46:	3201      	adds	r2, #1
 8008a48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8008a4c:	4770      	bx	lr
 8008a4e:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008a50:	7d41      	ldrb	r1, [r0, #21]
 8008a52:	3101      	adds	r1, #1
 8008a54:	428a      	cmp	r2, r1
 8008a56:	dc07      	bgt.n	8008a68 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8008a58:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008a5a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8008a5e:	7d09      	ldrb	r1, [r1, #20]
 8008a60:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008a62:	e7f0      	b.n	8008a46 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8008a64:	7d01      	ldrb	r1, [r0, #20]
        break;
 8008a66:	e7eb      	b.n	8008a40 <UFCP_TX_IRQ_Handler+0x14>
{
 8008a68:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008a6a:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8008a6e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8008a72:	6291      	str	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a74:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008a76:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008a7a:	2500      	movs	r5, #0
 8008a7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008a86:	4623      	mov	r3, r4
}
 8008a88:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008a8a:	4718      	bx	r3

08008a8c <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008a8c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008a90:	b10b      	cbz	r3, 8008a96 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008a92:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008a94:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8008a96:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008aa0:	6813      	ldr	r3, [r2, #0]
 8008aa2:	f043 0320 	orr.w	r3, r3, #32
 8008aa6:	6013      	str	r3, [r2, #0]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008aa8:	2002      	movs	r0, #2
 8008aaa:	4770      	bx	lr

08008aac <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8008ab0:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8008ab4:	b108      	cbz	r0, 8008aba <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008ab6:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8008ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 8008aba:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8008abc:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8008abe:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8008ac0:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8008ac2:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8008ac6:	b34b      	cbz	r3, 8008b1c <UFCP_Send+0x70>
 8008ac8:	f104 011a 	add.w	r1, r4, #26
 8008acc:	1d17      	adds	r7, r2, #4
 8008ace:	45bc      	cmp	ip, r7
 8008ad0:	bf38      	it	cc
 8008ad2:	428a      	cmpcc	r2, r1
 8008ad4:	d336      	bcc.n	8008b44 <UFCP_Send+0x98>
 8008ad6:	2807      	cmp	r0, #7
 8008ad8:	d934      	bls.n	8008b44 <UFCP_Send+0x98>
 8008ada:	0899      	lsrs	r1, r3, #2
 8008adc:	3901      	subs	r1, #1
 8008ade:	b2c9      	uxtb	r1, r1
 8008ae0:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8008ae4:	4665      	mov	r5, ip
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aec:	f845 6b04 	str.w	r6, [r5], #4
 8008af0:	42b9      	cmp	r1, r7
 8008af2:	d1f9      	bne.n	8008ae8 <UFCP_Send+0x3c>
 8008af4:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8008af8:	1a40      	subs	r0, r0, r1
 8008afa:	428b      	cmp	r3, r1
 8008afc:	b2c0      	uxtb	r0, r0
 8008afe:	eb02 0601 	add.w	r6, r2, r1
 8008b02:	eb0c 0501 	add.w	r5, ip, r1
 8008b06:	d009      	beq.n	8008b1c <UFCP_Send+0x70>
 8008b08:	5c53      	ldrb	r3, [r2, r1]
 8008b0a:	f80c 3001 	strb.w	r3, [ip, r1]
 8008b0e:	b128      	cbz	r0, 8008b1c <UFCP_Send+0x70>
 8008b10:	7873      	ldrb	r3, [r6, #1]
 8008b12:	706b      	strb	r3, [r5, #1]
 8008b14:	2801      	cmp	r0, #1
 8008b16:	d001      	beq.n	8008b1c <UFCP_Send+0x70>
 8008b18:	78b3      	ldrb	r3, [r6, #2]
 8008b1a:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008b1c:	f104 0014 	add.w	r0, r4, #20
 8008b20:	f7fe fc48 	bl	80073b4 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8008b24:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008b28:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8008b2c:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008b2e:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8008b30:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008b34:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b38:	6813      	ldr	r3, [r2, #0]
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	2002      	movs	r0, #2
}
 8008b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b44:	3001      	adds	r0, #1
 8008b46:	4410      	add	r0, r2
 8008b48:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8008b4c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008b50:	f803 1f01 	strb.w	r1, [r3, #1]!
 8008b54:	4282      	cmp	r2, r0
 8008b56:	d1f9      	bne.n	8008b4c <UFCP_Send+0xa0>
 8008b58:	e7e0      	b.n	8008b1c <UFCP_Send+0x70>
 8008b5a:	bf00      	nop

08008b5c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008b5c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008b60:	b90b      	cbnz	r3, 8008b66 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008b62:	482c      	ldr	r0, [pc, #176]	; (8008c14 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8008b64:	4770      	bx	lr
{
 8008b66:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008b68:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008b70:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8008b72:	b1d3      	cbz	r3, 8008baa <UFCP_RX_IRQ_Handler+0x4e>
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d00d      	beq.n	8008b94 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008b78:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8008b7c:	3101      	adds	r1, #1
 8008b7e:	428b      	cmp	r3, r1
 8008b80:	dc1d      	bgt.n	8008bbe <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008b82:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008b84:	4823      	ldr	r0, [pc, #140]	; (8008c14 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008b86:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008b90:	b003      	add	sp, #12
 8008b92:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8008b94:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8008b96:	bf54      	ite	pl
 8008b98:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8008b9a:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8008b9c:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8008ba0:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8008ba4:	481b      	ldr	r0, [pc, #108]	; (8008c14 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8008ba6:	b003      	add	sp, #12
 8008ba8:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008baa:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8008bac:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8008bb0:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8008bb2:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 8008bb4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8008bb8:	4817      	ldr	r0, [pc, #92]	; (8008c18 <UFCP_RX_IRQ_Handler+0xbc>)
}
 8008bba:	b003      	add	sp, #12
 8008bbc:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8008bbe:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8008bc2:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bc6:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f023 0320 	bic.w	r3, r3, #32
 8008bce:	8242      	strh	r2, [r0, #18]
 8008bd0:	600b      	str	r3, [r1, #0]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008bd2:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008bd4:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8008bd8:	f7fe fbec 	bl	80073b4 <FCP_CalcCRC>
 8008bdc:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8008be0:	4283      	cmp	r3, r0
 8008be2:	d10a      	bne.n	8008bfa <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	68a5      	ldr	r5, [r4, #8]
 8008be8:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008bec:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8008bf0:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8008bf4:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008bf6:	4809      	ldr	r0, [pc, #36]	; (8008c1c <UFCP_RX_IRQ_Handler+0xc0>)
 8008bf8:	e7d5      	b.n	8008ba6 <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8008bfe:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008c00:	f10d 0207 	add.w	r2, sp, #7
 8008c04:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8008c06:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008c0a:	f7ff ff4f 	bl	8008aac <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008c0e:	4803      	ldr	r0, [pc, #12]	; (8008c1c <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8008c10:	e7c9      	b.n	8008ba6 <UFCP_RX_IRQ_Handler+0x4a>
 8008c12:	bf00      	nop
 8008c14:	080091a0 	.word	0x080091a0
 8008c18:	080091a2 	.word	0x080091a2
 8008c1c:	080091a4 	.word	0x080091a4

08008c20 <UFCP_OVR_IRQ_Handler>:
{
 8008c20:	b510      	push	{r4, lr}
 8008c22:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 8008c24:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008c26:	2301      	movs	r3, #1
 8008c28:	f10d 0207 	add.w	r2, sp, #7
 8008c2c:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008c2e:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008c32:	f7ff ff3b 	bl	8008aac <UFCP_Send>
}
 8008c36:	b002      	add	sp, #8
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	bf00      	nop

08008c3c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008c42:	4770      	bx	lr

08008c44 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008c44:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008c46:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8008c48:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 8008c4a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008c4e:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8008c50:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008c52:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008c54:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8008c56:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8008c58:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8008c5a:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <VSS_Init>:
{
 8008c60:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008c62:	f7ff ffef 	bl	8008c44 <VSS_Clear>
}
 8008c66:	bd08      	pop	{r3, pc}

08008c68 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008c68:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008c6a:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8008c6c:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008c6e:	fb91 f1f3 	sdiv	r1, r1, r3
 8008c72:	80c1      	strh	r1, [r0, #6]
}
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop

08008c78 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8008c78:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008c7a:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8008c7e:	b984      	cbnz	r4, 8008ca2 <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 8008c80:	b98a      	cbnz	r2, 8008ca6 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008c82:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008c84:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008c86:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008c88:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008c8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c8e:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008c90:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008c94:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008c98:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 8008c9c:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008c9e:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008ca0:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008ca2:	bc70      	pop	{r4, r5, r6}
 8008ca4:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008ca6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008ca8:	4d11      	ldr	r5, [pc, #68]	; (8008cf0 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008caa:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008cac:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008cb0:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008cb6:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008cba:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8008cbc:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008cbe:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008cc2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008cc6:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008cc8:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8008ccc:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008cce:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008cd2:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008cd6:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8008cd8:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008cda:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008cdc:	0412      	lsls	r2, r2, #16
 8008cde:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008ce2:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008ce6:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8008cea:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8008cec:	bc70      	pop	{r4, r5, r6}
 8008cee:	4770      	bx	lr
 8008cf0:	10624dd3 	.word	0x10624dd3

08008cf4 <RUC_SetPhaseDurationms>:
 8008cf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008cf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008cfc:	818a      	strh	r2, [r1, #12]
 8008cfe:	4770      	bx	lr

08008d00 <RUC_SetPhaseFinalMecSpeedUnit>:
 8008d00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008d04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d08:	81ca      	strh	r2, [r1, #14]
 8008d0a:	4770      	bx	lr

08008d0c <RUC_SetPhaseFinalTorque>:
 8008d0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008d10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d14:	820a      	strh	r2, [r1, #16]
 8008d16:	4770      	bx	lr

08008d18 <RUC_GetPhaseDurationms>:
 8008d18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008d1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d20:	8988      	ldrh	r0, [r1, #12]
 8008d22:	4770      	bx	lr

08008d24 <RUC_GetPhaseFinalMecSpeedUnit>:
 8008d24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008d28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d2c:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <RUC_GetPhaseFinalTorque>:
 8008d34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008d38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d3c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop

08008d44 <RUC_GetNumberOfPhases>:
 8008d44:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop

08008d4c <__errno>:
 8008d4c:	4b01      	ldr	r3, [pc, #4]	; (8008d54 <__errno+0x8>)
 8008d4e:	6818      	ldr	r0, [r3, #0]
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000584 	.word	0x20000584

08008d58 <__libc_init_array>:
 8008d58:	b570      	push	{r4, r5, r6, lr}
 8008d5a:	4d0d      	ldr	r5, [pc, #52]	; (8008d90 <__libc_init_array+0x38>)
 8008d5c:	4c0d      	ldr	r4, [pc, #52]	; (8008d94 <__libc_init_array+0x3c>)
 8008d5e:	1b64      	subs	r4, r4, r5
 8008d60:	10a4      	asrs	r4, r4, #2
 8008d62:	2600      	movs	r6, #0
 8008d64:	42a6      	cmp	r6, r4
 8008d66:	d109      	bne.n	8008d7c <__libc_init_array+0x24>
 8008d68:	4d0b      	ldr	r5, [pc, #44]	; (8008d98 <__libc_init_array+0x40>)
 8008d6a:	4c0c      	ldr	r4, [pc, #48]	; (8008d9c <__libc_init_array+0x44>)
 8008d6c:	f000 f96e 	bl	800904c <_init>
 8008d70:	1b64      	subs	r4, r4, r5
 8008d72:	10a4      	asrs	r4, r4, #2
 8008d74:	2600      	movs	r6, #0
 8008d76:	42a6      	cmp	r6, r4
 8008d78:	d105      	bne.n	8008d86 <__libc_init_array+0x2e>
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}
 8008d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d80:	4798      	blx	r3
 8008d82:	3601      	adds	r6, #1
 8008d84:	e7ee      	b.n	8008d64 <__libc_init_array+0xc>
 8008d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8a:	4798      	blx	r3
 8008d8c:	3601      	adds	r6, #1
 8008d8e:	e7f2      	b.n	8008d76 <__libc_init_array+0x1e>
 8008d90:	080091c0 	.word	0x080091c0
 8008d94:	080091c0 	.word	0x080091c0
 8008d98:	080091c0 	.word	0x080091c0
 8008d9c:	080091c4 	.word	0x080091c4

08008da0 <memset>:
 8008da0:	4402      	add	r2, r0
 8008da2:	4603      	mov	r3, r0
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d100      	bne.n	8008daa <memset+0xa>
 8008da8:	4770      	bx	lr
 8008daa:	f803 1b01 	strb.w	r1, [r3], #1
 8008dae:	e7f9      	b.n	8008da4 <memset+0x4>

08008db0 <fmod>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	ed2d 8b02 	vpush	{d8}
 8008db6:	ec57 6b10 	vmov	r6, r7, d0
 8008dba:	ec55 4b11 	vmov	r4, r5, d1
 8008dbe:	f000 f833 	bl	8008e28 <__ieee754_fmod>
 8008dc2:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <fmod+0x74>)
 8008dc4:	eeb0 8a40 	vmov.f32	s16, s0
 8008dc8:	eef0 8a60 	vmov.f32	s17, s1
 8008dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	d020      	beq.n	8008e16 <fmod+0x66>
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	462b      	mov	r3, r5
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f7f7 fe72 	bl	8000ac4 <__aeabi_dcmpun>
 8008de0:	b9c8      	cbnz	r0, 8008e16 <fmod+0x66>
 8008de2:	4632      	mov	r2, r6
 8008de4:	463b      	mov	r3, r7
 8008de6:	4630      	mov	r0, r6
 8008de8:	4639      	mov	r1, r7
 8008dea:	f7f7 fe6b 	bl	8000ac4 <__aeabi_dcmpun>
 8008dee:	b990      	cbnz	r0, 8008e16 <fmod+0x66>
 8008df0:	2200      	movs	r2, #0
 8008df2:	2300      	movs	r3, #0
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fe32 	bl	8000a60 <__aeabi_dcmpeq>
 8008dfc:	b158      	cbz	r0, 8008e16 <fmod+0x66>
 8008dfe:	f7ff ffa5 	bl	8008d4c <__errno>
 8008e02:	2321      	movs	r3, #33	; 0x21
 8008e04:	6003      	str	r3, [r0, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f7f7 fce9 	bl	80007e4 <__aeabi_ddiv>
 8008e12:	ec41 0b18 	vmov	d8, r0, r1
 8008e16:	eeb0 0a48 	vmov.f32	s0, s16
 8008e1a:	eef0 0a68 	vmov.f32	s1, s17
 8008e1e:	ecbd 8b02 	vpop	{d8}
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	200005e8 	.word	0x200005e8

08008e28 <__ieee754_fmod>:
 8008e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	ec53 2b11 	vmov	r2, r3, d1
 8008e30:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008e34:	ea5e 0402 	orrs.w	r4, lr, r2
 8008e38:	ec51 0b10 	vmov	r0, r1, d0
 8008e3c:	ee11 7a10 	vmov	r7, s2
 8008e40:	ee11 ca10 	vmov	ip, s2
 8008e44:	461e      	mov	r6, r3
 8008e46:	d00d      	beq.n	8008e64 <__ieee754_fmod+0x3c>
 8008e48:	4c7a      	ldr	r4, [pc, #488]	; (8009034 <__ieee754_fmod+0x20c>)
 8008e4a:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008e4e:	45a0      	cmp	r8, r4
 8008e50:	4689      	mov	r9, r1
 8008e52:	dc07      	bgt.n	8008e64 <__ieee754_fmod+0x3c>
 8008e54:	4254      	negs	r4, r2
 8008e56:	4d78      	ldr	r5, [pc, #480]	; (8009038 <__ieee754_fmod+0x210>)
 8008e58:	4314      	orrs	r4, r2
 8008e5a:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008e5e:	42ac      	cmp	r4, r5
 8008e60:	46ab      	mov	fp, r5
 8008e62:	d909      	bls.n	8008e78 <__ieee754_fmod+0x50>
 8008e64:	f7f7 fb94 	bl	8000590 <__aeabi_dmul>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	f7f7 fcba 	bl	80007e4 <__aeabi_ddiv>
 8008e70:	ec41 0b10 	vmov	d0, r0, r1
 8008e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e78:	45f0      	cmp	r8, lr
 8008e7a:	ee10 aa10 	vmov	sl, s0
 8008e7e:	ee10 4a10 	vmov	r4, s0
 8008e82:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008e86:	dc0a      	bgt.n	8008e9e <__ieee754_fmod+0x76>
 8008e88:	dbf2      	blt.n	8008e70 <__ieee754_fmod+0x48>
 8008e8a:	4290      	cmp	r0, r2
 8008e8c:	d3f0      	bcc.n	8008e70 <__ieee754_fmod+0x48>
 8008e8e:	d106      	bne.n	8008e9e <__ieee754_fmod+0x76>
 8008e90:	4a6a      	ldr	r2, [pc, #424]	; (800903c <__ieee754_fmod+0x214>)
 8008e92:	0fed      	lsrs	r5, r5, #31
 8008e94:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008e98:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e9c:	e7e8      	b.n	8008e70 <__ieee754_fmod+0x48>
 8008e9e:	ea19 0f0b 	tst.w	r9, fp
 8008ea2:	d14a      	bne.n	8008f3a <__ieee754_fmod+0x112>
 8008ea4:	f1b8 0f00 	cmp.w	r8, #0
 8008ea8:	d13f      	bne.n	8008f2a <__ieee754_fmod+0x102>
 8008eaa:	4965      	ldr	r1, [pc, #404]	; (8009040 <__ieee754_fmod+0x218>)
 8008eac:	4653      	mov	r3, sl
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dc38      	bgt.n	8008f24 <__ieee754_fmod+0xfc>
 8008eb2:	4b61      	ldr	r3, [pc, #388]	; (8009038 <__ieee754_fmod+0x210>)
 8008eb4:	4033      	ands	r3, r6
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d14f      	bne.n	8008f5a <__ieee754_fmod+0x132>
 8008eba:	f1be 0f00 	cmp.w	lr, #0
 8008ebe:	d144      	bne.n	8008f4a <__ieee754_fmod+0x122>
 8008ec0:	4a5f      	ldr	r2, [pc, #380]	; (8009040 <__ieee754_fmod+0x218>)
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dc3d      	bgt.n	8008f44 <__ieee754_fmod+0x11c>
 8008ec8:	4b5e      	ldr	r3, [pc, #376]	; (8009044 <__ieee754_fmod+0x21c>)
 8008eca:	4299      	cmp	r1, r3
 8008ecc:	db4a      	blt.n	8008f64 <__ieee754_fmod+0x13c>
 8008ece:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ed6:	485b      	ldr	r0, [pc, #364]	; (8009044 <__ieee754_fmod+0x21c>)
 8008ed8:	4282      	cmp	r2, r0
 8008eda:	db57      	blt.n	8008f8c <__ieee754_fmod+0x164>
 8008edc:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008ee0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008ee4:	1a89      	subs	r1, r1, r2
 8008ee6:	1b98      	subs	r0, r3, r6
 8008ee8:	eba4 070c 	sub.w	r7, r4, ip
 8008eec:	2900      	cmp	r1, #0
 8008eee:	d164      	bne.n	8008fba <__ieee754_fmod+0x192>
 8008ef0:	4564      	cmp	r4, ip
 8008ef2:	bf38      	it	cc
 8008ef4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	bfa4      	itt	ge
 8008efc:	463c      	movge	r4, r7
 8008efe:	4603      	movge	r3, r0
 8008f00:	ea53 0104 	orrs.w	r1, r3, r4
 8008f04:	d0c4      	beq.n	8008e90 <__ieee754_fmod+0x68>
 8008f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f0a:	db6b      	blt.n	8008fe4 <__ieee754_fmod+0x1bc>
 8008f0c:	494d      	ldr	r1, [pc, #308]	; (8009044 <__ieee754_fmod+0x21c>)
 8008f0e:	428a      	cmp	r2, r1
 8008f10:	db6e      	blt.n	8008ff0 <__ieee754_fmod+0x1c8>
 8008f12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f16:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8008f1a:	431d      	orrs	r5, r3
 8008f1c:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8008f20:	4620      	mov	r0, r4
 8008f22:	e7a5      	b.n	8008e70 <__ieee754_fmod+0x48>
 8008f24:	3901      	subs	r1, #1
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	e7c1      	b.n	8008eae <__ieee754_fmod+0x86>
 8008f2a:	4946      	ldr	r1, [pc, #280]	; (8009044 <__ieee754_fmod+0x21c>)
 8008f2c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	ddbe      	ble.n	8008eb2 <__ieee754_fmod+0x8a>
 8008f34:	3901      	subs	r1, #1
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	e7fa      	b.n	8008f30 <__ieee754_fmod+0x108>
 8008f3a:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008f3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008f42:	e7b6      	b.n	8008eb2 <__ieee754_fmod+0x8a>
 8008f44:	3a01      	subs	r2, #1
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	e7bc      	b.n	8008ec4 <__ieee754_fmod+0x9c>
 8008f4a:	4a3e      	ldr	r2, [pc, #248]	; (8009044 <__ieee754_fmod+0x21c>)
 8008f4c:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	ddb9      	ble.n	8008ec8 <__ieee754_fmod+0xa0>
 8008f54:	3a01      	subs	r2, #1
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	e7fa      	b.n	8008f50 <__ieee754_fmod+0x128>
 8008f5a:	ea4f 522e 	mov.w	r2, lr, asr #20
 8008f5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008f62:	e7b1      	b.n	8008ec8 <__ieee754_fmod+0xa0>
 8008f64:	1a5c      	subs	r4, r3, r1
 8008f66:	2c1f      	cmp	r4, #31
 8008f68:	dc0a      	bgt.n	8008f80 <__ieee754_fmod+0x158>
 8008f6a:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8008f6e:	fa08 f804 	lsl.w	r8, r8, r4
 8008f72:	fa2a f303 	lsr.w	r3, sl, r3
 8008f76:	ea43 0308 	orr.w	r3, r3, r8
 8008f7a:	fa0a f404 	lsl.w	r4, sl, r4
 8008f7e:	e7aa      	b.n	8008ed6 <__ieee754_fmod+0xae>
 8008f80:	4b31      	ldr	r3, [pc, #196]	; (8009048 <__ieee754_fmod+0x220>)
 8008f82:	1a5b      	subs	r3, r3, r1
 8008f84:	fa0a f303 	lsl.w	r3, sl, r3
 8008f88:	2400      	movs	r4, #0
 8008f8a:	e7a4      	b.n	8008ed6 <__ieee754_fmod+0xae>
 8008f8c:	eba0 0c02 	sub.w	ip, r0, r2
 8008f90:	f1bc 0f1f 	cmp.w	ip, #31
 8008f94:	dc0a      	bgt.n	8008fac <__ieee754_fmod+0x184>
 8008f96:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8008f9a:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008f9e:	fa27 f606 	lsr.w	r6, r7, r6
 8008fa2:	ea46 060e 	orr.w	r6, r6, lr
 8008fa6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008faa:	e79b      	b.n	8008ee4 <__ieee754_fmod+0xbc>
 8008fac:	4e26      	ldr	r6, [pc, #152]	; (8009048 <__ieee754_fmod+0x220>)
 8008fae:	1ab6      	subs	r6, r6, r2
 8008fb0:	fa07 f606 	lsl.w	r6, r7, r6
 8008fb4:	f04f 0c00 	mov.w	ip, #0
 8008fb8:	e794      	b.n	8008ee4 <__ieee754_fmod+0xbc>
 8008fba:	4564      	cmp	r4, ip
 8008fbc:	bf38      	it	cc
 8008fbe:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	da05      	bge.n	8008fd2 <__ieee754_fmod+0x1aa>
 8008fc6:	0fe0      	lsrs	r0, r4, #31
 8008fc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008fcc:	0064      	lsls	r4, r4, #1
 8008fce:	3901      	subs	r1, #1
 8008fd0:	e789      	b.n	8008ee6 <__ieee754_fmod+0xbe>
 8008fd2:	ea50 0307 	orrs.w	r3, r0, r7
 8008fd6:	f43f af5b 	beq.w	8008e90 <__ieee754_fmod+0x68>
 8008fda:	0ffb      	lsrs	r3, r7, #31
 8008fdc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008fe0:	007c      	lsls	r4, r7, #1
 8008fe2:	e7f4      	b.n	8008fce <__ieee754_fmod+0x1a6>
 8008fe4:	0fe1      	lsrs	r1, r4, #31
 8008fe6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008fea:	0064      	lsls	r4, r4, #1
 8008fec:	3a01      	subs	r2, #1
 8008fee:	e78a      	b.n	8008f06 <__ieee754_fmod+0xde>
 8008ff0:	1a89      	subs	r1, r1, r2
 8008ff2:	2914      	cmp	r1, #20
 8008ff4:	dc0a      	bgt.n	800900c <__ieee754_fmod+0x1e4>
 8008ff6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008ffa:	fa03 f202 	lsl.w	r2, r3, r2
 8008ffe:	40cc      	lsrs	r4, r1
 8009000:	4322      	orrs	r2, r4
 8009002:	410b      	asrs	r3, r1
 8009004:	ea43 0105 	orr.w	r1, r3, r5
 8009008:	4610      	mov	r0, r2
 800900a:	e731      	b.n	8008e70 <__ieee754_fmod+0x48>
 800900c:	291f      	cmp	r1, #31
 800900e:	dc07      	bgt.n	8009020 <__ieee754_fmod+0x1f8>
 8009010:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009014:	40cc      	lsrs	r4, r1
 8009016:	fa03 f202 	lsl.w	r2, r3, r2
 800901a:	4322      	orrs	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	e7f1      	b.n	8009004 <__ieee754_fmod+0x1dc>
 8009020:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8009024:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009028:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800902c:	32e2      	adds	r2, #226	; 0xe2
 800902e:	fa43 f202 	asr.w	r2, r3, r2
 8009032:	e7f3      	b.n	800901c <__ieee754_fmod+0x1f4>
 8009034:	7fefffff 	.word	0x7fefffff
 8009038:	7ff00000 	.word	0x7ff00000
 800903c:	080091a8 	.word	0x080091a8
 8009040:	fffffbed 	.word	0xfffffbed
 8009044:	fffffc02 	.word	0xfffffc02
 8009048:	fffffbe2 	.word	0xfffffbe2

0800904c <_init>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	bf00      	nop
 8009050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009052:	bc08      	pop	{r3}
 8009054:	469e      	mov	lr, r3
 8009056:	4770      	bx	lr

08009058 <_fini>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	bf00      	nop
 800905c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905e:	bc08      	pop	{r3}
 8009060:	469e      	mov	lr, r3
 8009062:	4770      	bx	lr
