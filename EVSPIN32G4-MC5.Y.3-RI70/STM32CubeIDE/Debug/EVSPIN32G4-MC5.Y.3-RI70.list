
EVSPIN32G4-MC5.Y.3-RI70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009954  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f84  08009f84  00020544  2**0
                  CONTENTS
  4 .ARM          00000008  08009f84  08009f84  00019f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f8c  08009f8c  00020544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000544  20000000  08009f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b8  20000544  0800a4d8  00020544  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cfc  0800a4d8  00021cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004c6ba  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00063ee3  00000000  00000000  0006cc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000964f  00000000  00000000  000d0b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fb8  00000000  00000000  000da160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00107d62  00000000  00000000  000dc118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000073e8  00000000  00000000  001e3e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00034eff  00000000  00000000  001eb268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e173  00000000  00000000  00220167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0024e2da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064d4  00000000  00000000  0024e330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000544 	.word	0x20000544
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b14 	.word	0x08009b14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000548 	.word	0x20000548
 8000214:	08009b14 	.word	0x08009b14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053a:	f003 fcd3 	bl	8003ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f009 faaf 	bl	8009aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f000 fbc1 	bl	8000cc8 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000544 	.word	0x20000544
  ldr r2, =_sidata
 8000554:	08009f94 	.word	0x08009f94
  ldr r2, =_sbss
 8000558:	20000544 	.word	0x20000544
  ldr r4, =_ebss
 800055c:	20001cfc 	.word	0x20001cfc

08000560 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler>
	...

08000564 <ASPEP_start>:

    return crc == 0;
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000564:	b510      	push	{r4, lr}
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000566:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000568:	4604      	mov	r4, r0
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 800056a:	6940      	ldr	r0, [r0, #20]
 800056c:	4798      	blx	r3
  pHandle->ASPEP_State = ASPEP_IDLE;
 800056e:	2300      	movs	r3, #0
 8000570:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pHandle->ASPEP_TL_State = WAITING_PACKET;
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000574:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

  /* Configure UART to receive first packet*/
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000578:	6960      	ldr	r0, [r4, #20]
 800057a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800057c:	f104 011c 	add.w	r1, r4, #28
 8000580:	2204      	movs	r2, #4
}
 8000582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000586:	4718      	bx	r3

08000588 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon (ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000588:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t * packet = (uint32_t*) pHandle->ctrlBuffer.buffer;
  *packet =( BEACON |
           (capabilities->version <<4) |
           (capabilities->DATA_CRC << 7) |
 800058a:	780b      	ldrb	r3, [r1, #0]
           (capabilities->version <<4) |
 800058c:	790a      	ldrb	r2, [r1, #4]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 800058e:	788c      	ldrb	r4, [r1, #2]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
 8000590:	784f      	ldrb	r7, [r1, #1]
           (((uint32_t)capabilities->TXA_maxSize) << 21));
 8000592:	78ce      	ldrb	r6, [r1, #3]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000594:	4d1b      	ldr	r5, [pc, #108]	; (8000604 <ASPEP_sendBeacon+0x7c>)
           (capabilities->DATA_CRC << 7) |
 8000596:	01db      	lsls	r3, r3, #7
           (capabilities->version <<4) |
 8000598:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800059c:	f043 0205 	orr.w	r2, r3, #5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 80005a0:	03a3      	lsls	r3, r4, #14
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 80005a2:	f002 01f5 	and.w	r1, r2, #245	; 0xf5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 80005a6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80005aa:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 80005ae:	4313      	orrs	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80005b0:	5c69      	ldrb	r1, [r5, r1]
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80005b2:	4c15      	ldr	r4, [pc, #84]	; (8000608 <ASPEP_sendBeacon+0x80>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80005b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80005b8:	404a      	eors	r2, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 80005ba:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80005be:	5caa      	ldrb	r2, [r5, r2]
 80005c0:	4051      	eors	r1, r2
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80005c2:	f3c3 6603 	ubfx	r6, r3, #24, #4
 80005c6:	5c6a      	ldrb	r2, [r5, r1]
 80005c8:	4072      	eors	r2, r6
    *headerPtr |= (uint32_t)crc << 28;
 80005ca:	5ca2      	ldrb	r2, [r4, r2]
 80005cc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005d0:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d2:	b672      	cpsid	i
uint8_t ASPEP_TXframeProcess (ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
  uint8_t result = ASPEP_OK;
  ASPEP_ComputeHeaderCRC  ((uint32_t*)txBuffer); /* Insert CRC header in the packet to send */
  __disable_irq(); /*TODO: Disable High frequency task is enough */
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 80005d4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005d6:	b143      	cbz	r3, 80005ea <ASPEP_sendBeacon+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
 80005d8:	b662      	cpsie	i
        pHandle -> syncBuffer.length = bufferLength;
      }
    }
    else  if ( dataType == ASPEP_CTRL )
    {
     if ( pHandle -> ctrlBuffer.state != free ) {
 80005da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005de:	b913      	cbnz	r3, 80005e6 <ASPEP_sendBeacon+0x5e>
        result = ASPEP_BUFFER_ERROR;
      }
      else {
        pHandle -> ctrlBuffer.state = pending;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005ea:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 80005ee:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80005f0:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 80005f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80005f6:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80005f8:	2204      	movs	r2, #4
 80005fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80005fc:	6940      	ldr	r0, [r0, #20]
}
 80005fe:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000600:	4718      	bx	r3
 8000602:	bf00      	nop
 8000604:	08009b3c 	.word	0x08009b3c
 8000608:	08009b2c 	.word	0x08009b2c

0800060c <ASPEP_sendPing>:
{
 800060c:	b470      	push	{r4, r5, r6}
  uint8_t ipID = pHandle->liid &0xF;
 800060e:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
  uint8_t Nbit = pHandle->syncPacketCount & 0x1; /* Keep only LSB */
 8000612:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 8000616:	014c      	lsls	r4, r1, #5
 8000618:	f003 060f 	and.w	r6, r3, #15
 800061c:	ea44 1301 	orr.w	r3, r4, r1, lsl #4
 8000620:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8000624:	f005 0401 	and.w	r4, r5, #1
 8000628:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800062c:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8000630:	f043 0306 	orr.w	r3, r3, #6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000634:	4c16      	ldr	r4, [pc, #88]	; (8000690 <ASPEP_sendPing+0x84>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000636:	4d17      	ldr	r5, [pc, #92]	; (8000694 <ASPEP_sendPing+0x88>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000638:	f003 01f6 	and.w	r1, r3, #246	; 0xf6
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 800063c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000640:	5c61      	ldrb	r1, [r4, r1]
 8000642:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 8000646:	b2c9      	uxtb	r1, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000648:	5c63      	ldrb	r3, [r4, r1]
 800064a:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 800064e:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000650:	5ce3      	ldrb	r3, [r4, r3]
 8000652:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    *headerPtr |= (uint32_t)crc << 28;
 8000656:	5ceb      	ldrb	r3, [r5, r3]
 8000658:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 800065c:	6202      	str	r2, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800065e:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000660:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000662:	b143      	cbz	r3, 8000676 <ASPEP_sendPing+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000664:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000666:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800066a:	b913      	cbnz	r3, 8000672 <ASPEP_sendPing+0x66>
        pHandle -> ctrlBuffer.state = pending;
 800066c:	2302      	movs	r3, #2
 800066e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000672:	bc70      	pop	{r4, r5, r6}
 8000674:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000676:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 800067a:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 800067c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 800067e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000682:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000684:	2204      	movs	r2, #4
 8000686:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000688:	6940      	ldr	r0, [r0, #20]
}
 800068a:	bc70      	pop	{r4, r5, r6}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 800068c:	4718      	bx	r3
 800068e:	bf00      	nop
 8000690:	08009b3c 	.word	0x08009b3c
 8000694:	08009b2c 	.word	0x08009b2c

08000698 <ASPEP_getBuffer>:
  if (syncAsync == MCTL_SYNC)
 8000698:	2a0a      	cmp	r2, #10
{
 800069a:	b410      	push	{r4}
 800069c:	4603      	mov	r3, r0
  if (syncAsync == MCTL_SYNC)
 800069e:	d00b      	beq.n	80006b8 <ASPEP_getBuffer+0x20>
    if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock ))
 80006a0:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006a4:	2a01      	cmp	r2, #1
 80006a6:	d921      	bls.n	80006ec <ASPEP_getBuffer+0x54>
 80006a8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006ac:	2a01      	cmp	r2, #1
 80006ae:	d911      	bls.n	80006d4 <ASPEP_getBuffer+0x3c>
      result = false;
 80006b0:	2000      	movs	r0, #0
}
 80006b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006b6:	4770      	bx	lr
    if (pHandle->syncBuffer.state <= writeLock ) /* Possible values are free or writeLock*/
 80006b8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006bc:	2a01      	cmp	r2, #1
 80006be:	d8f7      	bhi.n	80006b0 <ASPEP_getBuffer+0x18>
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pHandle->syncBuffer.state = writeLock;
 80006c2:	2401      	movs	r4, #1
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c4:	3204      	adds	r2, #4
 80006c6:	600a      	str	r2, [r1, #0]
      pHandle->syncBuffer.state = writeLock;
 80006c8:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006cc:	4620      	mov	r0, r4
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006d2:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 80006d6:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006d8:	f103 0438 	add.w	r4, r3, #56	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 80006dc:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e0:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006e2:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006e4:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e8:	600a      	str	r2, [r1, #0]
}
 80006ea:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006ee:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006f0:	f103 0430 	add.w	r4, r3, #48	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006f4:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006f8:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006fa:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000700:	600a      	str	r2, [r1, #0]
}
 8000702:	4770      	bx	lr

08000704 <ASPEP_sendPacket>:
{
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pHandle-> ASPEP_State == ASPEP_CONNECTED)
 8000706:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 800070a:	2c02      	cmp	r4, #2
 800070c:	d002      	beq.n	8000714 <ASPEP_sendPacket+0x10>
    result = ASPEP_NOT_CONNECTED;
 800070e:	2102      	movs	r1, #2
}
 8000710:	4608      	mov	r0, r1
 8000712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpHeader =  (txDataLength << 4) | syncAsync;
 8000714:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
    *header = tmpHeader;
 8000718:	f841 4c04 	str.w	r4, [r1, #-4]
    if (pHandle->Capabilities.DATA_CRC == 1)
 800071c:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
 8000720:	2c01      	cmp	r4, #1
    packet = packet - ASPEP_HEADER_SIZE; /* Header ues 4*8 bits on top of txBuffer*/
 8000722:	f1a1 0504 	sub.w	r5, r1, #4
    if (pHandle->Capabilities.DATA_CRC == 1)
 8000726:	d106      	bne.n	8000736 <ASPEP_sendPacket+0x32>
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000728:	18ac      	adds	r4, r5, r2
      *(packet+ASPEP_HEADER_SIZE+txDataLength) = (uint8_t) 0xCA; /* Dummy CRC */
 800072a:	26ca      	movs	r6, #202	; 0xca
 800072c:	548e      	strb	r6, [r1, r2]
      txDataLength+=ASPEP_DATACRC_SIZE;
 800072e:	1c97      	adds	r7, r2, #2
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000730:	26fe      	movs	r6, #254	; 0xfe
      txDataLength+=ASPEP_DATACRC_SIZE;
 8000732:	b2ba      	uxth	r2, r7
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000734:	7166      	strb	r6, [r4, #5]
    if (syncAsync == MCTL_SYNC )
 8000736:	2b0a      	cmp	r3, #10
 8000738:	d103      	bne.n	8000742 <ASPEP_sendPacket+0x3e>
      if ( pSupHandle->MCP_PacketAvailable)
 800073a:	7c04      	ldrb	r4, [r0, #16]
 800073c:	b37c      	cbz	r4, 800079e <ASPEP_sendPacket+0x9a>
        pSupHandle-> MCP_PacketAvailable = false; /* CMD from master is processed*/
 800073e:	2400      	movs	r4, #0
 8000740:	7404      	strb	r4, [r0, #16]
    uint32_t header = *headerPtr;
 8000742:	f851 4c04 	ldr.w	r4, [r1, #-4]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000746:	4f34      	ldr	r7, [pc, #208]	; (8000818 <ASPEP_sendPacket+0x114>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000748:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800081c <ASPEP_sendPacket+0x118>
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 800074c:	b2e6      	uxtb	r6, r4
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 800074e:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000752:	5dbe      	ldrb	r6, [r7, r6]
 8000754:	ea8e 0e06 	eor.w	lr, lr, r6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000758:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800075c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8000760:	ea86 060e 	eor.w	r6, r6, lr
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000764:	3204      	adds	r2, #4
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000766:	5dbe      	ldrb	r6, [r7, r6]
 8000768:	f3c4 6703 	ubfx	r7, r4, #24, #4
 800076c:	407e      	eors	r6, r7
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 800076e:	b292      	uxth	r2, r2
    *headerPtr |= (uint32_t)crc << 28;
 8000770:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8000774:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8000778:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 800077e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000780:	b1e9      	cbz	r1, 80007be <ASPEP_sendPacket+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8000782:	b662      	cpsie	i
    if ( dataType == MCTL_ASYNC )
 8000784:	2b09      	cmp	r3, #9
 8000786:	d00d      	beq.n	80007a4 <ASPEP_sendPacket+0xa0>
    else if (dataType == MCTL_SYNC )
 8000788:	2b0a      	cmp	r3, #10
 800078a:	d02f      	beq.n	80007ec <ASPEP_sendPacket+0xe8>
    else  if ( dataType == ASPEP_CTRL )
 800078c:	2b00      	cmp	r3, #0
 800078e:	d133      	bne.n	80007f8 <ASPEP_sendPacket+0xf4>
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000790:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8000794:	bb71      	cbnz	r1, 80007f4 <ASPEP_sendPacket+0xf0>
        pHandle -> ctrlBuffer.state = pending;
 8000796:	2302      	movs	r3, #2
 8000798:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800079c:	e7b8      	b.n	8000710 <ASPEP_sendPacket+0xc>
        result = MCTL_SYNC_NOT_EXPECTED;
 800079e:	2101      	movs	r1, #1
}
 80007a0:	4608      	mov	r0, r1
 80007a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pHandle->asyncNextBuffer == NULL)
 80007a4:	e9d0 3410 	ldrd	r3, r4, [r0, #64]	; 0x40
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 80007a8:	6819      	ldr	r1, [r3, #0]
        result = ASPEP_BUFFER_ERROR;
 80007aa:	428d      	cmp	r5, r1
 80007ac:	bf14      	ite	ne
 80007ae:	2103      	movne	r1, #3
 80007b0:	2100      	moveq	r1, #0
      if (pHandle->asyncNextBuffer == NULL)
 80007b2:	b37c      	cbz	r4, 8000814 <ASPEP_sendPacket+0x110>
      pHandle->lastRequestedAsyncBuff->state = pending;
 80007b4:	2402      	movs	r4, #2
 80007b6:	719c      	strb	r4, [r3, #6]
      pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007ba:	809a      	strh	r2, [r3, #4]
 80007bc:	e7a8      	b.n	8000710 <ASPEP_sendPacket+0xc>
    if (dataType == MCTL_ASYNC )
 80007be:	2b09      	cmp	r3, #9
 80007c0:	d022      	beq.n	8000808 <ASPEP_sendPacket+0x104>
    else if (dataType == MCTL_SYNC )
 80007c2:	2b0a      	cmp	r3, #10
      pHandle->syncBuffer.state = readLock;
 80007c4:	f04f 0103 	mov.w	r1, #3
      pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007c8:	bf0b      	itete	eq
 80007ca:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80007ce:	f100 0320 	addne.w	r3, r0, #32
      pHandle->syncBuffer.state = readLock;
 80007d2:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = readLock;
 80007d6:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80007da:	6483      	str	r3, [r0, #72]	; 0x48
 80007dc:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80007de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80007e0:	6940      	ldr	r0, [r0, #20]
 80007e2:	4629      	mov	r1, r5
 80007e4:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 80007e6:	2100      	movs	r1, #0
}
 80007e8:	4608      	mov	r0, r1
 80007ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle -> syncBuffer.state != writeLock ) {
 80007ec:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d003      	beq.n	80007fc <ASPEP_sendPacket+0xf8>
        result = ASPEP_BUFFER_ERROR;
 80007f4:	2103      	movs	r1, #3
 80007f6:	e78b      	b.n	8000710 <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 80007f8:	2100      	movs	r1, #0
 80007fa:	e789      	b.n	8000710 <ASPEP_sendPacket+0xc>
        pHandle -> syncBuffer.state = pending;
 80007fc:	2302      	movs	r3, #2
        pHandle -> syncBuffer.length = bufferLength;
 80007fe:	8582      	strh	r2, [r0, #44]	; 0x2c
        pHandle -> syncBuffer.state = pending;
 8000800:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  uint8_t result = ASPEP_OK;
 8000804:	2100      	movs	r1, #0
 8000806:	e783      	b.n	8000710 <ASPEP_sendPacket+0xc>
      pHandle->lastRequestedAsyncBuff->state = readLock;
 8000808:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800080a:	2103      	movs	r1, #3
 800080c:	7199      	strb	r1, [r3, #6]
      pHandle->lockBuffer = (void *) pHandle->lastRequestedAsyncBuff;
 800080e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000810:	6483      	str	r3, [r0, #72]	; 0x48
 8000812:	e7e3      	b.n	80007dc <ASPEP_sendPacket+0xd8>
        pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000814:	6443      	str	r3, [r0, #68]	; 0x44
 8000816:	e7cd      	b.n	80007b4 <ASPEP_sendPacket+0xb0>
 8000818:	08009b3c 	.word	0x08009b3c
 800081c:	08009b2c 	.word	0x08009b2c

08000820 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT (ASPEP_Handle_t *pHandle )
{
 8000820:	b538      	push	{r3, r4, r5, lr}
  /* First free previous readLock buffer */
  if (pHandle->ctrlBuffer.state == readLock)
 8000822:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000826:	2b03      	cmp	r3, #3
{
 8000828:	4604      	mov	r4, r0
  if (pHandle->ctrlBuffer.state == readLock)
 800082a:	d015      	beq.n	8000858 <ASPEP_HWDataTransmittedIT+0x38>
  {
    pHandle -> ctrlBuffer.state = free;
  }
  else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
  {
    MCTL_Buff_t * tempBuff = (MCTL_Buff_t *) pHandle -> lockBuffer;
 800082c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    tempBuff->state = free;
 800082e:	2200      	movs	r2, #0
 8000830:	719a      	strb	r2, [r3, #6]
  }
  if ( pHandle -> syncBuffer.state == pending )
 8000832:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000836:	2b02      	cmp	r3, #2
 8000838:	d015      	beq.n	8000866 <ASPEP_HWDataTransmittedIT+0x46>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
    pHandle ->syncBuffer.state = readLock;
  }
  /* Second prepare transfer of pending buffer */
  else if ( pHandle -> ctrlBuffer.state == pending )
 800083a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800083e:	2b02      	cmp	r3, #2
 8000840:	d11d      	bne.n	800087e <ASPEP_HWDataTransmittedIT+0x5e>
  {
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000842:	f100 0120 	add.w	r1, r0, #32
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000846:	6d83      	ldr	r3, [r0, #88]	; 0x58
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000848:	6481      	str	r1, [r0, #72]	; 0x48
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800084a:	2204      	movs	r2, #4
 800084c:	6940      	ldr	r0, [r0, #20]
 800084e:	4798      	blx	r3
    pHandle -> ctrlBuffer.state = readLock;
 8000850:	2303      	movs	r3, #3
 8000852:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    {
      pHandle->lockBuffer = NULL;
    }
    __enable_irq();
  }
}
 8000856:	bd38      	pop	{r3, r4, r5, pc}
  if ( pHandle -> syncBuffer.state == pending )
 8000858:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    pHandle -> ctrlBuffer.state = free;
 800085c:	2200      	movs	r2, #0
  if ( pHandle -> syncBuffer.state == pending )
 800085e:	2b02      	cmp	r3, #2
    pHandle -> ctrlBuffer.state = free;
 8000860:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if ( pHandle -> syncBuffer.state == pending )
 8000864:	d10b      	bne.n	800087e <ASPEP_HWDataTransmittedIT+0x5e>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000866:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800086a:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800086c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800086e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000870:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000872:	6960      	ldr	r0, [r4, #20]
 8000874:	4798      	blx	r3
    pHandle ->syncBuffer.state = readLock;
 8000876:	2303      	movs	r3, #3
 8000878:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 800087c:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800087e:	b672      	cpsid	i
    if ( pHandle->asyncNextBuffer != NULL )
 8000880:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000882:	b1d3      	cbz	r3, 80008ba <ASPEP_HWDataTransmittedIT+0x9a>
      pHandle->asyncNextBuffer->state = readLock;
 8000884:	2203      	movs	r2, #3
      pHandle->lockBuffer = (void *) pHandle->asyncNextBuffer;
 8000886:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->asyncNextBuffer->state = readLock;
 8000888:	719a      	strb	r2, [r3, #6]
      pHandle->fASPEP_send (pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800088a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800088c:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800088e:	889a      	ldrh	r2, [r3, #4]
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	6960      	ldr	r0, [r4, #20]
 8000894:	47a8      	blx	r5
      if ( (pHandle->asyncBufferA.state == pending ) || (pHandle->asyncBufferB.state == pending))
 8000896:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800089a:	2b02      	cmp	r3, #2
 800089c:	d007      	beq.n	80008ae <ASPEP_HWDataTransmittedIT+0x8e>
 800089e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d003      	beq.n	80008ae <ASPEP_HWDataTransmittedIT+0x8e>
        pHandle->asyncNextBuffer = NULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008aa:	b662      	cpsie	i
}
 80008ac:	bd38      	pop	{r3, r4, r5, pc}
        uint32_t temp = (uint32_t) &pHandle->asyncBufferA + (uint32_t) &pHandle->asyncBufferB - (uint32_t)  pHandle->asyncNextBuffer;
 80008ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008b0:	0063      	lsls	r3, r4, #1
 80008b2:	3368      	adds	r3, #104	; 0x68
 80008b4:	1a9b      	subs	r3, r3, r2
        pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp;
 80008b6:	6463      	str	r3, [r4, #68]	; 0x44
      {
 80008b8:	e7f7      	b.n	80008aa <ASPEP_HWDataTransmittedIT+0x8a>
      pHandle->lockBuffer = NULL;
 80008ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80008bc:	e7f5      	b.n	80008aa <ASPEP_HWDataTransmittedIT+0x8a>
 80008be:	bf00      	nop

080008c0 <ASPEP_RXframeProcess>:
  bool validCRCData = true;
  uint16_t packetNumber;
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);

  *packetLength = 0;
  if (pHandle->NewPacketAvailable)
 80008c0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);
 80008c4:	69c2      	ldr	r2, [r0, #28]
{
 80008c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *packetLength = 0;
 80008ca:	2500      	movs	r5, #0
{
 80008cc:	4604      	mov	r4, r0
  *packetLength = 0;
 80008ce:	800d      	strh	r5, [r1, #0]
  if (pHandle->NewPacketAvailable)
 80008d0:	b193      	cbz	r3, 80008f8 <ASPEP_RXframeProcess+0x38>
  {
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
    switch (pHandle->ASPEP_State)
 80008d2:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
 80008d6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
    switch (pHandle->ASPEP_State)
 80008da:	2e01      	cmp	r6, #1
 80008dc:	d056      	beq.n	800098c <ASPEP_RXframeProcess+0xcc>
 80008de:	2e02      	cmp	r6, #2
 80008e0:	d03f      	beq.n	8000962 <ASPEP_RXframeProcess+0xa2>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d033      	beq.n	800094e <ASPEP_RXframeProcess+0x8e>
      }

      break;
    }
    /* The valid received packet is now safely consumes, we are ready to receive a new packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 80008e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008e8:	6960      	ldr	r0, [r4, #20]
 80008ea:	2204      	movs	r2, #4
 80008ec:	f104 011c 	add.w	r1, r4, #28
 80008f0:	4798      	blx	r3
  else
  {
    /* Nothing to do, no response is due to the master */
  }
  return result;
}
 80008f2:	4628      	mov	r0, r5
 80008f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pHandle->badPacketFlag > ASPEP_OK )
 80008f8:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d0f8      	beq.n	80008f2 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000900:	042b      	lsls	r3, r5, #16
 8000902:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000906:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800090a:	4a96      	ldr	r2, [pc, #600]	; (8000b64 <ASPEP_RXframeProcess+0x2a4>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 800090c:	4996      	ldr	r1, [pc, #600]	; (8000b68 <ASPEP_RXframeProcess+0x2a8>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 800090e:	f083 0309 	eor.w	r3, r3, #9
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	ea83 4315 	eor.w	r3, r3, r5, lsr #16
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000918:	f045 050f 	orr.w	r5, r5, #15
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 800091c:	5cd3      	ldrb	r3, [r2, r3]
    *headerPtr |= (uint32_t)crc << 28;
 800091e:	5ccb      	ldrb	r3, [r1, r3]
 8000920:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
 8000924:	6205      	str	r5, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000926:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000928:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800092a:	2b00      	cmp	r3, #0
 800092c:	d03d      	beq.n	80009aa <ASPEP_RXframeProcess+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
 800092e:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000930:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000934:	b913      	cbnz	r3, 800093c <ASPEP_RXframeProcess+0x7c>
        pHandle -> ctrlBuffer.state = pending;
 8000936:	2302      	movs	r3, #2
 8000938:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    pHandle->badPacketFlag = ASPEP_OK;
 800093c:	2500      	movs	r5, #0
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 800093e:	6960      	ldr	r0, [r4, #20]
 8000940:	6d23      	ldr	r3, [r4, #80]	; 0x50
    pHandle->badPacketFlag = ASPEP_OK;
 8000942:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 8000946:	4798      	blx	r3
}
 8000948:	4628      	mov	r0, r5
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (pHandle->rxPacketType == beacon )
 800094e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000952:	2b05      	cmp	r3, #5
 8000954:	f000 8097 	beq.w	8000a86 <ASPEP_RXframeProcess+0x1c6>
      else if (pHandle->rxPacketType == ping)
 8000958:	2b06      	cmp	r3, #6
 800095a:	f000 80d7 	beq.w	8000b0c <ASPEP_RXframeProcess+0x24c>
  uint8_t* result = NULL;
 800095e:	4635      	mov	r5, r6
 8000960:	e7c1      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 8000962:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000966:	2b05      	cmp	r3, #5
 8000968:	d060      	beq.n	8000a2c <ASPEP_RXframeProcess+0x16c>
      else if (pHandle->rxPacketType == ping )
 800096a:	2b06      	cmp	r3, #6
 800096c:	f000 80d5 	beq.w	8000b1a <ASPEP_RXframeProcess+0x25a>
      else if (pHandle->rxPacketType == data )
 8000970:	2b09      	cmp	r3, #9
 8000972:	d1b8      	bne.n	80008e6 <ASPEP_RXframeProcess+0x26>
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000974:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
          *packetLength = pHandle->rxLength;
 8000978:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
          result = pHandle->rxBuffer;
 800097c:	6985      	ldr	r5, [r0, #24]
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 800097e:	3301      	adds	r3, #1
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000980:	2001      	movs	r0, #1
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000982:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000986:	7420      	strb	r0, [r4, #16]
          *packetLength = pHandle->rxLength;
 8000988:	800a      	strh	r2, [r1, #0]
          result = pHandle->rxBuffer;
 800098a:	e7ac      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 800098c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000990:	2b05      	cmp	r3, #5
 8000992:	d016      	beq.n	80009c2 <ASPEP_RXframeProcess+0x102>
      else if (pHandle->rxPacketType == ping)
 8000994:	2b06      	cmp	r3, #6
 8000996:	d1a6      	bne.n	80008e6 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000998:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800099c:	4631      	mov	r1, r6
 800099e:	f7ff fe35 	bl	800060c <ASPEP_sendPing>
        pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009a2:	2302      	movs	r3, #2
 80009a4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009a8:	e79d      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009aa:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 80009ae:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80009b0:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 80009b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80009b6:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80009b8:	2204      	movs	r2, #4
 80009ba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80009bc:	6940      	ldr	r0, [r0, #20]
 80009be:	4798      	blx	r3
 80009c0:	e7bc      	b.n	800093c <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009c2:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009c4:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009c8:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ca:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009ce:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d2:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009d6:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009dc:	42ab      	cmp	r3, r5
 80009de:	4698      	mov	r8, r3
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 80009e0:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e4:	bf28      	it	cs
 80009e6:	46a8      	movcs	r8, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009e8:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 80009ea:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ee:	bf28      	it	cs
 80009f0:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009f2:	42b7      	cmp	r7, r6
 80009f4:	46b9      	mov	r9, r7
 80009f6:	bf28      	it	cs
 80009f8:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009fa:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fc:	f884 8067 	strb.w	r8, [r4, #103]	; 0x67
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a00:	46f0      	mov	r8, lr
 8000a02:	bf28      	it	cs
 8000a04:	46e0      	movcs	r8, ip
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a06:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a08:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0c:	f884 9069 	strb.w	r9, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a10:	f884 806a 	strb.w	r8, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a14:	f240 8086 	bls.w	8000b24 <ASPEP_RXframeProcess+0x264>
          pHandle->ASPEP_State = ASPEP_IDLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 8000a1e:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8000a22:	4620      	mov	r0, r4
 8000a24:	f7ff fdb0 	bl	8000588 <ASPEP_sendBeacon>
  uint8_t* result = NULL;
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e75c      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a2c:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a2e:	f894 6067 	ldrb.w	r6, [r4, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a32:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a34:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a38:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a3c:	f894 e06a 	ldrb.w	lr, [r4, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a40:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a42:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a46:	42b3      	cmp	r3, r6
 8000a48:	4699      	mov	r9, r3
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8000a4a:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a4e:	bf28      	it	cs
 8000a50:	46b1      	movcs	r9, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a52:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000a54:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a58:	bf28      	it	cs
 8000a5a:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a5c:	45bc      	cmp	ip, r7
 8000a5e:	46e2      	mov	sl, ip
 8000a60:	bf28      	it	cs
 8000a62:	46ba      	movcs	sl, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a64:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a66:	f884 9067 	strb.w	r9, [r4, #103]	; 0x67
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a6a:	46c1      	mov	r9, r8
 8000a6c:	bf28      	it	cs
 8000a6e:	46f1      	movcs	r9, lr
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a70:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a72:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a76:	f884 a069 	strb.w	sl, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a7a:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a7e:	d962      	bls.n	8000b46 <ASPEP_RXframeProcess+0x286>
 8000a80:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a84:	e7cb      	b.n	8000a1e <ASPEP_RXframeProcess+0x15e>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a86:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a88:	f890 7067 	ldrb.w	r7, [r0, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a8c:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a8e:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a92:	f890 c069 	ldrb.w	ip, [r0, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a96:	f890 806a 	ldrb.w	r8, [r0, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a9a:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a9c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa0:	42bb      	cmp	r3, r7
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8000aa2:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa6:	469a      	mov	sl, r3
 8000aa8:	bf28      	it	cs
 8000aaa:	46ba      	movcs	sl, r7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aac:	42a9      	cmp	r1, r5
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000aae:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab2:	bf28      	it	cs
 8000ab4:	4629      	movcs	r1, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ab6:	45e6      	cmp	lr, ip
 8000ab8:	4670      	mov	r0, lr
 8000aba:	bf28      	it	cs
 8000abc:	4660      	movcs	r0, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000abe:	45c1      	cmp	r9, r8
 8000ac0:	464e      	mov	r6, r9
 8000ac2:	bf28      	it	cs
 8000ac4:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000ac6:	42bb      	cmp	r3, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac8:	f884 a067 	strb.w	sl, [r4, #103]	; 0x67
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000acc:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad0:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ad4:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000ad8:	d8a1      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
 8000ada:	428d      	cmp	r5, r1
 8000adc:	d89f      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000ade:	45e6      	cmp	lr, ip
 8000ae0:	d89d      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000ae2:	45c1      	cmp	r9, r8
 8000ae4:	d89b      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000ae6:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 8000aea:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000aee:	429d      	cmp	r5, r3
 8000af0:	d195      	bne.n	8000a1e <ASPEP_RXframeProcess+0x15e>
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000af2:	1c4b      	adds	r3, r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000af4:	1c42      	adds	r2, r0, #1
 8000af6:	0152      	lsls	r2, r2, #5
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000af8:	015b      	lsls	r3, r3, #5
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000afa:	01b6      	lsls	r6, r6, #6
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000afc:	2101      	movs	r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000afe:	81a2      	strh	r2, [r4, #12]
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000b00:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000b04:	81e6      	strh	r6, [r4, #14]
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b06:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b0a:	e788      	b.n	8000a1e <ASPEP_RXframeProcess+0x15e>
        ASPEP_sendPing (pHandle,ASPEP_PING_RESET,packetNumber);
 8000b0c:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b10:	4631      	mov	r1, r6
 8000b12:	f7ff fd7b 	bl	800060c <ASPEP_sendPing>
  uint8_t* result = NULL;
 8000b16:	4635      	mov	r5, r6
 8000b18:	e6e5      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000b1a:	7f42      	ldrb	r2, [r0, #29]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f7ff fd75 	bl	800060c <ASPEP_sendPing>
 8000b22:	e6e0      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000b24:	4288      	cmp	r0, r1
 8000b26:	f63f af77 	bhi.w	8000a18 <ASPEP_RXframeProcess+0x158>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000b2a:	42b7      	cmp	r7, r6
 8000b2c:	f63f af74 	bhi.w	8000a18 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000b30:	45e6      	cmp	lr, ip
 8000b32:	f63f af71 	bhi.w	8000a18 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000b36:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8000b3a:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f47f af6a 	bne.w	8000a18 <ASPEP_RXframeProcess+0x158>
 8000b44:	e76b      	b.n	8000a1e <ASPEP_RXframeProcess+0x15e>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000b46:	4288      	cmp	r0, r1
 8000b48:	d89a      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000b4a:	45bc      	cmp	ip, r7
 8000b4c:	d898      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000b4e:	45f0      	cmp	r8, lr
 8000b50:	d896      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000b52:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 8000b56:	f3c2 1302 	ubfx	r3, r2, #4, #3
          pHandle->ASPEP_State = ASPEP_IDLE;
 8000b5a:	1aeb      	subs	r3, r5, r3
 8000b5c:	425d      	negs	r5, r3
 8000b5e:	415d      	adcs	r5, r3
 8000b60:	e78e      	b.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
 8000b62:	bf00      	nop
 8000b64:	08009b3c 	.word	0x08009b3c
 8000b68:	08009b2c 	.word	0x08009b2c

08000b6c <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT (ASPEP_Handle_t *pHandle)
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
/* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.*/
/* This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_RXframeProcess*/
/* If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.*/
  switch (pHandle->ASPEP_TL_State) {
 8000b6e:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b72:	4604      	mov	r4, r0
  switch (pHandle->ASPEP_TL_State) {
 8000b74:	b13b      	cbz	r3, 8000b86 <ASPEP_HWDataReceivedIT+0x1a>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <ASPEP_HWDataReceivedIT+0x18>
    {
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
    }
    break;
  case WAITING_PAYLOAD:
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b7a:	2200      	movs	r2, #0
    // Payload received,
    pHandle->NewPacketAvailable = true;
 8000b7c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b80:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    /*The receiver is not reconfigure right now on purpose to avoid race condition when the packet will be processed in ASPEP_RXframeProcess */
    break;
  }
}
 8000b84:	bd38      	pop	{r3, r4, r5, pc}
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000b86:	69c2      	ldr	r2, [r0, #28]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000b88:	491f      	ldr	r1, [pc, #124]	; (8000c08 <ASPEP_HWDataReceivedIT+0x9c>)
 8000b8a:	b2d3      	uxtb	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000b8c:	5ccb      	ldrb	r3, [r1, r3]
 8000b8e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000b92:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000b94:	5ccb      	ldrb	r3, [r1, r3]
 8000b96:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000b9a:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 24) & 0xff) ];
 8000b9c:	5ccb      	ldrb	r3, [r1, r3]
 8000b9e:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000ba2:	5ccb      	ldrb	r3, [r1, r3]
 8000ba4:	b963      	cbnz	r3, 8000bc0 <ASPEP_HWDataReceivedIT+0x54>
       pHandle->rxPacketType = (ASPEP_packetType_def) (pHandle->rxHeader[0] & ID_MASK);
 8000ba6:	7f03      	ldrb	r3, [r0, #28]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
       switch (pHandle->rxPacketType) {
 8000bb2:	d809      	bhi.n	8000bc8 <ASPEP_HWDataReceivedIT+0x5c>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d81e      	bhi.n	8000bf6 <ASPEP_HWDataReceivedIT+0x8a>
         pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	d1f5      	bne.n	8000bb8 <ASPEP_HWDataReceivedIT+0x4c>
         pHandle->rxLength = (*((uint32_t *)pHandle->rxHeader) & 0x0001FFF0) >> 4;
 8000bcc:	f3c2 120c 	ubfx	r2, r2, #4, #13
 8000bd0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
         if (pHandle->rxLength == 0) /* data packet with length 0 is a valid packet*/
 8000bd4:	b17a      	cbz	r2, 8000bf6 <ASPEP_HWDataReceivedIT+0x8a>
         else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bd6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d30f      	bcc.n	8000bfe <ASPEP_HWDataReceivedIT+0x92>
           pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer , pHandle->rxLength+ASPEP_DATACRC_SIZE*pHandle->Capabilities.DATA_CRC); /* need to read + 2 bytes CRC*/
 8000bde:	f890 5067 	ldrb.w	r5, [r0, #103]	; 0x67
 8000be2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000be4:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 8000be8:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
 8000bec:	4798      	blx	r3
           pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
         pHandle->NewPacketAvailable = true;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
           pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	08009b3c 	.word	0x08009b3c

08000c0c <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset (ASPEP_Handle_t *pHandle)
{ /* We must reset the RX state machine to be sure to not be in Waiting packet state */
 8000c0c:	4601      	mov	r1, r0
  /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
  /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
  pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000c14:	311c      	adds	r1, #28
 8000c16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c18:	6940      	ldr	r0, [r0, #20]
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	4718      	bx	r3
 8000c1e:	bf00      	nop

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	2100      	movs	r1, #0
{
 8000c24:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c26:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c28:	2238      	movs	r2, #56	; 0x38
 8000c2a:	a806      	add	r0, sp, #24
 8000c2c:	f008 ff6a 	bl	8009b04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	4621      	mov	r1, r4
 8000c32:	2244      	movs	r2, #68	; 0x44
 8000c34:	a814      	add	r0, sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c36:	e9cd 4400 	strd	r4, r4, [sp]
 8000c3a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c3e:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f008 ff60 	bl	8009b04 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c44:	4620      	mov	r0, r4
 8000c46:	f004 ff7d 	bl	8005b44 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4a:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c54:	2406      	movs	r4, #6
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c56:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c58:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5c:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c60:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c64:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000c68:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f004 ffef 	bl	8005c50 <HAL_RCC_OscConfig>
 8000c72:	b108      	cbz	r0, 8000c78 <SystemClock_Config+0x58>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <SystemClock_Config+0x56>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c78:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c80:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	240f      	movs	r4, #15
 8000c84:	2503      	movs	r5, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c86:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c8c:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c90:	f005 fa62 	bl	8006158 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b108      	cbz	r0, 8000c9c <SystemClock_Config+0x7c>
 8000c98:	b672      	cpsid	i
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C3
 8000c9c:	f248 1401 	movw	r4, #33025	; 0x8101
 8000ca0:	2500      	movs	r5, #0
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca6:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C3
 8000ca8:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000cac:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000cae:	9223      	str	r2, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f005 fb96 	bl	80063e0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	b108      	cbz	r0, 8000cba <SystemClock_Config+0x9a>
 8000cb6:	b672      	cpsid	i
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <SystemClock_Config+0x98>
  HAL_RCC_EnableCSS();
 8000cba:	f005 fb89 	bl	80063d0 <HAL_RCC_EnableCSS>
}
 8000cbe:	b027      	add	sp, #156	; 0x9c
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	0000      	movs	r0, r0
	...

08000cc8 <main>:
{
 8000cc8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	2600      	movs	r6, #0
{
 8000cce:	b0af      	sub	sp, #188	; 0xbc
  HAL_Init();
 8000cd0:	f003 f938 	bl	8003f44 <HAL_Init>
  SystemClock_Config();
 8000cd4:	f7ff ffa4 	bl	8000c20 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	e9cd 661e 	strd	r6, r6, [sp, #120]	; 0x78
 8000cdc:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce0:	4db1      	ldr	r5, [pc, #708]	; (8000fa8 <main+0x2e0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	9622      	str	r6, [sp, #136]	; 0x88
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8000ce6:	48b1      	ldr	r0, [pc, #708]	; (8000fac <main+0x2e4>)
  hadc1.Instance = ADC1;
 8000ce8:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8000fd8 <main+0x310>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cec:	f043 0320 	orr.w	r3, r3, #32
 8000cf0:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000cf2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	9303      	str	r3, [sp, #12]
 8000cfa:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d04:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	9304      	str	r3, [sp, #16]
 8000d0c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d16:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	9305      	str	r3, [sp, #20]
 8000d1e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d28:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	9306      	str	r3, [sp, #24]
 8000d30:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d32:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000d3a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d46:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8000d48:	f04f 0880 	mov.w	r8, #128	; 0x80
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8000d4c:	f004 faba 	bl	80052c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8000d50:	f04f 0901 	mov.w	r9, #1
 8000d54:	2200      	movs	r2, #0
 8000d56:	2300      	movs	r3, #0
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000d58:	4894      	ldr	r0, [pc, #592]	; (8000fac <main+0x2e4>)
 8000d5a:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8000d5e:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000d62:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f004 f9b9 	bl	80050dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GD_READY_Pin|GD_NFAULT_Pin;
 8000d6a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d6e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d70:	488e      	ldr	r0, [pc, #568]	; (8000fac <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	9420      	str	r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d74:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = GD_READY_Pin|GD_NFAULT_Pin;
 8000d76:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f004 f9af 	bl	80050dc <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	64ab      	str	r3, [r5, #72]	; 0x48
 8000d86:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d90:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d92:	4323      	orrs	r3, r4
 8000d94:	64ab      	str	r3, [r5, #72]	; 0x48
 8000d96:	6cab      	ldr	r3, [r5, #72]	; 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000d98:	9610      	str	r6, [sp, #64]	; 0x40
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9a:	4023      	ands	r3, r4
 8000d9c:	9302      	str	r3, [sp, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d9e:	4631      	mov	r1, r6
 8000da0:	223c      	movs	r2, #60	; 0x3c
 8000da2:	a81e      	add	r0, sp, #120	; 0x78
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da4:	9b02      	ldr	r3, [sp, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8000da6:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000daa:	f008 feab 	bl	8009b04 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	4631      	mov	r1, r6
 8000db0:	a816      	add	r0, sp, #88	; 0x58
 8000db2:	2220      	movs	r2, #32
 8000db4:	f008 fea6 	bl	8009b04 <memset>
  hadc1.Instance = ADC1;
 8000db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000dbc:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
  hadc1.Instance = ADC1;
 8000dc0:	f8cb 3000 	str.w	r3, [fp]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc4:	4658      	mov	r0, fp
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc6:	2304      	movs	r3, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dc8:	f8ab 601c 	strh.w	r6, [fp, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dcc:	e9cb 6601 	strd	r6, r6, [fp, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd0:	e9cb 6604 	strd	r6, r6, [fp, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd4:	e9cb 660b 	strd	r6, r6, [fp, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8000dd8:	f8cb 4020 	str.w	r4, [fp, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ddc:	f88b 6024 	strb.w	r6, [fp, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000de0:	f88b 6038 	strb.w	r6, [fp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000de4:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000de8:	f88b 6040 	strb.w	r6, [fp, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000dec:	f8cb a00c 	str.w	sl, [fp, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df0:	f8cb 3018 	str.w	r3, [fp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	f003 f8c8 	bl	8003f88 <HAL_ADC_Init>
 8000df8:	b108      	cbz	r0, 8000dfe <main+0x136>
 8000dfa:	b672      	cpsid	i
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <main+0x134>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dfe:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e00:	a910      	add	r1, sp, #64	; 0x40
 8000e02:	4658      	mov	r0, fp
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e04:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e06:	f003 ff33 	bl	8004c70 <HAL_ADCEx_MultiModeConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b108      	cbz	r0, 8000e12 <main+0x14a>
 8000e0e:	b672      	cpsid	i
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <main+0x148>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e12:	2201      	movs	r2, #1
 8000e14:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000fdc <main+0x314>
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e18:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e1c:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000e20:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e24:	237f      	movs	r3, #127	; 0x7f
 8000e26:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000e2a:	f04f 0909 	mov.w	r9, #9
 8000e2e:	2604      	movs	r6, #4
 8000e30:	2700      	movs	r7, #0
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e36:	a91e      	add	r1, sp, #120	; 0x78
 8000e38:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e3a:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8000e3e:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000e42:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000e46:	9426      	str	r4, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e48:	f003 fc0e 	bl	8004668 <HAL_ADCEx_InjectedConfigChannel>
 8000e4c:	b108      	cbz	r0, 8000e52 <main+0x18a>
 8000e4e:	b672      	cpsid	i
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <main+0x188>
  sConfig.Channel = ADC_CHANNEL_1;
 8000e52:	4a57      	ldr	r2, [pc, #348]	; (8000fb0 <main+0x2e8>)
 8000e54:	2306      	movs	r3, #6
 8000e56:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5a:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_1;
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_1;
 8000e62:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8000e66:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6a:	f003 f993 	bl	8004194 <HAL_ADC_ConfigChannel>
 8000e6e:	4605      	mov	r5, r0
 8000e70:	b108      	cbz	r0, 8000e76 <main+0x1ae>
 8000e72:	b672      	cpsid	i
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <main+0x1ac>
  hadc2.Instance = ADC2;
 8000e76:	f8df b168 	ldr.w	fp, [pc, #360]	; 8000fe0 <main+0x318>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	223c      	movs	r2, #60	; 0x3c
 8000e7e:	a81e      	add	r0, sp, #120	; 0x78
 8000e80:	f008 fe40 	bl	8009b04 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e84:	2220      	movs	r2, #32
 8000e86:	4629      	mov	r1, r5
 8000e88:	a816      	add	r0, sp, #88	; 0x58
 8000e8a:	f008 fe3b 	bl	8009b04 <memset>
  hadc2.Instance = ADC2;
 8000e8e:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <main+0x2ec>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e90:	f8ab 501c 	strh.w	r5, [fp, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e94:	2204      	movs	r2, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e96:	4658      	mov	r0, fp
  hadc2.Instance = ADC2;
 8000e98:	f8cb 3000 	str.w	r3, [fp]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e9c:	e9cb 5a02 	strd	r5, sl, [fp, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea0:	e9cb 5504 	strd	r5, r5, [fp, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea4:	e9cb 550b 	strd	r5, r5, [fp, #44]	; 0x2c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ea8:	f8cb 5004 	str.w	r5, [fp, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eac:	f8cb 2018 	str.w	r2, [fp, #24]
  hadc2.Init.NbrOfConversion = 1;
 8000eb0:	f8cb 4020 	str.w	r4, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000eb4:	f88b 5024 	strb.w	r5, [fp, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000eb8:	f88b 5038 	strb.w	r5, [fp, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ebc:	f8cb 503c 	str.w	r5, [fp, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000ec0:	f88b 5040 	strb.w	r5, [fp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ec4:	f003 f860 	bl	8003f88 <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b108      	cbz	r0, 8000ed0 <main+0x208>
 8000ecc:	b672      	cpsid	i
  while (1)
 8000ece:	e7fe      	b.n	8000ece <main+0x206>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ed0:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000ed4:	9426      	str	r4, [sp, #152]	; 0x98
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ed6:	f04f 0801 	mov.w	r8, #1
 8000eda:	f04f 097f 	mov.w	r9, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000ede:	2480      	movs	r4, #128	; 0x80
 8000ee0:	2580      	movs	r5, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000ee2:	a91e      	add	r1, sp, #120	; 0x78
 8000ee4:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ee6:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8000eea:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000eee:	e9cd 4528 	strd	r4, r5, [sp, #160]	; 0xa0
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ef2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000ef6:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000efa:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000efe:	f003 fbb3 	bl	8004668 <HAL_ADCEx_InjectedConfigChannel>
 8000f02:	b108      	cbz	r0, 8000f08 <main+0x240>
 8000f04:	b672      	cpsid	i
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <main+0x23e>
  sConfig.Channel = ADC_CHANNEL_5;
 8000f08:	a325      	add	r3, pc, #148	; (adr r3, 8000fa0 <main+0x2d8>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f0e:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_5;
 8000f10:	2404      	movs	r4, #4
 8000f12:	257f      	movs	r5, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f14:	a916      	add	r1, sp, #88	; 0x58
  sConfig.Channel = ADC_CHANNEL_5;
 8000f16:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000f1a:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8000f1e:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f22:	f003 f937 	bl	8004194 <HAL_ADC_ConfigChannel>
 8000f26:	4602      	mov	r2, r0
 8000f28:	b108      	cbz	r0, 8000f2e <main+0x266>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x264>
  hcomp1.Instance = COMP1;
 8000f2e:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <main+0x2f0>)
 8000f30:	4922      	ldr	r1, [pc, #136]	; (8000fbc <main+0x2f4>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000f32:	6042      	str	r2, [r0, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000f34:	f44f 0440 	mov.w	r4, #12582912	; 0xc00000
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f38:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f3c:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hcomp1.Instance = COMP1;
 8000f40:	6001      	str	r1, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000f42:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000f44:	f003 fefa 	bl	8004d3c <HAL_COMP_Init>
 8000f48:	b108      	cbz	r0, 8000f4e <main+0x286>
 8000f4a:	b672      	cpsid	i
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <main+0x284>
  hcomp2.Instance = COMP2;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <main+0x2f8>)
 8000f50:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <main+0x2fc>)
 8000f52:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000f54:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f58:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f5c:	e9c3 0005 	strd	r0, r0, [r3, #20]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 feeb 	bl	8004d3c <HAL_COMP_Init>
 8000f66:	4602      	mov	r2, r0
 8000f68:	b108      	cbz	r0, 8000f6e <main+0x2a6>
 8000f6a:	b672      	cpsid	i
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x2a4>
  hcomp4.Instance = COMP4;
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <main+0x300>)
 8000f70:	4916      	ldr	r1, [pc, #88]	; (8000fcc <main+0x304>)
 8000f72:	6001      	str	r1, [r0, #0]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000f74:	e9c0 2401 	strd	r2, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f78:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000f7c:	e9c0 2205 	strd	r2, r2, [r0, #20]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000f80:	f003 fedc 	bl	8004d3c <HAL_COMP_Init>
 8000f84:	b108      	cbz	r0, 8000f8a <main+0x2c2>
 8000f86:	b672      	cpsid	i
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x2c0>
  hcordic.Instance = CORDIC;
 8000f8a:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <main+0x308>)
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <main+0x30c>)
 8000f8e:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000f90:	f003 ff78 	bl	8004e84 <HAL_CORDIC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b328      	cbz	r0, 8000fe4 <main+0x31c>
 8000f98:	b672      	cpsid	i
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <main+0x2d2>
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	14f00020 	.word	0x14f00020
 8000fa4:	00000006 	.word	0x00000006
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48001000 	.word	0x48001000
 8000fb0:	04300002 	.word	0x04300002
 8000fb4:	50000100 	.word	0x50000100
 8000fb8:	200006c0 	.word	0x200006c0
 8000fbc:	40010200 	.word	0x40010200
 8000fc0:	20000978 	.word	0x20000978
 8000fc4:	40010204 	.word	0x40010204
 8000fc8:	20000720 	.word	0x20000720
 8000fcc:	4001020c 	.word	0x4001020c
 8000fd0:	20000904 	.word	0x20000904
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	200007a4 	.word	0x200007a4
 8000fdc:	0c900008 	.word	0x0c900008
 8000fe0:	20000650 	.word	0x20000650
  hi2c3.Instance = I2C3;
 8000fe4:	4c9a      	ldr	r4, [pc, #616]	; (8001250 <main+0x588>)
 8000fe6:	499b      	ldr	r1, [pc, #620]	; (8001254 <main+0x58c>)
  hi2c3.Init.Timing = 0x00802172;
 8000fe8:	4a9b      	ldr	r2, [pc, #620]	; (8001258 <main+0x590>)
  hi2c3.Init.OwnAddress1 = 0;
 8000fea:	60a0      	str	r0, [r4, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fec:	2601      	movs	r6, #1
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fee:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x00802172;
 8000ff0:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c3.Init.OwnAddress2 = 0;
 8000ff4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff8:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffc:	6223      	str	r3, [r4, #32]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffe:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001000:	f004 fa10 	bl	8005424 <HAL_I2C_Init>
 8001004:	4601      	mov	r1, r0
 8001006:	b108      	cbz	r0, 800100c <main+0x344>
 8001008:	b672      	cpsid	i
  while (1)
 800100a:	e7fe      	b.n	800100a <main+0x342>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100c:	4620      	mov	r0, r4
 800100e:	f004 fcbd 	bl	800598c <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4601      	mov	r1, r0
 8001014:	b108      	cbz	r0, 800101a <main+0x352>
 8001016:	b672      	cpsid	i
  while (1)
 8001018:	e7fe      	b.n	8001018 <main+0x350>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800101a:	4620      	mov	r0, r4
 800101c:	f004 fce2 	bl	80059e4 <HAL_I2CEx_ConfigDigitalFilter>
 8001020:	4603      	mov	r3, r0
 8001022:	b108      	cbz	r0, 8001028 <main+0x360>
 8001024:	b672      	cpsid	i
  while (1)
 8001026:	e7fe      	b.n	8001026 <main+0x35e>
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 8001028:	498c      	ldr	r1, [pc, #560]	; (800125c <main+0x594>)
  hopamp1.Instance = OPAMP1;
 800102a:	488d      	ldr	r0, [pc, #564]	; (8001260 <main+0x598>)
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 800102c:	684a      	ldr	r2, [r1, #4]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800102e:	6043      	str	r3, [r0, #4]
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 8001030:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001034:	604a      	str	r2, [r1, #4]
  hopamp1.Instance = OPAMP1;
 8001036:	4a8b      	ldr	r2, [pc, #556]	; (8001264 <main+0x59c>)
 8001038:	6002      	str	r2, [r0, #0]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800103a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800103e:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001040:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001042:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001044:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001046:	f004 fcf7 	bl	8005a38 <HAL_OPAMP_Init>
 800104a:	4602      	mov	r2, r0
 800104c:	b108      	cbz	r0, 8001052 <main+0x38a>
 800104e:	b672      	cpsid	i
  while (1)
 8001050:	e7fe      	b.n	8001050 <main+0x388>
  hopamp2.Instance = OPAMP2;
 8001052:	4885      	ldr	r0, [pc, #532]	; (8001268 <main+0x5a0>)
 8001054:	4985      	ldr	r1, [pc, #532]	; (800126c <main+0x5a4>)
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001056:	6102      	str	r2, [r0, #16]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO1;
 8001058:	2720      	movs	r7, #32
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 800105a:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hopamp2.Init.InternalOutput = DISABLE;
 800105e:	7502      	strb	r2, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001060:	6182      	str	r2, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001062:	62c2      	str	r2, [r0, #44]	; 0x2c
  hopamp2.Instance = OPAMP2;
 8001064:	6001      	str	r1, [r0, #0]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO1;
 8001066:	60c7      	str	r7, [r0, #12]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001068:	f004 fce6 	bl	8005a38 <HAL_OPAMP_Init>
 800106c:	4604      	mov	r4, r0
 800106e:	b108      	cbz	r0, 8001074 <main+0x3ac>
 8001070:	b672      	cpsid	i
  while (1)
 8001072:	e7fe      	b.n	8001072 <main+0x3aa>
  htim1.Instance = TIM1;
 8001074:	4d7e      	ldr	r5, [pc, #504]	; (8001270 <main+0x5a8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001076:	9010      	str	r0, [sp, #64]	; 0x40
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001078:	4601      	mov	r1, r0
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	a81e      	add	r0, sp, #120	; 0x78
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800107e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8001082:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001086:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 800108a:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800108e:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001092:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001096:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	9408      	str	r4, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800109c:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	941c      	str	r4, [sp, #112]	; 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a0:	f008 fd30 	bl	8009b04 <memset>
  htim1.Instance = TIM1;
 80010a4:	4973      	ldr	r1, [pc, #460]	; (8001274 <main+0x5ac>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80010a6:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80010a8:	f640 3211 	movw	r2, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010ac:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b0:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	e9c5 6405 	strd	r6, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010b6:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010ba:	60af      	str	r7, [r5, #8]
  htim1.Instance = TIM1;
 80010bc:	6029      	str	r1, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010be:	f005 fb99 	bl	80067f4 <HAL_TIM_Base_Init>
 80010c2:	b108      	cbz	r0, 80010c8 <main+0x400>
 80010c4:	b672      	cpsid	i
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <main+0x3fe>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010c8:	4628      	mov	r0, r5
 80010ca:	f005 fc19 	bl	8006900 <HAL_TIM_PWM_Init>
 80010ce:	b108      	cbz	r0, 80010d4 <main+0x40c>
 80010d0:	b672      	cpsid	i
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <main+0x40a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80010d4:	2310      	movs	r3, #16
 80010d6:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010d8:	a910      	add	r1, sp, #64	; 0x40
 80010da:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80010dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010e0:	f005 fd44 	bl	8006b6c <HAL_TIM_SlaveConfigSynchro>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b108      	cbz	r0, 80010ec <main+0x424>
 80010e8:	b672      	cpsid	i
  while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0x422>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ec:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010ee:	2470      	movs	r4, #112	; 0x70
 80010f0:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010f2:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80010f4:	e9cd 4508 	strd	r4, r5, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fa:	f005 fef3 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	b108      	cbz	r0, 8001104 <main+0x43c>
 8001100:	b672      	cpsid	i
  while (1)
 8001102:	e7fe      	b.n	8001102 <main+0x43a>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001104:	2002      	movs	r0, #2
 8001106:	2101      	movs	r1, #1
 8001108:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800110c:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800110e:	4858      	ldr	r0, [pc, #352]	; (8001270 <main+0x5a8>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001110:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001112:	aa0c      	add	r2, sp, #48	; 0x30
 8001114:	2102      	movs	r1, #2
 8001116:	f005 ff7b 	bl	8007010 <HAL_TIMEx_ConfigBreakInput>
 800111a:	b108      	cbz	r0, 8001120 <main+0x458>
 800111c:	b672      	cpsid	i
  while (1)
 800111e:	e7fe      	b.n	800111e <main+0x456>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001120:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001122:	4853      	ldr	r0, [pc, #332]	; (8001270 <main+0x5a8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001124:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001126:	aa0c      	add	r2, sp, #48	; 0x30
 8001128:	2102      	movs	r1, #2
 800112a:	f005 ff71 	bl	8007010 <HAL_TIMEx_ConfigBreakInput>
 800112e:	b108      	cbz	r0, 8001134 <main+0x46c>
 8001130:	b672      	cpsid	i
  while (1)
 8001132:	e7fe      	b.n	8001132 <main+0x46a>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001134:	aa0c      	add	r2, sp, #48	; 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001136:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001138:	484d      	ldr	r0, [pc, #308]	; (8001270 <main+0x5a8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 800113a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800113c:	2102      	movs	r1, #2
 800113e:	f005 ff67 	bl	8007010 <HAL_TIMEx_ConfigBreakInput>
 8001142:	4602      	mov	r2, r0
 8001144:	b108      	cbz	r0, 800114a <main+0x482>
 8001146:	b672      	cpsid	i
  while (1)
 8001148:	e7fe      	b.n	8001148 <main+0x480>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114a:	2460      	movs	r4, #96	; 0x60
 800114c:	2500      	movs	r5, #0
 800114e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	4847      	ldr	r0, [pc, #284]	; (8001270 <main+0x5a8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001154:	921c      	str	r2, [sp, #112]	; 0x70
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001156:	2400      	movs	r4, #0
 8001158:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115a:	a916      	add	r1, sp, #88	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115c:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8001160:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001164:	f005 fdc4 	bl	8006cf0 <HAL_TIM_PWM_ConfigChannel>
 8001168:	b108      	cbz	r0, 800116e <main+0x4a6>
 800116a:	b672      	cpsid	i
  while (1)
 800116c:	e7fe      	b.n	800116c <main+0x4a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800116e:	4840      	ldr	r0, [pc, #256]	; (8001270 <main+0x5a8>)
 8001170:	4632      	mov	r2, r6
 8001172:	a916      	add	r1, sp, #88	; 0x58
 8001174:	f005 fdbc 	bl	8006cf0 <HAL_TIM_PWM_ConfigChannel>
 8001178:	b108      	cbz	r0, 800117e <main+0x4b6>
 800117a:	b672      	cpsid	i
  while (1)
 800117c:	e7fe      	b.n	800117c <main+0x4b4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117e:	483c      	ldr	r0, [pc, #240]	; (8001270 <main+0x5a8>)
 8001180:	2208      	movs	r2, #8
 8001182:	a916      	add	r1, sp, #88	; 0x58
 8001184:	f005 fdb4 	bl	8006cf0 <HAL_TIM_PWM_ConfigChannel>
 8001188:	b108      	cbz	r0, 800118e <main+0x4c6>
 800118a:	b672      	cpsid	i
  while (1)
 800118c:	e7fe      	b.n	800118c <main+0x4c4>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800118e:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001190:	4837      	ldr	r0, [pc, #220]	; (8001270 <main+0x5a8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001192:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001194:	220c      	movs	r2, #12
 8001196:	a916      	add	r1, sp, #88	; 0x58
 8001198:	f005 fdaa 	bl	8006cf0 <HAL_TIM_PWM_ConfigChannel>
 800119c:	b108      	cbz	r0, 80011a2 <main+0x4da>
 800119e:	b672      	cpsid	i
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <main+0x4d8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	2344      	movs	r3, #68	; 0x44
 80011b4:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 80011c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ca:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ce:	902a      	str	r0, [sp, #168]	; 0xa8
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011d0:	2205      	movs	r2, #5
 80011d2:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011d4:	4826      	ldr	r0, [pc, #152]	; (8001270 <main+0x5a8>)
 80011d6:	a91e      	add	r1, sp, #120	; 0x78
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011d8:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
 80011dc:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e0:	f005 fec8 	bl	8006f74 <HAL_TIMEx_ConfigBreakDeadTime>
 80011e4:	4604      	mov	r4, r0
 80011e6:	b108      	cbz	r0, 80011ec <main+0x524>
 80011e8:	b672      	cpsid	i
  while (1)
 80011ea:	e7fe      	b.n	80011ea <main+0x522>
  htim4.Instance = TIM4;
 80011ec:	4d22      	ldr	r5, [pc, #136]	; (8001278 <main+0x5b0>)
  HAL_TIM_MspPostInit(&htim1);
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <main+0x5a8>)
 80011f0:	f002 fcb4 	bl	8003b5c <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 80011f4:	4a21      	ldr	r2, [pc, #132]	; (800127c <main+0x5b4>)
 80011f6:	602a      	str	r2, [r5, #0]
  htim4.Init.Period = M1_PULSE_NBR;
 80011f8:	f243 73ff 	movw	r3, #14335	; 0x37ff
 80011fc:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011fe:	2203      	movs	r2, #3
 8001200:	2300      	movs	r3, #0
 8001202:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8001206:	2201      	movs	r2, #1
 8001208:	2300      	movs	r3, #0
 800120a:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800120e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001216:	2300      	movs	r3, #0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	9416      	str	r4, [sp, #88]	; 0x58
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001222:	220c      	movs	r2, #12
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001224:	a91e      	add	r1, sp, #120	; 0x78
 8001226:	4628      	mov	r0, r5
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8001228:	240c      	movs	r4, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800122a:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 800122e:	9426      	str	r4, [sp, #152]	; 0x98
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001230:	f005 fbea 	bl	8006a08 <HAL_TIM_Encoder_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	b108      	cbz	r0, 800123c <main+0x574>
 8001238:	b672      	cpsid	i
  while (1)
 800123a:	e7fe      	b.n	800123a <main+0x572>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800123c:	a916      	add	r1, sp, #88	; 0x58
 800123e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001244:	f005 fe4e 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	b1d0      	cbz	r0, 8001280 <main+0x5b8>
 800124a:	b672      	cpsid	i
  while (1)
 800124c:	e7fe      	b.n	800124c <main+0x584>
 800124e:	bf00      	nop
 8001250:	200005b8 	.word	0x200005b8
 8001254:	40007800 	.word	0x40007800
 8001258:	00802172 	.word	0x00802172
 800125c:	40010000 	.word	0x40010000
 8001260:	200006e4 	.word	0x200006e4
 8001264:	40010300 	.word	0x40010300
 8001268:	2000057c 	.word	0x2000057c
 800126c:	40010304 	.word	0x40010304
 8001270:	2000092c 	.word	0x2000092c
 8001274:	40012c00 	.word	0x40012c00
 8001278:	20000604 	.word	0x20000604
 800127c:	40000800 	.word	0x40000800
  huart1.Instance = USART1;
 8001280:	4c3f      	ldr	r4, [pc, #252]	; (8001380 <main+0x6b8>)
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <main+0x6bc>)
 8001284:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 1843200;
 8001286:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800128c:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 800128e:	250c      	movs	r5, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001290:	e9c4 2301 	strd	r2, r3, [r4, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001294:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129c:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a0:	62a3      	str	r3, [r4, #40]	; 0x28
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a2:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012a4:	f005 ffc8 	bl	8007238 <HAL_UART_Init>
 80012a8:	4601      	mov	r1, r0
 80012aa:	b108      	cbz	r0, 80012b0 <main+0x5e8>
 80012ac:	b672      	cpsid	i
  while (1)
 80012ae:	e7fe      	b.n	80012ae <main+0x5e6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b0:	4620      	mov	r0, r4
 80012b2:	f006 f997 	bl	80075e4 <HAL_UARTEx_SetTxFifoThreshold>
 80012b6:	4601      	mov	r1, r0
 80012b8:	b108      	cbz	r0, 80012be <main+0x5f6>
 80012ba:	b672      	cpsid	i
  while (1)
 80012bc:	e7fe      	b.n	80012bc <main+0x5f4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012be:	4620      	mov	r0, r4
 80012c0:	f006 f9ce 	bl	8007660 <HAL_UARTEx_SetRxFifoThreshold>
 80012c4:	b108      	cbz	r0, 80012ca <main+0x602>
 80012c6:	b672      	cpsid	i
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <main+0x600>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012ca:	4620      	mov	r0, r4
 80012cc:	f006 f96c 	bl	80075a8 <HAL_UARTEx_DisableFifoMode>
 80012d0:	4604      	mov	r4, r0
 80012d2:	b108      	cbz	r0, 80012d8 <main+0x610>
 80012d4:	b672      	cpsid	i
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <main+0x60e>
  MX_MotorControl_Init();
 80012d8:	f000 ff0c 	bl	80020f4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	2104      	movs	r1, #4
 80012e0:	2018      	movs	r0, #24
 80012e2:	f003 fdfd 	bl	8004ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80012e6:	2018      	movs	r0, #24
 80012e8:	f003 fe32 	bl	8004f50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80012ec:	4622      	mov	r2, r4
 80012ee:	4621      	mov	r1, r4
 80012f0:	2019      	movs	r0, #25
 80012f2:	f003 fdf5 	bl	8004ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012f6:	2019      	movs	r0, #25
 80012f8:	f003 fe2a 	bl	8004f50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80012fc:	4622      	mov	r2, r4
 80012fe:	2102      	movs	r1, #2
 8001300:	2012      	movs	r0, #18
 8001302:	f003 fded 	bl	8004ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001306:	2012      	movs	r0, #18
 8001308:	f003 fe22 	bl	8004f50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800130c:	4622      	mov	r2, r4
 800130e:	2103      	movs	r1, #3
 8001310:	201e      	movs	r0, #30
 8001312:	f003 fde5 	bl	8004ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001316:	201e      	movs	r0, #30
 8001318:	f003 fe1a 	bl	8004f50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	2103      	movs	r1, #3
 8001320:	2025      	movs	r0, #37	; 0x25
 8001322:	f003 fddd 	bl	8004ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001326:	2025      	movs	r0, #37	; 0x25
 8001328:	f003 fe12 	bl	8004f50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800132c:	4622      	mov	r2, r4
 800132e:	4621      	mov	r1, r4
 8001330:	4628      	mov	r0, r5
 8001332:	f003 fdd5 	bl	8004ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001336:	4628      	mov	r0, r5
 8001338:	f003 fe0a 	bl	8004f50 <HAL_NVIC_EnableIRQ>
 800133c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001398 <main+0x6d0>
 8001340:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800139c <main+0x6d4>
 8001344:	4f10      	ldr	r7, [pc, #64]	; (8001388 <main+0x6c0>)
 8001346:	4e11      	ldr	r6, [pc, #68]	; (800138c <main+0x6c4>)
 8001348:	4d11      	ldr	r5, [pc, #68]	; (8001390 <main+0x6c8>)
 800134a:	4c12      	ldr	r4, [pc, #72]	; (8001394 <main+0x6cc>)
		g_current_torque 		= MC_GetPhaseCurrentAmplitudeMotor1();
 800134c:	f000 f870 	bl	8001430 <MC_GetPhaseCurrentAmplitudeMotor1>
 8001350:	f8a9 0000 	strh.w	r0, [r9]
		g_stm_state_motor 		= MC_GetSTMStateMotor1();
 8001354:	f000 f87e 	bl	8001454 <MC_GetSTMStateMotor1>
 8001358:	f888 0000 	strb.w	r0, [r8]
		g_mc_current_faults_motor 	= MC_GetCurrentFaultsMotor1();
 800135c:	f000 f874 	bl	8001448 <MC_GetCurrentFaultsMotor1>
 8001360:	8038      	strh	r0, [r7, #0]
		g_mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 8001362:	f000 f86b 	bl	800143c <MC_GetOccurredFaultsMotor1>
		MC_ProgramTorqueRampMotor1(g_goal, 0);
 8001366:	2100      	movs	r1, #0
		g_mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 8001368:	4603      	mov	r3, r0
		MC_ProgramTorqueRampMotor1(g_goal, 0);
 800136a:	f9b5 0000 	ldrsh.w	r0, [r5]
		g_mc_occured_faults_motor 	= MC_GetOccurredFaultsMotor1();
 800136e:	8033      	strh	r3, [r6, #0]
		MC_ProgramTorqueRampMotor1(g_goal, 0);
 8001370:	f000 f856 	bl	8001420 <MC_ProgramTorqueRampMotor1>
		MC_StartMotor1();
 8001374:	f000 f84e 	bl	8001414 <MC_StartMotor1>
		g_counter++;
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	6023      	str	r3, [r4, #0]
  while (1)
 800137e:	e7e5      	b.n	800134c <main+0x684>
 8001380:	20000874 	.word	0x20000874
 8001384:	40013800 	.word	0x40013800
 8001388:	200006bc 	.word	0x200006bc
 800138c:	2000099c 	.word	0x2000099c
 8001390:	20000566 	.word	0x20000566
 8001394:	20000560 	.word	0x20000560
 8001398:	20000564 	.word	0x20000564
 800139c:	20000870 	.word	0x20000870

080013a0 <MCM_Sqrt>:
	if ( wInput > 0 )
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	dd32      	ble.n	800140a <MCM_Sqrt+0x6a>
		    if ( wInput <= ( int32_t )2097152 )
 80013a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
		      wtemproot = ( int32_t )8192;
 80013a8:	bfd4      	ite	le
 80013aa:	2080      	movle	r0, #128	; 0x80
 80013ac:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013b0:	fb93 f2f0 	sdiv	r2, r3, r0
 80013b4:	4402      	add	r2, r0
		      if ( wtemprootnew == wtemproot )
 80013b6:	ebb0 0f62 	cmp.w	r0, r2, asr #1
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013ba:	ea4f 0162 	mov.w	r1, r2, asr #1
		      if ( wtemprootnew == wtemproot )
 80013be:	d025      	beq.n	800140c <MCM_Sqrt+0x6c>
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013c0:	fb93 f2f1 	sdiv	r2, r3, r1
 80013c4:	440a      	add	r2, r1
		      if ( wtemprootnew == wtemproot )
 80013c6:	ebb1 0f62 	cmp.w	r1, r2, asr #1
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013ca:	ea4f 0062 	mov.w	r0, r2, asr #1
		      if ( wtemprootnew == wtemproot )
 80013ce:	d01d      	beq.n	800140c <MCM_Sqrt+0x6c>
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013d0:	fb93 f2f0 	sdiv	r2, r3, r0
 80013d4:	4402      	add	r2, r0
		      if ( wtemprootnew == wtemproot )
 80013d6:	ebb0 0f62 	cmp.w	r0, r2, asr #1
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013da:	ea4f 0162 	mov.w	r1, r2, asr #1
		      if ( wtemprootnew == wtemproot )
 80013de:	d015      	beq.n	800140c <MCM_Sqrt+0x6c>
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80013e4:	440a      	add	r2, r1
		      if ( wtemprootnew == wtemproot )
 80013e6:	ebb1 0f62 	cmp.w	r1, r2, asr #1
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013ea:	ea4f 0062 	mov.w	r0, r2, asr #1
		      if ( wtemprootnew == wtemproot )
 80013ee:	d00d      	beq.n	800140c <MCM_Sqrt+0x6c>
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013f0:	fb93 f2f0 	sdiv	r2, r3, r0
 80013f4:	4402      	add	r2, r0
		      if ( wtemprootnew == wtemproot )
 80013f6:	ebb0 0f62 	cmp.w	r0, r2, asr #1
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80013fa:	ea4f 0162 	mov.w	r1, r2, asr #1
		      if ( wtemprootnew == wtemproot )
 80013fe:	d005      	beq.n	800140c <MCM_Sqrt+0x6c>
		      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001400:	fb93 f0f1 	sdiv	r0, r3, r1
 8001404:	4408      	add	r0, r1
 8001406:	1040      	asrs	r0, r0, #1
		      if ( wtemprootnew == wtemproot )
 8001408:	4770      	bx	lr
		wtemprootnew = ( int32_t )0;
 800140a:	2000      	movs	r0, #0
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <Error_Handler>:
 8001410:	b672      	cpsid	i
  while (1)
 8001412:	e7fe      	b.n	8001412 <Error_Handler+0x2>

08001414 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001414:	4b01      	ldr	r3, [pc, #4]	; (800141c <MC_StartMotor1+0x8>)
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	f000 b850 	b.w	80014bc <MCI_StartMotor>
 800141c:	20001ca0 	.word	0x20001ca0

08001420 <MC_ProgramTorqueRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <MC_ProgramTorqueRampMotor1+0xc>)
{
 8001422:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001424:	4601      	mov	r1, r0
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	f000 b834 	b.w	8001494 <MCI_ExecTorqueRamp>
 800142c:	20001ca0 	.word	0x20001ca0

08001430 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f000 b918 	b.w	8001668 <MCI_GetPhaseCurrentAmplitude>
 8001438:	20001ca0 	.word	0x20001ca0

0800143c <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 800143c:	4b01      	ldr	r3, [pc, #4]	; (8001444 <MC_GetOccurredFaultsMotor1+0x8>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f000 b892 	b.w	8001568 <MCI_GetOccurredFaults>
 8001444:	20001ca0 	.word	0x20001ca0

08001448 <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 8001448:	4b01      	ldr	r3, [pc, #4]	; (8001450 <MC_GetCurrentFaultsMotor1+0x8>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f000 b892 	b.w	8001574 <MCI_GetCurrentFaults>
 8001450:	20001ca0 	.word	0x20001ca0

08001454 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <MC_GetSTMStateMotor1+0x8>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f000 b882 	b.w	8001560 <MCI_GetSTMState>
 800145c:	20001ca0 	.word	0x20001ca0

08001460 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8001460:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001462:	2400      	movs	r4, #0
 8001464:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8001466:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8001468:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 800146a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800146c:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 800146e:	e9c0 1200 	strd	r1, r2, [r0]
}
 8001472:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8001476:	6083      	str	r3, [r0, #8]
}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 800147c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800147e:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001482:	2401      	movs	r4, #1
 8001484:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001486:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001488:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 800148c:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800148e:	8303      	strh	r3, [r0, #24]
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001494:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001496:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001498:	2402      	movs	r4, #2
 800149a:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 800149c:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800149e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 80014a2:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014a4:	8303      	strh	r3, [r0, #24]
}
 80014a6:	4770      	bx	lr

080014a8 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 80014a8:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80014aa:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014ac:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 80014ae:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80014b2:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014b4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80014b6:	b002      	add	sp, #8
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80014bc:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80014be:	2103      	movs	r1, #3
{
 80014c0:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80014c2:	6800      	ldr	r0, [r0, #0]
 80014c4:	f007 ff5a 	bl	800937c <STM_NextState>

  if ( RetVal == true )
 80014c8:	b108      	cbz	r0, 80014ce <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014ca:	2301      	movs	r3, #1
 80014cc:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80014ce:	bd10      	pop	{r4, pc}

080014d0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80014d0:	6800      	ldr	r0, [r0, #0]
 80014d2:	2107      	movs	r1, #7
 80014d4:	f007 bf52 	b.w	800937c <STM_NextState>

080014d8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80014d8:	6800      	ldr	r0, [r0, #0]
 80014da:	f007 bfc5 	b.w	8009468 <STM_FaultAcknowledged>
 80014de:	bf00      	nop

080014e0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80014e0:	6800      	ldr	r0, [r0, #0]
 80014e2:	2101      	movs	r1, #1
 80014e4:	f007 bf4a 	b.w	800937c <STM_NextState>

080014e8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80014e8:	b178      	cbz	r0, 800150a <MCI_ExecBufferedCommands+0x22>
{
 80014ea:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80014ec:	7e03      	ldrb	r3, [r0, #24]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	4604      	mov	r4, r0
 80014f2:	d000      	beq.n	80014f6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80014f4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80014f6:	7b01      	ldrb	r1, [r0, #12]
 80014f8:	2902      	cmp	r1, #2
 80014fa:	d020      	beq.n	800153e <MCI_ExecBufferedCommands+0x56>
 80014fc:	2903      	cmp	r1, #3
 80014fe:	d005      	beq.n	800150c <MCI_ExecBufferedCommands+0x24>
 8001500:	2901      	cmp	r1, #1
 8001502:	d00c      	beq.n	800151e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001504:	2303      	movs	r3, #3
 8001506:	7623      	strb	r3, [r4, #24]
}
 8001508:	bd10      	pop	{r4, pc}
 800150a:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800150c:	6882      	ldr	r2, [r0, #8]
 800150e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001512:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001516:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001518:	2302      	movs	r3, #2
 800151a:	7623      	strb	r3, [r4, #24]
}
 800151c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800151e:	6883      	ldr	r3, [r0, #8]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001526:	6840      	ldr	r0, [r0, #4]
 8001528:	f007 fe68 	bl	80091fc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 800152c:	8ae2      	ldrh	r2, [r4, #22]
 800152e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001532:	6860      	ldr	r0, [r4, #4]
 8001534:	f007 fe66 	bl	8009204 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001538:	2800      	cmp	r0, #0
 800153a:	d0e3      	beq.n	8001504 <MCI_ExecBufferedCommands+0x1c>
 800153c:	e7ec      	b.n	8001518 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800153e:	6883      	ldr	r3, [r0, #8]
 8001540:	2100      	movs	r1, #0
 8001542:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001546:	6840      	ldr	r0, [r0, #4]
 8001548:	f007 fe58 	bl	80091fc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 800154c:	8ae2      	ldrh	r2, [r4, #22]
 800154e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001552:	6860      	ldr	r0, [r4, #4]
 8001554:	f007 fe56 	bl	8009204 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001558:	2800      	cmp	r0, #0
 800155a:	d0d3      	beq.n	8001504 <MCI_ExecBufferedCommands+0x1c>
 800155c:	e7dc      	b.n	8001518 <MCI_ExecBufferedCommands+0x30>
 800155e:	bf00      	nop

08001560 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001560:	6800      	ldr	r0, [r0, #0]
 8001562:	f007 bf7f 	b.w	8009464 <STM_GetState>
 8001566:	bf00      	nop

08001568 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8001568:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 800156a:	6800      	ldr	r0, [r0, #0]
 800156c:	f007 ff88 	bl	8009480 <STM_GetFaultState>
}
 8001570:	b280      	uxth	r0, r0
 8001572:	bd08      	pop	{r3, pc}

08001574 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8001574:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8001576:	6800      	ldr	r0, [r0, #0]
 8001578:	f007 ff82 	bl	8009480 <STM_GetFaultState>
}
 800157c:	0c00      	lsrs	r0, r0, #16
 800157e:	bd08      	pop	{r3, pc}

08001580 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001580:	7e40      	ldrb	r0, [r0, #25]
 8001582:	4770      	bx	lr

08001584 <MCI_GetLastRampFinalSpeed>:
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
 {
   return  pHandle->hFinalSpeed;
 }
 8001584:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <MCI_GetLastRampFinalTorque>:
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque( MCI_Handle_t * pHandle )
{
    return pHandle->hFinalTorque;
}
 800158c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop

08001594 <MCI_GetLastRampFinalDuration>:
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration( MCI_Handle_t * pHandle )
{
    return pHandle->hDurationms;
}
 8001594:	8ac0      	ldrh	r0, [r0, #22]
 8001596:	4770      	bx	lr

08001598 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001598:	6840      	ldr	r0, [r0, #4]
 800159a:	f007 be7b 	b.w	8009294 <STC_StopRamp>
 800159e:	bf00      	nop

080015a0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80015a0:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80015a2:	6840      	ldr	r0, [r0, #4]
 80015a4:	f007 fe10 	bl	80091c8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80015a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80015ac:	f007 bdb8 	b.w	8009120 <SPD_GetAvrgMecSpeedUnit>

080015b0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80015b0:	6840      	ldr	r0, [r0, #4]
 80015b2:	f007 be13 	b.w	80091dc <STC_GetMecSpeedRefUnit>
 80015b6:	bf00      	nop

080015b8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80015b8:	6882      	ldr	r2, [r0, #8]
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	b282      	uxth	r2, r0
 80015c0:	f362 030f 	bfi	r3, r2, #0, #16
 80015c4:	0c00      	lsrs	r0, r0, #16
 80015c6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80015ca:	b082      	sub	sp, #8
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	b002      	add	sp, #8
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80015d4:	6882      	ldr	r2, [r0, #8]
 80015d6:	6850      	ldr	r0, [r2, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	b282      	uxth	r2, r0
 80015dc:	f362 030f 	bfi	r3, r2, #0, #16
 80015e0:	0c00      	lsrs	r0, r0, #16
 80015e2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80015e6:	b082      	sub	sp, #8
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	b002      	add	sp, #8
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop

080015f0 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80015f0:	6882      	ldr	r2, [r0, #8]
 80015f2:	68d0      	ldr	r0, [r2, #12]
 80015f4:	2300      	movs	r3, #0
 80015f6:	b282      	uxth	r2, r0
 80015f8:	f362 030f 	bfi	r3, r2, #0, #16
 80015fc:	0c00      	lsrs	r0, r0, #16
 80015fe:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001602:	b082      	sub	sp, #8
}
 8001604:	4618      	mov	r0, r3
 8001606:	b002      	add	sp, #8
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop

0800160c <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 800160c:	6882      	ldr	r2, [r0, #8]
 800160e:	6910      	ldr	r0, [r2, #16]
 8001610:	2300      	movs	r3, #0
 8001612:	b282      	uxth	r2, r0
 8001614:	f362 030f 	bfi	r3, r2, #0, #16
 8001618:	0c00      	lsrs	r0, r0, #16
 800161a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800161e:	b082      	sub	sp, #8
}
 8001620:	4618      	mov	r0, r3
 8001622:	b002      	add	sp, #8
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001628:	6882      	ldr	r2, [r0, #8]
 800162a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800162e:	2300      	movs	r3, #0
 8001630:	b282      	uxth	r2, r0
 8001632:	f362 030f 	bfi	r3, r2, #0, #16
 8001636:	0c00      	lsrs	r0, r0, #16
 8001638:	f360 431f 	bfi	r3, r0, #16, #16
{
 800163c:	b082      	sub	sp, #8
}
 800163e:	4618      	mov	r0, r3
 8001640:	b002      	add	sp, #8
 8001642:	4770      	bx	lr

08001644 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001644:	6882      	ldr	r2, [r0, #8]
 8001646:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800164a:	2300      	movs	r3, #0
 800164c:	b282      	uxth	r2, r0
 800164e:	f362 030f 	bfi	r3, r2, #0, #16
 8001652:	0c00      	lsrs	r0, r0, #16
 8001654:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001658:	b082      	sub	sp, #8
}
 800165a:	4618      	mov	r0, r3
 800165c:	b002      	add	sp, #8
 800165e:	4770      	bx	lr

08001660 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001660:	6883      	ldr	r3, [r0, #8]
}
 8001662:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001666:	4770      	bx	lr

08001668 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001668:	6882      	ldr	r2, [r0, #8]
{
 800166a:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 800166c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8001670:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8001674:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8001678:	fb00 3000 	mla	r0, r0, r0, r3
 800167c:	f7ff fe90 	bl	80013a0 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8001680:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001684:	4298      	cmp	r0, r3
 8001686:	bfa8      	it	ge
 8001688:	4618      	movge	r0, r3
}
 800168a:	b200      	sxth	r0, r0
 800168c:	bd08      	pop	{r3, pc}
 800168e:	bf00      	nop

08001690 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001690:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001692:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001696:	f007 fe37 	bl	8009308 <STC_GetDefaultIqdref>
 800169a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800169e:	8220      	strh	r0, [r4, #16]
 80016a0:	8263      	strh	r3, [r4, #18]
}
 80016a2:	bd10      	pop	{r4, pc}

080016a4 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 80016a4:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80016a6:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80016aa:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 80016ae:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80016b2:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 80016b6:	4250      	negs	r0, r2
 80016b8:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 80016bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80016c0:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 80016c2:	da05      	bge.n	80016d0 <MCM_Clarke+0x2c>
 80016c4:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80016c6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80016ca:	da0c      	bge.n	80016e6 <MCM_Clarke+0x42>
 80016cc:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <MCM_Clarke+0x50>)
 80016ce:	e001      	b.n	80016d4 <MCM_Clarke+0x30>
 80016d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	2000      	movs	r0, #0
 80016d8:	b292      	uxth	r2, r2
 80016da:	f363 000f 	bfi	r0, r3, #0, #16
 80016de:	f362 401f 	bfi	r0, r2, #16, #16
}
 80016e2:	b004      	add	sp, #16
 80016e4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MCM_Clarke+0x50>)
 80016e8:	b20a      	sxth	r2, r1
 80016ea:	4282      	cmp	r2, r0
 80016ec:	bfb8      	it	lt
 80016ee:	4602      	movlt	r2, r0
 80016f0:	e7f0      	b.n	80016d4 <MCM_Clarke+0x30>
 80016f2:	bf00      	nop
 80016f4:	ffff8001 	.word	0xffff8001

080016f8 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MCM_Trig_Functions+0x28>)
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 80016fa:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 80016fe:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001702:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
 8001706:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001708:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800170a:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 800170c:	2000      	movs	r0, #0
 800170e:	b29a      	uxth	r2, r3
 8001710:	f362 000f 	bfi	r0, r2, #0, #16
 8001714:	0c1b      	lsrs	r3, r3, #16
{
 8001716:	b082      	sub	sp, #8
  return (CosSin.Components);
 8001718:	f363 401f 	bfi	r0, r3, #16, #16

}
 800171c:	b002      	add	sp, #8
 800171e:	4770      	bx	lr
 8001720:	40020c00 	.word	0x40020c00

08001724 <MCM_Park>:
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	4605      	mov	r5, r0
 800172a:	9001      	str	r0, [sp, #4]
 800172c:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800172e:	4608      	mov	r0, r1
 8001730:	f7ff ffe2 	bl	80016f8 <MCM_Trig_Functions>
 8001734:	b22d      	sxth	r5, r5
 8001736:	b204      	sxth	r4, r0
 8001738:	1436      	asrs	r6, r6, #16
 800173a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800173c:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001740:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8001744:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001748:	da12      	bge.n	8001770 <MCM_Park+0x4c>
 800174a:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 800174c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001750:	4914      	ldr	r1, [pc, #80]	; (80017a4 <MCM_Park+0x80>)
 8001752:	da21      	bge.n	8001798 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001754:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001758:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 800175c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001760:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8001764:	da07      	bge.n	8001776 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8001766:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800176a:	da0f      	bge.n	800178c <MCM_Park+0x68>
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <MCM_Park+0x80>)
 800176e:	e004      	b.n	800177a <MCM_Park+0x56>
 8001770:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001774:	e7ee      	b.n	8001754 <MCM_Park+0x30>
 8001776:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800177a:	b28a      	uxth	r2, r1
 800177c:	2000      	movs	r0, #0
 800177e:	b29b      	uxth	r3, r3
 8001780:	f362 000f 	bfi	r0, r2, #0, #16
 8001784:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001788:	b004      	add	sp, #16
 800178a:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MCM_Park+0x80>)
 800178e:	b213      	sxth	r3, r2
 8001790:	4283      	cmp	r3, r0
 8001792:	bfb8      	it	lt
 8001794:	4603      	movlt	r3, r0
 8001796:	e7f0      	b.n	800177a <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001798:	b21a      	sxth	r2, r3
 800179a:	4291      	cmp	r1, r2
 800179c:	bfb8      	it	lt
 800179e:	4611      	movlt	r1, r2
 80017a0:	e7d8      	b.n	8001754 <MCM_Park+0x30>
 80017a2:	bf00      	nop
 80017a4:	ffff8001 	.word	0xffff8001

080017a8 <MCM_Rev_Park>:
{
 80017a8:	b530      	push	{r4, r5, lr}
 80017aa:	b085      	sub	sp, #20
 80017ac:	4604      	mov	r4, r0
 80017ae:	9001      	str	r0, [sp, #4]
 80017b0:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80017b2:	4608      	mov	r0, r1
 80017b4:	f7ff ffa0 	bl	80016f8 <MCM_Trig_Functions>
 80017b8:	142d      	asrs	r5, r5, #16
 80017ba:	1403      	asrs	r3, r0, #16
 80017bc:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80017be:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80017c2:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80017c4:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80017c8:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80017cc:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80017d0:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80017d4:	2000      	movs	r0, #0
 80017d6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80017da:	f362 000f 	bfi	r0, r2, #0, #16
 80017de:	f363 401f 	bfi	r0, r3, #16, #16
}
 80017e2:	b005      	add	sp, #20
 80017e4:	bd30      	pop	{r4, r5, pc}
 80017e6:	bf00      	nop

080017e8 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <FOC_Clear+0x74>)
 80017f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80017f4:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80017f8:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 80017fa:	2500      	movs	r5, #0
{
 80017fc:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 80017fe:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001802:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8001804:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8001806:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 800180a:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 800180e:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001812:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8001816:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800181a:	4811      	ldr	r0, [pc, #68]	; (8001860 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 800181c:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800181e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001822:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001826:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001828:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800182a:	50d5      	str	r5, [r2, r3]
 800182c:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001830:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001832:	f006 fc11 	bl	8008058 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <FOC_Clear+0x7c>)
 8001838:	4629      	mov	r1, r5
 800183a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800183e:	f006 fc0b 	bl	8008058 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <FOC_Clear+0x80>)
 8001844:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001848:	f007 fcc0 	bl	80091cc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <FOC_Clear+0x84>)
 800184e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001856:	f000 bd97 	b.w	8002388 <PWMC_SwitchOffPWM>
 800185a:	bf00      	nop
 800185c:	200009e4 	.word	0x200009e4
 8001860:	20000450 	.word	0x20000450
 8001864:	2000044c 	.word	0x2000044c
 8001868:	20000454 	.word	0x20000454
 800186c:	200009d8 	.word	0x200009d8

08001870 <MCboot>:
{
 8001870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8001874:	4f4e      	ldr	r7, [pc, #312]	; (80019b0 <MCboot+0x140>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001876:	4d4f      	ldr	r5, [pc, #316]	; (80019b4 <MCboot+0x144>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001878:	f8df a174 	ldr.w	sl, [pc, #372]	; 80019f0 <MCboot+0x180>
  ENC_Init (&ENCODER_M1);
 800187c:	4e4e      	ldr	r6, [pc, #312]	; (80019b8 <MCboot+0x148>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800187e:	4c4f      	ldr	r4, [pc, #316]	; (80019bc <MCboot+0x14c>)
 8001880:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80019f4 <MCboot+0x184>
 8001884:	f8df b170 	ldr.w	fp, [pc, #368]	; 80019f8 <MCboot+0x188>
  RVBS_Init(&BusVoltageSensor_M1);
 8001888:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80019fc <MCboot+0x18c>
{
 800188c:	b087      	sub	sp, #28
 800188e:	4602      	mov	r2, r0
  STM_Init(&STM[M1]);
 8001890:	4638      	mov	r0, r7
{
 8001892:	9201      	str	r2, [sp, #4]
  STM_Init(&STM[M1]);
 8001894:	f007 fd4e 	bl	8009334 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8001898:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <MCboot+0x150>)
  bMCBootCompleted = 0;
 800189a:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <MCboot+0x154>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800189c:	484a      	ldr	r0, [pc, #296]	; (80019c8 <MCboot+0x158>)
  pCLM[M1] = &CircleLimitationM1;
 800189e:	494b      	ldr	r1, [pc, #300]	; (80019cc <MCboot+0x15c>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80018a0:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 80018a2:	2500      	movs	r5, #0
 80018a4:	701d      	strb	r5, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 80018a6:	6011      	str	r1, [r2, #0]
  R3_2_Init(&PWM_Handle_M1);
 80018a8:	f006 ffee 	bl	8008888 <R3_2_Init>
  ASPEP_start (&aspepOverUartA);
 80018ac:	4848      	ldr	r0, [pc, #288]	; (80019d0 <MCboot+0x160>)
 80018ae:	f7fe fe59 	bl	8000564 <ASPEP_start>
  startTimers();
 80018b2:	f006 fc83 	bl	80081bc <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80018b6:	4650      	mov	r0, sl
 80018b8:	f006 fbba 	bl	8008030 <PID_HandleInit>
  ENC_Init (&ENCODER_M1);
 80018bc:	4630      	mov	r0, r6
 80018be:	f005 ff93 	bl	80077e8 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80018c2:	4633      	mov	r3, r6
 80018c4:	6821      	ldr	r1, [r4, #0]
 80018c6:	464a      	mov	r2, r9
 80018c8:	4658      	mov	r0, fp
 80018ca:	f005 ff3d 	bl	8007748 <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 80018ce:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <MCboot+0x164>)
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80018d0:	6820      	ldr	r0, [r4, #0]
  pEAC[M1] = &EncAlignCtrlM1;
 80018d2:	f8c2 b000 	str.w	fp, [r2]
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80018d6:	4651      	mov	r1, sl
 80018d8:	4632      	mov	r2, r6
 80018da:	f007 fc5f 	bl	800919c <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80018de:	4648      	mov	r0, r9
 80018e0:	f008 f894 	bl	8009a0c <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80018e4:	483c      	ldr	r0, [pc, #240]	; (80019d8 <MCboot+0x168>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80018e6:	f8df b118 	ldr.w	fp, [pc, #280]	; 8001a00 <MCboot+0x190>
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80018ea:	f8df a118 	ldr.w	sl, [pc, #280]	; 8001a04 <MCboot+0x194>
    STSPIN32G4_init( &HdlSTSPING4 );
 80018ee:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8001a08 <MCboot+0x198>
  PID_HandleInit(&PIDIqHandle_M1);
 80018f2:	f006 fb9d 	bl	8008030 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80018f6:	4839      	ldr	r0, [pc, #228]	; (80019dc <MCboot+0x16c>)
 80018f8:	f006 fb9a 	bl	8008030 <PID_HandleInit>
  RVBS_Init(&BusVoltageSensor_M1);
 80018fc:	4640      	mov	r0, r8
 80018fe:	f007 fbb5 	bl	800906c <RVBS_Init>
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <MCboot+0x170>)
  NTC_Init(&TempSensor_M1);
 8001904:	4837      	ldr	r0, [pc, #220]	; (80019e4 <MCboot+0x174>)
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001906:	681b      	ldr	r3, [r3, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001908:	e9c3 b843 	strd	fp, r8, [r3, #268]	; 0x10c
  NTC_Init(&TempSensor_M1);
 800190c:	f006 fb4c 	bl	8007fa8 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <MCboot+0x178>)
 8001912:	4836      	ldr	r0, [pc, #216]	; (80019ec <MCboot+0x17c>)
 8001914:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001916:	f04f 0801 	mov.w	r8, #1
  REMNG_Init(pREMNG[M1]);
 800191a:	f007 fbf5 	bl	8009108 <REMNG_Init>
  FOC_Clear(M1);
 800191e:	4628      	mov	r0, r5
 8001920:	f7ff ff62 	bl	80017e8 <FOC_Clear>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001924:	6820      	ldr	r0, [r4, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001926:	f88b 8024 	strb.w	r8, [fp, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800192a:	f007 fced 	bl	8009308 <STC_GetDefaultIqdref>
 800192e:	4603      	mov	r3, r0
 8001930:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8001934:	f8ab 3010 	strh.w	r3, [fp, #16]
 8001938:	f8ab 2012 	strh.w	r2, [fp, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800193c:	6820      	ldr	r0, [r4, #0]
 800193e:	f007 fce3 	bl	8009308 <STC_GetDefaultIqdref>
 8001942:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001946:	465b      	mov	r3, fp
 8001948:	6822      	ldr	r2, [r4, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800194a:	f8ab 0014 	strh.w	r0, [fp, #20]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800194e:	4639      	mov	r1, r7
 8001950:	4650      	mov	r0, sl
 8001952:	f7ff fd85 	bl	8001460 <MCI_Init>
  MCI_ExecSpeedRamp(&Mci[M1],
 8001956:	6820      	ldr	r0, [r4, #0]
 8001958:	f007 fcd2 	bl	8009300 <STC_GetMecSpeedRefUnitDefault>
 800195c:	462a      	mov	r2, r5
 800195e:	4601      	mov	r1, r0
 8001960:	4650      	mov	r0, sl
 8001962:	f7ff fd8b 	bl	800147c <MCI_ExecSpeedRamp>
  pMCIList[M1] = &Mci[M1];
 8001966:	9a01      	ldr	r2, [sp, #4]
    STSPIN32G4_init( &HdlSTSPING4 );
 8001968:	4648      	mov	r0, r9
  pMCIList[M1] = &Mci[M1];
 800196a:	f8c2 a000 	str.w	sl, [r2]
    STSPIN32G4_init( &HdlSTSPING4 );
 800196e:	f007 fd8d 	bl	800948c <STSPIN32G4_init>
    STSPIN32G4_reset( &HdlSTSPING4 );
 8001972:	4648      	mov	r0, r9
 8001974:	f007 ffe0 	bl	8009938 <STSPIN32G4_reset>
    STSPIN32G4_setVCC( &HdlSTSPING4, (STSPIN32G4_confVCC){ .voltage = _12V,
 8001978:	f240 1303 	movw	r3, #259	; 0x103
 800197c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001980:	f88d 5012 	strb.w	r5, [sp, #18]
 8001984:	9904      	ldr	r1, [sp, #16]
 8001986:	4648      	mov	r0, r9
 8001988:	f007 fdc8 	bl	800951c <STSPIN32G4_setVCC>
    STSPIN32G4_setVDSP( &HdlSTSPING4, (STSPIN32G4_confVDSP){ .deglitchTime = _4us,
 800198c:	f240 1301 	movw	r3, #257	; 0x101
 8001990:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001994:	9903      	ldr	r1, [sp, #12]
 8001996:	4648      	mov	r0, r9
 8001998:	f007 fedc 	bl	8009754 <STSPIN32G4_setVDSP>
    STSPIN32G4_clearFaults( &HdlSTSPING4 );
 800199c:	4648      	mov	r0, r9
 800199e:	f007 ffb5 	bl	800990c <STSPIN32G4_clearFaults>
  bMCBootCompleted = 1;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MCboot+0x154>)
 80019a4:	f883 8000 	strb.w	r8, [r3]
}
 80019a8:	b007      	add	sp, #28
 80019aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	200009bc 	.word	0x200009bc
 80019b4:	200009d8 	.word	0x200009d8
 80019b8:	200000dc 	.word	0x200000dc
 80019bc:	20000454 	.word	0x20000454
 80019c0:	20000a0c 	.word	0x20000a0c
 80019c4:	20000568 	.word	0x20000568
 80019c8:	2000030c 	.word	0x2000030c
 80019cc:	20000028 	.word	0x20000028
 80019d0:	200004bc 	.word	0x200004bc
 80019d4:	200009dc 	.word	0x200009dc
 80019d8:	200001a0 	.word	0x200001a0
 80019dc:	20000174 	.word	0x20000174
 80019e0:	20000448 	.word	0x20000448
 80019e4:	200003e8 	.word	0x200003e8
 80019e8:	20000a10 	.word	0x20000a10
 80019ec:	2000039c 	.word	0x2000039c
 80019f0:	200001cc 	.word	0x200001cc
 80019f4:	20000410 	.word	0x20000410
 80019f8:	20000158 	.word	0x20000158
 80019fc:	20000000 	.word	0x20000000
 8001a00:	200009e4 	.word	0x200009e4
 8001a04:	200009a0 	.word	0x200009a0
 8001a08:	200009c4 	.word	0x200009c4

08001a0c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001a10:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <FOC_CalcCurrRef+0x24>)
 8001a14:	2426      	movs	r4, #38	; 0x26
 8001a16:	fb04 3400 	mla	r4, r4, r0, r3
 8001a1a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a1e:	b103      	cbz	r3, 8001a22 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001a20:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <FOC_CalcCurrRef+0x28>)
 8001a24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a28:	f007 fc38 	bl	800929c <STC_CalcTorqueReference>
 8001a2c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001a2e:	8220      	strh	r0, [r4, #16]
}
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	bf00      	nop
 8001a34:	200009e4 	.word	0x200009e4
 8001a38:	20000454 	.word	0x20000454

08001a3c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001a3c:	4b01      	ldr	r3, [pc, #4]	; (8001a44 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001a3e:	8018      	strh	r0, [r3, #0]
}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000056a 	.word	0x2000056a

08001a48 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001a4a:	8818      	ldrh	r0, [r3, #0]
 8001a4c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a4e:	fab0 f080 	clz	r0, r0
 8001a52:	0940      	lsrs	r0, r0, #5
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2000056a 	.word	0x2000056a

08001a5c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001a5c:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001a5e:	8018      	strh	r0, [r3, #0]
}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000056e 	.word	0x2000056e

08001a68 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001a6a:	8818      	ldrh	r0, [r3, #0]
 8001a6c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a6e:	fab0 f080 	clz	r0, r0
 8001a72:	0940      	lsrs	r0, r0, #5
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000056e 	.word	0x2000056e

08001a7c <TSK_MediumFrequencyTaskM1>:
{
 8001a7c:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 8001a7e:	4c8d      	ldr	r4, [pc, #564]	; (8001cb4 <TSK_MediumFrequencyTaskM1+0x238>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001a80:	488d      	ldr	r0, [pc, #564]	; (8001cb8 <TSK_MediumFrequencyTaskM1+0x23c>)
{
 8001a82:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001a84:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001a86:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 8001a8a:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001a8e:	f005 ff1b 	bl	80078c8 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001a92:	6820      	ldr	r0, [r4, #0]
 8001a94:	f006 fb5e 	bl	8008154 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001a98:	4888      	ldr	r0, [pc, #544]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001a9a:	f007 fce3 	bl	8009464 <STM_GetState>
  switch ( StateM1 )
 8001a9e:	2812      	cmp	r0, #18
 8001aa0:	d818      	bhi.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
 8001aa2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001aa6:	002a      	.short	0x002a
 8001aa8:	00440038 	.word	0x00440038
 8001aac:	00620053 	.word	0x00620053
 8001ab0:	00790067 	.word	0x00790067
 8001ab4:	00930080 	.word	0x00930080
 8001ab8:	00170013 	.word	0x00170013
 8001abc:	00170017 	.word	0x00170017
 8001ac0:	00ac009d 	.word	0x00ac009d
 8001ac4:	00cd00b9 	.word	0x00cd00b9
 8001ac8:	001900dc 	.word	0x001900dc
    STM_NextState( &STM[M1], IDLE );
 8001acc:	487b      	ldr	r0, [pc, #492]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f007 fc54 	bl	800937c <STM_NextState>
}
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 8001ad8:	4877      	ldr	r0, [pc, #476]	; (8001cb8 <TSK_MediumFrequencyTaskM1+0x23c>)
 8001ada:	f005 fec3 	bl	8007864 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001ade:	4877      	ldr	r0, [pc, #476]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	f007 fc4b 	bl	800937c <STM_NextState>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d0f4      	beq.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fe7c 	bl	80017e8 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001af0:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f006 fd56 	bl	80085a4 <R3_2_SwitchOnPWM>
 8001af8:	e7ec      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 8001afa:	4872      	ldr	r0, [pc, #456]	; (8001cc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8001afc:	f005 fe72 	bl	80077e4 <EAC_GetRestartState>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d0e7      	beq.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 8001b04:	486f      	ldr	r0, [pc, #444]	; (8001cc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	f005 fe6a 	bl	80077e0 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	486b      	ldr	r0, [pc, #428]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001b10:	f007 fc34 	bl	800937c <STM_NextState>
 8001b14:	e7de      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	f006 fd1b 	bl	8008554 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001b1e:	2014      	movs	r0, #20
 8001b20:	f7ff ff8c 	bl	8001a3c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 8001b24:	210d      	movs	r1, #13
 8001b26:	4865      	ldr	r0, [pc, #404]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001b28:	f007 fc28 	bl	800937c <STM_NextState>
    break;
 8001b2c:	e7d2      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 8001b2e:	4865      	ldr	r0, [pc, #404]	; (8001cc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8001b30:	f005 fe3c 	bl	80077ac <EAC_Exec>
 8001b34:	4604      	mov	r4, r0
 8001b36:	2800      	cmp	r0, #0
 8001b38:	f040 80aa 	bne.w	8001c90 <TSK_MediumFrequencyTaskM1+0x214>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 8001b3c:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <TSK_MediumFrequencyTaskM1+0x24c>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f007 fbac 	bl	800929c <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 8001b44:	4b61      	ldr	r3, [pc, #388]	; (8001ccc <TSK_MediumFrequencyTaskM1+0x250>)
 8001b46:	8258      	strh	r0, [r3, #18]
 8001b48:	821c      	strh	r4, [r3, #16]
 8001b4a:	e7c3      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8001b4c:	485d      	ldr	r0, [pc, #372]	; (8001cc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8001b4e:	f005 fe45 	bl	80077dc <EAC_IsAligned>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	f040 8090 	bne.w	8001c78 <TSK_MediumFrequencyTaskM1+0x1fc>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8001b58:	485a      	ldr	r0, [pc, #360]	; (8001cc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	f005 fe40 	bl	80077e0 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8001b60:	2101      	movs	r1, #1
 8001b62:	4856      	ldr	r0, [pc, #344]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001b64:	f007 fc0a 	bl	800937c <STM_NextState>
      break;
 8001b68:	e7b4      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001b6a:	2105      	movs	r1, #5
 8001b6c:	4853      	ldr	r0, [pc, #332]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001b6e:	f007 fc05 	bl	800937c <STM_NextState>
    break;
 8001b72:	e7af      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff ff49 	bl	8001a0c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff ff48 	bl	8001a10 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001b80:	2106      	movs	r1, #6
 8001b82:	484e      	ldr	r0, [pc, #312]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001b84:	f007 fbfa 	bl	800937c <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <TSK_MediumFrequencyTaskM1+0x24c>)
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	f007 fbca 	bl	8009324 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001b90:	484f      	ldr	r0, [pc, #316]	; (8001cd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001b92:	f7ff fca9 	bl	80014e8 <MCI_ExecBufferedCommands>
    break;
 8001b96:	e79d      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    MCI_ExecBufferedCommands( &Mci[M1] );
 8001b98:	484d      	ldr	r0, [pc, #308]	; (8001cd0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001b9a:	f7ff fca5 	bl	80014e8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff ff36 	bl	8001a10 <FOC_CalcCurrRef>
    break;
 8001ba4:	e796      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f006 fd47 	bl	800863c <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fe1a 	bl	80017e8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	f006 f9b3 	bl	8007f20 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001bba:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001bbe:	f7ff ff4d 	bl	8001a5c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001bc2:	2108      	movs	r1, #8
 8001bc4:	483d      	ldr	r0, [pc, #244]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001bc6:	f007 fbd9 	bl	800937c <STM_NextState>
    break;
 8001bca:	e783      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001bcc:	f7ff ff4c 	bl	8001a68 <TSK_StopPermanencyTimeHasElapsedM1>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	f43f af7f 	beq.w	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001bd6:	2109      	movs	r1, #9
 8001bd8:	4838      	ldr	r0, [pc, #224]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001bda:	f007 fbcf 	bl	800937c <STM_NextState>
 8001bde:	e779      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001be0:	f7ff ff32 	bl	8001a48 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	f43f af75 	beq.w	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001bea:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001bec:	2100      	movs	r1, #0
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f000 fbcc 	bl	800238c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 8001bf4:	210e      	movs	r1, #14
 8001bf6:	4831      	ldr	r0, [pc, #196]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001bf8:	f007 fbc0 	bl	800937c <STM_NextState>
 8001bfc:	e76a      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f000 fbc2 	bl	800238c <PWMC_CurrentReadingCalibr>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	f43f af63 	beq.w	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 8001c0e:	210f      	movs	r1, #15
 8001c10:	482a      	ldr	r0, [pc, #168]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001c12:	f007 fbb3 	bl	800937c <STM_NextState>
 8001c16:	e75d      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001c18:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <TSK_MediumFrequencyTaskM1+0x24c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <TSK_MediumFrequencyTaskM1+0x250>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001c1c:	6810      	ldr	r0, [r2, #0]
 8001c1e:	492d      	ldr	r1, [pc, #180]	; (8001cd4 <TSK_MediumFrequencyTaskM1+0x258>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001c26:	f007 facd 	bl	80091c4 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 8001c2a:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <TSK_MediumFrequencyTaskM1+0x248>)
 8001c2c:	f005 fd96 	bl	800775c <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 8001c30:	4822      	ldr	r0, [pc, #136]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001c32:	2102      	movs	r1, #2
 8001c34:	f007 fba2 	bl	800937c <STM_NextState>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	f43f af4b 	beq.w	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
 8001c3e:	e754      	b.n	8001aea <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001c40:	f7ff ff02 	bl	8001a48 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001c44:	2800      	cmp	r0, #0
 8001c46:	f43f af45 	beq.w	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f000 fb9c 	bl	800238c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001c54:	2111      	movs	r1, #17
 8001c56:	4819      	ldr	r0, [pc, #100]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001c58:	f007 fb90 	bl	800937c <STM_NextState>
 8001c5c:	e73a      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	f000 fb92 	bl	800238c <PWMC_CurrentReadingCalibr>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	f43f af33 	beq.w	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 8001c6e:	2112      	movs	r1, #18
 8001c70:	4812      	ldr	r0, [pc, #72]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001c72:	f007 fb83 	bl	800937c <STM_NextState>
 8001c76:	e72d      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	f006 fc6a 	bl	8008554 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001c80:	2014      	movs	r0, #20
 8001c82:	f7ff fedb 	bl	8001a3c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001c86:	2110      	movs	r1, #16
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001c8a:	f007 fb77 	bl	800937c <STM_NextState>
    break;
 8001c8e:	e721      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <TSK_MediumFrequencyTaskM1+0x244>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8001c92:	4c0d      	ldr	r4, [pc, #52]	; (8001cc8 <TSK_MediumFrequencyTaskM1+0x24c>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f006 fcd1 	bl	800863c <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	f007 faad 	bl	80091fc <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 8001ca2:	6820      	ldr	r0, [r4, #0]
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <TSK_MediumFrequencyTaskM1+0x23c>)
 8001ca6:	f007 fa8d 	bl	80091c4 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 8001caa:	2107      	movs	r1, #7
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <TSK_MediumFrequencyTaskM1+0x240>)
 8001cae:	f007 fb65 	bl	800937c <STM_NextState>
 8001cb2:	e70f      	b.n	8001ad4 <TSK_MediumFrequencyTaskM1+0x58>
 8001cb4:	20000448 	.word	0x20000448
 8001cb8:	200000dc 	.word	0x200000dc
 8001cbc:	200009bc 	.word	0x200009bc
 8001cc0:	200009d8 	.word	0x200009d8
 8001cc4:	20000158 	.word	0x20000158
 8001cc8:	20000454 	.word	0x20000454
 8001ccc:	200009e4 	.word	0x200009e4
 8001cd0:	200009a0 	.word	0x200009a0
 8001cd4:	20000410 	.word	0x20000410

08001cd8 <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <MC_Scheduler+0x7c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d000      	beq.n	8001ce2 <MC_Scheduler+0xa>
 8001ce0:	4770      	bx	lr
{
 8001ce2:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001ce4:	4c1c      	ldr	r4, [pc, #112]	; (8001d58 <MC_Scheduler+0x80>)
 8001ce6:	8823      	ldrh	r3, [r4, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b1a3      	cbz	r3, 8001d16 <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 8001cec:	8823      	ldrh	r3, [r4, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <MC_Scheduler+0x84>)
 8001cf6:	8813      	ldrh	r3, [r2, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	b11b      	cbz	r3, 8001d04 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001cfc:	8813      	ldrh	r3, [r2, #0]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001d04:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <MC_Scheduler+0x88>)
 8001d06:	8813      	ldrh	r3, [r2, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b11b      	cbz	r3, 8001d14 <MC_Scheduler+0x3c>
      hStopPermanencyCounterM1--;
 8001d0c:	8813      	ldrh	r3, [r2, #0]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8013      	strh	r3, [r2, #0]
}
 8001d14:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8001d16:	4d13      	ldr	r5, [pc, #76]	; (8001d64 <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8001d18:	f7ff feb0 	bl	8001a7c <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001d22:	6883      	ldr	r3, [r0, #8]
 8001d24:	4798      	blx	r3
 8001d26:	6068      	str	r0, [r5, #4]
      if (MCP_Over_UartA.rxBuffer)
 8001d28:	b130      	cbz	r0, 8001d38 <MC_Scheduler+0x60>
        if (MCP_Over_UartA.pTransportLayer->fGetBuffer (MCP_Over_UartA.pTransportLayer, (void **) &MCP_Over_UartA.txBuffer, MCTL_SYNC))
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	f851 0b08 	ldr.w	r0, [r1], #8
 8001d32:	6803      	ldr	r3, [r0, #0]
 8001d34:	4798      	blx	r3
 8001d36:	b910      	cbnz	r0, 8001d3e <MC_Scheduler+0x66>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	8023      	strh	r3, [r4, #0]
 8001d3c:	e7da      	b.n	8001cf4 <MC_Scheduler+0x1c>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f005 feb2 	bl	8007aa8 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket (MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer, MCP_Over_UartA.txLength, MCTL_SYNC);
 8001d44:	6828      	ldr	r0, [r5, #0]
 8001d46:	89ea      	ldrh	r2, [r5, #14]
 8001d48:	6846      	ldr	r6, [r0, #4]
 8001d4a:	68a9      	ldr	r1, [r5, #8]
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	47b0      	blx	r6
 8001d50:	e7f2      	b.n	8001d38 <MC_Scheduler+0x60>
 8001d52:	bf00      	nop
 8001d54:	20000568 	.word	0x20000568
 8001d58:	2000056c 	.word	0x2000056c
 8001d5c:	2000056a 	.word	0x2000056a
 8001d60:	2000056e 	.word	0x2000056e
 8001d64:	20000498 	.word	0x20000498

08001d68 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001d6c:	4838      	ldr	r0, [pc, #224]	; (8001e50 <TSK_HighFrequencyTask+0xe8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001d6e:	4f39      	ldr	r7, [pc, #228]	; (8001e54 <TSK_HighFrequencyTask+0xec>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001d70:	4c39      	ldr	r4, [pc, #228]	; (8001e58 <TSK_HighFrequencyTask+0xf0>)
{
 8001d72:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001d74:	f005 fd88 	bl	8007888 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <TSK_HighFrequencyTask+0xf4>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	f007 fa24 	bl	80091c8 <STC_GetSpeedSensor>
 8001d80:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001d82:	f007 f9c9 	bl	8009118 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001d86:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001d88:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001d8a:	6838      	ldr	r0, [r7, #0]
 8001d8c:	f000 f9c6 	bl	800211c <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001d90:	f001 fcb8 	bl	8003704 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001d94:	f001 fc6c 	bl	8003670 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001d98:	9803      	ldr	r0, [sp, #12]
 8001d9a:	f7ff fc83 	bl	80016a4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001d9e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001da0:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001da2:	f7ff fcbf 	bl	8001724 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001da6:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <TSK_HighFrequencyTask+0xf8>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001da8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001dac:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001dae:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001db0:	1ac9      	subs	r1, r1, r3
 8001db2:	6810      	ldr	r0, [r2, #0]
 8001db4:	f006 f988 	bl	80080c8 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001db8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <TSK_HighFrequencyTask+0xfc>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001dbe:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001dc2:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001dc4:	1a89      	subs	r1, r1, r2
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	f006 f97e 	bl	80080c8 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <TSK_HighFrequencyTask+0x100>)
 8001dce:	f8ad 8008 	strh.w	r8, [sp, #8]
 8001dd2:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001dd6:	9902      	ldr	r1, [sp, #8]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f005 fc85 	bl	80076e8 <Circle_Limitation>
 8001dde:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001de0:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001de2:	fa0f f883 	sxth.w	r8, r3
 8001de6:	141d      	asrs	r5, r3, #16
 8001de8:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001dea:	f007 f99d 	bl	8009128 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001dee:	4631      	mov	r1, r6
 8001df0:	9802      	ldr	r0, [sp, #8]
 8001df2:	f7ff fcd9 	bl	80017a8 <MCM_Rev_Park>
 8001df6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001df8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001dfa:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001dfc:	f000 f990 	bl	8002120 <PWMC_SetPhaseVoltage>
 8001e00:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001e02:	9803      	ldr	r0, [sp, #12]
 8001e04:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e06:	9804      	ldr	r0, [sp, #16]
 8001e08:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001e0a:	9801      	ldr	r0, [sp, #4]
 8001e0c:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001e0e:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001e10:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001e12:	f8a4 8016 	strh.w	r8, [r4, #22]
 8001e16:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001e18:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001e1a:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001e1e:	d011      	beq.n	8001e44 <TSK_HighFrequencyTask+0xdc>
  GLOBAL_TIMESTAMP++;
 8001e20:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <TSK_HighFrequencyTask+0x104>)
  if (MCPA_UART_A.Mark != 0)
 8001e22:	4813      	ldr	r0, [pc, #76]	; (8001e70 <TSK_HighFrequencyTask+0x108>)
  GLOBAL_TIMESTAMP++;
 8001e24:	6813      	ldr	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001e26:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001e2e:	b919      	cbnz	r1, 8001e38 <TSK_HighFrequencyTask+0xd0>
}
 8001e30:	2000      	movs	r0, #0
 8001e32:	b006      	add	sp, #24
 8001e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001e38:	f005 ff0c 	bl	8007c54 <MCPA_dataLog>
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	b006      	add	sp, #24
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	480b      	ldr	r0, [pc, #44]	; (8001e74 <TSK_HighFrequencyTask+0x10c>)
 8001e48:	f007 fa7a 	bl	8009340 <STM_FaultProcessing>
 8001e4c:	e7e8      	b.n	8001e20 <TSK_HighFrequencyTask+0xb8>
 8001e4e:	bf00      	nop
 8001e50:	200000dc 	.word	0x200000dc
 8001e54:	200009d8 	.word	0x200009d8
 8001e58:	200009e4 	.word	0x200009e4
 8001e5c:	20000454 	.word	0x20000454
 8001e60:	20000450 	.word	0x20000450
 8001e64:	2000044c 	.word	0x2000044c
 8001e68:	20000a0c 	.word	0x20000a0c
 8001e6c:	20000578 	.word	0x20000578
 8001e70:	2000046c 	.word	0x2000046c
 8001e74:	200009bc 	.word	0x200009bc

08001e78 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <TSK_SafetyTask_PWMOFF+0xa8>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001e7c:	4e29      	ldr	r6, [pc, #164]	; (8001f24 <TSK_SafetyTask_PWMOFF+0xac>)
{
 8001e7e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001e80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001e84:	f006 f8a2 	bl	8007fcc <NTC_CalcAvTemp>
 8001e88:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001e8a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001e8e:	f000 faa7 	bl	80023e0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001e92:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001e96:	4328      	orrs	r0, r5
 8001e98:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001e9a:	b39c      	cbz	r4, 8001f04 <TSK_SafetyTask_PWMOFF+0x8c>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001e9c:	4f22      	ldr	r7, [pc, #136]	; (8001f28 <TSK_SafetyTask_PWMOFF+0xb0>)
 8001e9e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001ea2:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001ea6:	43ea      	mvns	r2, r5
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	4629      	mov	r1, r5
 8001eac:	4638      	mov	r0, r7
 8001eae:	f007 fa47 	bl	8009340 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001eb2:	4638      	mov	r0, r7
 8001eb4:	f007 fad6 	bl	8009464 <STM_GetState>
 8001eb8:	280a      	cmp	r0, #10
 8001eba:	d00a      	beq.n	8001ed2 <TSK_SafetyTask_PWMOFF+0x5a>
 8001ebc:	280b      	cmp	r0, #11
 8001ebe:	d107      	bne.n	8001ed0 <TSK_SafetyTask_PWMOFF+0x58>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ec0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ec4:	f000 fa60 	bl	8002388 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001ec8:	4818      	ldr	r0, [pc, #96]	; (8001f2c <TSK_SafetyTask_PWMOFF+0xb4>)
 8001eca:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001ece:	bb03      	cbnz	r3, 8001f12 <TSK_SafetyTask_PWMOFF+0x9a>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <TSK_SafetyTask_PWMOFF+0xb8>)
 8001ed4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001ed8:	b110      	cbz	r0, 8001ee0 <TSK_SafetyTask_PWMOFF+0x68>
      EAC_SetRestartState( pEAC[bMotor], false );
 8001eda:	2100      	movs	r1, #0
 8001edc:	f005 fc80 	bl	80077e0 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ee0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ee4:	f000 fa50 	bl	8002388 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001ee8:	4810      	ldr	r0, [pc, #64]	; (8001f2c <TSK_SafetyTask_PWMOFF+0xb4>)
 8001eea:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001eee:	b9a3      	cbnz	r3, 8001f1a <TSK_SafetyTask_PWMOFF+0xa2>
    FOC_Clear(bMotor);
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff fc79 	bl	80017e8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <TSK_SafetyTask_PWMOFF+0xbc>)
 8001ef8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001efc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001f00:	f006 b80e 	b.w	8007f20 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <TSK_SafetyTask_PWMOFF+0xc0>)
 8001f06:	f007 f8c9 	bl	800909c <RVBS_CalcAvVbus>
 8001f0a:	f000 000e 	and.w	r0, r0, #14
 8001f0e:	4305      	orrs	r5, r0
 8001f10:	e7c4      	b.n	8001e9c <TSK_SafetyTask_PWMOFF+0x24>
}
 8001f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      MCPA_flushDataLog (&MCPA_UART_A);
 8001f16:	f005 bf61 	b.w	8007ddc <MCPA_flushDataLog>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001f1a:	f005 ff5f 	bl	8007ddc <MCPA_flushDataLog>
 8001f1e:	e7e7      	b.n	8001ef0 <TSK_SafetyTask_PWMOFF+0x78>
 8001f20:	20000458 	.word	0x20000458
 8001f24:	200009d8 	.word	0x200009d8
 8001f28:	200009bc 	.word	0x200009bc
 8001f2c:	2000046c 	.word	0x2000046c
 8001f30:	200009dc 	.word	0x200009dc
 8001f34:	20000448 	.word	0x20000448
 8001f38:	20000000 	.word	0x20000000

08001f3c <TSK_SafetyTask>:
{
 8001f3c:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <TSK_SafetyTask+0x1c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d000      	beq.n	8001f48 <TSK_SafetyTask+0xc>
}
 8001f46:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff ff95 	bl	8001e78 <TSK_SafetyTask_PWMOFF>
}
 8001f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001f52:	f001 bb5d 	b.w	8003610 <RCM_ExecUserConv>
 8001f56:	bf00      	nop
 8001f58:	20000568 	.word	0x20000568

08001f5c <MC_RunMotorControlTasks>:
{
 8001f5c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <MC_RunMotorControlTasks+0x14>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b903      	cbnz	r3, 8001f66 <MC_RunMotorControlTasks+0xa>
}
 8001f64:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001f66:	f7ff feb7 	bl	8001cd8 <MC_Scheduler>
    TSK_SafetyTask();
 8001f6a:	f7ff ffe7 	bl	8001f3c <TSK_SafetyTask>
}
 8001f6e:	bd08      	pop	{r3, pc}
 8001f70:	20000568 	.word	0x20000568

08001f74 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <TSK_HardwareFaultTask+0x18>)
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	f006 fb5f 	bl	800863c <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001f7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <TSK_HardwareFaultTask+0x1c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	f007 b9da 	b.w	8009340 <STM_FaultProcessing>
 8001f8c:	200009d8 	.word	0x200009d8
 8001f90:	200009bc 	.word	0x200009bc

08001f94 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001f94:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <mc_lock_pins+0x138>)
 8001f98:	4b4d      	ldr	r3, [pc, #308]	; (80020d0 <mc_lock_pins+0x13c>)
 8001f9a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	b092      	sub	sp, #72	; 0x48
 8001fa0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fa2:	61d3      	str	r3, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001fa4:	69d3      	ldr	r3, [r2, #28]
 8001fa6:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001fac:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fb0:	2701      	movs	r7, #1
  (void) temp;
 8001fb2:	9911      	ldr	r1, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fb4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fb6:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fb8:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fba:	69d9      	ldr	r1, [r3, #28]
 8001fbc:	9110      	str	r1, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fbe:	2580      	movs	r5, #128	; 0x80
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fc0:	4944      	ldr	r1, [pc, #272]	; (80020d4 <mc_lock_pins+0x140>)
  (void) temp;
 8001fc2:	9810      	ldr	r0, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fc4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fc6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fc8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fca:	69d8      	ldr	r0, [r3, #28]
 8001fcc:	900f      	str	r0, [sp, #60]	; 0x3c
  (void) temp;
 8001fce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fd0:	4841      	ldr	r0, [pc, #260]	; (80020d8 <mc_lock_pins+0x144>)
 8001fd2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fd4:	2602      	movs	r6, #2
 8001fd6:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fd8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fda:	69d8      	ldr	r0, [r3, #28]
 8001fdc:	900e      	str	r0, [sp, #56]	; 0x38
  (void) temp;
 8001fde:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fe0:	483e      	ldr	r0, [pc, #248]	; (80020dc <mc_lock_pins+0x148>)
 8001fe2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fe4:	2608      	movs	r6, #8
 8001fe6:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fe8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fea:	69d8      	ldr	r0, [r3, #28]
 8001fec:	900d      	str	r0, [sp, #52]	; 0x34
  (void) temp;
 8001fee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ff0:	483b      	ldr	r0, [pc, #236]	; (80020e0 <mc_lock_pins+0x14c>)
 8001ff2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ff4:	2604      	movs	r6, #4
 8001ff6:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ff8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ffa:	69d8      	ldr	r0, [r3, #28]
 8001ffc:	900c      	str	r0, [sp, #48]	; 0x30
  (void) temp;
 8001ffe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002000:	4838      	ldr	r0, [pc, #224]	; (80020e4 <mc_lock_pins+0x150>)
 8002002:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002004:	2640      	movs	r6, #64	; 0x40
 8002006:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002008:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	930b      	str	r3, [sp, #44]	; 0x2c
  (void) temp;
 800200e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <mc_lock_pins+0x154>)
 8002014:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002016:	f04f 0c20 	mov.w	ip, #32
 800201a:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800201e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002020:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <mc_lock_pins+0x158>)
  temp = READ_REG(GPIOx->LCKR);
 8002024:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 8002026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002028:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800202a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800202c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 8002032:	9a09      	ldr	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002034:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002036:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002038:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	9208      	str	r2, [sp, #32]
  (void) temp;
 800203e:	9a08      	ldr	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002040:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002042:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002044:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800204a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800204e:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002052:	f44f 7100 	mov.w	r1, #512	; 0x200
  (void) temp;
 8002056:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002058:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800205a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800205c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	9206      	str	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002062:	f44f 6100 	mov.w	r1, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002066:	f44f 3284 	mov.w	r2, #67584	; 0x10800
  (void) temp;
 800206a:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800206c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800206e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002070:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	9205      	str	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002076:	f44f 6180 	mov.w	r1, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800207a:	f44f 3282 	mov.w	r2, #66560	; 0x10400
  (void) temp;
 800207e:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002080:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002082:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002084:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800208a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800208e:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8002092:	9804      	ldr	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002094:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002096:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002098:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800209a:	69da      	ldr	r2, [r3, #28]
 800209c:	9203      	str	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800209e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a2:	f44f 3288 	mov.w	r2, #69632	; 0x11000
  (void) temp;
 80020a6:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020a8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020aa:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ac:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	9202      	str	r2, [sp, #8]
  (void) temp;
 80020b2:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <mc_lock_pins+0x15c>)
 80020b6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020bc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020be:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	9301      	str	r3, [sp, #4]
  (void) temp;
 80020c4:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80020c6:	b012      	add	sp, #72	; 0x48
 80020c8:	bcf0      	pop	{r4, r5, r6, r7}
 80020ca:	4770      	bx	lr
 80020cc:	48000800 	.word	0x48000800
 80020d0:	00010010 	.word	0x00010010
 80020d4:	00010080 	.word	0x00010080
 80020d8:	00010002 	.word	0x00010002
 80020dc:	00010008 	.word	0x00010008
 80020e0:	00010004 	.word	0x00010004
 80020e4:	00010040 	.word	0x00010040
 80020e8:	00010020 	.word	0x00010020
 80020ec:	48000400 	.word	0x48000400
 80020f0:	00010100 	.word	0x00010100

080020f4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80020f4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80020f6:	f004 f941 	bl	800637c <HAL_RCC_GetHCLKFreq>
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_MotorControl_Init+0x20>)
 80020fc:	fba3 3000 	umull	r3, r0, r3, r0
 8002100:	09c0      	lsrs	r0, r0, #7
 8002102:	f002 ff33 	bl	8004f6c <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002106:	4804      	ldr	r0, [pc, #16]	; (8002118 <MX_MotorControl_Init+0x24>)
 8002108:	f7ff fbb2 	bl	8001870 <MCboot>
  mc_lock_pins();

}
 800210c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002110:	f7ff bf40 	b.w	8001f94 <mc_lock_pins>
 8002114:	10624dd3 	.word	0x10624dd3
 8002118:	20001ca0 	.word	0x20001ca0

0800211c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800211c:	6843      	ldr	r3, [r0, #4]
 800211e:	4718      	bx	r3

08002120 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8002120:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002122:	f8b0 605c 	ldrh.w	r6, [r0, #92]	; 0x5c
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002126:	8f03      	ldrh	r3, [r0, #56]	; 0x38
{
 8002128:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800212a:	140c      	asrs	r4, r1, #16
{
 800212c:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800212e:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002132:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002134:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002138:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 800213c:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002140:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002144:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002148:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002150:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002154:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002158:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 800215c:	db7b      	blt.n	8002256 <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800215e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002162:	db50      	blt.n	8002206 <PWMC_SetPhaseVoltage+0xe6>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002164:	1aad      	subs	r5, r5, r2
 8002166:	bf44      	itt	mi
 8002168:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800216c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8002170:	2900      	cmp	r1, #0
 8002172:	bfbc      	itt	lt
 8002174:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002178:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800217c:	2b00      	cmp	r3, #0
 800217e:	bfb8      	it	lt
 8002180:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002184:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002188:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800218c:	bfb8      	it	lt
 800218e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8002192:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8002194:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002198:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 800219c:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 80021a0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      pHandle->lowDuty = wTimePhB;
 80021a4:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 80021a8:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));

  if ( pHandle->DTTest == 1u )
 80021ac:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80021b0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80021b4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80021b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021bc:	b292      	uxth	r2, r2
 80021be:	b289      	uxth	r1, r1
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80021c4:	8742      	strh	r2, [r0, #58]	; 0x3a
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80021c6:	8781      	strh	r1, [r0, #60]	; 0x3c
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80021c8:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( pHandle->DTTest == 1u )
 80021ca:	d118      	bne.n	80021fe <PWMC_SetPhaseVoltage+0xde>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 80021cc:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	; 0x4c
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 80021d0:	f9b0 504e 	ldrsh.w	r5, [r0, #78]	; 0x4e
    if ( pHandle->Ia > 0 )
 80021d4:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 80021d6:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
 80021da:	bfcc      	ite	gt
 80021dc:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80021de:	1b12      	suble	r2, r2, r4
 80021e0:	b292      	uxth	r2, r2
 80021e2:	8742      	strh	r2, [r0, #58]	; 0x3a
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80021e4:	f9b0 2050 	ldrsh.w	r2, [r0, #80]	; 0x50
    if ( pHandle->Ib > 0 )
 80021e8:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 80021ea:	bfcc      	ite	gt
 80021ec:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80021ee:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 80021f0:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80021f2:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80021f4:	bfcc      	ite	gt
 80021f6:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80021f8:	1b1b      	suble	r3, r3, r4
 80021fa:	8781      	strh	r1, [r0, #60]	; 0x3c
 80021fc:	87c3      	strh	r3, [r0, #62]	; 0x3e
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80021fe:	6983      	ldr	r3, [r0, #24]
}
 8002200:	b003      	add	sp, #12
 8002202:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8002204:	4718      	bx	r3
      if ( wX <= 0 )
 8002206:	2c00      	cmp	r4, #0
 8002208:	dd4b      	ble.n	80022a2 <PWMC_SetPhaseVoltage+0x182>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800220a:	1aa5      	subs	r5, r4, r2
 800220c:	bf44      	itt	mi
 800220e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002212:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8002216:	2900      	cmp	r1, #0
 8002218:	bfb8      	it	lt
 800221a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 800221e:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8002222:	bfb8      	it	lt
 8002224:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8002228:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800222c:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 800222e:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002230:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002234:	bfb8      	it	lt
 8002236:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800223a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800223e:	bfb8      	it	lt
 8002240:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002244:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8002248:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 800224c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8002250:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhC;
 8002254:	e7aa      	b.n	80021ac <PWMC_SetPhaseVoltage+0x8c>
    if ( wZ < 0 )
 8002256:	f1b1 3fff 	cmp.w	r1, #4294967295
 800225a:	db6f      	blt.n	800233c <PWMC_SetPhaseVoltage+0x21c>
      if ( wX <= 0 )
 800225c:	2c00      	cmp	r4, #0
 800225e:	dd47      	ble.n	80022f0 <PWMC_SetPhaseVoltage+0x1d0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002260:	1b2d      	subs	r5, r5, r4
 8002262:	bf48      	it	mi
 8002264:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002268:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800226c:	bf48      	it	mi
 800226e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002272:	2b00      	cmp	r3, #0
 8002274:	bfb8      	it	lt
 8002276:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800227a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800227e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002282:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8002286:	bfb8      	it	lt
 8002288:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 800228c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002290:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8002294:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002298:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 800229c:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 80022a0:	e784      	b.n	80021ac <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80022a2:	1b2d      	subs	r5, r5, r4
 80022a4:	bf44      	itt	mi
 80022a6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80022aa:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bfb8      	it	lt
 80022b2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 80022b6:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 80022ba:	bfb8      	it	lt
 80022bc:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 80022c0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhB = wTimePhC + wX / 131072;
 80022c4:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80022c6:	ea4f 0296 	mov.w	r2, r6, lsr #2
 80022ca:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80022ce:	bfb8      	it	lt
 80022d0:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80022d4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80022d8:	bfb8      	it	lt
 80022da:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 80022de:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 80022e2:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 80022e6:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 80022ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhB;
 80022ee:	e75d      	b.n	80021ac <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80022f0:	1aa5      	subs	r5, r4, r2
 80022f2:	bf44      	itt	mi
 80022f4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80022f8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80022fc:	2900      	cmp	r1, #0
 80022fe:	bfb8      	it	lt
 8002300:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8002304:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8002308:	bfb8      	it	lt
 800230a:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800230e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002312:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8002314:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002316:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800231a:	bfb8      	it	lt
 800231c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8002320:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002324:	bfb8      	it	lt
 8002326:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800232a:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800232e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8002332:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8002336:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 800233a:	e737      	b.n	80021ac <PWMC_SetPhaseVoltage+0x8c>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800233c:	1aad      	subs	r5, r5, r2
 800233e:	bf44      	itt	mi
 8002340:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002344:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8002348:	2900      	cmp	r1, #0
 800234a:	bfbc      	itt	lt
 800234c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002350:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8002354:	2b00      	cmp	r3, #0
 8002356:	bfb8      	it	lt
 8002358:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800235c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002360:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002364:	bfb8      	it	lt
 8002366:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800236a:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 800236c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002370:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8002374:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhC;
 8002378:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 800237c:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhB;
 8002380:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 8002384:	e712      	b.n	80021ac <PWMC_SetPhaseVoltage+0x8c>
 8002386:	bf00      	nop

08002388 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8002388:	6883      	ldr	r3, [r0, #8]
 800238a:	4718      	bx	r3

0800238c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800238c:	b510      	push	{r4, lr}
 800238e:	4604      	mov	r4, r0
 8002390:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8002392:	b199      	cbz	r1, 80023bc <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8002394:	2901      	cmp	r1, #1
 8002396:	d002      	beq.n	800239e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002398:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800239a:	b002      	add	sp, #8
 800239c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800239e:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80023a2:	b1cb      	cbz	r3, 80023d8 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	9101      	str	r1, [sp, #4]
 80023aa:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80023b2:	6903      	ldr	r3, [r0, #16]
 80023b4:	4798      	blx	r3
        retVal = true;
 80023b6:	9901      	ldr	r1, [sp, #4]
 80023b8:	4608      	mov	r0, r1
 80023ba:	e7ee      	b.n	800239a <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 80023bc:	f7ff ffe4 	bl	8002388 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80023c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80023c4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e5      	bne.n	8002398 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80023cc:	4620      	mov	r0, r4
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	4798      	blx	r3
      retVal = true;
 80023d2:	2001      	movs	r0, #1
}
 80023d4:	b002      	add	sp, #8
 80023d6:	bd10      	pop	{r4, pc}
      retVal = true;
 80023d8:	4608      	mov	r0, r1
}
 80023da:	b002      	add	sp, #8
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	bf00      	nop

080023e0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80023e0:	69c3      	ldr	r3, [r0, #28]
 80023e2:	4718      	bx	r3

080023e4 <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80023e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e8:	4681      	mov	r9, r0
  uint16_t * dataElementID;
  uint8_t * rxData = pHandle->rxBuffer;
  uint8_t * txData = pHandle->txBuffer;
  int16_t rxLength = pHandle->rxLength;
 80023ea:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  uint16_t size;
  uint8_t retVal=MCP_CMD_OK;
  uint8_t accessResult;
  uint8_t number_of_item =0;
  pHandle->txLength = 0;
 80023ee:	2300      	movs	r3, #0
  while (rxLength > 0)
 80023f0:	4298      	cmp	r0, r3
  uint8_t * txData = pHandle->txBuffer;
 80023f2:	e9d9 6201 	ldrd	r6, r2, [r9, #4]
{
 80023f6:	b087      	sub	sp, #28
  pHandle->txLength = 0;
 80023f8:	f8a9 300e 	strh.w	r3, [r9, #14]
  while (rxLength > 0)
 80023fc:	f340 8081 	ble.w	8002502 <RI_SetRegCommandParser+0x11e>
  uint8_t * txData = pHandle->txBuffer;
 8002400:	4617      	mov	r7, r2
 8002402:	440a      	add	r2, r1
  uint8_t retVal=MCP_CMD_OK;
 8002404:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002408:	f1c7 0301 	rsb	r3, r7, #1
 800240c:	f8cd 9000 	str.w	r9, [sp]
 8002410:	4699      	mov	r9, r3
  {
     number_of_item ++;
     dataElementID = (uint16_t *) rxData;
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
     rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002412:	4635      	mov	r5, r6
  uint8_t retVal = MCP_CMD_OK;
  uint16_t regID = dataID & REG_MASK;
  typeID = dataID & TYPE_MASK;
  motorID = (dataID & MOTOR_MASK)-1;

  MCI_Handle_t * pMCI = &Mci[motorID];
 8002414:	4bb1      	ldr	r3, [pc, #708]	; (80026dc <RI_SetRegCommandParser+0x2f8>)
     accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002416:	f835 1b02 	ldrh.w	r1, [r5], #2
  motorID = (dataID & MOTOR_MASK)-1;
 800241a:	f001 0c07 	and.w	ip, r1, #7
 800241e:	f10c 3cff 	add.w	ip, ip, #4294967295
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002422:	fa5f f48c 	uxtb.w	r4, ip
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002426:	fa1f f880 	uxth.w	r8, r0
 800242a:	f001 0e38 	and.w	lr, r1, #56	; 0x38
 800242e:	f1a8 0002 	sub.w	r0, r8, #2
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002432:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  uint16_t regID = dataID & REG_MASK;
 8002436:	f021 0207 	bic.w	r2, r1, #7
 800243a:	f1ae 0e08 	sub.w	lr, lr, #8
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800243e:	fa1f fa80 	uxth.w	sl, r0
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002442:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  motorID = (dataID & MOTOR_MASK)-1;
 8002446:	fa5f fc8c 	uxtb.w	ip, ip
  uint16_t regID = dataID & REG_MASK;
 800244a:	b292      	uxth	r2, r2
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800244c:	b200      	sxth	r0, r0

  switch (typeID)
 800244e:	f1be 0f20 	cmp.w	lr, #32
 8002452:	d812      	bhi.n	800247a <RI_SetRegCommandParser+0x96>
 8002454:	e8df f00e 	tbb	[pc, lr]
 8002458:	111111bb 	.word	0x111111bb
 800245c:	11111111 	.word	0x11111111
 8002460:	11111191 	.word	0x11111191
 8002464:	11111111 	.word	0x11111111
 8002468:	111111c8 	.word	0x111111c8
 800246c:	11111111 	.word	0x11111111
 8002470:	11111170 	.word	0x11111170
 8002474:	11111111 	.word	0x11111111
 8002478:	29          	.byte	0x29
 8002479:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 800247a:	2207      	movs	r2, #7
     if (number_of_item == 1 && rxLength == 0)
 800247c:	eb07 0109 	add.w	r1, r7, r9
 8002480:	b2c9      	uxtb	r1, r1
 8002482:	2901      	cmp	r1, #1
 8002484:	d036      	beq.n	80024f4 <RI_SetRegCommandParser+0x110>
       if (txSyncFreeSpace !=0 )
 8002486:	9901      	ldr	r1, [sp, #4]
 8002488:	428f      	cmp	r7, r1
 800248a:	f000 80bf 	beq.w	800260c <RI_SetRegCommandParser+0x228>
         *txData = accessResult;
 800248e:	f807 2b01 	strb.w	r2, [r7], #1
         pHandle->txLength++;
 8002492:	9b00      	ldr	r3, [sp, #0]
 8002494:	89d9      	ldrh	r1, [r3, #14]
 8002496:	3101      	adds	r1, #1
 8002498:	81d9      	strh	r1, [r3, #14]
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800249a:	2a00      	cmp	r2, #0
 800249c:	f040 80bb 	bne.w	8002616 <RI_SetRegCommandParser+0x232>
  while (rxLength > 0)
 80024a0:	2800      	cmp	r0, #0
 80024a2:	f340 82aa 	ble.w	80029fa <RI_SetRegCommandParser+0x616>
 80024a6:	462e      	mov	r6, r5
 80024a8:	e7b3      	b.n	8002412 <RI_SetRegCommandParser+0x2e>
    }
    break;
  case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *) data;
      *size = rawSize+2; /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
 80024aa:	f8b6 8002 	ldrh.w	r8, [r6, #2]
 80024ae:	f108 0802 	add.w	r8, r8, #2
 80024b2:	fa1f f888 	uxth.w	r8, r8
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
      if (*size > dataAvailable )
 80024b6:	4580      	cmp	r8, r0
 80024b8:	f300 81b6 	bgt.w	8002828 <RI_SetRegCommandParser+0x444>
        *size =0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 80024bc:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 80024c0:	f000 81fb 	beq.w	80028ba <RI_SetRegCommandParser+0x4d6>
 80024c4:	d924      	bls.n	8002510 <RI_SetRegCommandParser+0x12c>
 80024c6:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 80024ca:	f000 8203 	beq.w	80028d4 <RI_SetRegCommandParser+0x4f0>
 80024ce:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 80024d2:	f040 8193 	bne.w	80027fc <RI_SetRegCommandParser+0x418>
          }
          break;

        case MC_REG_ASYNC_UARTA:
          {
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80024d6:	1d31      	adds	r1, r6, #4
 80024d8:	4881      	ldr	r0, [pc, #516]	; (80026e0 <RI_SetRegCommandParser+0x2fc>)
 80024da:	f005 fcad 	bl	8007e38 <MCPA_cfgLog>
     if (number_of_item == 1 && rxLength == 0)
 80024de:	eb07 0109 	add.w	r1, r7, r9
 80024e2:	b2c9      	uxtb	r1, r1
 80024e4:	ebaa 0a08 	sub.w	sl, sl, r8
 80024e8:	2901      	cmp	r1, #1
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80024ea:	4602      	mov	r2, r0
     rxData = rxData+size;
 80024ec:	4445      	add	r5, r8
     if (number_of_item == 1 && rxLength == 0)
 80024ee:	fa0f f08a 	sxth.w	r0, sl
 80024f2:	d1c8      	bne.n	8002486 <RI_SetRegCommandParser+0xa2>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d1c6      	bne.n	8002486 <RI_SetRegCommandParser+0xa2>
  if (retVal == MCP_CMD_OK)
 80024f8:	f8dd 9000 	ldr.w	r9, [sp]
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	f040 8086 	bne.w	800260e <RI_SetRegCommandParser+0x22a>
    pHandle->txLength = 0;
 8002502:	2200      	movs	r2, #0
}
 8002504:	4610      	mov	r0, r2
    pHandle->txLength = 0;
 8002506:	f8a9 200e 	strh.w	r2, [r9, #14]
}
 800250a:	b007      	add	sp, #28
 800250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002510:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 8002514:	f000 81bf 	beq.w	8002896 <RI_SetRegCommandParser+0x4b2>
 8002518:	f200 8170 	bhi.w	80027fc <RI_SetRegCommandParser+0x418>
 800251c:	2aa8      	cmp	r2, #168	; 0xa8
 800251e:	d004      	beq.n	800252a <RI_SetRegCommandParser+0x146>
 8002520:	f240 8167 	bls.w	80027f2 <RI_SetRegCommandParser+0x40e>
 8002524:	2ae8      	cmp	r2, #232	; 0xe8
 8002526:	f040 8169 	bne.w	80027fc <RI_SetRegCommandParser+0x418>
 800252a:	ebaa 0a08 	sub.w	sl, sl, r8
 800252e:	fa0f f08a 	sxth.w	r0, sl
 8002532:	4445      	add	r5, r8
          retVal = MCP_ERROR_RO_REG;
 8002534:	2204      	movs	r2, #4
 8002536:	e7a1      	b.n	800247c <RI_SetRegCommandParser+0x98>

uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  *size= 1 ; /* /0 is the min String size */
  while ((*srcString != 0) && (*size < maxSize) )
 8002538:	78b2      	ldrb	r2, [r6, #2]
 800253a:	2a00      	cmp	r2, #0
 800253c:	f000 81e4 	beq.w	8002908 <RI_SetRegCommandParser+0x524>
 8002540:	2801      	cmp	r0, #1
 8002542:	f340 81e5 	ble.w	8002910 <RI_SetRegCommandParser+0x52c>
 8002546:	1cf4      	adds	r4, r6, #3
 8002548:	9b00      	ldr	r3, [sp, #0]
 800254a:	43f6      	mvns	r6, r6
 800254c:	e002      	b.n	8002554 <RI_SetRegCommandParser+0x170>
 800254e:	4290      	cmp	r0, r2
 8002550:	f340 8162 	ble.w	8002818 <RI_SetRegCommandParser+0x434>
  {
    *destString = *srcString ;
    srcString = srcString+1;
 8002554:	1932      	adds	r2, r6, r4
 8002556:	46a4      	mov	ip, r4
  while ((*srcString != 0) && (*size < maxSize) )
 8002558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800255c:	b292      	uxth	r2, r2
 800255e:	2900      	cmp	r1, #0
 8002560:	d1f5      	bne.n	800254e <RI_SetRegCommandParser+0x16a>
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4611      	mov	r1, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = 0;
 8002566:	ebaa 0a02 	sub.w	sl, sl, r2
 800256a:	2200      	movs	r2, #0
 800256c:	f88c 2000 	strb.w	r2, [ip]
 8002570:	fa0f f08a 	sxth.w	r0, sl
 8002574:	440d      	add	r5, r1
      retVal = MCP_ERROR_RO_REG;
 8002576:	2204      	movs	r2, #4
 8002578:	e780      	b.n	800247c <RI_SetRegCommandParser+0x98>
    uint16_t regdata16 = *(uint16_t *)data;
 800257a:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 800257e:	8875      	ldrh	r5, [r6, #2]
    switch (regID)
 8002580:	f000 81cc 	beq.w	800291c <RI_SetRegCommandParser+0x538>
 8002584:	f200 80b2 	bhi.w	80026ec <RI_SetRegCommandParser+0x308>
 8002588:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 800258c:	f000 81cd 	beq.w	800292a <RI_SetRegCommandParser+0x546>
 8002590:	f240 808b 	bls.w	80026aa <RI_SetRegCommandParser+0x2c6>
 8002594:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 8002598:	f000 81d3 	beq.w	8002942 <RI_SetRegCommandParser+0x55e>
 800259c:	d961      	bls.n	8002662 <RI_SetRegCommandParser+0x27e>
 800259e:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 80025a2:	d058      	beq.n	8002656 <RI_SetRegCommandParser+0x272>
 80025a4:	d950      	bls.n	8002648 <RI_SetRegCommandParser+0x264>
 80025a6:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 80025aa:	f040 80c0 	bne.w	800272e <RI_SetRegCommandParser+0x34a>
        currComp = MCI_GetIqdref(pMCI);
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff f82c 	bl	800160c <MCI_GetIqdref>
 80025b4:	9005      	str	r0, [sp, #20]
        currComp.q = (int16_t)regdata16;
 80025b6:	f8ad 5014 	strh.w	r5, [sp, #20]
        MCI_SetCurrentReferences(pMCI,currComp);
 80025ba:	4620      	mov	r0, r4
 80025bc:	9905      	ldr	r1, [sp, #20]
 80025be:	f7fe ff73 	bl	80014a8 <MCI_SetCurrentReferences>
      break;
 80025c2:	f1a8 0004 	sub.w	r0, r8, #4
 80025c6:	1d35      	adds	r5, r6, #4
 80025c8:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80025ca:	2200      	movs	r2, #0
      break;
 80025cc:	e756      	b.n	800247c <RI_SetRegCommandParser+0x98>
    switch (regID)
 80025ce:	2a48      	cmp	r2, #72	; 0x48
 80025d0:	f000 813f 	beq.w	8002852 <RI_SetRegCommandParser+0x46e>
 80025d4:	2a88      	cmp	r2, #136	; 0x88
 80025d6:	f000 8143 	beq.w	8002860 <RI_SetRegCommandParser+0x47c>
      retVal = MCP_ERROR_UNKNOWN_REG;
 80025da:	f1a8 0803 	sub.w	r8, r8, #3
 80025de:	fa0f f088 	sxth.w	r0, r8
 80025e2:	1cf5      	adds	r5, r6, #3
 80025e4:	2205      	movs	r2, #5
 80025e6:	e749      	b.n	800247c <RI_SetRegCommandParser+0x98>
    switch (regID)
 80025e8:	2a98      	cmp	r2, #152	; 0x98
 80025ea:	f000 811f 	beq.w	800282c <RI_SetRegCommandParser+0x448>
 80025ee:	d926      	bls.n	800263e <RI_SetRegCommandParser+0x25a>
 80025f0:	f5b2 7fac 	cmp.w	r2, #344	; 0x158
 80025f4:	d01c      	beq.n	8002630 <RI_SetRegCommandParser+0x24c>
 80025f6:	d916      	bls.n	8002626 <RI_SetRegCommandParser+0x242>
 80025f8:	f5b2 7fcc 	cmp.w	r2, #408	; 0x198
 80025fc:	d018      	beq.n	8002630 <RI_SetRegCommandParser+0x24c>
      retVal = MCP_ERROR_UNKNOWN_REG;
 80025fe:	f1a8 0806 	sub.w	r8, r8, #6
 8002602:	fa0f f088 	sxth.w	r0, r8
 8002606:	1db5      	adds	r5, r6, #6
 8002608:	2205      	movs	r2, #5
 800260a:	e737      	b.n	800247c <RI_SetRegCommandParser+0x98>
         retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800260c:	2208      	movs	r2, #8
}
 800260e:	4610      	mov	r0, r2
 8002610:	b007      	add	sp, #28
 8002612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002616:	2a07      	cmp	r2, #7
 8002618:	f040 80f7 	bne.w	800280a <RI_SetRegCommandParser+0x426>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800261c:	2201      	movs	r2, #1
}
 800261e:	4610      	mov	r0, r2
 8002620:	b007      	add	sp, #28
 8002622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002626:	2ad8      	cmp	r2, #216	; 0xd8
 8002628:	d002      	beq.n	8002630 <RI_SetRegCommandParser+0x24c>
 800262a:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 800262e:	d1e6      	bne.n	80025fe <RI_SetRegCommandParser+0x21a>
 8002630:	f1a8 0806 	sub.w	r8, r8, #6
 8002634:	fa0f f088 	sxth.w	r0, r8
 8002638:	1db5      	adds	r5, r6, #6
      retVal = MCP_ERROR_RO_REG;
 800263a:	2204      	movs	r2, #4
 800263c:	e71e      	b.n	800247c <RI_SetRegCommandParser+0x98>
 800263e:	f021 0147 	bic.w	r1, r1, #71	; 0x47
 8002642:	2918      	cmp	r1, #24
 8002644:	d1db      	bne.n	80025fe <RI_SetRegCommandParser+0x21a>
 8002646:	e7f3      	b.n	8002630 <RI_SetRegCommandParser+0x24c>
 8002648:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
 800264c:	d003      	beq.n	8002656 <RI_SetRegCommandParser+0x272>
 800264e:	d921      	bls.n	8002694 <RI_SetRegCommandParser+0x2b0>
 8002650:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8002654:	d118      	bne.n	8002688 <RI_SetRegCommandParser+0x2a4>
     break;
 8002656:	f1a8 0004 	sub.w	r0, r8, #4
 800265a:	b200      	sxth	r0, r0
 800265c:	1d35      	adds	r5, r6, #4
      retVal = MCP_ERROR_RO_REG;
 800265e:	2204      	movs	r2, #4
     break;
 8002660:	e70c      	b.n	800247c <RI_SetRegCommandParser+0x98>
 8002662:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8002666:	f000 81ba 	beq.w	80029de <RI_SetRegCommandParser+0x5fa>
 800266a:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 800266e:	d116      	bne.n	800269e <RI_SetRegCommandParser+0x2ba>
      PID_SetKI(pPIDId[motorID], regdata16);
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <RI_SetRegCommandParser+0x300>)
 8002672:	b229      	sxth	r1, r5
 8002674:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002678:	f005 fce4 	bl	8008044 <PID_SetKI>
     break;
 800267c:	f1a8 0004 	sub.w	r0, r8, #4
 8002680:	b200      	sxth	r0, r0
 8002682:	1d35      	adds	r5, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 8002684:	2200      	movs	r2, #0
     break;
 8002686:	e6f9      	b.n	800247c <RI_SetRegCommandParser+0x98>
 8002688:	f021 0147 	bic.w	r1, r1, #71	; 0x47
 800268c:	f5b1 6ff2 	cmp.w	r1, #1936	; 0x790
 8002690:	d0e1      	beq.n	8002656 <RI_SetRegCommandParser+0x272>
 8002692:	e004      	b.n	800269e <RI_SetRegCommandParser+0x2ba>
 8002694:	f021 0147 	bic.w	r1, r1, #71	; 0x47
 8002698:	f5b1 6fb2 	cmp.w	r1, #1424	; 0x590
 800269c:	d0db      	beq.n	8002656 <RI_SetRegCommandParser+0x272>
      retVal = MCP_ERROR_UNKNOWN_REG;
 800269e:	f1a8 0004 	sub.w	r0, r8, #4
 80026a2:	b200      	sxth	r0, r0
 80026a4:	1d35      	adds	r5, r6, #4
 80026a6:	2205      	movs	r2, #5
 80026a8:	e6e8      	b.n	800247c <RI_SetRegCommandParser+0x98>
 80026aa:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 80026ae:	f000 816e 	beq.w	800298e <RI_SetRegCommandParser+0x5aa>
 80026b2:	d946      	bls.n	8002742 <RI_SetRegCommandParser+0x35e>
 80026b4:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80026b8:	f000 8179 	beq.w	80029ae <RI_SetRegCommandParser+0x5ca>
 80026bc:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 80026c0:	d1ed      	bne.n	800269e <RI_SetRegCommandParser+0x2ba>
      PID_SetKI(pPIDIq[motorID], regdata16);
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <RI_SetRegCommandParser+0x304>)
 80026c4:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 80026c8:	b229      	sxth	r1, r5
 80026ca:	f005 fcbb 	bl	8008044 <PID_SetKI>
     break;
 80026ce:	f1a8 0004 	sub.w	r0, r8, #4
 80026d2:	1d35      	adds	r5, r6, #4
 80026d4:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80026d6:	2200      	movs	r2, #0
     break;
 80026d8:	e6d0      	b.n	800247c <RI_SetRegCommandParser+0x98>
 80026da:	bf00      	nop
 80026dc:	200009a0 	.word	0x200009a0
 80026e0:	2000046c 	.word	0x2000046c
 80026e4:	2000044c 	.word	0x2000044c
 80026e8:	20000450 	.word	0x20000450
 80026ec:	f241 5010 	movw	r0, #5392	; 0x1510
 80026f0:	4282      	cmp	r2, r0
 80026f2:	f000 813e 	beq.w	8002972 <RI_SetRegCommandParser+0x58e>
 80026f6:	d940      	bls.n	800277a <RI_SetRegCommandParser+0x396>
 80026f8:	f241 51d0 	movw	r1, #5584	; 0x15d0
 80026fc:	428a      	cmp	r2, r1
 80026fe:	f000 812c 	beq.w	800295a <RI_SetRegCommandParser+0x576>
 8002702:	d925      	bls.n	8002750 <RI_SetRegCommandParser+0x36c>
 8002704:	f241 6110 	movw	r1, #5648	; 0x1610
 8002708:	428a      	cmp	r2, r1
 800270a:	f000 8142 	beq.w	8002992 <RI_SetRegCommandParser+0x5ae>
 800270e:	f241 6150 	movw	r1, #5712	; 0x1650
 8002712:	428a      	cmp	r2, r1
 8002714:	d1c3      	bne.n	800269e <RI_SetRegCommandParser+0x2ba>
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002716:	4abc      	ldr	r2, [pc, #752]	; (8002a08 <RI_SetRegCommandParser+0x624>)
 8002718:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 800271c:	4629      	mov	r1, r5
 800271e:	f005 fccd 	bl	80080bc <PID_SetKDDivisorPOW2>
      break;
 8002722:	f1a8 0004 	sub.w	r0, r8, #4
 8002726:	1d35      	adds	r5, r6, #4
 8002728:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800272a:	2200      	movs	r2, #0
      break;
 800272c:	e6a6      	b.n	800247c <RI_SetRegCommandParser+0x98>
 800272e:	d8b6      	bhi.n	800269e <RI_SetRegCommandParser+0x2ba>
 8002730:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 8002734:	d08f      	beq.n	8002656 <RI_SetRegCommandParser+0x272>
 8002736:	f021 0147 	bic.w	r1, r1, #71	; 0x47
 800273a:	f5b1 6f09 	cmp.w	r1, #2192	; 0x890
 800273e:	d08a      	beq.n	8002656 <RI_SetRegCommandParser+0x272>
 8002740:	e7ad      	b.n	800269e <RI_SetRegCommandParser+0x2ba>
 8002742:	2a90      	cmp	r2, #144	; 0x90
 8002744:	f000 8157 	beq.w	80029f6 <RI_SetRegCommandParser+0x612>
 8002748:	2ad0      	cmp	r2, #208	; 0xd0
 800274a:	d1a8      	bne.n	800269e <RI_SetRegCommandParser+0x2ba>
      PID_SetKI(pPIDSpeed[motorID], regdata16);
 800274c:	4aaf      	ldr	r2, [pc, #700]	; (8002a0c <RI_SetRegCommandParser+0x628>)
 800274e:	e7b9      	b.n	80026c4 <RI_SetRegCommandParser+0x2e0>
 8002750:	f241 5150 	movw	r1, #5456	; 0x1550
 8002754:	428a      	cmp	r2, r1
 8002756:	f000 8136 	beq.w	80029c6 <RI_SetRegCommandParser+0x5e2>
 800275a:	f241 5190 	movw	r1, #5520	; 0x1590
 800275e:	428a      	cmp	r2, r1
 8002760:	d19d      	bne.n	800269e <RI_SetRegCommandParser+0x2ba>
      PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002762:	4bab      	ldr	r3, [pc, #684]	; (8002a10 <RI_SetRegCommandParser+0x62c>)
 8002764:	4629      	mov	r1, r5
 8002766:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800276a:	f005 fca7 	bl	80080bc <PID_SetKDDivisorPOW2>
      break;
 800276e:	f1a8 0004 	sub.w	r0, r8, #4
 8002772:	b200      	sxth	r0, r0
 8002774:	1d35      	adds	r5, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 8002776:	2200      	movs	r2, #0
      break;
 8002778:	e680      	b.n	800247c <RI_SetRegCommandParser+0x98>
 800277a:	f241 4050 	movw	r0, #5200	; 0x1450
 800277e:	4282      	cmp	r2, r0
 8002780:	f000 8103 	beq.w	800298a <RI_SetRegCommandParser+0x5a6>
 8002784:	d90a      	bls.n	800279c <RI_SetRegCommandParser+0x3b8>
 8002786:	f241 4190 	movw	r1, #5264	; 0x1490
 800278a:	428a      	cmp	r2, r1
 800278c:	f000 810d 	beq.w	80029aa <RI_SetRegCommandParser+0x5c6>
 8002790:	f241 41d0 	movw	r1, #5328	; 0x14d0
 8002794:	428a      	cmp	r2, r1
 8002796:	d182      	bne.n	800269e <RI_SetRegCommandParser+0x2ba>
      PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002798:	4a9c      	ldr	r2, [pc, #624]	; (8002a0c <RI_SetRegCommandParser+0x628>)
 800279a:	e7bd      	b.n	8002718 <RI_SetRegCommandParser+0x334>
 800279c:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 80027a0:	d0e5      	beq.n	800276e <RI_SetRegCommandParser+0x38a>
 80027a2:	d90d      	bls.n	80027c0 <RI_SetRegCommandParser+0x3dc>
 80027a4:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 80027a8:	d0e1      	beq.n	800276e <RI_SetRegCommandParser+0x38a>
 80027aa:	f4ff af78 	bcc.w	800269e <RI_SetRegCommandParser+0x2ba>
 80027ae:	f5b2 6f6d 	cmp.w	r2, #3792	; 0xed0
 80027b2:	f43f af50 	beq.w	8002656 <RI_SetRegCommandParser+0x272>
 80027b6:	f5b2 6f71 	cmp.w	r2, #3856	; 0xf10
 80027ba:	f43f af4c 	beq.w	8002656 <RI_SetRegCommandParser+0x272>
 80027be:	e76e      	b.n	800269e <RI_SetRegCommandParser+0x2ba>
 80027c0:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 80027c4:	f43f af47 	beq.w	8002656 <RI_SetRegCommandParser+0x272>
 80027c8:	d908      	bls.n	80027dc <RI_SetRegCommandParser+0x3f8>
 80027ca:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 80027ce:	f43f af42 	beq.w	8002656 <RI_SetRegCommandParser+0x272>
 80027d2:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 80027d6:	f43f af3e 	beq.w	8002656 <RI_SetRegCommandParser+0x272>
 80027da:	e760      	b.n	800269e <RI_SetRegCommandParser+0x2ba>
 80027dc:	f021 0147 	bic.w	r1, r1, #71	; 0x47
 80027e0:	f5b1 6f21 	cmp.w	r1, #2576	; 0xa10
 80027e4:	f43f af37 	beq.w	8002656 <RI_SetRegCommandParser+0x272>
 80027e8:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 80027ec:	f43f af33 	beq.w	8002656 <RI_SetRegCommandParser+0x272>
 80027f0:	e755      	b.n	800269e <RI_SetRegCommandParser+0x2ba>
 80027f2:	f021 0147 	bic.w	r1, r1, #71	; 0x47
 80027f6:	2928      	cmp	r1, #40	; 0x28
 80027f8:	f43f ae97 	beq.w	800252a <RI_SetRegCommandParser+0x146>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80027fc:	ebaa 0a08 	sub.w	sl, sl, r8
 8002800:	fa0f f08a 	sxth.w	r0, sl
 8002804:	4445      	add	r5, r8
 8002806:	2205      	movs	r2, #5
 8002808:	e638      	b.n	800247c <RI_SetRegCommandParser+0x98>
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800280a:	2a0a      	cmp	r2, #10
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800280c:	f04f 0201 	mov.w	r2, #1
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002810:	f43f aefd 	beq.w	800260e <RI_SetRegCommandParser+0x22a>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002814:	9202      	str	r2, [sp, #8]
 8002816:	e643      	b.n	80024a0 <RI_SetRegCommandParser+0xbc>
 8002818:	ebaa 0a02 	sub.w	sl, sl, r2
 800281c:	4415      	add	r5, r2
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	fa0f f08a 	sxth.w	r0, sl
      retVal = MCP_ERROR_RO_REG;
 8002824:	2204      	movs	r2, #4
 8002826:	e629      	b.n	800247c <RI_SetRegCommandParser+0x98>
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002828:	220a      	movs	r2, #10
 800282a:	e627      	b.n	800247c <RI_SetRegCommandParser+0x98>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((regdata32*SPEED_UNIT)/_RPM),0);
 800282c:	f8d6 2002 	ldr.w	r2, [r6, #2]
 8002830:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <RI_SetRegCommandParser+0x630>)
 8002832:	fb83 3102 	smull	r3, r1, r3, r2
 8002836:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800283a:	4620      	mov	r0, r4
 800283c:	2200      	movs	r2, #0
 800283e:	b209      	sxth	r1, r1
 8002840:	f1a8 0806 	sub.w	r8, r8, #6
 8002844:	f7fe fe1a 	bl	800147c <MCI_ExecSpeedRamp>
      break;
 8002848:	1db5      	adds	r5, r6, #6
 800284a:	fa0f f088 	sxth.w	r0, r8
  uint8_t retVal = MCP_CMD_OK;
 800284e:	2200      	movs	r2, #0
      break;
 8002850:	e614      	b.n	800247c <RI_SetRegCommandParser+0x98>
 8002852:	f1a8 0803 	sub.w	r8, r8, #3
 8002856:	fa0f f088 	sxth.w	r0, r8
 800285a:	1cf5      	adds	r5, r6, #3
      retVal = MCP_ERROR_RO_REG;
 800285c:	2204      	movs	r2, #4
 800285e:	e60d      	b.n	800247c <RI_SetRegCommandParser+0x98>
    uint8_t regdata8 = *data;
 8002860:	78b2      	ldrb	r2, [r6, #2]
        if ((STC_Modality_t)regdata8 == STC_TORQUE_MODE)
 8002862:	b142      	cbz	r2, 8002876 <RI_SetRegCommandParser+0x492>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 8002864:	2a01      	cmp	r2, #1
 8002866:	d041      	beq.n	80028ec <RI_SetRegCommandParser+0x508>
 8002868:	f1a8 0803 	sub.w	r8, r8, #3
 800286c:	fa0f f088 	sxth.w	r0, r8
 8002870:	1cf5      	adds	r5, r6, #3
  uint8_t retVal = MCP_CMD_OK;
 8002872:	2200      	movs	r2, #0
 8002874:	e602      	b.n	800247c <RI_SetRegCommandParser+0x98>
          MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002876:	4620      	mov	r0, r4
 8002878:	9203      	str	r2, [sp, #12]
 800287a:	f7fe fef1 	bl	8001660 <MCI_GetTeref>
 800287e:	f1a8 0803 	sub.w	r8, r8, #3
 8002882:	9a03      	ldr	r2, [sp, #12]
 8002884:	4601      	mov	r1, r0
 8002886:	4620      	mov	r0, r4
 8002888:	f7fe fe04 	bl	8001494 <MCI_ExecTorqueRamp>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 800288c:	1cf5      	adds	r5, r6, #3
 800288e:	9a03      	ldr	r2, [sp, #12]
 8002890:	fa0f f088 	sxth.w	r0, r8
 8002894:	e5f2      	b.n	800247c <RI_SetRegCommandParser+0x98>
            MCI_ExecSpeedRamp(pMCI,(int16_t)((rpm*SPEED_UNIT)/_RPM),duration);
 8002896:	6870      	ldr	r0, [r6, #4]
 8002898:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <RI_SetRegCommandParser+0x630>)
 800289a:	8932      	ldrh	r2, [r6, #8]
 800289c:	fb83 3100 	smull	r3, r1, r3, r0
 80028a0:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 80028a4:	b209      	sxth	r1, r1
 80028a6:	4620      	mov	r0, r4
 80028a8:	ebaa 0a08 	sub.w	sl, sl, r8
 80028ac:	f7fe fde6 	bl	800147c <MCI_ExecSpeedRamp>
          break;
 80028b0:	4445      	add	r5, r8
 80028b2:	fa0f f08a 	sxth.w	r0, sl
  uint8_t retVal = MCP_CMD_OK;
 80028b6:	2200      	movs	r2, #0
          break;
 80028b8:	e5e0      	b.n	800247c <RI_SetRegCommandParser+0x98>
            MCI_ExecTorqueRamp(pMCI,torque,duration);
 80028ba:	8932      	ldrh	r2, [r6, #8]
 80028bc:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80028c0:	4620      	mov	r0, r4
 80028c2:	ebaa 0a08 	sub.w	sl, sl, r8
 80028c6:	f7fe fde5 	bl	8001494 <MCI_ExecTorqueRamp>
          break;
 80028ca:	4445      	add	r5, r8
 80028cc:	fa0f f08a 	sxth.w	r0, sl
  uint8_t retVal = MCP_CMD_OK;
 80028d0:	2200      	movs	r2, #0
          break;
 80028d2:	e5d3      	b.n	800247c <RI_SetRegCommandParser+0x98>
            currComp.q = *((uint16_t *) rawData);
 80028d4:	6871      	ldr	r1, [r6, #4]
 80028d6:	9105      	str	r1, [sp, #20]
            MCI_SetCurrentReferences(pMCI,currComp);
 80028d8:	4620      	mov	r0, r4
 80028da:	ebaa 0a08 	sub.w	sl, sl, r8
 80028de:	f7fe fde3 	bl	80014a8 <MCI_SetCurrentReferences>
          break;
 80028e2:	4445      	add	r5, r8
 80028e4:	fa0f f08a 	sxth.w	r0, sl
  uint8_t retVal = MCP_CMD_OK;
 80028e8:	2200      	movs	r2, #0
          break;
 80028ea:	e5c7      	b.n	800247c <RI_SetRegCommandParser+0x98>
          MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe fe5f 	bl	80015b0 <MCI_GetMecSpeedRefUnit>
 80028f2:	2200      	movs	r2, #0
 80028f4:	4601      	mov	r1, r0
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fe fdc0 	bl	800147c <MCI_ExecSpeedRamp>
 80028fc:	f1a8 0003 	sub.w	r0, r8, #3
 8002900:	1cf5      	adds	r5, r6, #3
 8002902:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002904:	2200      	movs	r2, #0
 8002906:	e5b9      	b.n	800247c <RI_SetRegCommandParser+0x98>
  while ((*srcString != 0) && (*size < maxSize) )
 8002908:	2101      	movs	r1, #1
  *size= 1 ; /* /0 is the min String size */
 800290a:	460a      	mov	r2, r1
  while ((*srcString != 0) && (*size < maxSize) )
 800290c:	46ac      	mov	ip, r5
 800290e:	e62a      	b.n	8002566 <RI_SetRegCommandParser+0x182>
 8002910:	f1a8 0003 	sub.w	r0, r8, #3
 8002914:	b200      	sxth	r0, r0
 8002916:	1cf5      	adds	r5, r6, #3
      retVal = MCP_ERROR_RO_REG;
 8002918:	2204      	movs	r2, #4
 800291a:	e5af      	b.n	800247c <RI_SetRegCommandParser+0x98>
        currComp = MCI_GetIqdref(pMCI);
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe fe75 	bl	800160c <MCI_GetIqdref>
 8002922:	9005      	str	r0, [sp, #20]
        currComp.d = regdata16;
 8002924:	f8ad 5016 	strh.w	r5, [sp, #22]
 8002928:	e647      	b.n	80025ba <RI_SetRegCommandParser+0x1d6>
      PID_SetKD(pPIDIq[motorID], regdata16);
 800292a:	4a37      	ldr	r2, [pc, #220]	; (8002a08 <RI_SetRegCommandParser+0x624>)
 800292c:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8002930:	b229      	sxth	r1, r5
 8002932:	f005 fbb9 	bl	80080a8 <PID_SetKD>
     break;
 8002936:	f1a8 0004 	sub.w	r0, r8, #4
 800293a:	1d35      	adds	r5, r6, #4
 800293c:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800293e:	2200      	movs	r2, #0
     break;
 8002940:	e59c      	b.n	800247c <RI_SetRegCommandParser+0x98>
      PID_SetKD(pPIDId[motorID], regdata16);
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <RI_SetRegCommandParser+0x62c>)
 8002944:	b229      	sxth	r1, r5
 8002946:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800294a:	f005 fbad 	bl	80080a8 <PID_SetKD>
     break;
 800294e:	f1a8 0004 	sub.w	r0, r8, #4
 8002952:	b200      	sxth	r0, r0
 8002954:	1d35      	adds	r5, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 8002956:	2200      	movs	r2, #0
     break;
 8002958:	e590      	b.n	800247c <RI_SetRegCommandParser+0x98>
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 800295a:	4a2b      	ldr	r2, [pc, #172]	; (8002a08 <RI_SetRegCommandParser+0x624>)
 800295c:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8002960:	4629      	mov	r1, r5
 8002962:	f005 fb7f 	bl	8008064 <PID_SetKPDivisorPOW2>
      break;
 8002966:	f1a8 0004 	sub.w	r0, r8, #4
 800296a:	1d35      	adds	r5, r6, #4
 800296c:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800296e:	2200      	movs	r2, #0
      break;
 8002970:	e584      	b.n	800247c <RI_SetRegCommandParser+0x98>
      PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <RI_SetRegCommandParser+0x62c>)
 8002974:	4629      	mov	r1, r5
 8002976:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800297a:	f005 fb73 	bl	8008064 <PID_SetKPDivisorPOW2>
      break;
 800297e:	f1a8 0004 	sub.w	r0, r8, #4
 8002982:	b200      	sxth	r0, r0
 8002984:	1d35      	adds	r5, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 8002986:	2200      	movs	r2, #0
      break;
 8002988:	e578      	b.n	800247c <RI_SetRegCommandParser+0x98>
      PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <RI_SetRegCommandParser+0x628>)
 800298c:	e7e6      	b.n	800295c <RI_SetRegCommandParser+0x578>
      PID_SetKD(pPIDSpeed[motorID], regdata16);
 800298e:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <RI_SetRegCommandParser+0x628>)
 8002990:	e7cc      	b.n	800292c <RI_SetRegCommandParser+0x548>
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <RI_SetRegCommandParser+0x624>)
 8002994:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 8002998:	4629      	mov	r1, r5
 800299a:	f005 fb71 	bl	8008080 <PID_SetKIDivisorPOW2>
      break;
 800299e:	f1a8 0004 	sub.w	r0, r8, #4
 80029a2:	1d35      	adds	r5, r6, #4
 80029a4:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80029a6:	2200      	movs	r2, #0
      break;
 80029a8:	e568      	b.n	800247c <RI_SetRegCommandParser+0x98>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <RI_SetRegCommandParser+0x628>)
 80029ac:	e7f2      	b.n	8002994 <RI_SetRegCommandParser+0x5b0>
      PID_SetKP(pPIDIq[motorID], regdata16);
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <RI_SetRegCommandParser+0x624>)
 80029b0:	f852 002c 	ldr.w	r0, [r2, ip, lsl #2]
 80029b4:	b229      	sxth	r1, r5
 80029b6:	f005 fb43 	bl	8008040 <PID_SetKP>
     break;
 80029ba:	f1a8 0004 	sub.w	r0, r8, #4
 80029be:	1d35      	adds	r5, r6, #4
 80029c0:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80029c2:	2200      	movs	r2, #0
     break;
 80029c4:	e55a      	b.n	800247c <RI_SetRegCommandParser+0x98>
      PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <RI_SetRegCommandParser+0x62c>)
 80029c8:	4629      	mov	r1, r5
 80029ca:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80029ce:	f005 fb57 	bl	8008080 <PID_SetKIDivisorPOW2>
      break;
 80029d2:	f1a8 0004 	sub.w	r0, r8, #4
 80029d6:	b200      	sxth	r0, r0
 80029d8:	1d35      	adds	r5, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 80029da:	2200      	movs	r2, #0
      break;
 80029dc:	e54e      	b.n	800247c <RI_SetRegCommandParser+0x98>
      PID_SetKP(pPIDId[motorID], regdata16);
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <RI_SetRegCommandParser+0x62c>)
 80029e0:	b229      	sxth	r1, r5
 80029e2:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80029e6:	f005 fb2b 	bl	8008040 <PID_SetKP>
     break;
 80029ea:	f1a8 0004 	sub.w	r0, r8, #4
 80029ee:	b200      	sxth	r0, r0
 80029f0:	1d35      	adds	r5, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 80029f2:	2200      	movs	r2, #0
     break;
 80029f4:	e542      	b.n	800247c <RI_SetRegCommandParser+0x98>
      PID_SetKP(pPIDSpeed[motorID], regdata16);
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <RI_SetRegCommandParser+0x628>)
 80029f8:	e7da      	b.n	80029b0 <RI_SetRegCommandParser+0x5cc>
 80029fa:	9a02      	ldr	r2, [sp, #8]
  if (retVal == MCP_CMD_OK)
 80029fc:	f8dd 9000 	ldr.w	r9, [sp]
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	f43f ad7e 	beq.w	8002502 <RI_SetRegCommandParser+0x11e>
 8002a06:	e602      	b.n	800260e <RI_SetRegCommandParser+0x22a>
 8002a08:	20000450 	.word	0x20000450
 8002a0c:	20000530 	.word	0x20000530
 8002a10:	2000044c 	.word	0x2000044c
 8002a14:	2aaaaaab 	.word	0x2aaaaaab

08002a18 <RI_GetRegCommandParser>:
{
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t rxLength = pHandle->rxLength;
 8002a1c:	f8b0 900c 	ldrh.w	r9, [r0, #12]
  pHandle->txLength = 0;
 8002a20:	2300      	movs	r3, #0
  uint8_t * txData = pHandle->txBuffer;
 8002a22:	e9d0 a601 	ldrd	sl, r6, [r0, #4]
{
 8002a26:	b08f      	sub	sp, #60	; 0x3c
  pHandle->txLength = 0;
 8002a28:	81c3      	strh	r3, [r0, #14]
  while (rxLength > 0)
 8002a2a:	f1b9 0f00 	cmp.w	r9, #0
 8002a2e:	f000 82f2 	beq.w	8003016 <RI_GetRegCommandParser+0x5fe>
 8002a32:	f8df 8404 	ldr.w	r8, [pc, #1028]	; 8002e38 <RI_GetRegCommandParser+0x420>
 8002a36:	4607      	mov	r7, r0
 8002a38:	b20c      	sxth	r4, r1
  uint8_t * rxData = pHandle->rxBuffer;
 8002a3a:	4655      	mov	r5, sl
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002a3c:	f835 3b02 	ldrh.w	r3, [r5], #2
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002a40:	f003 0207 	and.w	r2, r3, #7
 8002a44:	3a01      	subs	r2, #1
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002a46:	fa5f fc82 	uxtb.w	ip, r2
 8002a4a:	f003 0138 	and.w	r1, r3, #56	; 0x38
 8002a4e:	ebcc 0bcc 	rsb	fp, ip, ip, lsl #3
  uint16_t regID = dataID & REG_MASK;
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	3908      	subs	r1, #8
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002a58:	4662      	mov	r2, ip
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002a5a:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
  uint16_t regID = dataID & REG_MASK;
 8002a5e:	b29b      	uxth	r3, r3
  switch (typeID)
 8002a60:	2920      	cmp	r1, #32
 8002a62:	d812      	bhi.n	8002a8a <RI_GetRegCommandParser+0x72>
 8002a64:	e8df f001 	tbb	[pc, r1]
 8002a68:	1111119e 	.word	0x1111119e
 8002a6c:	11111111 	.word	0x11111111
 8002a70:	1111115f 	.word	0x1111115f
 8002a74:	11111111 	.word	0x11111111
 8002a78:	111111a8 	.word	0x111111a8
 8002a7c:	11111111 	.word	0x11111111
 8002a80:	1111112c 	.word	0x1111112c
 8002a84:	11111111 	.word	0x11111111
 8002a88:	15          	.byte	0x15
 8002a89:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002a8a:	2007      	movs	r0, #7
}
 8002a8c:	b00f      	add	sp, #60	; 0x3c
 8002a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t * rawData = data+2;
 8002a92:	2be8      	cmp	r3, #232	; 0xe8
 8002a94:	f106 0102 	add.w	r1, r6, #2
      switch (regID)
 8002a98:	f000 8286 	beq.w	8002fa8 <RI_GetRegCommandParser+0x590>
 8002a9c:	f200 80b5 	bhi.w	8002c0a <RI_GetRegCommandParser+0x1f2>
 8002aa0:	2b68      	cmp	r3, #104	; 0x68
 8002aa2:	f000 8293 	beq.w	8002fcc <RI_GetRegCommandParser+0x5b4>
 8002aa6:	2ba8      	cmp	r3, #168	; 0xa8
 8002aa8:	f040 809d 	bne.w	8002be6 <RI_GetRegCommandParser+0x1ce>
        *rawSize = sizeof(ApplicationConfig_reg_t);
 8002aac:	f04f 030e 	mov.w	r3, #14
        if ((*rawSize) +2  > freeSpace)
 8002ab0:	2c0f      	cmp	r4, #15
        *rawSize = sizeof(ApplicationConfig_reg_t);
 8002ab2:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002ab4:	f300 8253 	bgt.w	8002f5e <RI_GetRegCommandParser+0x546>
        retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ab8:	2008      	movs	r0, #8
}
 8002aba:	b00f      	add	sp, #60	; 0x3c
 8002abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (regID)
 8002ac0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac2:	f000 8226 	beq.w	8002f12 <RI_GetRegCommandParser+0x4fa>
 8002ac6:	f200 80bb 	bhi.w	8002c40 <RI_GetRegCommandParser+0x228>
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	f000 820b 	beq.w	8002ee6 <RI_GetRegCommandParser+0x4ce>
 8002ad0:	2b60      	cmp	r3, #96	; 0x60
 8002ad2:	d16f      	bne.n	8002bb4 <RI_GetRegCommandParser+0x19c>
  while ((*srcString != 0) && (*size < maxSize) )
 8002ad4:	4bd0      	ldr	r3, [pc, #832]	; (8002e18 <RI_GetRegCommandParser+0x400>)
 8002ad6:	7819      	ldrb	r1, [r3, #0]
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	f000 8251 	beq.w	8002f80 <RI_GetRegCommandParser+0x568>
 8002ade:	2c01      	cmp	r4, #1
 8002ae0:	f340 81f3 	ble.w	8002eca <RI_GetRegCommandParser+0x4b2>
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	f1c6 0201 	rsb	r2, r6, #1
 8002aec:	e002      	b.n	8002af4 <RI_GetRegCommandParser+0xdc>
 8002aee:	429c      	cmp	r4, r3
 8002af0:	f340 81eb 	ble.w	8002eca <RI_GetRegCommandParser+0x4b2>
    *destString = *srcString ;
 8002af4:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002af8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8002afc:	1883      	adds	r3, r0, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d1f4      	bne.n	8002aee <RI_GetRegCommandParser+0xd6>
 8002b04:	469c      	mov	ip, r3
    *destString = 0;
 8002b06:	2200      	movs	r2, #0
 8002b08:	7002      	strb	r2, [r0, #0]
       pHandle->txLength += size;
 8002b0a:	89f9      	ldrh	r1, [r7, #14]
  while (rxLength > 0)
 8002b0c:	eb0a 0209 	add.w	r2, sl, r9
       freeSpaceS16 = freeSpaceS16-size;
 8002b10:	1ae4      	subs	r4, r4, r3
       pHandle->txLength += size;
 8002b12:	4419      	add	r1, r3
  while (rxLength > 0)
 8002b14:	b292      	uxth	r2, r2
 8002b16:	b2ab      	uxth	r3, r5
 8002b18:	4293      	cmp	r3, r2
       freeSpaceS16 = freeSpaceS16-size;
 8002b1a:	b224      	sxth	r4, r4
       txData = txData+size;
 8002b1c:	4466      	add	r6, ip
       pHandle->txLength += size;
 8002b1e:	81f9      	strh	r1, [r7, #14]
  while (rxLength > 0)
 8002b20:	d18c      	bne.n	8002a3c <RI_GetRegCommandParser+0x24>
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002b22:	2000      	movs	r0, #0
 8002b24:	e7b2      	b.n	8002a8c <RI_GetRegCommandParser+0x74>
      if (freeSpace >= 2 )
 8002b26:	2c01      	cmp	r4, #1
 8002b28:	ddc6      	ble.n	8002ab8 <RI_GetRegCommandParser+0xa0>
        switch (regID)
 8002b2a:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002b2e:	f000 82e2 	beq.w	80030f6 <RI_GetRegCommandParser+0x6de>
 8002b32:	f200 80db 	bhi.w	8002cec <RI_GetRegCommandParser+0x2d4>
 8002b36:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8002b3a:	f000 82d2 	beq.w	80030e2 <RI_GetRegCommandParser+0x6ca>
 8002b3e:	d918      	bls.n	8002b72 <RI_GetRegCommandParser+0x15a>
 8002b40:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002b44:	f000 828a 	beq.w	800305c <RI_GetRegCommandParser+0x644>
 8002b48:	f240 80bc 	bls.w	8002cc4 <RI_GetRegCommandParser+0x2ac>
 8002b4c:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002b50:	f000 82a7 	beq.w	80030a2 <RI_GetRegCommandParser+0x68a>
 8002b54:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002b58:	f040 80a6 	bne.w	8002ca8 <RI_GetRegCommandParser+0x290>
          *regdata16 = MCI_GetIqd(pMCI).d;
 8002b5c:	4658      	mov	r0, fp
 8002b5e:	f7fe fd47 	bl	80015f0 <MCI_GetIqd>
         break;
 8002b62:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = MCI_GetIqd(pMCI).d;
 8002b66:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002b6a:	9008      	str	r0, [sp, #32]
 8002b6c:	8033      	strh	r3, [r6, #0]
        *size = 2;
 8002b6e:	4663      	mov	r3, ip
         break;
 8002b70:	e7cb      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002b72:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002b76:	f000 8292 	beq.w	800309e <RI_GetRegCommandParser+0x686>
 8002b7a:	f240 80fa 	bls.w	8002d72 <RI_GetRegCommandParser+0x35a>
 8002b7e:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002b82:	f000 828a 	beq.w	800309a <RI_GetRegCommandParser+0x682>
 8002b86:	f240 80d0 	bls.w	8002d2a <RI_GetRegCommandParser+0x312>
 8002b8a:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002b8e:	d111      	bne.n	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002b90:	4ba2      	ldr	r3, [pc, #648]	; (8002e1c <RI_GetRegCommandParser+0x404>)
 8002b92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002b96:	f005 fa89 	bl	80080ac <PID_GetKD>
         break;
 8002b9a:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002b9e:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002ba0:	4663      	mov	r3, ip
         break;
 8002ba2:	e7b2      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
      if (freeSpace > 0 )
 8002ba4:	2c00      	cmp	r4, #0
 8002ba6:	dd87      	ble.n	8002ab8 <RI_GetRegCommandParser+0xa0>
        switch (regID)
 8002ba8:	2b48      	cmp	r3, #72	; 0x48
 8002baa:	f000 8190 	beq.w	8002ece <RI_GetRegCommandParser+0x4b6>
 8002bae:	2b88      	cmp	r3, #136	; 0x88
 8002bb0:	f000 8183 	beq.w	8002eba <RI_GetRegCommandParser+0x4a2>
 8002bb4:	2005      	movs	r0, #5
  return retVal;
 8002bb6:	e769      	b.n	8002a8c <RI_GetRegCommandParser+0x74>
      if ( freeSpace >= 4)
 8002bb8:	2c03      	cmp	r4, #3
 8002bba:	f77f af7d 	ble.w	8002ab8 <RI_GetRegCommandParser+0xa0>
        switch (regID)
 8002bbe:	2b58      	cmp	r3, #88	; 0x58
 8002bc0:	f000 81c9 	beq.w	8002f56 <RI_GetRegCommandParser+0x53e>
 8002bc4:	2b98      	cmp	r3, #152	; 0x98
 8002bc6:	f000 81bb 	beq.w	8002f40 <RI_GetRegCommandParser+0x528>
 8002bca:	2b18      	cmp	r3, #24
 8002bcc:	d1f2      	bne.n	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdataU32 = STM_GetFaultState(&STM[motorID]);
 8002bce:	4894      	ldr	r0, [pc, #592]	; (8002e20 <RI_GetRegCommandParser+0x408>)
 8002bd0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8002bd4:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 8002bd8:	f006 fc52 	bl	8009480 <STM_GetFaultState>
 8002bdc:	f04f 0c04 	mov.w	ip, #4
 8002be0:	6030      	str	r0, [r6, #0]
        *size = 4;
 8002be2:	4663      	mov	r3, ip
 8002be4:	e791      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002be6:	2b28      	cmp	r3, #40	; 0x28
 8002be8:	d1e4      	bne.n	8002bb4 <RI_GetRegCommandParser+0x19c>
        *rawSize = sizeof(GlobalConfig_reg_t);
 8002bea:	230a      	movs	r3, #10
        if ((*rawSize) +2  > freeSpace)
 8002bec:	2c0b      	cmp	r4, #11
        *rawSize = sizeof(GlobalConfig_reg_t);
 8002bee:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002bf0:	f77f af62 	ble.w	8002ab8 <RI_GetRegCommandParser+0xa0>
          memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t) );
 8002bf4:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <RI_GetRegCommandParser+0x40c>)
 8002bf6:	f04f 0c0c 	mov.w	ip, #12
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	891b      	ldrh	r3, [r3, #8]
 8002c00:	810b      	strh	r3, [r1, #8]
 8002c02:	6008      	str	r0, [r1, #0]
 8002c04:	604a      	str	r2, [r1, #4]
      *size = (*rawSize)+2;
 8002c06:	4663      	mov	r3, ip
 8002c08:	e77f      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002c0a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002c0e:	f000 81bc 	beq.w	8002f8a <RI_GetRegCommandParser+0x572>
 8002c12:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002c16:	d132      	bne.n	8002c7e <RI_GetRegCommandParser+0x266>
        *rawSize = 4;
 8002c18:	2304      	movs	r3, #4
 8002c1a:	8033      	strh	r3, [r6, #0]
        *iqref = MCI_GetIqdref(pMCI).q;
 8002c1c:	4658      	mov	r0, fp
 8002c1e:	f7fe fcf5 	bl	800160c <MCI_GetIqdref>
 8002c22:	4603      	mov	r3, r0
 8002c24:	8070      	strh	r0, [r6, #2]
        *idref = MCI_GetIqdref(pMCI).d;
 8002c26:	4658      	mov	r0, fp
        *iqref = MCI_GetIqdref(pMCI).q;
 8002c28:	9301      	str	r3, [sp, #4]
        *idref = MCI_GetIqdref(pMCI).d;
 8002c2a:	f7fe fcef 	bl	800160c <MCI_GetIqdref>
      *size = (*rawSize)+2;
 8002c2e:	8833      	ldrh	r3, [r6, #0]
        *idref = MCI_GetIqdref(pMCI).d;
 8002c30:	9000      	str	r0, [sp, #0]
      *size = (*rawSize)+2;
 8002c32:	3302      	adds	r3, #2
 8002c34:	b29b      	uxth	r3, r3
        *idref = MCI_GetIqdref(pMCI).d;
 8002c36:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002c3a:	80b2      	strh	r2, [r6, #4]
     if (retVal == MCP_CMD_OK )
 8002c3c:	469c      	mov	ip, r3
 8002c3e:	e764      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002c40:	2be0      	cmp	r3, #224	; 0xe0
 8002c42:	d1b7      	bne.n	8002bb4 <RI_GetRegCommandParser+0x19c>
        retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <RI_GetRegCommandParser+0x410>)
 8002c46:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8002c4a:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	f000 8196 	beq.w	8002f80 <RI_GetRegCommandParser+0x568>
 8002c54:	2c01      	cmp	r4, #1
 8002c56:	f340 8138 	ble.w	8002eca <RI_GetRegCommandParser+0x4b2>
 8002c5a:	f103 0c24 	add.w	ip, r3, #36	; 0x24
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f1c6 0201 	rsb	r2, r6, #1
 8002c64:	e002      	b.n	8002c6c <RI_GetRegCommandParser+0x254>
 8002c66:	42a3      	cmp	r3, r4
 8002c68:	f280 812f 	bge.w	8002eca <RI_GetRegCommandParser+0x4b2>
    *destString = *srcString ;
 8002c6c:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002c70:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8002c74:	1883      	adds	r3, r0, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d1f4      	bne.n	8002c66 <RI_GetRegCommandParser+0x24e>
 8002c7c:	e742      	b.n	8002b04 <RI_GetRegCommandParser+0xec>
 8002c7e:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002c82:	d197      	bne.n	8002bb4 <RI_GetRegCommandParser+0x19c>
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002c84:	4658      	mov	r0, fp
 8002c86:	f7fe fc7d 	bl	8001584 <MCI_GetLastRampFinalSpeed>
 8002c8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c8e:	0040      	lsls	r0, r0, #1
 8002c90:	f8c6 0002 	str.w	r0, [r6, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002c94:	4658      	mov	r0, fp
 8002c96:	f7fe fc7d 	bl	8001594 <MCI_GetLastRampFinalDuration>
          *rawSize = 6;
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	f04f 0c08 	mov.w	ip, #8
 8002ca0:	8033      	strh	r3, [r6, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002ca2:	80f0      	strh	r0, [r6, #6]
      *size = (*rawSize)+2;
 8002ca4:	4663      	mov	r3, ip
 8002ca6:	e730      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002ca8:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002cac:	d182      	bne.n	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8002cae:	4658      	mov	r0, fp
 8002cb0:	f7fe fc90 	bl	80015d4 <MCI_GetIalphabeta>
         break;
 8002cb4:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8002cb8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002cbc:	900a      	str	r0, [sp, #40]	; 0x28
 8002cbe:	8033      	strh	r3, [r6, #0]
        *size = 2;
 8002cc0:	4663      	mov	r3, ip
         break;
 8002cc2:	e722      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002cc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002cc8:	f000 81b3 	beq.w	8003032 <RI_GetRegCommandParser+0x61a>
 8002ccc:	d93f      	bls.n	8002d4e <RI_GetRegCommandParser+0x336>
 8002cce:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002cd2:	f47f af6f 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = MCI_GetIab(pMCI).b;
 8002cd6:	4658      	mov	r0, fp
 8002cd8:	f7fe fc6e 	bl	80015b8 <MCI_GetIab>
         break;
 8002cdc:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = MCI_GetIab(pMCI).b;
 8002ce0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002ce4:	900c      	str	r0, [sp, #48]	; 0x30
 8002ce6:	8033      	strh	r3, [r6, #0]
        *size = 2;
 8002ce8:	4663      	mov	r3, ip
         break;
 8002cea:	e70e      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002cec:	f241 4150 	movw	r1, #5200	; 0x1450
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	f000 81e7 	beq.w	80030c4 <RI_GetRegCommandParser+0x6ac>
 8002cf6:	d96c      	bls.n	8002dd2 <RI_GetRegCommandParser+0x3ba>
 8002cf8:	f241 5190 	movw	r1, #5520	; 0x1590
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	f000 81df 	beq.w	80030c0 <RI_GetRegCommandParser+0x6a8>
 8002d02:	d951      	bls.n	8002da8 <RI_GetRegCommandParser+0x390>
 8002d04:	f241 6110 	movw	r1, #5648	; 0x1610
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	f000 81d7 	beq.w	80030bc <RI_GetRegCommandParser+0x6a4>
 8002d0e:	f241 6150 	movw	r1, #5712	; 0x1650
 8002d12:	428b      	cmp	r3, r1
 8002d14:	d139      	bne.n	8002d8a <RI_GetRegCommandParser+0x372>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8002d16:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <RI_GetRegCommandParser+0x414>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8002d18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002d1c:	f005 f9ca 	bl	80080b4 <PID_GetKDDivisorPOW2>
 8002d20:	f04f 0c02 	mov.w	ip, #2
 8002d24:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002d26:	4663      	mov	r3, ip
 8002d28:	e6ef      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002d2a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002d2e:	f000 81c3 	beq.w	80030b8 <RI_GetRegCommandParser+0x6a0>
 8002d32:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002d36:	f47f af3d 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <RI_GetRegCommandParser+0x404>)
 8002d3c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002d40:	f005 f982 	bl	8008048 <PID_GetKP>
         break;
 8002d44:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8002d48:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002d4a:	4663      	mov	r3, ip
         break;
 8002d4c:	e6dd      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002d4e:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002d52:	f000 8164 	beq.w	800301e <RI_GetRegCommandParser+0x606>
 8002d56:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8002d5a:	f47f af2b 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8002d5e:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <RI_GetRegCommandParser+0x418>)
 8002d60:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002d64:	f005 f90a 	bl	8007f7c <MPM_GetAvrgElMotorPowerW>
         break;
 8002d68:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8002d6c:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002d6e:	4663      	mov	r3, ip
         break;
 8002d70:	e6cb      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002d72:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002d76:	f000 8150 	beq.w	800301a <RI_GetRegCommandParser+0x602>
 8002d7a:	f240 808e 	bls.w	8002e9a <RI_GetRegCommandParser+0x482>
 8002d7e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002d82:	f47f af17 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <RI_GetRegCommandParser+0x414>)
 8002d88:	e7d8      	b.n	8002d3c <RI_GetRegCommandParser+0x324>
 8002d8a:	f241 51d0 	movw	r1, #5584	; 0x15d0
 8002d8e:	428b      	cmp	r3, r1
 8002d90:	f47f af10 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <RI_GetRegCommandParser+0x414>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8002d96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002d9a:	f005 f95f 	bl	800805c <PID_GetKPDivisorPOW2>
 8002d9e:	f04f 0c02 	mov.w	ip, #2
 8002da2:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002da4:	4663      	mov	r3, ip
 8002da6:	e6b0      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002da8:	f241 5110 	movw	r1, #5392	; 0x1510
 8002dac:	428b      	cmp	r3, r1
 8002dae:	f000 8149 	beq.w	8003044 <RI_GetRegCommandParser+0x62c>
 8002db2:	d955      	bls.n	8002e60 <RI_GetRegCommandParser+0x448>
 8002db4:	f241 5150 	movw	r1, #5456	; 0x1550
 8002db8:	428b      	cmp	r3, r1
 8002dba:	f47f aefb 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <RI_GetRegCommandParser+0x404>)
 8002dc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002dc4:	f005 f954 	bl	8008070 <PID_GetKIDivisorPOW2>
 8002dc8:	f04f 0c02 	mov.w	ip, #2
 8002dcc:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002dce:	4663      	mov	r3, ip
 8002dd0:	e69b      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002dd2:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002dd6:	f000 8179 	beq.w	80030cc <RI_GetRegCommandParser+0x6b4>
 8002dda:	d92f      	bls.n	8002e3c <RI_GetRegCommandParser+0x424>
 8002ddc:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8002de0:	f000 8132 	beq.w	8003048 <RI_GetRegCommandParser+0x630>
 8002de4:	d90a      	bls.n	8002dfc <RI_GetRegCommandParser+0x3e4>
 8002de6:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002dea:	d003      	beq.n	8002df4 <RI_GetRegCommandParser+0x3dc>
 8002dec:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002df0:	f47f aee0 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
 8002df4:	f04f 0c02 	mov.w	ip, #2
 8002df8:	4663      	mov	r3, ip
 8002dfa:	e686      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002dfc:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8002e00:	f47f aed8 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <RI_GetRegCommandParser+0x41c>)
 8002e06:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002e0a:	f006 f985 	bl	8009118 <SPD_GetElAngle>
 8002e0e:	f04f 0c02 	mov.w	ip, #2
 8002e12:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002e14:	4663      	mov	r3, ip
 8002e16:	e678      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002e18:	08009c3c 	.word	0x08009c3c
 8002e1c:	2000044c 	.word	0x2000044c
 8002e20:	200009bc 	.word	0x200009bc
 8002e24:	08009cd0 	.word	0x08009cd0
 8002e28:	20000464 	.word	0x20000464
 8002e2c:	20000450 	.word	0x20000450
 8002e30:	20000448 	.word	0x20000448
 8002e34:	2000052c 	.word	0x2000052c
 8002e38:	200009a0 	.word	0x200009a0
 8002e3c:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002e40:	f000 8115 	beq.w	800306e <RI_GetRegCommandParser+0x656>
 8002e44:	d918      	bls.n	8002e78 <RI_GetRegCommandParser+0x460>
 8002e46:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002e4a:	f47f aeb3 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8002e4e:	4658      	mov	r0, fp
 8002e50:	f7fe fbf8 	bl	8001644 <MCI_GetValphabeta>
 8002e54:	f04f 0c02 	mov.w	ip, #2
 8002e58:	9003      	str	r0, [sp, #12]
        *size = 2;
 8002e5a:	4663      	mov	r3, ip
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8002e5c:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002e5e:	e654      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002e60:	f241 4190 	movw	r1, #5264	; 0x1490
 8002e64:	428b      	cmp	r3, r1
 8002e66:	f000 8125 	beq.w	80030b4 <RI_GetRegCommandParser+0x69c>
 8002e6a:	f241 41d0 	movw	r1, #5328	; 0x14d0
 8002e6e:	428b      	cmp	r3, r1
 8002e70:	f47f aea0 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8002e74:	4ba4      	ldr	r3, [pc, #656]	; (8003108 <RI_GetRegCommandParser+0x6f0>)
 8002e76:	e74f      	b.n	8002d18 <RI_GetRegCommandParser+0x300>
 8002e78:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002e7c:	f000 8102 	beq.w	8003084 <RI_GetRegCommandParser+0x66c>
 8002e80:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002e84:	f47f ae96 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002e88:	4658      	mov	r0, fp
 8002e8a:	f7fe fbcd 	bl	8001628 <MCI_GetVqd>
 8002e8e:	f04f 0c02 	mov.w	ip, #2
 8002e92:	9005      	str	r0, [sp, #20]
        *size = 2;
 8002e94:	4663      	mov	r3, ip
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002e96:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8002e98:	e637      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8002e9a:	2b90      	cmp	r3, #144	; 0x90
 8002e9c:	f000 8114 	beq.w	80030c8 <RI_GetRegCommandParser+0x6b0>
 8002ea0:	2bd0      	cmp	r3, #208	; 0xd0
 8002ea2:	f47f ae87 	bne.w	8002bb4 <RI_GetRegCommandParser+0x19c>
          *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8002ea6:	4b98      	ldr	r3, [pc, #608]	; (8003108 <RI_GetRegCommandParser+0x6f0>)
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002ea8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002eac:	f005 f8d0 	bl	8008050 <PID_GetKI>
         break;
 8002eb0:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8002eb4:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8002eb6:	4663      	mov	r3, ip
         break;
 8002eb8:	e627      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *data =  MCI_GetControlMode(pMCI);
 8002eba:	4658      	mov	r0, fp
 8002ebc:	f7fe fb60 	bl	8001580 <MCI_GetControlMode>
          break;
 8002ec0:	f04f 0c01 	mov.w	ip, #1
          *data =  MCI_GetControlMode(pMCI);
 8002ec4:	7030      	strb	r0, [r6, #0]
        *size = 1;
 8002ec6:	4663      	mov	r3, ip
          break;
 8002ec8:	e61f      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002eca:	2006      	movs	r0, #6
 8002ecc:	e5de      	b.n	8002a8c <RI_GetRegCommandParser+0x74>
          *data = STM_GetState(&STM[motorID]);
 8002ece:	4b8f      	ldr	r3, [pc, #572]	; (800310c <RI_GetRegCommandParser+0x6f4>)
 8002ed0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8002ed4:	eb03 004c 	add.w	r0, r3, ip, lsl #1
 8002ed8:	f006 fac4 	bl	8009464 <STM_GetState>
 8002edc:	f04f 0c01 	mov.w	ip, #1
 8002ee0:	7030      	strb	r0, [r6, #0]
        *size = 1;
 8002ee2:	4663      	mov	r3, ip
 8002ee4:	e611      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
  while ((*srcString != 0) && (*size < maxSize) )
 8002ee6:	4b8a      	ldr	r3, [pc, #552]	; (8003110 <RI_GetRegCommandParser+0x6f8>)
 8002ee8:	7819      	ldrb	r1, [r3, #0]
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d048      	beq.n	8002f80 <RI_GetRegCommandParser+0x568>
 8002eee:	2c01      	cmp	r4, #1
 8002ef0:	ddeb      	ble.n	8002eca <RI_GetRegCommandParser+0x4b2>
 8002ef2:	469c      	mov	ip, r3
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f1c6 0201 	rsb	r2, r6, #1
 8002efa:	e001      	b.n	8002f00 <RI_GetRegCommandParser+0x4e8>
 8002efc:	42a3      	cmp	r3, r4
 8002efe:	dae4      	bge.n	8002eca <RI_GetRegCommandParser+0x4b2>
    *destString = *srcString ;
 8002f00:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002f04:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8002f08:	1883      	adds	r3, r0, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2900      	cmp	r1, #0
 8002f0e:	d1f5      	bne.n	8002efc <RI_GetRegCommandParser+0x4e4>
 8002f10:	e5f8      	b.n	8002b04 <RI_GetRegCommandParser+0xec>
        retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8002f12:	4b80      	ldr	r3, [pc, #512]	; (8003114 <RI_GetRegCommandParser+0x6fc>)
 8002f14:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8002f18:	7819      	ldrb	r1, [r3, #0]
 8002f1a:	b389      	cbz	r1, 8002f80 <RI_GetRegCommandParser+0x568>
 8002f1c:	2c01      	cmp	r4, #1
 8002f1e:	ddd4      	ble.n	8002eca <RI_GetRegCommandParser+0x4b2>
 8002f20:	469c      	mov	ip, r3
 8002f22:	4630      	mov	r0, r6
 8002f24:	f1c6 0201 	rsb	r2, r6, #1
 8002f28:	e001      	b.n	8002f2e <RI_GetRegCommandParser+0x516>
 8002f2a:	42a3      	cmp	r3, r4
 8002f2c:	dacd      	bge.n	8002eca <RI_GetRegCommandParser+0x4b2>
    *destString = *srcString ;
 8002f2e:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002f32:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8002f36:	1883      	adds	r3, r0, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2900      	cmp	r1, #0
 8002f3c:	d1f5      	bne.n	8002f2a <RI_GetRegCommandParser+0x512>
 8002f3e:	e5e1      	b.n	8002b04 <RI_GetRegCommandParser+0xec>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002f40:	4658      	mov	r0, fp
 8002f42:	f7fe fb35 	bl	80015b0 <MCI_GetMecSpeedRefUnit>
 8002f46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f4a:	0040      	lsls	r0, r0, #1
 8002f4c:	f04f 0c04 	mov.w	ip, #4
 8002f50:	6030      	str	r0, [r6, #0]
        *size = 4;
 8002f52:	4663      	mov	r3, ip
 8002f54:	e5d9      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002f56:	4658      	mov	r0, fp
 8002f58:	f7fe fb22 	bl	80015a0 <MCI_GetAvrgMecSpeedUnit>
 8002f5c:	e7f3      	b.n	8002f46 <RI_GetRegCommandParser+0x52e>
          memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8002f5e:	4b6e      	ldr	r3, [pc, #440]	; (8003118 <RI_GetRegCommandParser+0x700>)
 8002f60:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002f64:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	604a      	str	r2, [r1, #4]
 8002f6e:	f8c1 c008 	str.w	ip, [r1, #8]
 8002f72:	6008      	str	r0, [r1, #0]
 8002f74:	899b      	ldrh	r3, [r3, #12]
 8002f76:	818b      	strh	r3, [r1, #12]
 8002f78:	f04f 0c10 	mov.w	ip, #16
      *size = (*rawSize)+2;
 8002f7c:	4663      	mov	r3, ip
 8002f7e:	e5c4      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
  while ((*srcString != 0) && (*size < maxSize) )
 8002f80:	f04f 0c01 	mov.w	ip, #1
  *size= 1 ; /* /0 is the min String size */
 8002f84:	4663      	mov	r3, ip
  while ((*srcString != 0) && (*size < maxSize) )
 8002f86:	4630      	mov	r0, r6
 8002f88:	e5bd      	b.n	8002b06 <RI_GetRegCommandParser+0xee>
          *rawSize = 4;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	8033      	strh	r3, [r6, #0]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 8002f8e:	4658      	mov	r0, fp
 8002f90:	f7fe fafc 	bl	800158c <MCI_GetLastRampFinalTorque>
 8002f94:	8070      	strh	r0, [r6, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002f96:	4658      	mov	r0, fp
 8002f98:	f7fe fafc 	bl	8001594 <MCI_GetLastRampFinalDuration>
      *size = (*rawSize)+2;
 8002f9c:	8833      	ldrh	r3, [r6, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002f9e:	80b0      	strh	r0, [r6, #4]
      *size = (*rawSize)+2;
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	b29b      	uxth	r3, r3
     if (retVal == MCP_CMD_OK )
 8002fa4:	469c      	mov	ip, r3
 8002fa6:	e5b0      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002fa8:	230c      	movs	r3, #12
        if ((*rawSize) +2  > freeSpace)
 8002faa:	2c0d      	cmp	r4, #13
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002fac:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002fae:	f77f ad83 	ble.w	8002ab8 <RI_GetRegCommandParser+0xa0>
          memcpy(rawData, FOCConfig_reg[motorID], sizeof(FOCFwConfig_reg_t) );
 8002fb2:	4b5a      	ldr	r3, [pc, #360]	; (800311c <RI_GetRegCommandParser+0x704>)
 8002fb4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002fb8:	f04f 0c0e 	mov.w	ip, #14
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	608b      	str	r3, [r1, #8]
 8002fc4:	6008      	str	r0, [r1, #0]
 8002fc6:	604a      	str	r2, [r1, #4]
      *size = (*rawSize)+2;
 8002fc8:	4663      	mov	r3, ip
 8002fca:	e59e      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
        *rawSize = sizeof(MotorConfig_reg_t);
 8002fcc:	233c      	movs	r3, #60	; 0x3c
        if ((*rawSize) +2  > freeSpace)
 8002fce:	2c3d      	cmp	r4, #61	; 0x3d
        *rawSize = sizeof(MotorConfig_reg_t);
 8002fd0:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 8002fd2:	f77f ad71 	ble.w	8002ab8 <RI_GetRegCommandParser+0xa0>
          memcpy(rawData, MotorConfig_reg[motorID], sizeof(MotorConfig_reg_t) );
 8002fd6:	4b52      	ldr	r3, [pc, #328]	; (8003120 <RI_GetRegCommandParser+0x708>)
 8002fd8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8002fdc:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8002fe0:	f8d3 c000 	ldr.w	ip, [r3]
 8002fe4:	6858      	ldr	r0, [r3, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8002fec:	f8c1 e00c 	str.w	lr, [r1, #12]
 8002ff0:	3310      	adds	r3, #16
 8002ff2:	455b      	cmp	r3, fp
 8002ff4:	f8c1 c000 	str.w	ip, [r1]
 8002ff8:	6048      	str	r0, [r1, #4]
 8002ffa:	608a      	str	r2, [r1, #8]
 8002ffc:	f101 0110 	add.w	r1, r1, #16
 8003000:	d1ee      	bne.n	8002fe0 <RI_GetRegCommandParser+0x5c8>
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	608b      	str	r3, [r1, #8]
 800300a:	f04f 0c3e 	mov.w	ip, #62	; 0x3e
 800300e:	6008      	str	r0, [r1, #0]
 8003010:	604a      	str	r2, [r1, #4]
      *size = (*rawSize)+2;
 8003012:	4663      	mov	r3, ip
 8003014:	e579      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
  uint8_t retVal = MCP_CMD_NOK;
 8003016:	2001      	movs	r0, #1
 8003018:	e538      	b.n	8002a8c <RI_GetRegCommandParser+0x74>
          *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <RI_GetRegCommandParser+0x6f0>)
 800301c:	e5b9      	b.n	8002b92 <RI_GetRegCommandParser+0x17a>
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <RI_GetRegCommandParser+0x70c>)
 8003020:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003024:	f004 ffee 	bl	8008004 <NTC_GetAvTemp_C>
         break;
 8003028:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800302c:	8030      	strh	r0, [r6, #0]
        *size = 2;
 800302e:	4663      	mov	r3, ip
         break;
 8003030:	e56b      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *regdata16 = MCI_GetIab(pMCI).a;
 8003032:	4658      	mov	r0, fp
 8003034:	f7fe fac0 	bl	80015b8 <MCI_GetIab>
         break;
 8003038:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = MCI_GetIab(pMCI).a;
 800303c:	900d      	str	r0, [sp, #52]	; 0x34
        *size = 2;
 800303e:	4663      	mov	r3, ip
          *regdata16 = MCI_GetIab(pMCI).a;
 8003040:	8030      	strh	r0, [r6, #0]
         break;
 8003042:	e562      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003044:	4b38      	ldr	r3, [pc, #224]	; (8003128 <RI_GetRegCommandParser+0x710>)
 8003046:	e6a6      	b.n	8002d96 <RI_GetRegCommandParser+0x37e>
          *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]);
 8003048:	4b38      	ldr	r3, [pc, #224]	; (800312c <RI_GetRegCommandParser+0x714>)
 800304a:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800304e:	f006 f89b 	bl	8009188 <SPD_GetS16Speed>
 8003052:	f04f 0c02 	mov.w	ip, #2
 8003056:	8030      	strh	r0, [r6, #0]
        *size = 2;
 8003058:	4663      	mov	r3, ip
 800305a:	e556      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 800305c:	4658      	mov	r0, fp
 800305e:	f7fe fab9 	bl	80015d4 <MCI_GetIalphabeta>
         break;
 8003062:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003066:	900b      	str	r0, [sp, #44]	; 0x2c
        *size = 2;
 8003068:	4663      	mov	r3, ip
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 800306a:	8030      	strh	r0, [r6, #0]
         break;
 800306c:	e54d      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *regdata16 = MCI_GetVqd(pMCI).d;
 800306e:	4658      	mov	r0, fp
 8003070:	f7fe fada 	bl	8001628 <MCI_GetVqd>
 8003074:	f04f 0c02 	mov.w	ip, #2
 8003078:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800307c:	9004      	str	r0, [sp, #16]
 800307e:	8033      	strh	r3, [r6, #0]
        *size = 2;
 8003080:	4663      	mov	r3, ip
 8003082:	e542      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8003084:	4658      	mov	r0, fp
 8003086:	f7fe fac1 	bl	800160c <MCI_GetIqdref>
 800308a:	f04f 0c02 	mov.w	ip, #2
 800308e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003092:	9006      	str	r0, [sp, #24]
 8003094:	8033      	strh	r3, [r6, #0]
        *size = 2;
 8003096:	4663      	mov	r3, ip
 8003098:	e537      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <RI_GetRegCommandParser+0x710>)
 800309c:	e704      	b.n	8002ea8 <RI_GetRegCommandParser+0x490>
          *regdata16 = PID_GetKI(pPIDIq[motorID]);
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <RI_GetRegCommandParser+0x718>)
 80030a0:	e702      	b.n	8002ea8 <RI_GetRegCommandParser+0x490>
          *regdata16 = MCI_GetIqd(pMCI).q;
 80030a2:	4658      	mov	r0, fp
 80030a4:	f7fe faa4 	bl	80015f0 <MCI_GetIqd>
         break;
 80030a8:	f04f 0c02 	mov.w	ip, #2
          *regdata16 = MCI_GetIqd(pMCI).q;
 80030ac:	9009      	str	r0, [sp, #36]	; 0x24
        *size = 2;
 80030ae:	4663      	mov	r3, ip
          *regdata16 = MCI_GetIqd(pMCI).q;
 80030b0:	8030      	strh	r0, [r6, #0]
         break;
 80030b2:	e52a      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <RI_GetRegCommandParser+0x6f0>)
 80030b6:	e683      	b.n	8002dc0 <RI_GetRegCommandParser+0x3a8>
          *regdata16 = PID_GetKD(pPIDIq[motorID]);
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <RI_GetRegCommandParser+0x718>)
 80030ba:	e56a      	b.n	8002b92 <RI_GetRegCommandParser+0x17a>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <RI_GetRegCommandParser+0x718>)
 80030be:	e67f      	b.n	8002dc0 <RI_GetRegCommandParser+0x3a8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <RI_GetRegCommandParser+0x710>)
 80030c2:	e629      	b.n	8002d18 <RI_GetRegCommandParser+0x300>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <RI_GetRegCommandParser+0x6f0>)
 80030c6:	e666      	b.n	8002d96 <RI_GetRegCommandParser+0x37e>
          *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <RI_GetRegCommandParser+0x6f0>)
 80030ca:	e637      	b.n	8002d3c <RI_GetRegCommandParser+0x324>
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 80030cc:	4658      	mov	r0, fp
 80030ce:	f7fe fab9 	bl	8001644 <MCI_GetValphabeta>
 80030d2:	f04f 0c02 	mov.w	ip, #2
 80030d6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80030da:	9002      	str	r0, [sp, #8]
 80030dc:	8033      	strh	r3, [r6, #0]
        *size = 2;
 80030de:	4663      	mov	r3, ip
 80030e0:	e513      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <RI_GetRegCommandParser+0x71c>)
 80030e4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80030e8:	f004 faf8 	bl	80076dc <VBS_GetAvBusVoltage_V>
         break;
 80030ec:	f04f 0c02 	mov.w	ip, #2
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80030f0:	8030      	strh	r0, [r6, #0]
        *size = 2;
 80030f2:	4663      	mov	r3, ip
         break;
 80030f4:	e509      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
          *regdata16 = MCI_GetIqdref(pMCI).q;
 80030f6:	4658      	mov	r0, fp
 80030f8:	f7fe fa88 	bl	800160c <MCI_GetIqdref>
 80030fc:	f04f 0c02 	mov.w	ip, #2
 8003100:	9007      	str	r0, [sp, #28]
        *size = 2;
 8003102:	4663      	mov	r3, ip
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8003104:	8030      	strh	r0, [r6, #0]
     if (retVal == MCP_CMD_OK )
 8003106:	e500      	b.n	8002b0a <RI_GetRegCommandParser+0xf2>
 8003108:	20000530 	.word	0x20000530
 800310c:	200009bc 	.word	0x200009bc
 8003110:	08009c4c 	.word	0x08009c4c
 8003114:	20000468 	.word	0x20000468
 8003118:	2000045c 	.word	0x2000045c
 800311c:	20000460 	.word	0x20000460
 8003120:	20000464 	.word	0x20000464
 8003124:	20000458 	.word	0x20000458
 8003128:	2000044c 	.word	0x2000044c
 800312c:	2000052c 	.word	0x2000052c
 8003130:	20000450 	.word	0x20000450
 8003134:	20000528 	.word	0x20000528

08003138 <RI_GetIDSize>:
return retVal;
}

uint8_t RI_GetIDSize (uint16_t dataID)
{
  uint8_t typeID = dataID & TYPE_MASK;
 8003138:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800313c:	3808      	subs	r0, #8
 800313e:	b2c0      	uxtb	r0, r0
 8003140:	2810      	cmp	r0, #16
 8003142:	bf9a      	itte	ls
 8003144:	4b01      	ldrls	r3, [pc, #4]	; (800314c <RI_GetIDSize+0x14>)
 8003146:	5c18      	ldrbls	r0, [r3, r0]
 8003148:	2000      	movhi	r0, #0
    default:
      result=0;
      break;
  }
  return result;
}
 800314a:	4770      	bx	lr
 800314c:	08009e14 	.word	0x08009e14

08003150 <RI_GetPtrReg>:
  uint16_t regID = dataID & REG_MASK;
  uint8_t retVal = MCP_CMD_OK;

  MCI_Handle_t * pMCI = &Mci[motorID];

  switch (typeID)
 8003150:	f000 0238 	and.w	r2, r0, #56	; 0x38
 8003154:	2a10      	cmp	r2, #16
  uint8_t typeID = dataID & TYPE_MASK;
 8003156:	b2c3      	uxtb	r3, r0
  switch (typeID)
 8003158:	d003      	beq.n	8003162 <RI_GetPtrReg+0x12>
      break;
      case MC_REG_ENCODER_EL_ANGLE:
        *dataPtr = &(pEncoder[motorID]->_Super.hElAngle);
      break;
      default:
        *dataPtr = &nullData16;
 800315a:	4b5f      	ldr	r3, [pc, #380]	; (80032d8 <RI_GetPtrReg+0x188>)
 800315c:	600b      	str	r3, [r1, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 800315e:	2005      	movs	r0, #5
      *dataPtr = &nullData16;
      retVal = MCP_ERROR_UNKNOWN_REG;
      break;
  }
  return retVal;
}
 8003160:	4770      	bx	lr
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003162:	f003 0207 	and.w	r2, r3, #7
  uint16_t regID = dataID & REG_MASK;
 8003166:	f020 0007 	bic.w	r0, r0, #7
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 800316a:	3a01      	subs	r2, #1
 800316c:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003170:	b2d2      	uxtb	r2, r2
  uint16_t regID = dataID & REG_MASK;
 8003172:	b283      	uxth	r3, r0
 8003174:	d06c      	beq.n	8003250 <RI_GetPtrReg+0x100>
 8003176:	d813      	bhi.n	80031a0 <RI_GetPtrReg+0x50>
 8003178:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 800317c:	d072      	beq.n	8003264 <RI_GetPtrReg+0x114>
 800317e:	d92e      	bls.n	80031de <RI_GetPtrReg+0x8e>
 8003180:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003184:	d078      	beq.n	8003278 <RI_GetPtrReg+0x128>
 8003186:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 800318a:	d11b      	bne.n	80031c4 <RI_GetPtrReg+0x74>
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 800318c:	4853      	ldr	r0, [pc, #332]	; (80032dc <RI_GetPtrReg+0x18c>)
 800318e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003192:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003196:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8003198:	6893      	ldr	r3, [r2, #8]
 800319a:	3310      	adds	r3, #16
 800319c:	600b      	str	r3, [r1, #0]
       break;
 800319e:	4770      	bx	lr
 80031a0:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80031a4:	d072      	beq.n	800328c <RI_GetPtrReg+0x13c>
 80031a6:	d92a      	bls.n	80031fe <RI_GetPtrReg+0xae>
 80031a8:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 80031ac:	f000 808c 	beq.w	80032c8 <RI_GetPtrReg+0x178>
 80031b0:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 80031b4:	d1d1      	bne.n	800315a <RI_GetPtrReg+0xa>
        *dataPtr = &(pEncoder[motorID]->_Super.hAvrMecSpeedUnit);
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <RI_GetPtrReg+0x190>)
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	330c      	adds	r3, #12
 80031be:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80031c0:	2000      	movs	r0, #0
      break;
 80031c2:	4770      	bx	lr
 80031c4:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80031c8:	d1c7      	bne.n	800315a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 80031ca:	4844      	ldr	r0, [pc, #272]	; (80032dc <RI_GetPtrReg+0x18c>)
 80031cc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80031d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80031d4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 80031d6:	6893      	ldr	r3, [r2, #8]
 80031d8:	330c      	adds	r3, #12
 80031da:	600b      	str	r3, [r1, #0]
       break;
 80031dc:	4770      	bx	lr
 80031de:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80031e2:	d05d      	beq.n	80032a0 <RI_GetPtrReg+0x150>
 80031e4:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80031e8:	d119      	bne.n	800321e <RI_GetPtrReg+0xce>
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 80031ea:	483c      	ldr	r0, [pc, #240]	; (80032dc <RI_GetPtrReg+0x18c>)
 80031ec:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80031f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80031f4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 80031f6:	6893      	ldr	r3, [r2, #8]
 80031f8:	3304      	adds	r3, #4
 80031fa:	600b      	str	r3, [r1, #0]
       break;
 80031fc:	4770      	bx	lr
 80031fe:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003202:	d057      	beq.n	80032b4 <RI_GetPtrReg+0x164>
 8003204:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003208:	d115      	bne.n	8003236 <RI_GetPtrReg+0xe6>
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 800320a:	4834      	ldr	r0, [pc, #208]	; (80032dc <RI_GetPtrReg+0x18c>)
 800320c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003210:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003214:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8003216:	6893      	ldr	r3, [r2, #8]
 8003218:	331a      	adds	r3, #26
 800321a:	600b      	str	r3, [r1, #0]
       break;
 800321c:	4770      	bx	lr
 800321e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003222:	d19a      	bne.n	800315a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8003224:	482d      	ldr	r0, [pc, #180]	; (80032dc <RI_GetPtrReg+0x18c>)
 8003226:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800322a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800322e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8003230:	6893      	ldr	r3, [r2, #8]
 8003232:	600b      	str	r3, [r1, #0]
       break;
 8003234:	4770      	bx	lr
 8003236:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 800323a:	d18e      	bne.n	800315a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 800323c:	4827      	ldr	r0, [pc, #156]	; (80032dc <RI_GetPtrReg+0x18c>)
 800323e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003242:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003246:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8003248:	6893      	ldr	r3, [r2, #8]
 800324a:	3316      	adds	r3, #22
 800324c:	600b      	str	r3, [r1, #0]
       break;
 800324e:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8003250:	4822      	ldr	r0, [pc, #136]	; (80032dc <RI_GetPtrReg+0x18c>)
 8003252:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003256:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800325a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 800325c:	6893      	ldr	r3, [r2, #8]
 800325e:	3312      	adds	r3, #18
 8003260:	600b      	str	r3, [r1, #0]
       break;
 8003262:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003264:	481d      	ldr	r0, [pc, #116]	; (80032dc <RI_GetPtrReg+0x18c>)
 8003266:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800326a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800326e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003270:	6893      	ldr	r3, [r2, #8]
 8003272:	3306      	adds	r3, #6
 8003274:	600b      	str	r3, [r1, #0]
       break;
 8003276:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8003278:	4818      	ldr	r0, [pc, #96]	; (80032dc <RI_GetPtrReg+0x18c>)
 800327a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800327e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003282:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8003284:	6893      	ldr	r3, [r2, #8]
 8003286:	330e      	adds	r3, #14
 8003288:	600b      	str	r3, [r1, #0]
       break;
 800328a:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 800328c:	4813      	ldr	r0, [pc, #76]	; (80032dc <RI_GetPtrReg+0x18c>)
 800328e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003292:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003296:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8003298:	6893      	ldr	r3, [r2, #8]
 800329a:	331c      	adds	r3, #28
 800329c:	600b      	str	r3, [r1, #0]
       break;
 800329e:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 80032a0:	480e      	ldr	r0, [pc, #56]	; (80032dc <RI_GetPtrReg+0x18c>)
 80032a2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80032a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80032aa:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 80032ac:	6893      	ldr	r3, [r2, #8]
 80032ae:	3302      	adds	r3, #2
 80032b0:	600b      	str	r3, [r1, #0]
       break;
 80032b2:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 80032b4:	4809      	ldr	r0, [pc, #36]	; (80032dc <RI_GetPtrReg+0x18c>)
 80032b6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80032ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80032be:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 80032c0:	6893      	ldr	r3, [r2, #8]
 80032c2:	3318      	adds	r3, #24
 80032c4:	600b      	str	r3, [r1, #0]
       break;
 80032c6:	4770      	bx	lr
        *dataPtr = &(pEncoder[motorID]->_Super.hElAngle);
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <RI_GetPtrReg+0x190>)
 80032ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ce:	3304      	adds	r3, #4
 80032d0:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80032d2:	2000      	movs	r0, #0
      break;
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000570 	.word	0x20000570
 80032dc:	200009a0 	.word	0x200009a0
 80032e0:	2000052c 	.word	0x2000052c

080032e4 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80032e4:	4a65      	ldr	r2, [pc, #404]	; (800347c <RCM_RegisterRegConv+0x198>)
 80032e6:	6813      	ldr	r3, [r2, #0]
{
 80032e8:	b470      	push	{r4, r5, r6}
 80032ea:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d07e      	beq.n	80033ee <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80032f0:	7904      	ldrb	r4, [r0, #4]
 80032f2:	7918      	ldrb	r0, [r3, #4]
 80032f4:	4284      	cmp	r4, r0
 80032f6:	d01e      	beq.n	8003336 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80032f8:	6855      	ldr	r5, [r2, #4]
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	f000 808b 	beq.w	8003416 <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003300:	792b      	ldrb	r3, [r5, #4]
 8003302:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 8003304:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003308:	d079      	beq.n	80033fe <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800330a:	6893      	ldr	r3, [r2, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a2 	beq.w	8003456 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003312:	791d      	ldrb	r5, [r3, #4]
 8003314:	42a5      	cmp	r5, r4
 8003316:	d078      	beq.n	800340a <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003318:	68d3      	ldr	r3, [r2, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a0 	beq.w	8003460 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003320:	791d      	ldrb	r5, [r3, #4]
 8003322:	42a5      	cmp	r5, r4
 8003324:	f000 8082 	beq.w	800342c <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8003328:	2803      	cmp	r0, #3
 800332a:	bf88      	it	hi
 800332c:	20ff      	movhi	r0, #255	; 0xff
 800332e:	f240 80a0 	bls.w	8003472 <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8003332:	bc70      	pop	{r4, r5, r6}
 8003334:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	680b      	ldr	r3, [r1, #0]
 800333a:	4283      	cmp	r3, r0
 800333c:	d1dc      	bne.n	80032f8 <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 800333e:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003340:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003342:	4d4f      	ldr	r5, [pc, #316]	; (8003480 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 8003344:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003348:	2200      	movs	r2, #0
 800334a:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 800334e:	07e5      	lsls	r5, r4, #31
 8003350:	d422      	bmi.n	8003398 <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003352:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003354:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800335c:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800335e:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003360:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003362:	f022 0220 	bic.w	r2, r2, #32
 8003366:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003368:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003370:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003374:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003378:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	2a00      	cmp	r2, #0
 800337e:	dbfc      	blt.n	800337a <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003380:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 8003382:	07d4      	lsls	r4, r2, #31
 8003384:	d408      	bmi.n	8003398 <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 8003386:	4c3f      	ldr	r4, [pc, #252]	; (8003484 <RCM_RegisterRegConv+0x1a0>)
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4022      	ands	r2, r4
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	07d2      	lsls	r2, r2, #31
 8003396:	d5f7      	bpl.n	8003388 <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 8003398:	4d3b      	ldr	r5, [pc, #236]	; (8003488 <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800339a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800339c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80033a0:	0056      	lsls	r6, r2, #1
 80033a2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80033a6:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 80033aa:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 80033ac:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 80033ae:	2200      	movs	r2, #0
 80033b0:	55aa      	strb	r2, [r5, r6]
 80033b2:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80033b4:	790c      	ldrb	r4, [r1, #4]
 80033b6:	2c09      	cmp	r4, #9
 80033b8:	d83f      	bhi.n	800343a <RCM_RegisterRegConv+0x156>
 80033ba:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80033be:	06a2      	lsls	r2, r4, #26
 80033c0:	2501      	movs	r5, #1
 80033c2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 80033c6:	fa05 f404 	lsl.w	r4, r5, r4
 80033ca:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033cc:	0dd4      	lsrs	r4, r2, #23
 80033ce:	f004 0404 	and.w	r4, r4, #4
 80033d2:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80033d4:	688d      	ldr	r5, [r1, #8]
 80033d6:	58e1      	ldr	r1, [r4, r3]
 80033d8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80033dc:	2607      	movs	r6, #7
 80033de:	4096      	lsls	r6, r2
 80033e0:	4095      	lsls	r5, r2
 80033e2:	ea21 0206 	bic.w	r2, r1, r6
 80033e6:	432a      	orrs	r2, r5
 80033e8:	50e2      	str	r2, [r4, r3]
}
 80033ea:	bc70      	pop	{r4, r5, r6}
 80033ec:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80033ee:	6855      	ldr	r5, [r2, #4]
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	d039      	beq.n	8003468 <RCM_RegisterRegConv+0x184>
 80033f4:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 80033f6:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80033f8:	792b      	ldrb	r3, [r5, #4]
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	d185      	bne.n	800330a <RCM_RegisterRegConv+0x26>
 80033fe:	682d      	ldr	r5, [r5, #0]
 8003400:	680b      	ldr	r3, [r1, #0]
 8003402:	429d      	cmp	r5, r3
 8003404:	d181      	bne.n	800330a <RCM_RegisterRegConv+0x26>
 8003406:	2001      	movs	r0, #1
 8003408:	e79a      	b.n	8003340 <RCM_RegisterRegConv+0x5c>
 800340a:	681d      	ldr	r5, [r3, #0]
 800340c:	680b      	ldr	r3, [r1, #0]
 800340e:	429d      	cmp	r5, r3
 8003410:	d182      	bne.n	8003318 <RCM_RegisterRegConv+0x34>
      i++;
 8003412:	2002      	movs	r0, #2
 8003414:	e794      	b.n	8003340 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003416:	6893      	ldr	r3, [r2, #8]
 8003418:	2001      	movs	r0, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	f47f af79 	bne.w	8003312 <RCM_RegisterRegConv+0x2e>
 8003420:	68d3      	ldr	r3, [r2, #12]
 8003422:	b333      	cbz	r3, 8003472 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003424:	791d      	ldrb	r5, [r3, #4]
 8003426:	790c      	ldrb	r4, [r1, #4]
 8003428:	42a5      	cmp	r5, r4
 800342a:	d122      	bne.n	8003472 <RCM_RegisterRegConv+0x18e>
 800342c:	681c      	ldr	r4, [r3, #0]
 800342e:	680b      	ldr	r3, [r1, #0]
 8003430:	429c      	cmp	r4, r3
 8003432:	f47f af79 	bne.w	8003328 <RCM_RegisterRegConv+0x44>
      i++;
 8003436:	2003      	movs	r0, #3
 8003438:	e782      	b.n	8003340 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800343a:	2503      	movs	r5, #3
 800343c:	f06f 061d 	mvn.w	r6, #29
 8003440:	2201      	movs	r2, #1
 8003442:	fb15 6504 	smlabb	r5, r5, r4, r6
 8003446:	40a2      	lsls	r2, r4
 8003448:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 800344c:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8003450:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003454:	e7ba      	b.n	80033cc <RCM_RegisterRegConv+0xe8>
      i++;
 8003456:	2805      	cmp	r0, #5
 8003458:	bf34      	ite	cc
 800345a:	2000      	movcc	r0, #0
 800345c:	2002      	movcs	r0, #2
 800345e:	e7df      	b.n	8003420 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003460:	2804      	cmp	r0, #4
 8003462:	680b      	ldr	r3, [r1, #0]
 8003464:	d8e7      	bhi.n	8003436 <RCM_RegisterRegConv+0x152>
 8003466:	e76b      	b.n	8003340 <RCM_RegisterRegConv+0x5c>
 8003468:	6893      	ldr	r3, [r2, #8]
 800346a:	b123      	cbz	r3, 8003476 <RCM_RegisterRegConv+0x192>
 800346c:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 800346e:	4628      	mov	r0, r5
 8003470:	e74f      	b.n	8003312 <RCM_RegisterRegConv+0x2e>
 8003472:	680b      	ldr	r3, [r1, #0]
 8003474:	e764      	b.n	8003340 <RCM_RegisterRegConv+0x5c>
 8003476:	4618      	mov	r0, r3
 8003478:	e7d2      	b.n	8003420 <RCM_RegisterRegConv+0x13c>
 800347a:	bf00      	nop
 800347c:	20001ce4 	.word	0x20001ce4
 8003480:	20001cc0 	.word	0x20001cc0
 8003484:	7fffffc0 	.word	0x7fffffc0
 8003488:	20001ca8 	.word	0x20001ca8

0800348c <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 800348c:	4b5c      	ldr	r3, [pc, #368]	; (8003600 <RCM_ExecRegularConv+0x174>)
 800348e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003492:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 8003494:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003498:	0044      	lsls	r4, r0, #1
 800349a:	2a00      	cmp	r2, #0
 800349c:	d136      	bne.n	800350c <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 800349e:	7819      	ldrb	r1, [r3, #0]
 80034a0:	2900      	cmp	r1, #0
 80034a2:	d179      	bne.n	8003598 <RCM_ExecRegularConv+0x10c>
 80034a4:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 80034a6:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 80034a8:	2900      	cmp	r1, #0
 80034aa:	d07b      	beq.n	80035a4 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 80034ac:	7ade      	ldrb	r6, [r3, #11]
 80034ae:	42b0      	cmp	r0, r6
 80034b0:	f0c0 8098 	bcc.w	80035e4 <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 80034b4:	7b1a      	ldrb	r2, [r3, #12]
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	f000 8097 	beq.w	80035ea <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 80034bc:	7c5e      	ldrb	r6, [r3, #17]
 80034be:	42b0      	cmp	r0, r6
 80034c0:	d305      	bcc.n	80034ce <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 80034c2:	7c9a      	ldrb	r2, [r3, #18]
 80034c4:	2a00      	cmp	r2, #0
 80034c6:	f040 8094 	bne.w	80035f2 <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80034ca:	2202      	movs	r2, #2
 80034cc:	e071      	b.n	80035b2 <RCM_ExecRegularConv+0x126>
 80034ce:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 80034d0:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 80034d2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80034d6:	1821      	adds	r1, r4, r0
 80034d8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80034dc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80034e0:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 80034e2:	4e48      	ldr	r6, [pc, #288]	; (8003604 <RCM_ExecRegularConv+0x178>)
 80034e4:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 80034e6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80034ea:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80034ee:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 80034f0:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80034f2:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 80034f4:	1821      	adds	r1, r4, r0
 80034f6:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80034f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 80034fc:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8003500:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003504:	7852      	ldrb	r2, [r2, #1]
 8003506:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8003508:	bf18      	it	ne
 800350a:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 800350c:	4a3e      	ldr	r2, [pc, #248]	; (8003608 <RCM_ExecRegularConv+0x17c>)
 800350e:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8003512:	bb8a      	cbnz	r2, 8003578 <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003514:	4a3d      	ldr	r2, [pc, #244]	; (800360c <RCM_ExecRegularConv+0x180>)
 8003516:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800351a:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800351c:	6811      	ldr	r1, [r2, #0]
 800351e:	2d09      	cmp	r5, #9
 8003520:	d930      	bls.n	8003584 <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003522:	2603      	movs	r6, #3
 8003524:	f06f 071d 	mvn.w	r7, #29
 8003528:	2201      	movs	r2, #1
 800352a:	fb16 7605 	smlabb	r6, r6, r5, r7
 800352e:	40aa      	lsls	r2, r5
 8003530:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8003534:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003538:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 800353c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800353e:	0d12      	lsrs	r2, r2, #20
 8003540:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8003544:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003548:	432a      	orrs	r2, r5
 800354a:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800354c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800354e:	688a      	ldr	r2, [r1, #8]
 8003550:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003554:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003558:	f042 0204 	orr.w	r2, r2, #4
 800355c:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800355e:	680a      	ldr	r2, [r1, #0]
 8003560:	0752      	lsls	r2, r2, #29
 8003562:	d5fc      	bpl.n	800355e <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003564:	1822      	adds	r2, r4, r0
 8003566:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800356a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800356c:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 800356e:	4d25      	ldr	r5, [pc, #148]	; (8003604 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 8003570:	2102      	movs	r1, #2
 8003572:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003574:	7952      	ldrb	r2, [r2, #5]
 8003576:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 8003578:	4420      	add	r0, r4
 800357a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 800357e:	bcf0      	pop	{r4, r5, r6, r7}
 8003580:	8858      	ldrh	r0, [r3, #2]
 8003582:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003584:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003588:	06aa      	lsls	r2, r5, #26
 800358a:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800358c:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003590:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003594:	432a      	orrs	r2, r5
 8003596:	e7d1      	b.n	800353c <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 8003598:	795e      	ldrb	r6, [r3, #5]
 800359a:	4286      	cmp	r6, r0
 800359c:	d898      	bhi.n	80034d0 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 800359e:	7999      	ldrb	r1, [r3, #6]
 80035a0:	2900      	cmp	r1, #0
 80035a2:	d183      	bne.n	80034ac <RCM_ExecRegularConv+0x20>
 80035a4:	7b19      	ldrb	r1, [r3, #12]
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d188      	bne.n	80034bc <RCM_ExecRegularConv+0x30>
 80035aa:	7c99      	ldrb	r1, [r3, #18]
 80035ac:	bb09      	cbnz	r1, 80035f2 <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 80035ae:	2a04      	cmp	r2, #4
 80035b0:	d014      	beq.n	80035dc <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 80035b2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80035b6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80035ba:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 80035bc:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80035c0:	4e10      	ldr	r6, [pc, #64]	; (8003604 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 80035c2:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80035c6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 80035ca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80035ce:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 80035d0:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 80035d4:	7832      	ldrb	r2, [r6, #0]
 80035d6:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80035d8:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 80035da:	e78b      	b.n	80034f4 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 80035dc:	4e09      	ldr	r6, [pc, #36]	; (8003604 <RCM_ExecRegularConv+0x178>)
 80035de:	4602      	mov	r2, r0
 80035e0:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 80035e2:	e787      	b.n	80034f4 <RCM_ExecRegularConv+0x68>
      i++;
 80035e4:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 80035e6:	4611      	mov	r1, r2
 80035e8:	e773      	b.n	80034d2 <RCM_ExecRegularConv+0x46>
 80035ea:	7c9a      	ldrb	r2, [r3, #18]
 80035ec:	b90a      	cbnz	r2, 80035f2 <RCM_ExecRegularConv+0x166>
      i++;
 80035ee:	2201      	movs	r2, #1
 80035f0:	e7df      	b.n	80035b2 <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 80035f2:	7dde      	ldrb	r6, [r3, #23]
 80035f4:	4286      	cmp	r6, r0
      i++;
 80035f6:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 80035fa:	d9da      	bls.n	80035b2 <RCM_ExecRegularConv+0x126>
 80035fc:	e768      	b.n	80034d0 <RCM_ExecRegularConv+0x44>
 80035fe:	bf00      	nop
 8003600:	20001ca8 	.word	0x20001ca8
 8003604:	20001ca4 	.word	0x20001ca4
 8003608:	2000030c 	.word	0x2000030c
 800360c:	20001ce4 	.word	0x20001ce4

08003610 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003610:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003612:	4c12      	ldr	r4, [pc, #72]	; (800365c <RCM_ExecUserConv+0x4c>)
 8003614:	7823      	ldrb	r3, [r4, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d000      	beq.n	800361c <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800361a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800361c:	4d10      	ldr	r5, [pc, #64]	; (8003660 <RCM_ExecUserConv+0x50>)
 800361e:	7828      	ldrb	r0, [r5, #0]
 8003620:	f7ff ff34 	bl	800348c <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003624:	782b      	ldrb	r3, [r5, #0]
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003628:	490f      	ldr	r1, [pc, #60]	; (8003668 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800362a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800362e:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003632:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003634:	7852      	ldrb	r2, [r2, #1]
 8003636:	b10a      	cbz	r2, 800363c <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003638:	2202      	movs	r2, #2
 800363a:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800363c:	4a0b      	ldr	r2, [pc, #44]	; (800366c <RCM_ExecUserConv+0x5c>)
 800363e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003642:	2d00      	cmp	r5, #0
 8003644:	d0e9      	beq.n	800361a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003646:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800364a:	2100      	movs	r1, #0
 800364c:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800364e:	6852      	ldr	r2, [r2, #4]
 8003650:	4601      	mov	r1, r0
 8003652:	4618      	mov	r0, r3
 8003654:	462b      	mov	r3, r5
}
 8003656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800365a:	4718      	bx	r3
 800365c:	20001ce0 	.word	0x20001ce0
 8003660:	20001ca5 	.word	0x20001ca5
 8003664:	20001ca8 	.word	0x20001ca8
 8003668:	20001cf4 	.word	0x20001cf4
 800366c:	20001cc0 	.word	0x20001cc0

08003670 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8003670:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <RCM_ExecNextConv+0x88>)
 8003672:	4822      	ldr	r0, [pc, #136]	; (80036fc <RCM_ExecNextConv+0x8c>)
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800367a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800367e:	b383      	cbz	r3, 80036e2 <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <RCM_ExecNextConv+0x90>)
{
 8003682:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800368a:	2504      	movs	r5, #4
 800368c:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800368e:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003690:	2d09      	cmp	r5, #9
 8003692:	ea4f 0442 	mov.w	r4, r2, lsl #1
 8003696:	d925      	bls.n	80036e4 <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003698:	2603      	movs	r6, #3
 800369a:	f06f 071d 	mvn.w	r7, #29
 800369e:	2301      	movs	r3, #1
 80036a0:	fb16 7605 	smlabb	r6, r6, r5, r7
 80036a4:	40ab      	lsls	r3, r5
 80036a6:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 80036aa:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80036ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80036b2:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80036b4:	0d1b      	lsrs	r3, r3, #20
 80036b6:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80036ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036be:	432b      	orrs	r3, r5
 80036c0:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80036c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80036c4:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80036c6:	4422      	add	r2, r4
 80036c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80036d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	2201      	movs	r2, #1
 80036da:	608b      	str	r3, [r1, #8]
 80036dc:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80036de:	bcf0      	pop	{r4, r5, r6, r7}
 80036e0:	4770      	bx	lr
 80036e2:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80036e4:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80036e8:	06ab      	lsls	r3, r5, #26
 80036ea:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80036ec:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80036f0:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80036f4:	432b      	orrs	r3, r5
 80036f6:	e7dc      	b.n	80036b2 <RCM_ExecNextConv+0x42>
 80036f8:	20001ca4 	.word	0x20001ca4
 80036fc:	20001ca8 	.word	0x20001ca8
 8003700:	20001ce4 	.word	0x20001ce4

08003704 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8003704:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8003706:	4c0f      	ldr	r4, [pc, #60]	; (8003744 <RCM_ReadOngoingConv+0x40>)
 8003708:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <RCM_ReadOngoingConv+0x44>)
 800370a:	7823      	ldrb	r3, [r4, #0]
 800370c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003710:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003714:	0058      	lsls	r0, r3, #1
 8003716:	784d      	ldrb	r5, [r1, #1]
 8003718:	2d01      	cmp	r5, #1
 800371a:	d006      	beq.n	800372a <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 800371c:	4403      	add	r3, r0
 800371e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003722:	7953      	ldrb	r3, [r2, #5]
 8003724:	7023      	strb	r3, [r4, #0]
}
 8003726:	bc70      	pop	{r4, r5, r6}
 8003728:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 800372a:	4d08      	ldr	r5, [pc, #32]	; (800374c <RCM_ReadOngoingConv+0x48>)
 800372c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8003730:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003732:	682e      	ldr	r6, [r5, #0]
 8003734:	0776      	lsls	r6, r6, #29
 8003736:	d5f1      	bpl.n	800371c <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003738:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800373a:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 800373c:	2502      	movs	r5, #2
 800373e:	704d      	strb	r5, [r1, #1]
 8003740:	e7ec      	b.n	800371c <RCM_ReadOngoingConv+0x18>
 8003742:	bf00      	nop
 8003744:	20001ca4 	.word	0x20001ca4
 8003748:	20001ca8 	.word	0x20001ca8
 800374c:	20001ce4 	.word	0x20001ce4

08003750 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <HAL_MspInit+0x3c>)
{
 8003752:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003754:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
 800375c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800375e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003760:	f002 0201 	and.w	r2, r2, #1
 8003764:	9200      	str	r2, [sp, #0]
 8003766:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800376a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003778:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800377c:	f001 fb9c 	bl	8004eb8 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003780:	b003      	add	sp, #12
 8003782:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003786:	f002 ba5b 	b.w	8005c40 <HAL_PWREx_DisableUCPDDeadBattery>
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003790:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003792:	6802      	ldr	r2, [r0, #0]
{
 8003794:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003796:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003798:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80037a0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80037a4:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80037a6:	d033      	beq.n	8003810 <HAL_ADC_MspInit+0x80>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80037a8:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_ADC_MspInit+0xe8>)
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80037ae:	b00d      	add	sp, #52	; 0x34
 80037b0:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80037b2:	4a32      	ldr	r2, [pc, #200]	; (800387c <HAL_ADC_MspInit+0xec>)
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80037b8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80037ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80037bc:	d050      	beq.n	8003860 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037be:	4b30      	ldr	r3, [pc, #192]	; (8003880 <HAL_ADC_MspInit+0xf0>)
 80037c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80037c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ca:	f002 0201 	and.w	r2, r2, #1
 80037ce:	9204      	str	r2, [sp, #16]
 80037d0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037d4:	f042 0204 	orr.w	r2, r2, #4
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80037e8:	a906      	add	r1, sp, #24
 80037ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80037ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f2:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80037f6:	f001 fc71 	bl	80050dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 80037fa:	2210      	movs	r2, #16
 80037fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 80037fe:	4821      	ldr	r0, [pc, #132]	; (8003884 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8003802:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin;
 8003804:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8003808:	f001 fc68 	bl	80050dc <HAL_GPIO_Init>
}
 800380c:	b00d      	add	sp, #52	; 0x34
 800380e:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003810:	4a1a      	ldr	r2, [pc, #104]	; (800387c <HAL_ADC_MspInit+0xec>)
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003816:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003818:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800381a:	d016      	beq.n	800384a <HAL_ADC_MspInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <HAL_ADC_MspInit+0xf0>)
 800381e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	64da      	str	r2, [r3, #76]	; 0x4c
 8003826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 800382e:	2205      	movs	r2, #5
 8003830:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003832:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 800383a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	f001 fc4b 	bl	80050dc <HAL_GPIO_Init>
}
 8003846:	b00d      	add	sp, #52	; 0x34
 8003848:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_ADC_MspInit+0xf0>)
 800384c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800384e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003852:	64da      	str	r2, [r3, #76]	; 0x4c
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	9b01      	ldr	r3, [sp, #4]
 800385e:	e7dd      	b.n	800381c <HAL_ADC_MspInit+0x8c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_ADC_MspInit+0xf0>)
 8003862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003868:	64da      	str	r2, [r3, #76]	; 0x4c
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	9b03      	ldr	r3, [sp, #12]
 8003874:	e7a3      	b.n	80037be <HAL_ADC_MspInit+0x2e>
 8003876:	bf00      	nop
 8003878:	50000100 	.word	0x50000100
 800387c:	20000574 	.word	0x20000574
 8003880:	40021000 	.word	0x40021000
 8003884:	48000800 	.word	0x48000800

08003888 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003888:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 800388a:	6802      	ldr	r2, [r0, #0]
 800388c:	4929      	ldr	r1, [pc, #164]	; (8003934 <HAL_COMP_MspInit+0xac>)
{
 800388e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8003892:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003898:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800389c:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 800389e:	d007      	beq.n	80038b0 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 80038a0:	4925      	ldr	r1, [pc, #148]	; (8003938 <HAL_COMP_MspInit+0xb0>)
 80038a2:	428a      	cmp	r2, r1
 80038a4:	d01a      	beq.n	80038dc <HAL_COMP_MspInit+0x54>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 80038a6:	4925      	ldr	r1, [pc, #148]	; (800393c <HAL_COMP_MspInit+0xb4>)
 80038a8:	428a      	cmp	r2, r1
 80038aa:	d02d      	beq.n	8003908 <HAL_COMP_MspInit+0x80>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 80038ac:	b00a      	add	sp, #40	; 0x28
 80038ae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_COMP_MspInit+0xb8>)
 80038b2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80038b4:	f041 0101 	orr.w	r1, r1, #1
 80038b8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80038ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038be:	f002 0201 	and.w	r2, r2, #1
 80038c2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80038c4:	2303      	movs	r3, #3
 80038c6:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80038c8:	a904      	add	r1, sp, #16
 80038ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80038ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d2:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80038d4:	f001 fc02 	bl	80050dc <HAL_GPIO_Init>
}
 80038d8:	b00a      	add	sp, #40	; 0x28
 80038da:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <HAL_COMP_MspInit+0xb8>)
 80038de:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80038e0:	f041 0101 	orr.w	r1, r1, #1
 80038e4:	64d1      	str	r1, [r2, #76]	; 0x4c
 80038e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	f002 0201 	and.w	r2, r2, #1
 80038ee:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80038f0:	2303      	movs	r3, #3
 80038f2:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80038f4:	a904      	add	r1, sp, #16
 80038f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80038fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fe:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8003900:	f001 fbec 	bl	80050dc <HAL_GPIO_Init>
}
 8003904:	b00a      	add	sp, #40	; 0x28
 8003906:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <HAL_COMP_MspInit+0xb8>)
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800390a:	480e      	ldr	r0, [pc, #56]	; (8003944 <HAL_COMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800390e:	f041 0102 	orr.w	r1, r1, #2
 8003912:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003914:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003918:	f002 0202 	and.w	r2, r2, #2
 800391c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800391e:	2303      	movs	r3, #3
 8003920:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003922:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003924:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003928:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800392a:	f001 fbd7 	bl	80050dc <HAL_GPIO_Init>
}
 800392e:	b00a      	add	sp, #40	; 0x28
 8003930:	bd10      	pop	{r4, pc}
 8003932:	bf00      	nop
 8003934:	40010200 	.word	0x40010200
 8003938:	40010204 	.word	0x40010204
 800393c:	4001020c 	.word	0x4001020c
 8003940:	40021000 	.word	0x40021000
 8003944:	48000400 	.word	0x48000400

08003948 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_CORDIC_MspInit+0x2c>)
 800394a:	6802      	ldr	r2, [r0, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d000      	beq.n	8003952 <HAL_CORDIC_MspInit+0xa>
 8003950:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003952:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 800395e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8003962:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800396e:	b002      	add	sp, #8
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40020c00 	.word	0x40020c00

08003978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003978:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C3)
 800397a:	6801      	ldr	r1, [r0, #0]
 800397c:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_I2C_MspInit+0x64>)
{
 800397e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C3)
 8003982:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003988:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800398c:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C3)
 800398e:	d001      	beq.n	8003994 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003990:	b008      	add	sp, #32
 8003992:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003994:	4c12      	ldr	r4, [pc, #72]	; (80039e0 <HAL_I2C_MspInit+0x68>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003996:	4813      	ldr	r0, [pc, #76]	; (80039e4 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003998:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800399a:	f043 0304 	orr.w	r3, r3, #4
 800399e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80039a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 80039a8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80039ac:	2312      	movs	r3, #18
 80039ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 80039b4:	2200      	movs	r2, #0
 80039b6:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80039b8:	2508      	movs	r5, #8
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 80039ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039be:	9e00      	ldr	r6, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80039c0:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c2:	f001 fb8b 	bl	80050dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80039c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80039ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	9b01      	ldr	r3, [sp, #4]
}
 80039d8:	b008      	add	sp, #32
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	40007800 	.word	0x40007800
 80039e0:	40021000 	.word	0x40021000
 80039e4:	48000800 	.word	0x48000800

080039e8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80039e8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 80039ea:	6803      	ldr	r3, [r0, #0]
 80039ec:	4a2f      	ldr	r2, [pc, #188]	; (8003aac <HAL_OPAMP_MspInit+0xc4>)
{
 80039ee:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f0:	2400      	movs	r4, #0
  if(hopamp->Instance==OPAMP1)
 80039f2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80039f8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80039fc:	9408      	str	r4, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 80039fe:	d004      	beq.n	8003a0a <HAL_OPAMP_MspInit+0x22>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003a00:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <HAL_OPAMP_MspInit+0xc8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d017      	beq.n	8003a36 <HAL_OPAMP_MspInit+0x4e>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 8003a06:	b00b      	add	sp, #44	; 0x2c
 8003a08:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_OPAMP_MspInit+0xcc>)
 8003a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_EXT_GAIN_Pin;
 8003a1e:	220e      	movs	r2, #14
 8003a20:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	a904      	add	r1, sp, #16
 8003a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_EXT_GAIN_Pin;
 8003a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	9c00      	ldr	r4, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f001 fb55 	bl	80050dc <HAL_GPIO_Init>
}
 8003a32:	b00b      	add	sp, #44	; 0x2c
 8003a34:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <HAL_OPAMP_MspInit+0xcc>)
 8003a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a42:	f002 0201 	and.w	r2, r2, #1
 8003a46:	9201      	str	r2, [sp, #4]
 8003a48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a4c:	f042 0204 	orr.w	r2, r2, #4
 8003a50:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a54:	f002 0204 	and.w	r2, r2, #4
 8003a58:	9202      	str	r2, [sp, #8]
 8003a5a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a5e:	f042 0202 	orr.w	r2, r2, #2
 8003a62:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003a6e:	22c0      	movs	r2, #192	; 0xc0
 8003a70:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a72:	a904      	add	r1, sp, #16
 8003a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003a78:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7c:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f001 fb2d 	bl	80050dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP2_EXT_GAIN_Pin;
 8003a82:	2220      	movs	r2, #32
 8003a84:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_EXT_GAIN_GPIO_Port, &GPIO_InitStruct);
 8003a86:	a904      	add	r1, sp, #16
 8003a88:	480b      	ldr	r0, [pc, #44]	; (8003ab8 <HAL_OPAMP_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_OPAMP2_EXT_GAIN_Pin;
 8003a8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_OPAMP2_EXT_GAIN_GPIO_Port, &GPIO_InitStruct);
 8003a90:	f001 fb24 	bl	80050dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003a94:	2201      	movs	r2, #1
 8003a96:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003a98:	4808      	ldr	r0, [pc, #32]	; (8003abc <HAL_OPAMP_MspInit+0xd4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003a9c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003a9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003aa2:	f001 fb1b 	bl	80050dc <HAL_GPIO_Init>
}
 8003aa6:	b00b      	add	sp, #44	; 0x2c
 8003aa8:	bd30      	pop	{r4, r5, pc}
 8003aaa:	bf00      	nop
 8003aac:	40010300 	.word	0x40010300
 8003ab0:	40010304 	.word	0x40010304
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	48000400 	.word	0x48000400

08003ac0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_TIM_Base_MspInit+0x28>)
 8003ac2:	6802      	ldr	r2, [r0, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d000      	beq.n	8003aca <HAL_TIM_Base_MspInit+0xa>
 8003ac8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003aca:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 8003ace:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	661a      	str	r2, [r3, #96]	; 0x60
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ae2:	b002      	add	sp, #8
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00

08003aec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003aec:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8003aee:	6801      	ldr	r1, [r0, #0]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_Encoder_MspInit+0x68>)
{
 8003af2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003af6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003afc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b00:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8003b02:	d001      	beq.n	8003b08 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b04:	b009      	add	sp, #36	; 0x24
 8003b06:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b10:	4811      	ldr	r0, [pc, #68]	; (8003b58 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b14:	f042 0204 	orr.w	r2, r2, #4
 8003b18:	659a      	str	r2, [r3, #88]	; 0x58
 8003b1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b1c:	f002 0204 	and.w	r2, r2, #4
 8003b20:	9200      	str	r2, [sp, #0]
 8003b22:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b26:	f042 0202 	orr.w	r2, r2, #2
 8003b2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b34:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b36:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b38:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003b40:	24c0      	movs	r4, #192	; 0xc0
 8003b42:	2502      	movs	r5, #2
 8003b44:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003b48:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4c:	f001 fac6 	bl	80050dc <HAL_GPIO_Init>
}
 8003b50:	b009      	add	sp, #36	; 0x24
 8003b52:	bd30      	pop	{r4, r5, pc}
 8003b54:	40000800 	.word	0x40000800
 8003b58:	48000400 	.word	0x48000400

08003b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b5c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003b5e:	6801      	ldr	r1, [r0, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_TIM_MspPostInit+0x58>)
{
 8003b62:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003b66:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003b6c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b70:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003b72:	d001      	beq.n	8003b78 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b74:	b009      	add	sp, #36	; 0x24
 8003b76:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b7c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b80:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b84:	f042 0210 	orr.w	r2, r2, #16
 8003b88:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003b92:	2302      	movs	r3, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b94:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003b96:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VL_Pin|M1_PWM_VH_Pin
 8003b98:	2202      	movs	r2, #2
 8003b9a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b9c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VL_Pin|M1_PWM_VH_Pin
 8003b9e:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
 8003ba2:	2502      	movs	r5, #2
 8003ba4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003ba8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bac:	f001 fa96 	bl	80050dc <HAL_GPIO_Init>
}
 8003bb0:	b009      	add	sp, #36	; 0x24
 8003bb2:	bd30      	pop	{r4, r5, pc}
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	48001000 	.word	0x48001000

08003bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bbc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003bbe:	6802      	ldr	r2, [r0, #0]
 8003bc0:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <HAL_UART_MspInit+0xc8>)
{
 8003bc2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8003bc6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003bcc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003bd0:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8003bd2:	d001      	beq.n	8003bd8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bd4:	b008      	add	sp, #32
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bd8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003bdc:	4e2a      	ldr	r6, [pc, #168]	; (8003c88 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
 8003be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003be8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003bec:	9200      	str	r2, [sp, #0]
 8003bee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003c00:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003c04:	2302      	movs	r3, #2
 8003c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c12:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c14:	2307      	movs	r3, #7
 8003c16:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c18:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c1a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c20:	f001 fa5c 	bl	80050dc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003c24:	4919      	ldr	r1, [pc, #100]	; (8003c8c <HAL_UART_MspInit+0xd0>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c26:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003c28:	2218      	movs	r2, #24
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c2a:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c2c:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c2e:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c32:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003c36:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3a:	60f4      	str	r4, [r6, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c3c:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c3e:	f001 f9b5 	bl	8004fac <HAL_DMA_Init>
 8003c42:	b9c0      	cbnz	r0, 8003c76 <HAL_UART_MspInit+0xba>
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8003c44:	4c12      	ldr	r4, [pc, #72]	; (8003c90 <HAL_UART_MspInit+0xd4>)
 8003c46:	4813      	ldr	r0, [pc, #76]	; (8003c94 <HAL_UART_MspInit+0xd8>)
 8003c48:	6020      	str	r0, [r4, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003c4a:	2319      	movs	r3, #25
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c4c:	2110      	movs	r1, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c4e:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003c50:	6063      	str	r3, [r4, #4]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c52:	67ee      	str	r6, [r5, #124]	; 0x7c
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c54:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c56:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c58:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c5c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c60:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c64:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c66:	60a1      	str	r1, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c68:	f001 f9a0 	bl	8004fac <HAL_DMA_Init>
 8003c6c:	b930      	cbnz	r0, 8003c7c <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003c6e:	67ac      	str	r4, [r5, #120]	; 0x78
 8003c70:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8003c72:	b008      	add	sp, #32
 8003c74:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003c76:	f7fd fbcb 	bl	8001410 <Error_Handler>
 8003c7a:	e7e3      	b.n	8003c44 <HAL_UART_MspInit+0x88>
      Error_Handler();
 8003c7c:	f7fd fbc8 	bl	8001410 <Error_Handler>
 8003c80:	e7f5      	b.n	8003c6e <HAL_UART_MspInit+0xb2>
 8003c82:	bf00      	nop
 8003c84:	40013800 	.word	0x40013800
 8003c88:	20000810 	.word	0x20000810
 8003c8c:	4002001c 	.word	0x4002001c
 8003c90:	20000744 	.word	0x20000744
 8003c94:	40020030 	.word	0x40020030

08003c98 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c9c:	2240      	movs	r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  TSK_HighFrequencyTask();
 8003ca0:	f7fe b862 	b.w	8001d68 <TSK_HighFrequencyTask>

08003ca4 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003ca6:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003ca8:	f06f 0201 	mvn.w	r2, #1
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	f005 b819 	b.w	8008ce4 <R3_2_TIMx_UP_IRQHandler>
 8003cb2:	bf00      	nop
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	2000030c 	.word	0x2000030c

08003cbc <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003cbc:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	0611      	lsls	r1, r2, #24
 8003cc4:	d505      	bpl.n	8003cd2 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003cc6:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8003cca:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	f005 f86d 	bl	8008dac <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	05d2      	lsls	r2, r2, #23
 8003cd8:	d505      	bpl.n	8003ce6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003cda:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8003cde:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003ce0:	611a      	str	r2, [r3, #16]
 8003ce2:	f005 f841 	bl	8008d68 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003cea:	f7fd bff5 	b.w	8001cd8 <MC_Scheduler>
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	2000030c 	.word	0x2000030c

08003cf8 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8003cf8:	4806      	ldr	r0, [pc, #24]	; (8003d14 <TIM4_IRQHandler+0x1c>)
 8003cfa:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	07d1      	lsls	r1, r2, #31
 8003d00:	d502      	bpl.n	8003d08 <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	07d2      	lsls	r2, r2, #31
 8003d06:	d400      	bmi.n	8003d0a <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003d08:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003d0a:	f06f 0201 	mvn.w	r2, #1
 8003d0e:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8003d10:	f003 bec0 	b.w	8007a94 <ENC_IRQHandler>
 8003d14:	200000dc 	.word	0x200000dc

08003d18 <DMA1_Channel2_IRQHandler>:
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL);
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <DMA1_Channel2_IRQHandler+0x14>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	0692      	lsls	r2, r2, #26
 8003d1e:	d400      	bmi.n	8003d22 <DMA1_Channel2_IRQHandler+0xa>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 8003d20:	4770      	bx	lr
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003d22:	2220      	movs	r2, #32
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003d24:	4802      	ldr	r0, [pc, #8]	; (8003d30 <DMA1_Channel2_IRQHandler+0x18>)
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	f7fc bf20 	b.w	8000b6c <ASPEP_HWDataReceivedIT>
 8003d2c:	40020000 	.word	0x40020000
 8003d30:	200004bc 	.word	0x200004bc

08003d34 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <USART1_IRQHandler+0x98>)
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	d509      	bpl.n	8003d52 <USART1_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003d3e:	4924      	ldr	r1, [pc, #144]	; (8003dd0 <USART1_IRQHandler+0x9c>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003d40:	4824      	ldr	r0, [pc, #144]	; (8003dd4 <USART1_IRQHandler+0xa0>)
 8003d42:	680a      	ldr	r2, [r1, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003d44:	2440      	movs	r4, #64	; 0x40
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	600a      	str	r2, [r1, #0]
 8003d4c:	621c      	str	r4, [r3, #32]
 8003d4e:	f7fc fd67 	bl	8000820 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003d52:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <USART1_IRQHandler+0x98>)
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	0711      	lsls	r1, r2, #28
 8003d58:	d402      	bmi.n	8003d60 <USART1_IRQHandler+0x2c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	0792      	lsls	r2, r2, #30
 8003d5e:	d52c      	bpl.n	8003dba <USART1_IRQHandler+0x86>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003d60:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <USART1_IRQHandler+0x98>)
 8003d62:	689a      	ldr	r2, [r3, #8]
   // LL_GPIO_ResetOutputPin( GPIOC , LL_GPIO_PIN_6  );
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003d64:	07d0      	lsls	r0, r2, #31
 8003d66:	d41d      	bmi.n	8003da4 <USART1_IRQHandler+0x70>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <USART1_IRQHandler+0x98>)
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	06d1      	lsls	r1, r2, #27
 8003d6e:	d518      	bpl.n	8003da2 <USART1_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	06d2      	lsls	r2, r2, #27
 8003d74:	d515      	bpl.n	8003da2 <USART1_IRQHandler+0x6e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003d76:	681a      	ldr	r2, [r3, #0]
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003d78:	4816      	ldr	r0, [pc, #88]	; (8003dd4 <USART1_IRQHandler+0xa0>)
 8003d7a:	f022 0210 	bic.w	r2, r2, #16
 8003d7e:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8e:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 8003d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d9c:	609a      	str	r2, [r3, #8]
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003d9e:	f7fc bf35 	b.w	8000c0c <ASPEP_HWDMAReset>
}
 8003da2:	bd10      	pop	{r4, pc}
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8003da4:	220e      	movs	r2, #14
 8003da6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	f042 0210 	orr.w	r2, r2, #16
 8003db6:	601a      	str	r2, [r3, #0]
}
 8003db8:	e7d6      	b.n	8003d68 <USART1_IRQHandler+0x34>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	075c      	lsls	r4, r3, #29
 8003dbe:	d5d3      	bpl.n	8003d68 <USART1_IRQHandler+0x34>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <USART1_IRQHandler+0x98>)
 8003dc2:	689a      	ldr	r2, [r3, #8]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003dc4:	07d0      	lsls	r0, r2, #31
 8003dc6:	d5cf      	bpl.n	8003d68 <USART1_IRQHandler+0x34>
 8003dc8:	e7ec      	b.n	8003da4 <USART1_IRQHandler+0x70>
 8003dca:	bf00      	nop
 8003dcc:	40013800 	.word	0x40013800
 8003dd0:	40020030 	.word	0x40020030
 8003dd4:	200004bc 	.word	0x200004bc

08003dd8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003dd8:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003dda:	f7fe f8cb 	bl	8001f74 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003dde:	e7fe      	b.n	8003dde <HardFault_Handler+0x6>

08003de0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003de0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003de2:	4c0a      	ldr	r4, [pc, #40]	; (8003e0c <SysTick_Handler+0x2c>)
 8003de4:	7823      	ldrb	r3, [r4, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d006      	beq.n	8003df8 <SysTick_Handler+0x18>
 8003dea:	3301      	adds	r3, #1
 8003dec:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003dee:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003df4:	f7fe b8b2 	b.w	8001f5c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003df8:	f000 f8b4 	bl	8003f64 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003dfc:	f001 f8d2 	bl	8004fa4 <HAL_SYSTICK_IRQHandler>
 8003e00:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003e02:	7023      	strb	r3, [r4, #0]
}
 8003e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003e08:	f7fe b8a8 	b.w	8001f5c <MC_RunMotorControlTasks>
 8003e0c:	20000534 	.word	0x20000534

08003e10 <UASPEP_INIT>:
}

void UASPEP_DAMCONFIG_TX (UASPEP_Handle_t *pHandle)
{
/* Enable DMA UART */
 LL_USART_ClearFlag_TC (pHandle->USARTx);
 8003e10:	6803      	ldr	r3, [r0, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003e12:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003e16:	2140      	movs	r1, #64	; 0x40
{
 8003e18:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003e1a:	6906      	ldr	r6, [r0, #16]
 8003e1c:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4c11      	ldr	r4, [pc, #68]	; (8003e68 <UASPEP_INIT+0x58>)
 8003e22:	6885      	ldr	r5, [r0, #8]
 8003e24:	5da7      	ldrb	r7, [r4, r6]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003e26:	f814 400c 	ldrb.w	r4, [r4, ip]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003e2e:	689e      	ldr	r6, [r3, #8]
 8003e30:	6842      	ldr	r2, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003e32:	19e8      	adds	r0, r5, r7
 8003e34:	f046 0580 	orr.w	r5, r6, #128	; 0x80
/* Enable DMA UART to start the TX request */
 LL_USART_EnableDMAReq_TX (pHandle->USARTx);

/* Write the USART_TDR register address in the DMA control register to configure it as
the destination of the transfer. */
  LL_DMA_SetPeriphAddress ( pHandle->txDMA, pHandle->txChannel , ( uint32_t ) &pHandle->USARTx->TDR );
 8003e38:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8003e3c:	609d      	str	r5, [r3, #8]
 8003e3e:	6086      	str	r6, [r0, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003e40:	6219      	str	r1, [r3, #32]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003e42:	5910      	ldr	r0, [r2, r4]
 8003e44:	f040 0002 	orr.w	r0, r0, #2
 8003e48:	5110      	str	r0, [r2, r4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003e4a:	6898      	ldr	r0, [r3, #8]
 8003e4c:	4422      	add	r2, r4
 8003e4e:	f040 0001 	orr.w	r0, r0, #1
  /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
 LL_USART_EnableIT_ERROR (pHandle->USARTx);

/* Write the USART_RDR register address in the DMA control register to configure it as
the source of the transfer. */
 LL_DMA_SetPeriphAddress ( pHandle->rxDMA, pHandle->rxChannel , ( uint32_t ) &pHandle->USARTx->RDR );
 8003e52:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8003e56:	6098      	str	r0, [r3, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003e58:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003e5a:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	430a      	orrs	r2, r1
}
 8003e60:	bcf0      	pop	{r4, r5, r6, r7}
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	08009e28 	.word	0x08009e28

08003e6c <UASPEP_SEND_PACKET>:

 LL_USART_EnableDMAReq_RX (pHandle->USARTx);
}

bool UASPEP_SEND_PACKET (void *pHWHandle, void *data, uint16_t length)
{
 8003e6c:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003e6e:	6903      	ldr	r3, [r0, #16]
 8003e70:	4c0b      	ldr	r4, [pc, #44]	; (8003ea0 <UASPEP_SEND_PACKET+0x34>)
 8003e72:	6880      	ldr	r0, [r0, #8]
 8003e74:	5ce3      	ldrb	r3, [r4, r3]
 8003e76:	58c4      	ldr	r4, [r0, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  bool result;
  if ( LL_DMA_IsEnabledChannel (pHandle->txDMA, pHandle->txChannel) )
 8003e78:	07e4      	lsls	r4, r4, #31
 8003e7a:	eb00 0503 	add.w	r5, r0, r3
 8003e7e:	d40c      	bmi.n	8003e9a <UASPEP_SEND_PACKET+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003e80:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003e82:	6869      	ldr	r1, [r5, #4]
 8003e84:	0c09      	lsrs	r1, r1, #16
 8003e86:	0409      	lsls	r1, r1, #16
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003e8c:	58c2      	ldr	r2, [r0, r3]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	50c2      	str	r2, [r0, r3]
    LL_DMA_SetDataLength( pHandle->txDMA, pHandle->txChannel, length );
    LL_DMA_EnableChannel( pHandle->txDMA, pHandle->txChannel );
   result = true;
  }
  return result;
}
 8003e94:	bc30      	pop	{r4, r5}
   result = true;
 8003e96:	2001      	movs	r0, #1
}
 8003e98:	4770      	bx	lr
    result = false;
 8003e9a:	2000      	movs	r0, #0
}
 8003e9c:	bc30      	pop	{r4, r5}
 8003e9e:	4770      	bx	lr
 8003ea0:	08009e28 	.word	0x08009e28

08003ea4 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER (void *pHWHandle, void* buffer, uint16_t length)
{
 8003ea4:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003ea6:	68c3      	ldr	r3, [r0, #12]
 8003ea8:	4d09      	ldr	r5, [pc, #36]	; (8003ed0 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8003eaa:	6844      	ldr	r4, [r0, #4]
 8003eac:	5ce8      	ldrb	r0, [r5, r3]
 8003eae:	5823      	ldr	r3, [r4, r0]
 8003eb0:	1825      	adds	r5, r4, r0
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003eb8:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003eba:	686b      	ldr	r3, [r5, #4]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003ec4:	5823      	ldr	r3, [r4, r0]
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  LL_DMA_DisableChannel( pHandle->rxDMA, pHandle->rxChannel );
  LL_DMA_SetMemoryAddress( pHandle->rxDMA, pHandle->rxChannel, (uint32_t) buffer );
  LL_DMA_SetDataLength(  pHandle->rxDMA, pHandle->rxChannel, length );
  LL_DMA_EnableChannel(  pHandle->rxDMA, pHandle->rxChannel );
}
 8003ecc:	bc30      	pop	{r4, r5}
 8003ece:	4770      	bx	lr
 8003ed0:	08009e28 	.word	0x08009e28

08003ed4 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE (void *pHWHandle)
{
   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
   LL_USART_ClearFlag_IDLE (pHandle->USARTx);
 8003ed4:	6803      	ldr	r3, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	621a      	str	r2, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f042 0210 	orr.w	r2, r2, #16
 8003ee0:	601a      	str	r2, [r3, #0]
   LL_USART_EnableIT_IDLE (pHandle->USARTx);
}
 8003ee2:	4770      	bx	lr

08003ee4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ee4:	4a03      	ldr	r2, [pc, #12]	; (8003ef4 <SystemInit+0x10>)
 8003ee6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003eea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ef8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_InitTick+0x40>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b90b      	cbnz	r3, 8003f04 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f00:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f04:	490d      	ldr	r1, [pc, #52]	; (8003f3c <HAL_InitTick+0x44>)
 8003f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	6808      	ldr	r0, [r1, #0]
 8003f12:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f16:	f001 f829 	bl	8004f6c <HAL_SYSTICK_Config>
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d1ef      	bne.n	8003f00 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f20:	2d0f      	cmp	r5, #15
 8003f22:	d8ed      	bhi.n	8003f00 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f24:	4602      	mov	r2, r0
 8003f26:	4629      	mov	r1, r5
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	f000 ffd8 	bl	8004ee0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_InitTick+0x48>)
 8003f32:	4620      	mov	r0, r4
 8003f34:	601d      	str	r5, [r3, #0]
}
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	2000053c 	.word	0x2000053c
 8003f3c:	20000538 	.word	0x20000538
 8003f40:	20000540 	.word	0x20000540

08003f44 <HAL_Init>:
{
 8003f44:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f46:	2003      	movs	r0, #3
 8003f48:	f000 ffb6 	bl	8004eb8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f4c:	2004      	movs	r0, #4
 8003f4e:	f7ff ffd3 	bl	8003ef8 <HAL_InitTick>
 8003f52:	b110      	cbz	r0, 8003f5a <HAL_Init+0x16>
    status = HAL_ERROR;
 8003f54:	2401      	movs	r4, #1
}
 8003f56:	4620      	mov	r0, r4
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	4604      	mov	r4, r0
    HAL_MspInit();
 8003f5c:	f7ff fbf8 	bl	8003750 <HAL_MspInit>
}
 8003f60:	4620      	mov	r0, r4
 8003f62:	bd10      	pop	{r4, pc}

08003f64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f64:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <HAL_IncTick+0x10>)
 8003f66:	4904      	ldr	r1, [pc, #16]	; (8003f78 <HAL_IncTick+0x14>)
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	6809      	ldr	r1, [r1, #0]
 8003f6c:	440b      	add	r3, r1
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20001cf8 	.word	0x20001cf8
 8003f78:	2000053c 	.word	0x2000053c

08003f7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f7c:	4b01      	ldr	r3, [pc, #4]	; (8003f84 <HAL_GetTick+0x8>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20001cf8 	.word	0x20001cf8

08003f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f90:	2800      	cmp	r0, #0
 8003f92:	f000 80cb 	beq.w	800412c <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f96:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003f98:	4604      	mov	r4, r0
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	f000 8094 	beq.w	80040c8 <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fa0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fa2:	6893      	ldr	r3, [r2, #8]
 8003fa4:	009d      	lsls	r5, r3, #2
 8003fa6:	d505      	bpl.n	8003fb4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fa8:	6893      	ldr	r3, [r2, #8]
 8003faa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fb2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fb4:	6893      	ldr	r3, [r2, #8]
 8003fb6:	00d8      	lsls	r0, r3, #3
 8003fb8:	d419      	bmi.n	8003fee <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fba:	4b71      	ldr	r3, [pc, #452]	; (8004180 <HAL_ADC_Init+0x1f8>)
 8003fbc:	4871      	ldr	r0, [pc, #452]	; (8004184 <HAL_ADC_Init+0x1fc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003fc0:	6891      	ldr	r1, [r2, #8]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	fba0 0303 	umull	r0, r3, r0, r3
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003fda:	6091      	str	r1, [r2, #8]
 8003fdc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	b12b      	cbz	r3, 8003fee <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f9      	bne.n	8003fe2 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fee:	6893      	ldr	r3, [r2, #8]
 8003ff0:	00d9      	lsls	r1, r3, #3
 8003ff2:	d45b      	bmi.n	80040ac <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ff6:	f043 0310 	orr.w	r3, r3, #16
 8003ffa:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004004:	6893      	ldr	r3, [r2, #8]
 8004006:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 800400a:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800400e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004010:	d153      	bne.n	80040ba <HAL_ADC_Init+0x132>
 8004012:	06db      	lsls	r3, r3, #27
 8004014:	d451      	bmi.n	80040ba <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004016:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004018:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004022:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004024:	07de      	lsls	r6, r3, #31
 8004026:	d40e      	bmi.n	8004046 <HAL_ADC_Init+0xbe>
 8004028:	4b57      	ldr	r3, [pc, #348]	; (8004188 <HAL_ADC_Init+0x200>)
 800402a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800402e:	6889      	ldr	r1, [r1, #8]
 8004030:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004032:	430b      	orrs	r3, r1
 8004034:	07dd      	lsls	r5, r3, #31
 8004036:	d406      	bmi.n	8004046 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004038:	4954      	ldr	r1, [pc, #336]	; (800418c <HAL_ADC_Init+0x204>)
 800403a:	6865      	ldr	r5, [r4, #4]
 800403c:	688b      	ldr	r3, [r1, #8]
 800403e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004042:	432b      	orrs	r3, r5
 8004044:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004046:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 800404a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800404c:	432b      	orrs	r3, r5
 800404e:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004050:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004052:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004056:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800405a:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800405c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004060:	d05f      	beq.n	8004122 <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004062:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004064:	b121      	cbz	r1, 8004070 <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004066:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004068:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800406c:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800406e:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004070:	68d6      	ldr	r6, [r2, #12]
 8004072:	4947      	ldr	r1, [pc, #284]	; (8004190 <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004074:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004076:	4031      	ands	r1, r6
 8004078:	430b      	orrs	r3, r1
 800407a:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800407c:	6913      	ldr	r3, [r2, #16]
 800407e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004082:	432b      	orrs	r3, r5
 8004084:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004086:	6893      	ldr	r3, [r2, #8]
 8004088:	0759      	lsls	r1, r3, #29
 800408a:	d523      	bpl.n	80040d4 <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800408c:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800408e:	6963      	ldr	r3, [r4, #20]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d04e      	beq.n	8004132 <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004094:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004096:	f023 030f 	bic.w	r3, r3, #15
 800409a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800409c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80040a8:	b002      	add	sp, #8
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040ac:	6893      	ldr	r3, [r2, #8]
 80040ae:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b2:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80040b8:	d0ab      	beq.n	8004012 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80040bc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040be:	f043 0310 	orr.w	r3, r3, #16
 80040c2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80040c4:	b002      	add	sp, #8
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80040c8:	f7ff fb62 	bl	8003790 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80040cc:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80040ce:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80040d2:	e765      	b.n	8003fa0 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040d4:	6893      	ldr	r3, [r2, #8]
 80040d6:	071b      	lsls	r3, r3, #28
 80040d8:	d4d9      	bmi.n	800408e <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040da:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040e0:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 80040e2:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040e4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040e8:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040ea:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80040ee:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040f2:	430b      	orrs	r3, r1
 80040f4:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80040f6:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80040f8:	bb1d      	cbnz	r5, 8004142 <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004100:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004104:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800410c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004110:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004114:	2b01      	cmp	r3, #1
 8004116:	d021      	beq.n	800415c <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004118:	6913      	ldr	r3, [r2, #16]
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6113      	str	r3, [r2, #16]
 8004120:	e7b5      	b.n	800408e <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004122:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004124:	3901      	subs	r1, #1
 8004126:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800412a:	e79a      	b.n	8004062 <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 800412c:	2001      	movs	r0, #1
}
 800412e:	b002      	add	sp, #8
 8004130:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004132:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004134:	6a23      	ldr	r3, [r4, #32]
 8004136:	f021 010f 	bic.w	r1, r1, #15
 800413a:	3b01      	subs	r3, #1
 800413c:	430b      	orrs	r3, r1
 800413e:	6313      	str	r3, [r2, #48]	; 0x30
 8004140:	e7ac      	b.n	800409c <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004146:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004148:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800414c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004150:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004154:	432b      	orrs	r3, r5
 8004156:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800415a:	e7d9      	b.n	8004110 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 800415c:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8004160:	6911      	ldr	r1, [r2, #16]
 8004162:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004164:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004168:	f021 0104 	bic.w	r1, r1, #4
 800416c:	4333      	orrs	r3, r6
 800416e:	430b      	orrs	r3, r1
 8004170:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004172:	432b      	orrs	r3, r5
 8004174:	430b      	orrs	r3, r1
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6113      	str	r3, [r2, #16]
 800417c:	e787      	b.n	800408e <HAL_ADC_Init+0x106>
 800417e:	bf00      	nop
 8004180:	20000538 	.word	0x20000538
 8004184:	053e2d63 	.word	0x053e2d63
 8004188:	50000100 	.word	0x50000100
 800418c:	50000300 	.word	0x50000300
 8004190:	fff04007 	.word	0xfff04007

08004194 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004194:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004196:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800419a:	b083      	sub	sp, #12
 800419c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800419e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80041a0:	f04f 0000 	mov.w	r0, #0
 80041a4:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80041a6:	f000 8143 	beq.w	8004430 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041aa:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041b2:	6894      	ldr	r4, [r2, #8]
 80041b4:	0766      	lsls	r6, r4, #29
 80041b6:	d43d      	bmi.n	8004234 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 80041b8:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041bc:	09a6      	lsrs	r6, r4, #6
 80041be:	f102 0530 	add.w	r5, r2, #48	; 0x30
 80041c2:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80041c6:	f004 041f 	and.w	r4, r4, #31
 80041ca:	5977      	ldr	r7, [r6, r5]
 80041cc:	f04f 0c1f 	mov.w	ip, #31
 80041d0:	fa0c fc04 	lsl.w	ip, ip, r4
 80041d4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80041d8:	ea27 070c 	bic.w	r7, r7, ip
 80041dc:	40a0      	lsls	r0, r4
 80041de:	4338      	orrs	r0, r7
 80041e0:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041e2:	6890      	ldr	r0, [r2, #8]
 80041e4:	0745      	lsls	r5, r0, #29
 80041e6:	f140 809a 	bpl.w	800431e <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041ea:	6890      	ldr	r0, [r2, #8]
 80041ec:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041ee:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f0:	07e4      	lsls	r4, r4, #31
 80041f2:	d530      	bpl.n	8004256 <HAL_ADC_ConfigChannel+0xc2>
 80041f4:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041f6:	49c2      	ldr	r1, [pc, #776]	; (8004500 <HAL_ADC_ConfigChannel+0x36c>)
 80041f8:	420c      	tst	r4, r1
 80041fa:	d02a      	beq.n	8004252 <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80041fc:	49c1      	ldr	r1, [pc, #772]	; (8004504 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80041fe:	4dc2      	ldr	r5, [pc, #776]	; (8004508 <HAL_ADC_ConfigChannel+0x374>)
 8004200:	6888      	ldr	r0, [r1, #8]
 8004202:	42ac      	cmp	r4, r5
 8004204:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8004208:	d01d      	beq.n	8004246 <HAL_ADC_ConfigChannel+0xb2>
 800420a:	4dc0      	ldr	r5, [pc, #768]	; (800450c <HAL_ADC_ConfigChannel+0x378>)
 800420c:	42ac      	cmp	r4, r5
 800420e:	d01a      	beq.n	8004246 <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004210:	4dbf      	ldr	r5, [pc, #764]	; (8004510 <HAL_ADC_ConfigChannel+0x37c>)
 8004212:	42ac      	cmp	r4, r5
 8004214:	f040 813e 	bne.w	8004494 <HAL_ADC_ConfigChannel+0x300>
 8004218:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800421c:	d119      	bne.n	8004252 <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800421e:	4cbd      	ldr	r4, [pc, #756]	; (8004514 <HAL_ADC_ConfigChannel+0x380>)
 8004220:	42a2      	cmp	r2, r4
 8004222:	d016      	beq.n	8004252 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800422a:	4316      	orrs	r6, r2
 800422c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8004230:	608e      	str	r6, [r1, #8]
}
 8004232:	e003      	b.n	800423c <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004236:	f042 0220 	orr.w	r2, r2, #32
 800423a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004242:	b003      	add	sp, #12
 8004244:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004246:	0201      	lsls	r1, r0, #8
 8004248:	d403      	bmi.n	8004252 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800424a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800424e:	f000 8102 	beq.w	8004456 <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004252:	2000      	movs	r0, #0
 8004254:	e7f2      	b.n	800423c <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004256:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004258:	4caf      	ldr	r4, [pc, #700]	; (8004518 <HAL_ADC_ConfigChannel+0x384>)
 800425a:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800425e:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8004528 <HAL_ADC_ConfigChannel+0x394>
 8004262:	f006 0718 	and.w	r7, r6, #24
 8004266:	40fc      	lsrs	r4, r7
 8004268:	f3c0 0712 	ubfx	r7, r0, #0, #19
 800426c:	4004      	ands	r4, r0
 800426e:	ea25 0507 	bic.w	r5, r5, r7
 8004272:	432c      	orrs	r4, r5
 8004274:	4566      	cmp	r6, ip
 8004276:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800427a:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800427c:	d1bb      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800427e:	2f00      	cmp	r7, #0
 8004280:	f000 80d9 	beq.w	8004436 <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004284:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004288:	2c00      	cmp	r4, #0
 800428a:	f000 8181 	beq.w	8004590 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800428e:	fab4 f484 	clz	r4, r4
 8004292:	3401      	adds	r4, #1
 8004294:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004298:	2c09      	cmp	r4, #9
 800429a:	f240 8179 	bls.w	8004590 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	f000 81d7 	beq.w	8004656 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80042a8:	fab5 f585 	clz	r5, r5
 80042ac:	3501      	adds	r5, #1
 80042ae:	06ad      	lsls	r5, r5, #26
 80042b0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80042b8:	2c00      	cmp	r4, #0
 80042ba:	f000 81d1 	beq.w	8004660 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 80042be:	fab4 f484 	clz	r4, r4
 80042c2:	3401      	adds	r4, #1
 80042c4:	f004 041f 	and.w	r4, r4, #31
 80042c8:	2601      	movs	r6, #1
 80042ca:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042ce:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80042d4:	2800      	cmp	r0, #0
 80042d6:	f000 81c1 	beq.w	800465c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80042da:	fab0 f480 	clz	r4, r0
 80042de:	3401      	adds	r4, #1
 80042e0:	f004 041f 	and.w	r4, r4, #31
 80042e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80042e8:	f1a4 001e 	sub.w	r0, r4, #30
 80042ec:	0500      	lsls	r0, r0, #20
 80042ee:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042f2:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042f4:	0dc7      	lsrs	r7, r0, #23
 80042f6:	f007 0704 	and.w	r7, r7, #4
 80042fa:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 80042fe:	688e      	ldr	r6, [r1, #8]
 8004300:	597c      	ldr	r4, [r7, r5]
 8004302:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004306:	f04f 0c07 	mov.w	ip, #7
 800430a:	fa0c fc00 	lsl.w	ip, ip, r0
 800430e:	ea24 040c 	bic.w	r4, r4, ip
 8004312:	fa06 f000 	lsl.w	r0, r6, r0
 8004316:	4320      	orrs	r0, r4
 8004318:	5178      	str	r0, [r7, r5]
 800431a:	680c      	ldr	r4, [r1, #0]
}
 800431c:	e76b      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800431e:	6890      	ldr	r0, [r2, #8]
 8004320:	f010 0008 	ands.w	r0, r0, #8
 8004324:	f040 8082 	bne.w	800442c <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004328:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800432a:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800432c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004330:	f000 80c4 	beq.w	80044bc <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004334:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8004338:	f00c 0c04 	and.w	ip, ip, #4
 800433c:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8004340:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004344:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004348:	f04f 0e07 	mov.w	lr, #7
 800434c:	fa0e fe06 	lsl.w	lr, lr, r6
 8004350:	40b4      	lsls	r4, r6
 8004352:	ea25 050e 	bic.w	r5, r5, lr
 8004356:	432c      	orrs	r4, r5
 8004358:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800435c:	6954      	ldr	r4, [r2, #20]
 800435e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004362:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004364:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004368:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800436a:	f1bc 0f04 	cmp.w	ip, #4
 800436e:	d02e      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004370:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8004374:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 800452c <HAL_ADC_ConfigChannel+0x398>
 8004378:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 800437c:	680f      	ldr	r7, [r1, #0]
 800437e:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004382:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004386:	694d      	ldr	r5, [r1, #20]
 8004388:	0076      	lsls	r6, r6, #1
 800438a:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 800438e:	40b5      	lsls	r5, r6
 8004390:	ea47 070e 	orr.w	r7, r7, lr
 8004394:	433d      	orrs	r5, r7
 8004396:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800439a:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800439e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80043a0:	698e      	ldr	r6, [r1, #24]
 80043a2:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 80043a6:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80043aa:	4335      	orrs	r5, r6
 80043ac:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80043b0:	690e      	ldr	r6, [r1, #16]
 80043b2:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 80043b4:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 80043b8:	2f01      	cmp	r7, #1
 80043ba:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80043be:	bf08      	it	eq
 80043c0:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 80043c4:	4328      	orrs	r0, r5
 80043c6:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80043ca:	6808      	ldr	r0, [r1, #0]
}
 80043cc:	e70f      	b.n	80041ee <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ce:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043d0:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80043d2:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80043d4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043d8:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043dc:	2d00      	cmp	r5, #0
 80043de:	f040 80a7 	bne.w	8004530 <HAL_ADC_ConfigChannel+0x39c>
 80043e2:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043e6:	42ac      	cmp	r4, r5
 80043e8:	f000 8119 	beq.w	800461e <HAL_ADC_ConfigChannel+0x48a>
 80043ec:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80043ee:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f0:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043f4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80043f8:	f102 0764 	add.w	r7, r2, #100	; 0x64
 80043fc:	42ae      	cmp	r6, r5
 80043fe:	f000 80fc 	beq.w	80045fa <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004402:	68a6      	ldr	r6, [r4, #8]
 8004404:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004406:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800440a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800440e:	42ae      	cmp	r6, r5
 8004410:	f000 80e2 	beq.w	80045d8 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004414:	68e6      	ldr	r6, [r4, #12]
 8004416:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004418:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800441a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800441e:	42b5      	cmp	r5, r6
 8004420:	f47f aee5 	bne.w	80041ee <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8004424:	6820      	ldr	r0, [r4, #0]
 8004426:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800442a:	6020      	str	r0, [r4, #0]
 800442c:	6808      	ldr	r0, [r1, #0]
}
 800442e:	e6de      	b.n	80041ee <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8004430:	2002      	movs	r0, #2
}
 8004432:	b003      	add	sp, #12
 8004434:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004436:	0e80      	lsrs	r0, r0, #26
 8004438:	1c44      	adds	r4, r0, #1
 800443a:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800443e:	2e09      	cmp	r6, #9
 8004440:	d850      	bhi.n	80044e4 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004442:	06a5      	lsls	r5, r4, #26
 8004444:	2401      	movs	r4, #1
 8004446:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800444a:	40b4      	lsls	r4, r6
 800444c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004450:	4325      	orrs	r5, r4
 8004452:	0500      	lsls	r0, r0, #20
 8004454:	e74d      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004456:	482b      	ldr	r0, [pc, #172]	; (8004504 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004458:	4a30      	ldr	r2, [pc, #192]	; (800451c <HAL_ADC_ConfigChannel+0x388>)
 800445a:	6881      	ldr	r1, [r0, #8]
 800445c:	4c30      	ldr	r4, [pc, #192]	; (8004520 <HAL_ADC_ConfigChannel+0x38c>)
 800445e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004462:	430e      	orrs	r6, r1
 8004464:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8004468:	6086      	str	r6, [r0, #8]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	0992      	lsrs	r2, r2, #6
 800446e:	fba4 1202 	umull	r1, r2, r4, r2
 8004472:	0992      	lsrs	r2, r2, #6
 8004474:	3201      	adds	r2, #1
 8004476:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800447a:	0092      	lsls	r2, r2, #2
 800447c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800447e:	9a01      	ldr	r2, [sp, #4]
 8004480:	2a00      	cmp	r2, #0
 8004482:	f43f aee6 	beq.w	8004252 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8004486:	9a01      	ldr	r2, [sp, #4]
 8004488:	3a01      	subs	r2, #1
 800448a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800448c:	9a01      	ldr	r2, [sp, #4]
 800448e:	2a00      	cmp	r2, #0
 8004490:	d1f9      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x2f2>
 8004492:	e6de      	b.n	8004252 <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004494:	4d23      	ldr	r5, [pc, #140]	; (8004524 <HAL_ADC_ConfigChannel+0x390>)
 8004496:	42ac      	cmp	r4, r5
 8004498:	f47f aedb 	bne.w	8004252 <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800449c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80044a0:	f47f aed7 	bne.w	8004252 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 80044a4:	4c1b      	ldr	r4, [pc, #108]	; (8004514 <HAL_ADC_ConfigChannel+0x380>)
 80044a6:	42a2      	cmp	r2, r4
 80044a8:	f43f aed3 	beq.w	8004252 <HAL_ADC_ConfigChannel+0xbe>
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80044b2:	4332      	orrs	r2, r6
 80044b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80044b8:	608a      	str	r2, [r1, #8]
}
 80044ba:	e6bf      	b.n	800423c <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044bc:	0df5      	lsrs	r5, r6, #23
 80044be:	f102 0414 	add.w	r4, r2, #20
 80044c2:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80044c6:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80044ca:	592f      	ldr	r7, [r5, r4]
 80044cc:	f04f 0c07 	mov.w	ip, #7
 80044d0:	fa0c f606 	lsl.w	r6, ip, r6
 80044d4:	ea27 0606 	bic.w	r6, r7, r6
 80044d8:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80044da:	6954      	ldr	r4, [r2, #20]
 80044dc:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80044e0:	6154      	str	r4, [r2, #20]
}
 80044e2:	e73f      	b.n	8004364 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044e4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80044e8:	06a5      	lsls	r5, r4, #26
 80044ea:	381e      	subs	r0, #30
 80044ec:	2401      	movs	r4, #1
 80044ee:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80044f2:	fa04 f606 	lsl.w	r6, r4, r6
 80044f6:	0500      	lsls	r0, r0, #20
 80044f8:	4335      	orrs	r5, r6
 80044fa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80044fe:	e6f8      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x15e>
 8004500:	80080000 	.word	0x80080000
 8004504:	50000300 	.word	0x50000300
 8004508:	c3210000 	.word	0xc3210000
 800450c:	90c00010 	.word	0x90c00010
 8004510:	c7520000 	.word	0xc7520000
 8004514:	50000100 	.word	0x50000100
 8004518:	0007ffff 	.word	0x0007ffff
 800451c:	20000538 	.word	0x20000538
 8004520:	053e2d63 	.word	0x053e2d63
 8004524:	cb840000 	.word	0xcb840000
 8004528:	407f0000 	.word	0x407f0000
 800452c:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004534:	b11d      	cbz	r5, 800453e <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8004536:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800453a:	42ac      	cmp	r4, r5
 800453c:	d06f      	beq.n	800461e <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800453e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004540:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004542:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004546:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800454a:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004552:	b11d      	cbz	r5, 800455c <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8004554:	fab5 f585 	clz	r5, r5
 8004558:	42ae      	cmp	r6, r5
 800455a:	d04e      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800455c:	68a5      	ldr	r5, [r4, #8]
 800455e:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004560:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004564:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800456c:	b11d      	cbz	r5, 8004576 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 800456e:	fab5 f585 	clz	r5, r5
 8004572:	42ae      	cmp	r6, r5
 8004574:	d030      	beq.n	80045d8 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004576:	68e5      	ldr	r5, [r4, #12]
 8004578:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800457a:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800457c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004584:	2d00      	cmp	r5, #0
 8004586:	f43f ae32 	beq.w	80041ee <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 800458a:	fab5 f585 	clz	r5, r5
 800458e:	e746      	b.n	800441e <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004594:	2d00      	cmp	r5, #0
 8004596:	d058      	beq.n	800464a <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8004598:	fab5 f585 	clz	r5, r5
 800459c:	3501      	adds	r5, #1
 800459e:	06ad      	lsls	r5, r5, #26
 80045a0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80045a8:	2c00      	cmp	r4, #0
 80045aa:	d04c      	beq.n	8004646 <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 80045ac:	fab4 f484 	clz	r4, r4
 80045b0:	3401      	adds	r4, #1
 80045b2:	f004 041f 	and.w	r4, r4, #31
 80045b6:	2601      	movs	r6, #1
 80045b8:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045bc:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d044      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 80045c6:	fab0 f480 	clz	r4, r0
 80045ca:	3401      	adds	r4, #1
 80045cc:	f004 041f 	and.w	r4, r4, #31
 80045d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80045d4:	0520      	lsls	r0, r4, #20
 80045d6:	e68c      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 80045d8:	6838      	ldr	r0, [r7, #0]
 80045da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80045de:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045e0:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045e2:	68e5      	ldr	r5, [r4, #12]
 80045e4:	68e6      	ldr	r6, [r4, #12]
 80045e6:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045ea:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045ee:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f0:	2d00      	cmp	r5, #0
 80045f2:	d1c5      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x3ec>
 80045f4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80045f8:	e711      	b.n	800441e <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 80045fa:	6838      	ldr	r0, [r7, #0]
 80045fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004600:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004602:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004604:	68a5      	ldr	r5, [r4, #8]
 8004606:	68a6      	ldr	r6, [r4, #8]
 8004608:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800460c:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004610:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004614:	2d00      	cmp	r5, #0
 8004616:	d1a7      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x3d4>
 8004618:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800461c:	e6f7      	b.n	800440e <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 800461e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004620:	4614      	mov	r4, r2
 8004622:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004626:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800462a:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800462c:	6e55      	ldr	r5, [r2, #100]	; 0x64
 800462e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8004630:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004634:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004638:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800463c:	2d00      	cmp	r5, #0
 800463e:	d186      	bne.n	800454e <HAL_ADC_ConfigChannel+0x3ba>
 8004640:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004644:	e6da      	b.n	80043fc <HAL_ADC_ConfigChannel+0x268>
 8004646:	2402      	movs	r4, #2
 8004648:	e7b8      	b.n	80045bc <HAL_ADC_ConfigChannel+0x428>
 800464a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800464e:	e7a9      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x410>
 8004650:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004654:	e64d      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x15e>
 8004656:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800465a:	e62b      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x120>
 800465c:	4801      	ldr	r0, [pc, #4]	; (8004664 <HAL_ADC_ConfigChannel+0x4d0>)
 800465e:	e648      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x15e>
 8004660:	2402      	movs	r4, #2
 8004662:	e634      	b.n	80042ce <HAL_ADC_ConfigChannel+0x13a>
 8004664:	fe500000 	.word	0xfe500000

08004668 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800466c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004670:	6944      	ldr	r4, [r0, #20]
{
 8004672:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8004674:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004676:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004678:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800467a:	f000 8187 	beq.w	800498c <HAL_ADCEx_InjectedConfigChannel+0x324>
 800467e:	2301      	movs	r3, #1
 8004680:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004684:	b1e4      	cbz	r4, 80046c0 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004686:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004688:	2b01      	cmp	r3, #1
 800468a:	d019      	beq.n	80046c0 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800468c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800468e:	2c00      	cmp	r4, #0
 8004690:	f040 8126 	bne.w	80048e0 <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004694:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004696:	2a00      	cmp	r2, #0
 8004698:	f000 8248 	beq.w	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800469c:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800469e:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80046a2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80046a4:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80046a6:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80046a8:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80046ac:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80046ae:	f005 051f 	and.w	r5, r5, #31
 80046b2:	f3c2 6484 	ubfx	r4, r2, #26, #5
 80046b6:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80046b8:	4323      	orrs	r3, r4
 80046ba:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80046bc:	6803      	ldr	r3, [r0, #0]
 80046be:	e005      	b.n	80046cc <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80046c0:	684b      	ldr	r3, [r1, #4]
 80046c2:	2b09      	cmp	r3, #9
 80046c4:	f000 80f8 	beq.w	80048b8 <HAL_ADCEx_InjectedConfigChannel+0x250>
 80046c8:	680a      	ldr	r2, [r1, #0]
 80046ca:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046cc:	689c      	ldr	r4, [r3, #8]
 80046ce:	0724      	lsls	r4, r4, #28
 80046d0:	d410      	bmi.n	80046f4 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80046d2:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80046d6:	2c00      	cmp	r4, #0
 80046d8:	f040 80e5 	bne.w	80048a6 <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80046dc:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 80046e0:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 80046e4:	68dd      	ldr	r5, [r3, #12]
 80046e6:	0524      	lsls	r4, r4, #20
 80046e8:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 80046ec:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80046f0:	432c      	orrs	r4, r5
 80046f2:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046f4:	689c      	ldr	r4, [r3, #8]
 80046f6:	f014 0404 	ands.w	r4, r4, #4
 80046fa:	d060      	beq.n	80047be <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046fc:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fe:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004700:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004702:	07ef      	lsls	r7, r5, #31
 8004704:	d414      	bmi.n	8004730 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004706:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004708:	4dbe      	ldr	r5, [pc, #760]	; (8004a04 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 800470a:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800470e:	f8df e320 	ldr.w	lr, [pc, #800]	; 8004a30 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8004712:	f007 0c18 	and.w	ip, r7, #24
 8004716:	fa25 f50c 	lsr.w	r5, r5, ip
 800471a:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 800471e:	4015      	ands	r5, r2
 8004720:	ea26 060c 	bic.w	r6, r6, ip
 8004724:	4335      	orrs	r5, r6
 8004726:	4577      	cmp	r7, lr
 8004728:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 800472c:	f000 80fd 	beq.w	800492a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004730:	49b5      	ldr	r1, [pc, #724]	; (8004a08 <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 8004732:	420a      	tst	r2, r1
 8004734:	d019      	beq.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004736:	4db5      	ldr	r5, [pc, #724]	; (8004a0c <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004738:	4eb5      	ldr	r6, [pc, #724]	; (8004a10 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 800473a:	68a9      	ldr	r1, [r5, #8]
 800473c:	42b2      	cmp	r2, r6
 800473e:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004742:	d019      	beq.n	8004778 <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004744:	4eb3      	ldr	r6, [pc, #716]	; (8004a14 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 8004746:	42b2      	cmp	r2, r6
 8004748:	d016      	beq.n	8004778 <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800474a:	4eb3      	ldr	r6, [pc, #716]	; (8004a18 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 800474c:	42b2      	cmp	r2, r6
 800474e:	f040 8126 	bne.w	800499e <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004752:	01ce      	lsls	r6, r1, #7
 8004754:	d409      	bmi.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004756:	4ab1      	ldr	r2, [pc, #708]	; (8004a1c <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d006      	beq.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800475c:	68ab      	ldr	r3, [r5, #8]
 800475e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004762:	431f      	orrs	r7, r3
 8004764:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8004768:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800476a:	2300      	movs	r3, #0
 800476c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004770:	4620      	mov	r0, r4
 8004772:	b002      	add	sp, #8
 8004774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004778:	020a      	lsls	r2, r1, #8
 800477a:	d4f6      	bmi.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800477c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004780:	d1f3      	bne.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
 8004782:	4aa2      	ldr	r2, [pc, #648]	; (8004a0c <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004784:	49a6      	ldr	r1, [pc, #664]	; (8004a20 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8004786:	6893      	ldr	r3, [r2, #8]
 8004788:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800478c:	431f      	orrs	r7, r3
 800478e:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8004792:	6097      	str	r7, [r2, #8]
 8004794:	680b      	ldr	r3, [r1, #0]
 8004796:	4aa3      	ldr	r2, [pc, #652]	; (8004a24 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	099b      	lsrs	r3, r3, #6
 80047a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	3318      	adds	r3, #24
 80047a8:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80047aa:	9b01      	ldr	r3, [sp, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0dc      	beq.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 80047b0:	9b01      	ldr	r3, [sp, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80047b6:	9b01      	ldr	r3, [sp, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f9      	bne.n	80047b0 <HAL_ADCEx_InjectedConfigChannel+0x148>
 80047bc:	e7d5      	b.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047be:	689d      	ldr	r5, [r3, #8]
 80047c0:	f015 0508 	ands.w	r5, r5, #8
 80047c4:	d19c      	bne.n	8004700 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80047c6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	f040 809f 	bne.w	800490c <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80047ce:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80047d2:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80047d4:	68dc      	ldr	r4, [r3, #12]
 80047d6:	bf0c      	ite	eq
 80047d8:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80047dc:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 80047e0:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e2:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80047e4:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 80047e8:	2e01      	cmp	r6, #1
 80047ea:	f000 80ff 	beq.w	80049ec <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80047ee:	691e      	ldr	r6, [r3, #16]
 80047f0:	f026 0602 	bic.w	r6, r6, #2
 80047f4:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047f6:	688e      	ldr	r6, [r1, #8]
 80047f8:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 80047fc:	f000 80e2 	beq.w	80049c4 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004800:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8004804:	f00e 0e04 	and.w	lr, lr, #4
 8004808:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 800480c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004810:	f85e 700c 	ldr.w	r7, [lr, ip]
 8004814:	f04f 0807 	mov.w	r8, #7
 8004818:	fa08 f802 	lsl.w	r8, r8, r2
 800481c:	4096      	lsls	r6, r2
 800481e:	ea27 0208 	bic.w	r2, r7, r8
 8004822:	4316      	orrs	r6, r2
 8004824:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800482e:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004830:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004834:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004836:	f1be 0f04 	cmp.w	lr, #4
 800483a:	f000 80fd 	beq.w	8004a38 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800483e:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8004842:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8004a34 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8004846:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 800484a:	ea06 0808 	and.w	r8, r6, r8
 800484e:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004850:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8004854:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 8004858:	694e      	ldr	r6, [r1, #20]
 800485a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800485e:	fa06 f60c 	lsl.w	r6, r6, ip
 8004862:	ea47 0708 	orr.w	r7, r7, r8
 8004866:	433e      	orrs	r6, r7
 8004868:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800486c:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004870:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004874:	698f      	ldr	r7, [r1, #24]
 8004876:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 800487a:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 800487e:	433e      	orrs	r6, r7
 8004880:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004884:	690f      	ldr	r7, [r1, #16]
 8004886:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 800488a:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 800488e:	f1bc 0f01 	cmp.w	ip, #1
 8004892:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004896:	bf08      	it	eq
 8004898:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 800489c:	4335      	orrs	r5, r6
 800489e:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 80048a2:	680a      	ldr	r2, [r1, #0]
}
 80048a4:	e72c      	b.n	8004700 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 80048a6:	68dc      	ldr	r4, [r3, #12]
 80048a8:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 80048ac:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 80048b0:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 80048b4:	60dc      	str	r4, [r3, #12]
 80048b6:	e71d      	b.n	80046f4 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80048b8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80048ba:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d06a      	beq.n	8004996 <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80048c0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80048c2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80048c6:	0c55      	lsrs	r5, r2, #17
 80048c8:	4323      	orrs	r3, r4
 80048ca:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 80048ce:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80048d0:	6803      	ldr	r3, [r0, #0]
 80048d2:	4e55      	ldr	r6, [pc, #340]	; (8004a28 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80048d4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80048d6:	4034      	ands	r4, r6
 80048d8:	432c      	orrs	r4, r5
 80048da:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80048dc:	6645      	str	r5, [r0, #100]	; 0x64
 80048de:	e6f5      	b.n	80046cc <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80048e0:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80048e4:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80048e6:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80048ea:	f006 061f 	and.w	r6, r6, #31
 80048ee:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80048f0:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 80048f2:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80048f4:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80048f8:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80048fa:	2c00      	cmp	r4, #0
 80048fc:	f47f aee6 	bne.w	80046cc <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004900:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004902:	4e49      	ldr	r6, [pc, #292]	; (8004a28 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004904:	4034      	ands	r4, r6
 8004906:	4325      	orrs	r5, r4
 8004908:	64dd      	str	r5, [r3, #76]	; 0x4c
 800490a:	e6df      	b.n	80046cc <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800490c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800490e:	2c00      	cmp	r4, #0
 8004910:	f43f af5d 	beq.w	80047ce <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004914:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004918:	2c01      	cmp	r4, #1
 800491a:	f000 8154 	beq.w	8004bc6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800491e:	68dc      	ldr	r4, [r3, #12]
 8004920:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004924:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004926:	462c      	mov	r4, r5
 8004928:	e75c      	b.n	80047e4 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800492a:	f1bc 0f00 	cmp.w	ip, #0
 800492e:	f040 80c7 	bne.w	8004ac0 <HAL_ADCEx_InjectedConfigChannel+0x458>
 8004932:	0e92      	lsrs	r2, r2, #26
 8004934:	1c55      	adds	r5, r2, #1
 8004936:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800493a:	2f09      	cmp	r7, #9
 800493c:	f240 80f9 	bls.w	8004b32 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004940:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8004944:	06ae      	lsls	r6, r5, #26
 8004946:	3a1e      	subs	r2, #30
 8004948:	2501      	movs	r5, #1
 800494a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800494e:	fa05 f707 	lsl.w	r7, r5, r7
 8004952:	0512      	lsls	r2, r2, #20
 8004954:	433e      	orrs	r6, r7
 8004956:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800495a:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800495c:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8004960:	f00c 0c04 	and.w	ip, ip, #4
 8004964:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004968:	688e      	ldr	r6, [r1, #8]
 800496a:	f85c 5007 	ldr.w	r5, [ip, r7]
 800496e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004972:	f04f 0e07 	mov.w	lr, #7
 8004976:	fa0e fe02 	lsl.w	lr, lr, r2
 800497a:	ea25 050e 	bic.w	r5, r5, lr
 800497e:	fa06 f202 	lsl.w	r2, r6, r2
 8004982:	432a      	orrs	r2, r5
 8004984:	f84c 2007 	str.w	r2, [ip, r7]
 8004988:	680a      	ldr	r2, [r1, #0]
}
 800498a:	e6d1      	b.n	8004730 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 800498c:	2402      	movs	r4, #2
}
 800498e:	4620      	mov	r0, r4
 8004990:	b002      	add	sp, #8
 8004992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004996:	0c55      	lsrs	r5, r2, #17
 8004998:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800499c:	e798      	b.n	80048d0 <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800499e:	4e23      	ldr	r6, [pc, #140]	; (8004a2c <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 80049a0:	42b2      	cmp	r2, r6
 80049a2:	f47f aee2 	bne.w	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049a6:	0249      	lsls	r1, r1, #9
 80049a8:	f53f aedf 	bmi.w	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 80049ac:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	f43f aedb 	beq.w	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80049b4:	68ab      	ldr	r3, [r5, #8]
 80049b6:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80049ba:	431f      	orrs	r7, r3
 80049bc:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 80049c0:	60af      	str	r7, [r5, #8]
}
 80049c2:	e6d2      	b.n	800476a <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049c4:	0dd7      	lsrs	r7, r2, #23
 80049c6:	f007 0704 	and.w	r7, r7, #4
 80049ca:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80049ce:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 80049d2:	f04f 0c07 	mov.w	ip, #7
 80049d6:	59ba      	ldr	r2, [r7, r6]
 80049d8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80049dc:	ea22 020c 	bic.w	r2, r2, ip
 80049e0:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80049e8:	615a      	str	r2, [r3, #20]
}
 80049ea:	e721      	b.n	8004830 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 80049ec:	691f      	ldr	r7, [r3, #16]
 80049ee:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80049f0:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 80049f4:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80049f6:	433e      	orrs	r6, r7
 80049f8:	ea46 060c 	orr.w	r6, r6, ip
 80049fc:	f046 0602 	orr.w	r6, r6, #2
 8004a00:	611e      	str	r6, [r3, #16]
 8004a02:	e6f8      	b.n	80047f6 <HAL_ADCEx_InjectedConfigChannel+0x18e>
 8004a04:	0007ffff 	.word	0x0007ffff
 8004a08:	80080000 	.word	0x80080000
 8004a0c:	50000300 	.word	0x50000300
 8004a10:	c3210000 	.word	0xc3210000
 8004a14:	90c00010 	.word	0x90c00010
 8004a18:	c7520000 	.word	0xc7520000
 8004a1c:	50000100 	.word	0x50000100
 8004a20:	20000538 	.word	0x20000538
 8004a24:	053e2d63 	.word	0x053e2d63
 8004a28:	04104000 	.word	0x04104000
 8004a2c:	cb840000 	.word	0xcb840000
 8004a30:	407f0000 	.word	0x407f0000
 8004a34:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a38:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a3a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004a3c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004a3e:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a42:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	d07d      	beq.n	8004b46 <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004a4e:	b126      	cbz	r6, 8004a5a <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 8004a50:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a54:	42b5      	cmp	r5, r6
 8004a56:	f000 80bb 	beq.w	8004bd0 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8004a5a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004a5c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a5e:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a62:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004a66:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004a6e:	b126      	cbz	r6, 8004a7a <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 8004a70:	fab6 f686 	clz	r6, r6
 8004a74:	42b7      	cmp	r7, r6
 8004a76:	f000 80c0 	beq.w	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a7a:	68ae      	ldr	r6, [r5, #8]
 8004a7c:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a7e:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a82:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004a8a:	b126      	cbz	r6, 8004a96 <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 8004a8c:	fab6 f686 	clz	r6, r6
 8004a90:	42b7      	cmp	r7, r6
 8004a92:	f000 80c7 	beq.w	8004c24 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a96:	68ee      	ldr	r6, [r5, #12]
 8004a98:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a9a:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a9c:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004aa4:	2e00      	cmp	r6, #0
 8004aa6:	f43f ae2b 	beq.w	8004700 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004aaa:	fab6 f686 	clz	r6, r6
 8004aae:	42be      	cmp	r6, r7
 8004ab0:	f47f ae26 	bne.w	8004700 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004ab4:	682a      	ldr	r2, [r5, #0]
 8004ab6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004aba:	602a      	str	r2, [r5, #0]
 8004abc:	680a      	ldr	r2, [r1, #0]
}
 8004abe:	e61f      	b.n	8004700 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	d05a      	beq.n	8004b7e <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 8004ac8:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004acc:	3501      	adds	r5, #1
 8004ace:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ad2:	2d09      	cmp	r5, #9
 8004ad4:	d953      	bls.n	8004b7e <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	f000 80c2 	beq.w	8004c64 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 8004ae0:	fab6 f686 	clz	r6, r6
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	06b6      	lsls	r6, r6, #26
 8004ae8:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	f000 80b5 	beq.w	8004c60 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 8004af6:	fab5 f585 	clz	r5, r5
 8004afa:	3501      	adds	r5, #1
 8004afc:	f005 051f 	and.w	r5, r5, #31
 8004b00:	2701      	movs	r7, #1
 8004b02:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004b06:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	f000 80a5 	beq.w	8004c5c <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 8004b12:	fab2 f582 	clz	r5, r2
 8004b16:	3501      	adds	r5, #1
 8004b18:	f005 051f 	and.w	r5, r5, #31
 8004b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b20:	f1a5 021e 	sub.w	r2, r5, #30
 8004b24:	0512      	lsls	r2, r2, #20
 8004b26:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004b2a:	e716      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	461c      	mov	r4, r3
 8004b30:	e5ba      	b.n	80046a8 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004b32:	06ae      	lsls	r6, r5, #26
 8004b34:	2501      	movs	r5, #1
 8004b36:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8004b3a:	40bd      	lsls	r5, r7
 8004b3c:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8004b40:	432e      	orrs	r6, r5
 8004b42:	0512      	lsls	r2, r2, #20
 8004b44:	e709      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004b46:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b4a:	42b5      	cmp	r5, r6
 8004b4c:	d040      	beq.n	8004bd0 <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b4e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004b50:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b52:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b56:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004b5a:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004b5e:	42b7      	cmp	r7, r6
 8004b60:	d04b      	beq.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b62:	68af      	ldr	r7, [r5, #8]
 8004b64:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b66:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b6a:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004b6e:	42b7      	cmp	r7, r6
 8004b70:	d058      	beq.n	8004c24 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b72:	68ef      	ldr	r7, [r5, #12]
 8004b74:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b76:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b78:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004b7c:	e797      	b.n	8004aae <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	d064      	beq.n	8004c50 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8004b86:	fab6 f686 	clz	r6, r6
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	06b6      	lsls	r6, r6, #26
 8004b8e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	d058      	beq.n	8004c4c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 8004b9a:	fab5 f585 	clz	r5, r5
 8004b9e:	3501      	adds	r5, #1
 8004ba0:	f005 051f 	and.w	r5, r5, #31
 8004ba4:	2701      	movs	r7, #1
 8004ba6:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004baa:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	d050      	beq.n	8004c56 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8004bb4:	fab2 f582 	clz	r5, r2
 8004bb8:	3501      	adds	r5, #1
 8004bba:	f005 051f 	and.w	r5, r5, #31
 8004bbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bc2:	052a      	lsls	r2, r5, #20
 8004bc4:	e6c9      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc6:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8004bc8:	f046 0620 	orr.w	r6, r6, #32
 8004bcc:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004bce:	e609      	b.n	80047e4 <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 8004bd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bd2:	461d      	mov	r5, r3
 8004bd4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bd8:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004bdc:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004bde:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8004be0:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004be2:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004be6:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bea:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	f47f af3b 	bne.w	8004a6a <HAL_ADCEx_InjectedConfigChannel+0x402>
 8004bf4:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004bf8:	e7b1      	b.n	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 8004bfa:	f8dc 2000 	ldr.w	r2, [ip]
 8004bfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c02:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004c06:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c08:	68ae      	ldr	r6, [r5, #8]
 8004c0a:	68af      	ldr	r7, [r5, #8]
 8004c0c:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c10:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c14:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004c18:	2e00      	cmp	r6, #0
 8004c1a:	f47f af34 	bne.w	8004a86 <HAL_ADCEx_InjectedConfigChannel+0x41e>
 8004c1e:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004c22:	e7a4      	b.n	8004b6e <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 8004c24:	f8dc 2000 	ldr.w	r2, [ip]
 8004c28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c2c:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004c30:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c32:	68ee      	ldr	r6, [r5, #12]
 8004c34:	68ef      	ldr	r7, [r5, #12]
 8004c36:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c3a:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c3e:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004c40:	2e00      	cmp	r6, #0
 8004c42:	f47f af2d 	bne.w	8004aa0 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8004c46:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004c4a:	e730      	b.n	8004aae <HAL_ADCEx_InjectedConfigChannel+0x446>
 8004c4c:	2502      	movs	r5, #2
 8004c4e:	e7ac      	b.n	8004baa <HAL_ADCEx_InjectedConfigChannel+0x542>
 8004c50:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8004c54:	e79d      	b.n	8004b92 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 8004c56:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004c5a:	e67e      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8004c5c:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x604>)
 8004c5e:	e67c      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8004c60:	2502      	movs	r5, #2
 8004c62:	e750      	b.n	8004b06 <HAL_ADCEx_InjectedConfigChannel+0x49e>
 8004c64:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8004c68:	e740      	b.n	8004aec <HAL_ADCEx_InjectedConfigChannel+0x484>
 8004c6a:	bf00      	nop
 8004c6c:	fe500000 	.word	0xfe500000

08004c70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c70:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c72:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c76:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004c78:	2a01      	cmp	r2, #1
{
 8004c7a:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004c7c:	d04f      	beq.n	8004d1e <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c7e:	6804      	ldr	r4, [r0, #0]
 8004c80:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004c82:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004c84:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c86:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004c8a:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004c8c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004c90:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c92:	d008      	beq.n	8004ca6 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c94:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c9a:	f041 0120 	orr.w	r1, r1, #32
 8004c9e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004ca0:	b01c      	add	sp, #112	; 0x70
 8004ca2:	bcf0      	pop	{r4, r5, r6, r7}
 8004ca4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ca6:	4a23      	ldr	r2, [pc, #140]	; (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004ca8:	6890      	ldr	r0, [r2, #8]
 8004caa:	0740      	lsls	r0, r0, #29
 8004cac:	d50b      	bpl.n	8004cc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004cae:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cb2:	f042 0220 	orr.w	r2, r2, #32
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004cc0:	b01c      	add	sp, #112	; 0x70
 8004cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8004cc4:	4770      	bx	lr
 8004cc6:	68a0      	ldr	r0, [r4, #8]
 8004cc8:	0746      	lsls	r6, r0, #29
 8004cca:	d4f1      	bmi.n	8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ccc:	b1d5      	cbz	r5, 8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004cce:	4e1a      	ldr	r6, [pc, #104]	; (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004cd0:	684f      	ldr	r7, [r1, #4]
 8004cd2:	68b0      	ldr	r0, [r6, #8]
 8004cd4:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004cd8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004cdc:	4338      	orrs	r0, r7
 8004cde:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8004ce2:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ce4:	68a4      	ldr	r4, [r4, #8]
 8004ce6:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ce8:	4320      	orrs	r0, r4
 8004cea:	f010 0001 	ands.w	r0, r0, #1
 8004cee:	d114      	bne.n	8004d1a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8004cf0:	68b4      	ldr	r4, [r6, #8]
 8004cf2:	688a      	ldr	r2, [r1, #8]
 8004cf4:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8004cf8:	4315      	orrs	r5, r2
 8004cfa:	f021 010f 	bic.w	r1, r1, #15
 8004cfe:	430d      	orrs	r5, r1
 8004d00:	60b5      	str	r5, [r6, #8]
 8004d02:	e7da      	b.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d04:	4d0c      	ldr	r5, [pc, #48]	; (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004d06:	68a9      	ldr	r1, [r5, #8]
 8004d08:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004d0c:	60a9      	str	r1, [r5, #8]
 8004d0e:	68a1      	ldr	r1, [r4, #8]
 8004d10:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d12:	4308      	orrs	r0, r1
 8004d14:	f010 0001 	ands.w	r0, r0, #1
 8004d18:	d005      	beq.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e7cd      	b.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8004d1e:	2002      	movs	r0, #2
}
 8004d20:	b01c      	add	sp, #112	; 0x70
 8004d22:	bcf0      	pop	{r4, r5, r6, r7}
 8004d24:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d26:	68aa      	ldr	r2, [r5, #8]
 8004d28:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004d2c:	f022 020f 	bic.w	r2, r2, #15
 8004d30:	60aa      	str	r2, [r5, #8]
 8004d32:	e7c2      	b.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004d34:	50000100 	.word	0x50000100
 8004d38:	50000300 	.word	0x50000300

08004d3c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3e:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d054      	beq.n	8004df2 <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004d48:	6802      	ldr	r2, [r0, #0]
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	4604      	mov	r4, r0
 8004d50:	db4f      	blt.n	8004df2 <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004d52:	7f43      	ldrb	r3, [r0, #29]
 8004d54:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d077      	beq.n	8004e4c <HAL_COMP_Init+0x110>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8004d5c:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 8004d60:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 8004d64:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004d66:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 8004d68:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 8004d6a:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004d6c:	6816      	ldr	r6, [r2, #0]
 8004d6e:	493f      	ldr	r1, [pc, #252]	; (8004e6c <HAL_COMP_Init+0x130>)
               | hcomp->Init.Hysteresis
 8004d70:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 8004d72:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8004d74:	4031      	ands	r1, r6
 8004d76:	430b      	orrs	r3, r1
 8004d78:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	0218      	lsls	r0, r3, #8
 8004d7e:	d501      	bpl.n	8004d84 <HAL_COMP_Init+0x48>
 8004d80:	023b      	lsls	r3, r7, #8
 8004d82:	d54e      	bpl.n	8004e22 <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004d84:	4b3a      	ldr	r3, [pc, #232]	; (8004e70 <HAL_COMP_Init+0x134>)
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d066      	beq.n	8004e58 <HAL_COMP_Init+0x11c>
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <HAL_COMP_Init+0x138>)
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d068      	beq.n	8004e62 <HAL_COMP_Init+0x126>
 8004d90:	3304      	adds	r3, #4
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bf0b      	itete	eq
 8004d96:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8004d9a:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 8004d9e:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8004da2:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004da6:	69a3      	ldr	r3, [r4, #24]
 8004da8:	079f      	lsls	r7, r3, #30
 8004daa:	d025      	beq.n	8004df8 <HAL_COMP_Init+0xbc>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004dac:	4d32      	ldr	r5, [pc, #200]	; (8004e78 <HAL_COMP_Init+0x13c>)
 8004dae:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004db0:	06de      	lsls	r6, r3, #27
 8004db2:	bf4c      	ite	mi
 8004db4:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004db6:	4010      	andpl	r0, r2
 8004db8:	60a8      	str	r0, [r5, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004dba:	4d2f      	ldr	r5, [pc, #188]	; (8004e78 <HAL_COMP_Init+0x13c>)
 8004dbc:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004dbe:	069f      	lsls	r7, r3, #26
 8004dc0:	bf4c      	ite	mi
 8004dc2:	4308      	orrmi	r0, r1
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004dc4:	4010      	andpl	r0, r2
 8004dc6:	60e8      	str	r0, [r5, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004dc8:	482b      	ldr	r0, [pc, #172]	; (8004e78 <HAL_COMP_Init+0x13c>)
 8004dca:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004dcc:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004dce:	079e      	lsls	r6, r3, #30
 8004dd0:	bf4c      	ite	mi
 8004dd2:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004dd4:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004dd6:	07db      	lsls	r3, r3, #31
 8004dd8:	6045      	str	r5, [r0, #4]
 8004dda:	d51d      	bpl.n	8004e18 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004ddc:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <HAL_COMP_Init+0x13c>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4311      	orrs	r1, r2
 8004de2:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004de4:	7f63      	ldrb	r3, [r4, #29]
 8004de6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004dea:	b18b      	cbz	r3, 8004e10 <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8004dee:	b003      	add	sp, #12
 8004df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8004df2:	2001      	movs	r0, #1
}
 8004df4:	b003      	add	sp, #12
 8004df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004df8:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <HAL_COMP_Init+0x13c>)
 8004dfa:	6859      	ldr	r1, [r3, #4]
 8004dfc:	4011      	ands	r1, r2
 8004dfe:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004e00:	6819      	ldr	r1, [r3, #0]
 8004e02:	400a      	ands	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004e06:	7f63      	ldrb	r3, [r4, #29]
 8004e08:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ed      	bne.n	8004dec <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 8004e10:	2301      	movs	r3, #1
 8004e12:	7763      	strb	r3, [r4, #29]
}
 8004e14:	b003      	add	sp, #12
 8004e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e18:	4917      	ldr	r1, [pc, #92]	; (8004e78 <HAL_COMP_Init+0x13c>)
 8004e1a:	680b      	ldr	r3, [r1, #0]
 8004e1c:	401a      	ands	r2, r3
 8004e1e:	600a      	str	r2, [r1, #0]
}
 8004e20:	e7f1      	b.n	8004e06 <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_COMP_Init+0x140>)
 8004e24:	4916      	ldr	r1, [pc, #88]	; (8004e80 <HAL_COMP_Init+0x144>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	fba1 1303 	umull	r1, r3, r1, r3
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8004e38:	9b01      	ldr	r3, [sp, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0a2      	beq.n	8004d84 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8004e44:	9b01      	ldr	r3, [sp, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f9      	bne.n	8004e3e <HAL_COMP_Init+0x102>
 8004e4a:	e79b      	b.n	8004d84 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8004e4c:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8004e4e:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8004e50:	f7fe fd1a 	bl	8003888 <HAL_COMP_MspInit>
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	e781      	b.n	8004d5c <HAL_COMP_Init+0x20>
 8004e58:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004e5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e60:	e7a1      	b.n	8004da6 <HAL_COMP_Init+0x6a>
 8004e62:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e6a:	e79c      	b.n	8004da6 <HAL_COMP_Init+0x6a>
 8004e6c:	ff007e0f 	.word	0xff007e0f
 8004e70:	40010200 	.word	0x40010200
 8004e74:	40010204 	.word	0x40010204
 8004e78:	40010400 	.word	0x40010400
 8004e7c:	20000538 	.word	0x20000538
 8004e80:	053e2d63 	.word	0x053e2d63

08004e84 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004e84:	b1b0      	cbz	r0, 8004eb4 <HAL_CORDIC_Init+0x30>
{
 8004e86:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004e88:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e92:	b153      	cbz	r3, 8004eaa <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004e94:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004e96:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004e98:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004e9a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8004e9e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004ea2:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004ea6:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004ea8:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8004eaa:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004eae:	f7fe fd4b 	bl	8003948 <HAL_CORDIC_MspInit>
 8004eb2:	e7ef      	b.n	8004e94 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004eb4:	2001      	movs	r0, #1
}
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eb8:	4908      	ldr	r1, [pc, #32]	; (8004edc <HAL_NVIC_SetPriorityGrouping+0x24>)
 8004eba:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ebc:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ebe:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ec0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004ec4:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ec6:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004ed8:	60cb      	str	r3, [r1, #12]
 8004eda:	4770      	bx	lr
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_NVIC_SetPriority+0x68>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eea:	f1c3 0507 	rsb	r5, r3, #7
 8004eee:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ef0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ef4:	bf28      	it	cs
 8004ef6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ef8:	2c06      	cmp	r4, #6
 8004efa:	d919      	bls.n	8004f30 <HAL_NVIC_SetPriority+0x50>
 8004efc:	3b03      	subs	r3, #3
 8004efe:	f04f 34ff 	mov.w	r4, #4294967295
 8004f02:	409c      	lsls	r4, r3
 8004f04:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f08:	f04f 34ff 	mov.w	r4, #4294967295
 8004f0c:	40ac      	lsls	r4, r5
 8004f0e:	ea21 0104 	bic.w	r1, r1, r4
 8004f12:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004f14:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f16:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004f1a:	db0c      	blt.n	8004f36 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004f20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004f24:	0109      	lsls	r1, r1, #4
 8004f26:	b2c9      	uxtb	r1, r1
 8004f28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004f2c:	bc30      	pop	{r4, r5}
 8004f2e:	4770      	bx	lr
 8004f30:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f32:	4613      	mov	r3, r2
 8004f34:	e7e8      	b.n	8004f08 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_NVIC_SetPriority+0x6c>)
 8004f38:	f000 000f 	and.w	r0, r0, #15
 8004f3c:	0109      	lsls	r1, r1, #4
 8004f3e:	4403      	add	r3, r0
 8004f40:	b2c9      	uxtb	r1, r1
 8004f42:	7619      	strb	r1, [r3, #24]
 8004f44:	bc30      	pop	{r4, r5}
 8004f46:	4770      	bx	lr
 8004f48:	e000ed00 	.word	0xe000ed00
 8004f4c:	e000ecfc 	.word	0xe000ecfc

08004f50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004f50:	2800      	cmp	r0, #0
 8004f52:	db07      	blt.n	8004f64 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f54:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <HAL_NVIC_EnableIRQ+0x18>)
 8004f56:	f000 011f 	and.w	r1, r0, #31
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	0940      	lsrs	r0, r0, #5
 8004f5e:	408b      	lsls	r3, r1
 8004f60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e100 	.word	0xe000e100

08004f6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f6c:	3801      	subs	r0, #1
 8004f6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004f72:	d20e      	bcs.n	8004f92 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f74:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f76:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f78:	4c08      	ldr	r4, [pc, #32]	; (8004f9c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f7a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7c:	20f0      	movs	r0, #240	; 0xf0
 8004f7e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f82:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f84:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f86:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f88:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8004f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f8e:	6019      	str	r1, [r3, #0]
 8004f90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004f92:	2001      	movs	r0, #1
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	e000e010 	.word	0xe000e010
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop

08004fa4 <HAL_SYSTICK_IRQHandler>:
{
 8004fa4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004fa6:	f7ff fffb 	bl	8004fa0 <HAL_SYSTICK_Callback>
}
 8004faa:	bd08      	pop	{r3, pc}

08004fac <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d07d      	beq.n	80050ac <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fb0:	4a3f      	ldr	r2, [pc, #252]	; (80050b0 <HAL_DMA_Init+0x104>)
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	4290      	cmp	r0, r2
{
 8004fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fbc:	d962      	bls.n	8005084 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004fbe:	493d      	ldr	r1, [pc, #244]	; (80050b4 <HAL_DMA_Init+0x108>)
 8004fc0:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8004fc2:	4c3e      	ldr	r4, [pc, #248]	; (80050bc <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004fc4:	4401      	add	r1, r0
 8004fc6:	fba2 2101 	umull	r2, r1, r2, r1
 8004fca:	0909      	lsrs	r1, r1, #4
 8004fcc:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fce:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd2:	691e      	ldr	r6, [r3, #16]
 8004fd4:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 8004fd6:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd8:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fda:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004fdc:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80050d4 <HAL_DMA_Init+0x128>
 8004fe0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80050b0 <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe4:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe6:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fea:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fec:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ff0:	4c31      	ldr	r4, [pc, #196]	; (80050b8 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8004ff2:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff6:	69de      	ldr	r6, [r3, #28]
 8004ff8:	6459      	str	r1, [r3, #68]	; 0x44
 8004ffa:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ffc:	b2c5      	uxtb	r5, r0
 8004ffe:	3d08      	subs	r5, #8
 8005000:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005004:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005006:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005008:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800500c:	4e2c      	ldr	r6, [pc, #176]	; (80050c0 <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 800500e:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005010:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005014:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005018:	4540      	cmp	r0, r8
 800501a:	bf88      	it	hi
 800501c:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 800501e:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005022:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005024:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80050d8 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 8005028:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800502a:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800502e:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005032:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005036:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800503a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800503e:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005040:	d029      	beq.n	8005096 <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005042:	6858      	ldr	r0, [r3, #4]
 8005044:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005046:	3801      	subs	r0, #1
 8005048:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800504a:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800504e:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005052:	d826      	bhi.n	80050a2 <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005054:	491b      	ldr	r1, [pc, #108]	; (80050c4 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005056:	481c      	ldr	r0, [pc, #112]	; (80050c8 <HAL_DMA_Init+0x11c>)
 8005058:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800505a:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800505c:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800505e:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005060:	f002 021f 	and.w	r2, r2, #31
 8005064:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005068:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800506a:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800506c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800506e:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005070:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005072:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005074:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005076:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005078:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800507c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8005080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005084:	4911      	ldr	r1, [pc, #68]	; (80050cc <HAL_DMA_Init+0x120>)
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8005088:	4c11      	ldr	r4, [pc, #68]	; (80050d0 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800508a:	4401      	add	r1, r0
 800508c:	fba2 2101 	umull	r2, r1, r2, r1
 8005090:	0909      	lsrs	r1, r1, #4
 8005092:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8005094:	e79b      	b.n	8004fce <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800509a:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509e:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 80050a2:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80050a4:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80050aa:	e7e2      	b.n	8005072 <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 80050ac:	2001      	movs	r0, #1
}
 80050ae:	4770      	bx	lr
 80050b0:	40020407 	.word	0x40020407
 80050b4:	bffdfbf8 	.word	0xbffdfbf8
 80050b8:	cccccccd 	.word	0xcccccccd
 80050bc:	40020400 	.word	0x40020400
 80050c0:	40020800 	.word	0x40020800
 80050c4:	1000823f 	.word	0x1000823f
 80050c8:	40020940 	.word	0x40020940
 80050cc:	bffdfff8 	.word	0xbffdfff8
 80050d0:	40020000 	.word	0x40020000
 80050d4:	40020820 	.word	0x40020820
 80050d8:	40020880 	.word	0x40020880

080050dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050e0:	680e      	ldr	r6, [r1, #0]
{
 80050e2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050e4:	2e00      	cmp	r6, #0
 80050e6:	f000 808b 	beq.w	8005200 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050ea:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80052c0 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 80050ee:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050f0:	2201      	movs	r2, #1
 80050f2:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 80050f6:	ea14 0c06 	ands.w	ip, r4, r6
 80050fa:	d07c      	beq.n	80051f6 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050fc:	684d      	ldr	r5, [r1, #4]
 80050fe:	f025 0a10 	bic.w	sl, r5, #16
 8005102:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005106:	2a01      	cmp	r2, #1
 8005108:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800510c:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005110:	d979      	bls.n	8005206 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8005112:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005114:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005116:	fa02 f208 	lsl.w	r2, r2, r8
 800511a:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800511e:	fa04 f408 	lsl.w	r4, r4, r8
 8005122:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8005124:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005126:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8005128:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800512a:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800512e:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005130:	fa02 f208 	lsl.w	r2, r2, r8
 8005134:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005136:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8005138:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800513a:	d55c      	bpl.n	80051f6 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513c:	4c5a      	ldr	r4, [pc, #360]	; (80052a8 <HAL_GPIO_Init+0x1cc>)
 800513e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	6622      	str	r2, [r4, #96]	; 0x60
 8005146:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005148:	f023 0403 	bic.w	r4, r3, #3
 800514c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005150:	f002 0201 	and.w	r2, r2, #1
 8005154:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8005158:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800515a:	f003 0203 	and.w	r2, r3, #3
 800515e:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005162:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005164:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005166:	220f      	movs	r2, #15
 8005168:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800516c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005170:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005174:	d018      	beq.n	80051a8 <HAL_GPIO_Init+0xcc>
 8005176:	4a4d      	ldr	r2, [pc, #308]	; (80052ac <HAL_GPIO_Init+0x1d0>)
 8005178:	4290      	cmp	r0, r2
 800517a:	f000 8084 	beq.w	8005286 <HAL_GPIO_Init+0x1aa>
 800517e:	4a4c      	ldr	r2, [pc, #304]	; (80052b0 <HAL_GPIO_Init+0x1d4>)
 8005180:	4290      	cmp	r0, r2
 8005182:	f000 8085 	beq.w	8005290 <HAL_GPIO_Init+0x1b4>
 8005186:	4a4b      	ldr	r2, [pc, #300]	; (80052b4 <HAL_GPIO_Init+0x1d8>)
 8005188:	4290      	cmp	r0, r2
 800518a:	d076      	beq.n	800527a <HAL_GPIO_Init+0x19e>
 800518c:	4a4a      	ldr	r2, [pc, #296]	; (80052b8 <HAL_GPIO_Init+0x1dc>)
 800518e:	4290      	cmp	r0, r2
 8005190:	f000 8084 	beq.w	800529c <HAL_GPIO_Init+0x1c0>
 8005194:	4a49      	ldr	r2, [pc, #292]	; (80052bc <HAL_GPIO_Init+0x1e0>)
 8005196:	4290      	cmp	r0, r2
 8005198:	bf0c      	ite	eq
 800519a:	f04f 0805 	moveq.w	r8, #5
 800519e:	f04f 0806 	movne.w	r8, #6
 80051a2:	fa08 f209 	lsl.w	r2, r8, r9
 80051a6:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a8:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 80051aa:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80051ae:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051b2:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 80051b4:	bf54      	ite	pl
 80051b6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80051b8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 80051bc:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 80051c0:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051c4:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 80051c6:	bf54      	ite	pl
 80051c8:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80051ca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 80051ce:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051d2:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051d6:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 80051d8:	bf54      	ite	pl
 80051da:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80051dc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 80051e0:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80051e4:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051e8:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 80051ea:	bf54      	ite	pl
 80051ec:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80051ee:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 80051f2:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 80051f6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051f8:	fa36 f203 	lsrs.w	r2, r6, r3
 80051fc:	f47f af78 	bne.w	80050f0 <HAL_GPIO_Init+0x14>
  }
}
 8005200:	b003      	add	sp, #12
 8005202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005206:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005208:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800520c:	fa02 f208 	lsl.w	r2, r2, r8
 8005210:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005214:	68cf      	ldr	r7, [r1, #12]
 8005216:	fa07 f708 	lsl.w	r7, r7, r8
 800521a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800521e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005220:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005222:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005226:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800522a:	465c      	mov	r4, fp
 800522c:	409c      	lsls	r4, r3
 800522e:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8005230:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8005232:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005234:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005238:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800523c:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005240:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005244:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8005248:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800524a:	f47f af6d 	bne.w	8005128 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800524e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8005252:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005256:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800525a:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800525e:	0092      	lsls	r2, r2, #2
 8005260:	f04f 0a0f 	mov.w	sl, #15
 8005264:	fa0a fb02 	lsl.w	fp, sl, r2
 8005268:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800526c:	690c      	ldr	r4, [r1, #16]
 800526e:	4094      	lsls	r4, r2
 8005270:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005274:	f8c9 4020 	str.w	r4, [r9, #32]
 8005278:	e756      	b.n	8005128 <HAL_GPIO_Init+0x4c>
 800527a:	f04f 0803 	mov.w	r8, #3
 800527e:	fa08 f209 	lsl.w	r2, r8, r9
 8005282:	4317      	orrs	r7, r2
 8005284:	e790      	b.n	80051a8 <HAL_GPIO_Init+0xcc>
 8005286:	2201      	movs	r2, #1
 8005288:	fa02 f209 	lsl.w	r2, r2, r9
 800528c:	4317      	orrs	r7, r2
 800528e:	e78b      	b.n	80051a8 <HAL_GPIO_Init+0xcc>
 8005290:	f04f 0802 	mov.w	r8, #2
 8005294:	fa08 f209 	lsl.w	r2, r8, r9
 8005298:	4317      	orrs	r7, r2
 800529a:	e785      	b.n	80051a8 <HAL_GPIO_Init+0xcc>
 800529c:	f04f 0804 	mov.w	r8, #4
 80052a0:	fa08 f209 	lsl.w	r2, r8, r9
 80052a4:	4317      	orrs	r7, r2
 80052a6:	e77f      	b.n	80051a8 <HAL_GPIO_Init+0xcc>
 80052a8:	40021000 	.word	0x40021000
 80052ac:	48000400 	.word	0x48000400
 80052b0:	48000800 	.word	0x48000800
 80052b4:	48000c00 	.word	0x48000c00
 80052b8:	48001000 	.word	0x48001000
 80052bc:	48001400 	.word	0x48001400
 80052c0:	40010400 	.word	0x40010400

080052c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052c4:	b10a      	cbz	r2, 80052ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052c6:	6181      	str	r1, [r0, #24]
 80052c8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052ca:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop

080052d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4604      	mov	r4, r0
 80052d4:	460d      	mov	r5, r1
 80052d6:	4616      	mov	r6, r2
 80052d8:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	d12c      	bne.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	0790      	lsls	r0, r2, #30
 80052e2:	d427      	bmi.n	8005334 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	06d1      	lsls	r1, r2, #27
 80052e8:	d5f9      	bpl.n	80052de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	0691      	lsls	r1, r2, #26
 80052ee:	d5fc      	bpl.n	80052ea <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f0:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f2:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f4:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80052fc:	bf44      	itt	mi
 80052fe:	2200      	movmi	r2, #0
 8005300:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	07d1      	lsls	r1, r2, #31
 8005306:	d403      	bmi.n	8005310 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4918      	ldr	r1, [pc, #96]	; (8005374 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>)
 8005314:	400a      	ands	r2, r1
 8005316:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005318:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800531a:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800531c:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005322:	6463      	str	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005324:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005328:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 8005330:	2001      	movs	r0, #1
}
 8005332:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005334:	2000      	movs	r0, #0
}
 8005336:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	0792      	lsls	r2, r2, #30
 800533c:	d4fa      	bmi.n	8005334 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	06d0      	lsls	r0, r2, #27
 8005342:	d412      	bmi.n	800536a <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005344:	f7fe fe1a 	bl	8003f7c <HAL_GetTick>
 8005348:	1b80      	subs	r0, r0, r6
 800534a:	42a8      	cmp	r0, r5
 800534c:	d801      	bhi.n	8005352 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800534e:	2d00      	cmp	r5, #0
 8005350:	d1c2      	bne.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005352:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005354:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005356:	430b      	orrs	r3, r1
 8005358:	e7e2      	b.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7fe fe0f 	bl	8003f7c <HAL_GetTick>
 800535e:	1b80      	subs	r0, r0, r6
 8005360:	4285      	cmp	r5, r0
 8005362:	d3f6      	bcc.n	8005352 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8005364:	2d00      	cmp	r5, #0
 8005366:	d0f4      	beq.n	8005352 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8005368:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800536a:	6999      	ldr	r1, [r3, #24]
 800536c:	068a      	lsls	r2, r1, #26
 800536e:	d5f4      	bpl.n	800535a <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
 8005370:	e7be      	b.n	80052f0 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8005372:	bf00      	nop
 8005374:	fe00e800 	.word	0xfe00e800

08005378 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4604      	mov	r4, r0
 800537c:	4616      	mov	r6, r2
 800537e:	460d      	mov	r5, r1
 8005380:	b929      	cbnz	r1, 800538e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8005382:	e03d      	b.n	8005400 <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005384:	f7fe fdfa 	bl	8003f7c <HAL_GetTick>
 8005388:	1b80      	subs	r0, r0, r6
 800538a:	4285      	cmp	r5, r0
 800538c:	d341      	bcc.n	8005412 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	0688      	lsls	r0, r1, #26
 8005394:	d441      	bmi.n	800541a <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005396:	6999      	ldr	r1, [r3, #24]
 8005398:	06c9      	lsls	r1, r1, #27
 800539a:	d5f3      	bpl.n	8005384 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800539c:	1c68      	adds	r0, r5, #1
 800539e:	d124      	bne.n	80053ea <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	0691      	lsls	r1, r2, #26
 80053a4:	d5fc      	bpl.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a6:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a8:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053aa:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053ac:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80053b2:	bf44      	itt	mi
 80053b4:	2200      	movmi	r2, #0
 80053b6:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	07d1      	lsls	r1, r2, #31
 80053bc:	d403      	bmi.n	80053c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4915      	ldr	r1, [pc, #84]	; (8005420 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
 80053ca:	400a      	ands	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053d2:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d6:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053d8:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80053da:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80053de:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 80053e6:	2001      	movs	r0, #1
}
 80053e8:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	0692      	lsls	r2, r2, #26
 80053ee:	d4da      	bmi.n	80053a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f0:	f7fe fdc4 	bl	8003f7c <HAL_GetTick>
 80053f4:	1b80      	subs	r0, r0, r6
 80053f6:	4285      	cmp	r5, r0
 80053f8:	d30b      	bcc.n	8005412 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80053fa:	b155      	cbz	r5, 8005412 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	e7cd      	b.n	800539c <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005400:	6803      	ldr	r3, [r0, #0]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	0692      	lsls	r2, r2, #26
 8005406:	d408      	bmi.n	800541a <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	06d2      	lsls	r2, r2, #27
 800540c:	d4c6      	bmi.n	800539c <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe fdb5 	bl	8003f7c <HAL_GetTick>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005412:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005414:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005416:	430b      	orrs	r3, r1
 8005418:	e7dd      	b.n	80053d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  return HAL_OK;
 800541a:	2000      	movs	r0, #0
}
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	bf00      	nop
 8005420:	fe00e800 	.word	0xfe00e800

08005424 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005424:	2800      	cmp	r0, #0
 8005426:	d04f      	beq.n	80054c8 <HAL_I2C_Init+0xa4>
{
 8005428:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800542a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800542e:	4604      	mov	r4, r0
 8005430:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005434:	2b00      	cmp	r3, #0
 8005436:	d042      	beq.n	80054be <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8005438:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800543a:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800543c:	2224      	movs	r2, #36	; 0x24
 800543e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005442:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005444:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8005446:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800544a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800544e:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005450:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005452:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005454:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800545a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800545c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800545e:	d02a      	beq.n	80054b6 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005460:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005464:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005466:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005468:	bf04      	itt	eq
 800546a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800546e:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005470:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005472:	69a5      	ldr	r5, [r4, #24]
 8005474:	e9d4 2604 	ldrd	r2, r6, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005478:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800547c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005480:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005482:	4332      	orrs	r2, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005484:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005486:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005488:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800548c:	6a25      	ldr	r5, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800548e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005492:	4329      	orrs	r1, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005494:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005496:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005498:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800549a:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 800549e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80054a4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054a8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ac:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 80054b2:	4610      	mov	r0, r2
}
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ba:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054bc:	e7d8      	b.n	8005470 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80054be:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80054c2:	f7fe fa59 	bl	8003978 <HAL_I2C_MspInit>
 80054c6:	e7b7      	b.n	8005438 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80054c8:	2001      	movs	r0, #1
}
 80054ca:	4770      	bx	lr

080054cc <HAL_I2C_Mem_Write>:
{
 80054cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 80054d6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80054da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054dc:	2820      	cmp	r0, #32
 80054de:	f040 80a6 	bne.w	800562e <HAL_I2C_Mem_Write+0x162>
    if ((pData == NULL) || (Size == 0U))
 80054e2:	4699      	mov	r9, r3
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 809b 	beq.w	8005622 <HAL_I2C_Mem_Write+0x156>
 80054ec:	f1ba 0f00 	cmp.w	sl, #0
 80054f0:	f000 8097 	beq.w	8005622 <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 80054f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	f000 8098 	beq.w	800562e <HAL_I2C_Mem_Write+0x162>
 80054fe:	2301      	movs	r3, #1
 8005500:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005504:	460d      	mov	r5, r1
 8005506:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 8005508:	f7fe fd38 	bl	8003f7c <HAL_GetTick>
 800550c:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800550e:	e005      	b.n	800551c <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005510:	f7fe fd34 	bl	8003f7c <HAL_GetTick>
 8005514:	1b80      	subs	r0, r0, r6
 8005516:	2819      	cmp	r0, #25
 8005518:	f200 808c 	bhi.w	8005634 <HAL_I2C_Mem_Write+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551c:	6821      	ldr	r1, [r4, #0]
 800551e:	698b      	ldr	r3, [r1, #24]
 8005520:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8005524:	d1f4      	bne.n	8005510 <HAL_I2C_Mem_Write+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005526:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005528:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800552a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800552e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005532:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005534:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005538:	6848      	ldr	r0, [r1, #4]
 800553a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8005720 <HAL_I2C_Mem_Write+0x254>
    hi2c->pBuffPtr  = pData;
 800553e:	9a08      	ldr	r2, [sp, #32]
 8005540:	6262      	str	r2, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
 8005542:	ea0c 0200 	and.w	r2, ip, r0
 8005546:	fa5f f089 	uxtb.w	r0, r9
 800554a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800554e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005552:	4328      	orrs	r0, r5
 8005554:	f040 4001 	orr.w	r0, r0, #2164260864	; 0x81000000
 8005558:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    hi2c->XferISR   = NULL;
 800555c:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800555e:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2,
 8005560:	6048      	str	r0, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	4639      	mov	r1, r7
 8005564:	4620      	mov	r0, r4
 8005566:	f7ff feb3 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800556a:	2800      	cmp	r0, #0
 800556c:	f040 8094 	bne.w	8005698 <HAL_I2C_Mem_Write+0x1cc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005570:	f1b9 0f01 	cmp.w	r9, #1
 8005574:	f040 8084 	bne.w	8005680 <HAL_I2C_Mem_Write+0x1b4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005578:	6821      	ldr	r1, [r4, #0]
 800557a:	fa5f f288 	uxtb.w	r2, r8
 800557e:	628a      	str	r2, [r1, #40]	; 0x28
 8005580:	1c78      	adds	r0, r7, #1
 8005582:	d165      	bne.n	8005650 <HAL_I2C_Mem_Write+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005584:	698b      	ldr	r3, [r1, #24]
 8005586:	061a      	lsls	r2, r3, #24
 8005588:	d5fc      	bpl.n	8005584 <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	2bff      	cmp	r3, #255	; 0xff
 8005590:	d86a      	bhi.n	8005668 <HAL_I2C_Mem_Write+0x19c>
      hi2c->XferSize = hi2c->XferCount;
 8005592:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005594:	4860      	ldr	r0, [pc, #384]	; (8005718 <HAL_I2C_Mem_Write+0x24c>)
 8005596:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8005598:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 800559a:	4003      	ands	r3, r0
 800559c:	432b      	orrs	r3, r5
 800559e:	b2d0      	uxtb	r0, r2
 80055a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80055a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80055a8:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80055aa:	604b      	str	r3, [r1, #4]
 80055ac:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8005718 <HAL_I2C_Mem_Write+0x24c>
 80055b0:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005724 <HAL_I2C_Mem_Write+0x258>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80055b8:	e004      	b.n	80055c4 <HAL_I2C_Mem_Write+0xf8>
    } while (hi2c->XferCount > 0U);
 80055ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 808b 	beq.w	80056da <HAL_I2C_Mem_Write+0x20e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c4:	4632      	mov	r2, r6
 80055c6:	4639      	mov	r1, r7
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff fe81 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 8081 	bne.w	80056d6 <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055dc:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80055de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80055e0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80055e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055ea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055f0:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80055f2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d0e0      	beq.n	80055ba <HAL_I2C_Mem_Write+0xee>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1de      	bne.n	80055ba <HAL_I2C_Mem_Write+0xee>
 80055fc:	1c78      	adds	r0, r7, #1
 80055fe:	d150      	bne.n	80056a2 <HAL_I2C_Mem_Write+0x1d6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005600:	6993      	ldr	r3, [r2, #24]
 8005602:	0619      	lsls	r1, r3, #24
 8005604:	d5fc      	bpl.n	8005600 <HAL_I2C_Mem_Write+0x134>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005606:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2bff      	cmp	r3, #255	; 0xff
 800560c:	d955      	bls.n	80056ba <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2,
 800560e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005610:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005614:	ea03 0308 	and.w	r3, r3, r8
 8005618:	432b      	orrs	r3, r5
 800561a:	ea43 030a 	orr.w	r3, r3, sl
 800561e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005620:	e7cb      	b.n	80055ba <HAL_I2C_Mem_Write+0xee>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005626:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005628:	2001      	movs	r0, #1
}
 800562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800562e:	2002      	movs	r0, #2
}
 8005630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005636:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800563a:	430b      	orrs	r3, r1
 800563c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800563e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8005642:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005646:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800564a:	2001      	movs	r0, #1
}
 800564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005650:	698b      	ldr	r3, [r1, #24]
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	d499      	bmi.n	800558a <HAL_I2C_Mem_Write+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fe fc91 	bl	8003f7c <HAL_GetTick>
 800565a:	1b80      	subs	r0, r0, r6
 800565c:	4287      	cmp	r7, r0
 800565e:	d351      	bcc.n	8005704 <HAL_I2C_Mem_Write+0x238>
 8005660:	2f00      	cmp	r7, #0
 8005662:	d04f      	beq.n	8005704 <HAL_I2C_Mem_Write+0x238>
 8005664:	6821      	ldr	r1, [r4, #0]
 8005666:	e78b      	b.n	8005580 <HAL_I2C_Mem_Write+0xb4>
  MODIFY_REG(hi2c->Instance->CR2,
 8005668:	684b      	ldr	r3, [r1, #4]
 800566a:	4a2b      	ldr	r2, [pc, #172]	; (8005718 <HAL_I2C_Mem_Write+0x24c>)
 800566c:	4013      	ands	r3, r2
 800566e:	432b      	orrs	r3, r5
 8005670:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8005674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005678:	22ff      	movs	r2, #255	; 0xff
 800567a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800567c:	604b      	str	r3, [r1, #4]
}
 800567e:	e795      	b.n	80055ac <HAL_I2C_Mem_Write+0xe0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005688:	4639      	mov	r1, r7
 800568a:	4632      	mov	r2, r6
 800568c:	4620      	mov	r0, r4
 800568e:	f7ff fe1f 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005692:	2800      	cmp	r0, #0
 8005694:	f43f af70 	beq.w	8005578 <HAL_I2C_Mem_Write+0xac>
      __HAL_UNLOCK(hi2c);
 8005698:	2300      	movs	r3, #0
 800569a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800569e:	2001      	movs	r0, #1
 80056a0:	e7c3      	b.n	800562a <HAL_I2C_Mem_Write+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a2:	6993      	ldr	r3, [r2, #24]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	d4ae      	bmi.n	8005606 <HAL_I2C_Mem_Write+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7fe fc68 	bl	8003f7c <HAL_GetTick>
 80056ac:	1b80      	subs	r0, r0, r6
 80056ae:	4287      	cmp	r7, r0
 80056b0:	d3c0      	bcc.n	8005634 <HAL_I2C_Mem_Write+0x168>
 80056b2:	2f00      	cmp	r7, #0
 80056b4:	d0be      	beq.n	8005634 <HAL_I2C_Mem_Write+0x168>
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	e7a0      	b.n	80055fc <HAL_I2C_Mem_Write+0x130>
          hi2c->XferSize = hi2c->XferCount;
 80056ba:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80056bc:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80056be:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 80056c0:	ea03 0308 	and.w	r3, r3, r8
 80056c4:	432b      	orrs	r3, r5
 80056c6:	b2c8      	uxtb	r0, r1
 80056c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80056cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80056d0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80056d2:	6053      	str	r3, [r2, #4]
}
 80056d4:	e771      	b.n	80055ba <HAL_I2C_Mem_Write+0xee>
        return HAL_ERROR;
 80056d6:	2001      	movs	r0, #1
 80056d8:	e7a7      	b.n	800562a <HAL_I2C_Mem_Write+0x15e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056da:	4632      	mov	r2, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	4620      	mov	r0, r4
 80056e0:	f7ff fe4a 	bl	8005378 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1f6      	bne.n	80056d6 <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80056ea:	4d0c      	ldr	r5, [pc, #48]	; (800571c <HAL_I2C_Mem_Write+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ec:	2120      	movs	r1, #32
 80056ee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	402a      	ands	r2, r5
 80056f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80056f6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80056fa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056fe:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005702:	e792      	b.n	800562a <HAL_I2C_Mem_Write+0x15e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005704:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005706:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005708:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800570a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800570c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800570e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005712:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 8005716:	e7bf      	b.n	8005698 <HAL_I2C_Mem_Write+0x1cc>
 8005718:	fc009c00 	.word	0xfc009c00
 800571c:	fe00e800 	.word	0xfe00e800
 8005720:	fc009800 	.word	0xfc009800
 8005724:	01ff0000 	.word	0x01ff0000

08005728 <HAL_I2C_Mem_Read>:
{
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800572e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8005732:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 8005736:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005738:	2820      	cmp	r0, #32
 800573a:	f040 80a9 	bne.w	8005890 <HAL_I2C_Mem_Read+0x168>
    if ((pData == NULL) || (Size == 0U))
 800573e:	4699      	mov	r9, r3
 8005740:	9b08      	ldr	r3, [sp, #32]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 809e 	beq.w	8005884 <HAL_I2C_Mem_Read+0x15c>
 8005748:	f1ba 0f00 	cmp.w	sl, #0
 800574c:	f000 809a 	beq.w	8005884 <HAL_I2C_Mem_Read+0x15c>
    __HAL_LOCK(hi2c);
 8005750:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005754:	2b01      	cmp	r3, #1
 8005756:	f000 809b 	beq.w	8005890 <HAL_I2C_Mem_Read+0x168>
 800575a:	2301      	movs	r3, #1
 800575c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005760:	460e      	mov	r6, r1
 8005762:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 8005764:	f7fe fc0a 	bl	8003f7c <HAL_GetTick>
 8005768:	4607      	mov	r7, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800576a:	e004      	b.n	8005776 <HAL_I2C_Mem_Read+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fe fc06 	bl	8003f7c <HAL_GetTick>
 8005770:	1bc0      	subs	r0, r0, r7
 8005772:	2819      	cmp	r0, #25
 8005774:	d878      	bhi.n	8005868 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005776:	6821      	ldr	r1, [r4, #0]
 8005778:	698b      	ldr	r3, [r1, #24]
 800577a:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800577e:	d1f5      	bne.n	800576c <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005780:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005782:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005784:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005788:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800578e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005792:	6848      	ldr	r0, [r1, #4]
 8005794:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8005978 <HAL_I2C_Mem_Read+0x250>
    hi2c->pBuffPtr  = pData;
 8005798:	9a08      	ldr	r2, [sp, #32]
 800579a:	6262      	str	r2, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
 800579c:	ea0c 0200 	and.w	r2, ip, r0
 80057a0:	fa5f f089 	uxtb.w	r0, r9
 80057a4:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80057a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80057ac:	4330      	orrs	r0, r6
 80057ae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80057b2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    hi2c->XferISR   = NULL;
 80057b6:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b8:	463a      	mov	r2, r7
  MODIFY_REG(hi2c->Instance->CR2,
 80057ba:	6048      	str	r0, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057bc:	4629      	mov	r1, r5
 80057be:	4620      	mov	r0, r4
 80057c0:	f7ff fd86 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f040 80bc 	bne.w	8005942 <HAL_I2C_Mem_Read+0x21a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ca:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ce:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057d0:	f040 8095 	bne.w	80058fe <HAL_I2C_Mem_Read+0x1d6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057d4:	fa5f f288 	uxtb.w	r2, r8
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
 80057da:	1c68      	adds	r0, r5, #1
 80057dc:	d15b      	bne.n	8005896 <HAL_I2C_Mem_Read+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	0651      	lsls	r1, r2, #25
 80057e2:	d5fc      	bpl.n	80057de <HAL_I2C_Mem_Read+0xb6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057e6:	b292      	uxth	r2, r2
 80057e8:	2aff      	cmp	r2, #255	; 0xff
 80057ea:	d87e      	bhi.n	80058ea <HAL_I2C_Mem_Read+0x1c2>
      hi2c->XferSize = hi2c->XferCount;
 80057ec:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80057ee:	4862      	ldr	r0, [pc, #392]	; (8005978 <HAL_I2C_Mem_Read+0x250>)
 80057f0:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 80057f2:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 80057f4:	4002      	ands	r2, r0
 80057f6:	4332      	orrs	r2, r6
 80057f8:	b2c8      	uxtb	r0, r1
 80057fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80057fe:	f042 4202 	orr.w	r2, r2, #2181038080	; 0x82000000
 8005802:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 8005806:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	1c68      	adds	r0, r5, #1
 800580c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8005984 <HAL_I2C_Mem_Read+0x25c>
 8005810:	f8df a174 	ldr.w	sl, [pc, #372]	; 8005988 <HAL_I2C_Mem_Read+0x260>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005814:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005818:	d11c      	bne.n	8005854 <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	0751      	lsls	r1, r2, #29
 800581e:	d5fc      	bpl.n	800581a <HAL_I2C_Mem_Read+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005820:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005826:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005828:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800582a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800582c:	3901      	subs	r1, #1
 800582e:	b289      	uxth	r1, r1
 8005830:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005832:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005834:	3b01      	subs	r3, #1
 8005836:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005838:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800583a:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800583c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800583e:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005840:	b109      	cbz	r1, 8005846 <HAL_I2C_Mem_Read+0x11e>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d03d      	beq.n	80058c2 <HAL_I2C_Mem_Read+0x19a>
    } while (hi2c->XferCount > 0U);
 8005846:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d07e      	beq.n	800594c <HAL_I2C_Mem_Read+0x224>
 800584e:	1c68      	adds	r0, r5, #1
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	d0e2      	beq.n	800581a <HAL_I2C_Mem_Read+0xf2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	0752      	lsls	r2, r2, #29
 8005858:	d4e2      	bmi.n	8005820 <HAL_I2C_Mem_Read+0xf8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fe fb8f 	bl	8003f7c <HAL_GetTick>
 800585e:	1bc0      	subs	r0, r0, r7
 8005860:	4285      	cmp	r5, r0
 8005862:	d301      	bcc.n	8005868 <HAL_I2C_Mem_Read+0x140>
 8005864:	2d00      	cmp	r5, #0
 8005866:	d1f2      	bne.n	800584e <HAL_I2C_Mem_Read+0x126>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005868:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800586a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800586c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800586e:	430b      	orrs	r3, r1
 8005870:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005872:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8005876:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800587e:	2001      	movs	r0, #1
}
 8005880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005888:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800588a:	2001      	movs	r0, #1
}
 800588c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8005890:	2002      	movs	r0, #2
}
 8005892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	0652      	lsls	r2, r2, #25
 800589a:	d4a3      	bmi.n	80057e4 <HAL_I2C_Mem_Read+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589c:	f7fe fb6e 	bl	8003f7c <HAL_GetTick>
 80058a0:	1bc0      	subs	r0, r0, r7
 80058a2:	4285      	cmp	r5, r0
 80058a4:	d344      	bcc.n	8005930 <HAL_I2C_Mem_Read+0x208>
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	d042      	beq.n	8005930 <HAL_I2C_Mem_Read+0x208>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	e795      	b.n	80057da <HAL_I2C_Mem_Read+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058ae:	6993      	ldr	r3, [r2, #24]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	d40c      	bmi.n	80058ce <HAL_I2C_Mem_Read+0x1a6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b4:	f7fe fb62 	bl	8003f7c <HAL_GetTick>
 80058b8:	1bc0      	subs	r0, r0, r7
 80058ba:	4285      	cmp	r5, r0
 80058bc:	d3d4      	bcc.n	8005868 <HAL_I2C_Mem_Read+0x140>
 80058be:	2d00      	cmp	r5, #0
 80058c0:	d0d2      	beq.n	8005868 <HAL_I2C_Mem_Read+0x140>
 80058c2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058c4:	6822      	ldr	r2, [r4, #0]
 80058c6:	d1f2      	bne.n	80058ae <HAL_I2C_Mem_Read+0x186>
 80058c8:	6993      	ldr	r3, [r2, #24]
 80058ca:	0619      	lsls	r1, r3, #24
 80058cc:	d5fc      	bpl.n	80058c8 <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2bff      	cmp	r3, #255	; 0xff
 80058d4:	d91e      	bls.n	8005914 <HAL_I2C_Mem_Read+0x1ec>
  MODIFY_REG(hi2c->Instance->CR2,
 80058d6:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d8:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80058dc:	ea03 0308 	and.w	r3, r3, r8
 80058e0:	4333      	orrs	r3, r6
 80058e2:	ea43 030a 	orr.w	r3, r3, sl
 80058e6:	6053      	str	r3, [r2, #4]
}
 80058e8:	e7ad      	b.n	8005846 <HAL_I2C_Mem_Read+0x11e>
  MODIFY_REG(hi2c->Instance->CR2,
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4822      	ldr	r0, [pc, #136]	; (8005978 <HAL_I2C_Mem_Read+0x250>)
 80058ee:	4923      	ldr	r1, [pc, #140]	; (800597c <HAL_I2C_Mem_Read+0x254>)
 80058f0:	4002      	ands	r2, r0
 80058f2:	4332      	orrs	r2, r6
 80058f4:	4311      	orrs	r1, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80058fa:	6059      	str	r1, [r3, #4]
}
 80058fc:	e785      	b.n	800580a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058fe:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005904:	4629      	mov	r1, r5
 8005906:	463a      	mov	r2, r7
 8005908:	4620      	mov	r0, r4
 800590a:	f7ff fce1 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800590e:	b9c0      	cbnz	r0, 8005942 <HAL_I2C_Mem_Read+0x21a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	e75f      	b.n	80057d4 <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 8005914:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005916:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8005918:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 800591a:	ea03 0308 	and.w	r3, r3, r8
 800591e:	4333      	orrs	r3, r6
 8005920:	b2c8      	uxtb	r0, r1
 8005922:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800592a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800592c:	6053      	str	r3, [r2, #4]
}
 800592e:	e78a      	b.n	8005846 <HAL_I2C_Mem_Read+0x11e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005930:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005932:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005936:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800593a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800593e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005942:	2300      	movs	r3, #0
 8005944:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005948:	2001      	movs	r0, #1
 800594a:	e79f      	b.n	800588c <HAL_I2C_Mem_Read+0x164>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594c:	463a      	mov	r2, r7
 800594e:	4629      	mov	r1, r5
 8005950:	4620      	mov	r0, r4
 8005952:	f7ff fd11 	bl	8005378 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005956:	b968      	cbnz	r0, 8005974 <HAL_I2C_Mem_Read+0x24c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005958:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800595a:	4d09      	ldr	r5, [pc, #36]	; (8005980 <HAL_I2C_Mem_Read+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800595c:	2120      	movs	r1, #32
 800595e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	402a      	ands	r2, r5
 8005964:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005966:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800596a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800596e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005972:	e78b      	b.n	800588c <HAL_I2C_Mem_Read+0x164>
      return HAL_ERROR;
 8005974:	2001      	movs	r0, #1
 8005976:	e789      	b.n	800588c <HAL_I2C_Mem_Read+0x164>
 8005978:	fc009800 	.word	0xfc009800
 800597c:	81ff2400 	.word	0x81ff2400
 8005980:	fe00e800 	.word	0xfe00e800
 8005984:	fc009c00 	.word	0xfc009c00
 8005988:	01ff0000 	.word	0x01ff0000

0800598c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005990:	2a20      	cmp	r2, #32
 8005992:	d121      	bne.n	80059d8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
{
 8005994:	b430      	push	{r4, r5}
 8005996:	b2d4      	uxtb	r4, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005998:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800599c:	2a01      	cmp	r2, #1
 800599e:	4603      	mov	r3, r0
 80059a0:	d01c      	beq.n	80059dc <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a2:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a4:	2024      	movs	r0, #36	; 0x24
 80059a6:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80059aa:	6810      	ldr	r0, [r2, #0]
 80059ac:	f020 0001 	bic.w	r0, r0, #1
 80059b0:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059b2:	6810      	ldr	r0, [r2, #0]
 80059b4:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80059b8:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ba:	6810      	ldr	r0, [r2, #0]
 80059bc:	4301      	orrs	r1, r0
 80059be:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059c0:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c2:	2500      	movs	r5, #0
    __HAL_I2C_ENABLE(hi2c);
 80059c4:	f041 0101 	orr.w	r1, r1, #1
 80059c8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80059ce:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40

    return HAL_OK;
 80059d2:	4628      	mov	r0, r5
  }
  else
  {
    return HAL_BUSY;
  }
}
 80059d4:	bc30      	pop	{r4, r5}
 80059d6:	4770      	bx	lr
    return HAL_BUSY;
 80059d8:	2002      	movs	r0, #2
}
 80059da:	4770      	bx	lr
    return HAL_BUSY;
 80059dc:	2002      	movs	r0, #2
}
 80059de:	bc30      	pop	{r4, r5}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80059e8:	2a20      	cmp	r2, #32
 80059ea:	d120      	bne.n	8005a2e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
{
 80059ec:	b430      	push	{r4, r5}
 80059ee:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	4603      	mov	r3, r0
 80059f8:	d01b      	beq.n	8005a32 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059fa:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059fc:	2024      	movs	r0, #36	; 0x24
 80059fe:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8005a02:	6810      	ldr	r0, [r2, #0]
 8005a04:	f020 0001 	bic.w	r0, r0, #1
 8005a08:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a0a:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a0c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a10:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a14:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a16:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a18:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8005a1a:	f041 0101 	orr.w	r1, r1, #1
 8005a1e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a20:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005a24:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40

    return HAL_OK;
 8005a28:	4620      	mov	r0, r4
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005a2a:	bc30      	pop	{r4, r5}
 8005a2c:	4770      	bx	lr
    return HAL_BUSY;
 8005a2e:	2002      	movs	r0, #2
}
 8005a30:	4770      	bx	lr
    return HAL_BUSY;
 8005a32:	2002      	movs	r0, #2
}
 8005a34:	bc30      	pop	{r4, r5}
 8005a36:	4770      	bx	lr

08005a38 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d07d      	beq.n	8005b38 <HAL_OPAMP_Init+0x100>
{
 8005a3c:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005a3e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005a42:	2b05      	cmp	r3, #5
{
 8005a44:	b082      	sub	sp, #8
 8005a46:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005a48:	d057      	beq.n	8005afa <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005a4a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d053      	beq.n	8005afa <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a52:	4b3a      	ldr	r3, [pc, #232]	; (8005b3c <HAL_OPAMP_Init+0x104>)
 8005a54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	661a      	str	r2, [r3, #96]	; 0x60
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005a66:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005a6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a6e:	b90b      	cbnz	r3, 8005a74 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005a70:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7fd ffb7 	bl	80039e8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	f023 0220 	bic.w	r2, r3, #32
 8005a80:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005a82:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005a84:	d03c      	beq.n	8005b00 <HAL_OPAMP_Init+0xc8>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005a86:	6860      	ldr	r0, [r4, #4]
 8005a88:	68e6      	ldr	r6, [r4, #12]
 8005a8a:	6811      	ldr	r1, [r2, #0]
 8005a8c:	6925      	ldr	r5, [r4, #16]
 8005a8e:	4303      	orrs	r3, r0
 8005a90:	4333      	orrs	r3, r6
 8005a92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005a94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a96:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8005a98:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8005a9c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8005a9e:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005aa0:	4333      	orrs	r3, r6
 8005aa2:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 8005aa6:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005aa8:	432b      	orrs	r3, r5
 8005aaa:	4925      	ldr	r1, [pc, #148]	; (8005b40 <HAL_OPAMP_Init+0x108>)
 8005aac:	6815      	ldr	r5, [r2, #0]
 8005aae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8005ab2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005ab6:	7d20      	ldrb	r0, [r4, #20]
 8005ab8:	4029      	ands	r1, r5
 8005aba:	2801      	cmp	r0, #1
 8005abc:	ea43 0301 	orr.w	r3, r3, r1
 8005ac0:	bf0c      	ite	eq
 8005ac2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005ac6:	2100      	movne	r1, #0
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005acc:	6993      	ldr	r3, [r2, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	db09      	blt.n	8005ae6 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005ad2:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8005ad6:	6a20      	ldr	r0, [r4, #32]
 8005ad8:	6991      	ldr	r1, [r2, #24]
 8005ada:	432b      	orrs	r3, r5
 8005adc:	4303      	orrs	r3, r0
 8005ade:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005ae6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005aea:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005aee:	bb03      	cbnz	r3, 8005b32 <HAL_OPAMP_Init+0xfa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8005af6:	b002      	add	sp, #8
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005afa:	2001      	movs	r0, #1
}
 8005afc:	b002      	add	sp, #8
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8005b00:	6866      	ldr	r6, [r4, #4]
 8005b02:	6811      	ldr	r1, [r2, #0]
 8005b04:	6920      	ldr	r0, [r4, #16]
 8005b06:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005b08:	4333      	orrs	r3, r6
 8005b0a:	4303      	orrs	r3, r0
 8005b0c:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8005b10:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 8005b12:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8005b14:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8005b16:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005b18:	4303      	orrs	r3, r0
 8005b1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005b1c:	6816      	ldr	r6, [r2, #0]
 8005b1e:	4908      	ldr	r1, [pc, #32]	; (8005b40 <HAL_OPAMP_Init+0x108>)
 8005b20:	432b      	orrs	r3, r5
 8005b22:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005b24:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8005b28:	4031      	ands	r1, r6
 8005b2a:	7d20      	ldrb	r0, [r4, #20]
 8005b2c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005b30:	e7c3      	b.n	8005aba <HAL_OPAMP_Init+0x82>
    return status;
 8005b32:	2000      	movs	r0, #0
}
 8005b34:	b002      	add	sp, #8
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005b38:	2001      	movs	r0, #1
}
 8005b3a:	4770      	bx	lr
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	e0003e11 	.word	0xe0003e11

08005b44 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b44:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8005b46:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b48:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b4a:	b968      	cbnz	r0, 8005b68 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b54:	d014      	beq.n	8005b80 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b56:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005b5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8005b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b66:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b68:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005b6c:	d02f      	beq.n	8005bce <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b76:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005b78:	2000      	movs	r0, #0
}
 8005b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b7e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b80:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b84:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005b86:	482d      	ldr	r0, [pc, #180]	; (8005c3c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b88:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005b8c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005b96:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005b9a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b9c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b9e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ba0:	2332      	movs	r3, #50	; 0x32
 8005ba2:	fb03 f304 	mul.w	r3, r3, r4
 8005ba6:	fba0 0303 	umull	r0, r3, r0, r3
 8005baa:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bac:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bae:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bb2:	d506      	bpl.n	8005bc2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005bb4:	e000      	b.n	8005bb8 <HAL_PWREx_ControlVoltageScaling+0x74>
 8005bb6:	b123      	cbz	r3, 8005bc2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005bb8:	6951      	ldr	r1, [r2, #20]
 8005bba:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005bbc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bc0:	d4f9      	bmi.n	8005bb6 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	055c      	lsls	r4, r3, #21
 8005bc8:	d5d6      	bpl.n	8005b78 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8005bca:	2003      	movs	r0, #3
 8005bcc:	e7c9      	b.n	8005b62 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd6:	d009      	beq.n	8005bec <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bd8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8005bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005be4:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005be6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005bea:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bec:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bf0:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005bf2:	4812      	ldr	r0, [pc, #72]	; (8005c3c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bf4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005bf8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bfc:	6811      	ldr	r1, [r2, #0]
 8005bfe:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005c02:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005c06:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c08:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c0a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c0c:	2332      	movs	r3, #50	; 0x32
 8005c0e:	fb03 f304 	mul.w	r3, r3, r4
 8005c12:	fba0 0303 	umull	r0, r3, r0, r3
 8005c16:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c18:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c1a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c1e:	d5d0      	bpl.n	8005bc2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005c20:	e001      	b.n	8005c26 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0cd      	beq.n	8005bc2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005c26:	6951      	ldr	r1, [r2, #20]
 8005c28:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005c2a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c2e:	d5c8      	bpl.n	8005bc2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005c30:	e7f7      	b.n	8005c22 <HAL_PWREx_ControlVoltageScaling+0xde>
 8005c32:	bf00      	nop
 8005c34:	40007000 	.word	0x40007000
 8005c38:	20000538 	.word	0x20000538
 8005c3c:	431bde83 	.word	0x431bde83

08005c40 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c40:	4a02      	ldr	r2, [pc, #8]	; (8005c4c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005c42:	6893      	ldr	r3, [r2, #8]
 8005c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c48:	6093      	str	r3, [r2, #8]
}
 8005c4a:	4770      	bx	lr
 8005c4c:	40007000 	.word	0x40007000

08005c50 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c50:	2800      	cmp	r0, #0
 8005c52:	f000 81c3 	beq.w	8005fdc <HAL_RCC_OscConfig+0x38c>
{
 8005c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c5a:	6803      	ldr	r3, [r0, #0]
 8005c5c:	07d9      	lsls	r1, r3, #31
{
 8005c5e:	b082      	sub	sp, #8
 8005c60:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c62:	d52d      	bpl.n	8005cc0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c64:	49b5      	ldr	r1, [pc, #724]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005c66:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c68:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c6e:	2a0c      	cmp	r2, #12
 8005c70:	f000 810a 	beq.w	8005e88 <HAL_RCC_OscConfig+0x238>
 8005c74:	2a08      	cmp	r2, #8
 8005c76:	f000 810c 	beq.w	8005e92 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c80:	f000 8133 	beq.w	8005eea <HAL_RCC_OscConfig+0x29a>
 8005c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c88:	f000 819b 	beq.w	8005fc2 <HAL_RCC_OscConfig+0x372>
 8005c8c:	4dab      	ldr	r5, [pc, #684]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005c8e:	682a      	ldr	r2, [r5, #0]
 8005c90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	682a      	ldr	r2, [r5, #0]
 8005c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c9c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 8128 	bne.w	8005ef4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca4:	f7fe f96a 	bl	8003f7c <HAL_GetTick>
 8005ca8:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005caa:	e005      	b.n	8005cb8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cac:	f7fe f966 	bl	8003f7c <HAL_GetTick>
 8005cb0:	1b80      	subs	r0, r0, r6
 8005cb2:	2864      	cmp	r0, #100	; 0x64
 8005cb4:	f200 813b 	bhi.w	8005f2e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	039f      	lsls	r7, r3, #14
 8005cbc:	d4f6      	bmi.n	8005cac <HAL_RCC_OscConfig+0x5c>
 8005cbe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc0:	079e      	lsls	r6, r3, #30
 8005cc2:	d528      	bpl.n	8005d16 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc4:	4a9d      	ldr	r2, [pc, #628]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005cc6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cc8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cca:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005cce:	2b0c      	cmp	r3, #12
 8005cd0:	f000 80ec 	beq.w	8005eac <HAL_RCC_OscConfig+0x25c>
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	f000 80ee 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cda:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cdc:	4d97      	ldr	r5, [pc, #604]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8116 	beq.w	8005f10 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cea:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fe f946 	bl	8003f7c <HAL_GetTick>
 8005cf0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf2:	e005      	b.n	8005d00 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf4:	f7fe f942 	bl	8003f7c <HAL_GetTick>
 8005cf8:	1b80      	subs	r0, r0, r6
 8005cfa:	2802      	cmp	r0, #2
 8005cfc:	f200 8117 	bhi.w	8005f2e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	0558      	lsls	r0, r3, #21
 8005d04:	d5f6      	bpl.n	8005cf4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d06:	686b      	ldr	r3, [r5, #4]
 8005d08:	6922      	ldr	r2, [r4, #16]
 8005d0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d12:	606b      	str	r3, [r5, #4]
 8005d14:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d16:	071a      	lsls	r2, r3, #28
 8005d18:	d519      	bpl.n	8005d4e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d1a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1c:	4d87      	ldr	r5, [pc, #540]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 809e 	beq.w	8005e60 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005d24:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fe f924 	bl	8003f7c <HAL_GetTick>
 8005d34:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d36:	e005      	b.n	8005d44 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d38:	f7fe f920 	bl	8003f7c <HAL_GetTick>
 8005d3c:	1b80      	subs	r0, r0, r6
 8005d3e:	2802      	cmp	r0, #2
 8005d40:	f200 80f5 	bhi.w	8005f2e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d44:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005d48:	079f      	lsls	r7, r3, #30
 8005d4a:	d5f5      	bpl.n	8005d38 <HAL_RCC_OscConfig+0xe8>
 8005d4c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d4e:	0759      	lsls	r1, r3, #29
 8005d50:	d541      	bpl.n	8005dd6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d52:	4b7a      	ldr	r3, [pc, #488]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005d54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d56:	00d2      	lsls	r2, r2, #3
 8005d58:	f100 80ed 	bmi.w	8005f36 <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d62:	659a      	str	r2, [r3, #88]	; 0x58
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005d6e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d70:	4e73      	ldr	r6, [pc, #460]	; (8005f40 <HAL_RCC_OscConfig+0x2f0>)
 8005d72:	6833      	ldr	r3, [r6, #0]
 8005d74:	05df      	lsls	r7, r3, #23
 8005d76:	f140 8113 	bpl.w	8005fa0 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7a:	68a3      	ldr	r3, [r4, #8]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f000 80e3 	beq.w	8005f48 <HAL_RCC_OscConfig+0x2f8>
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	f000 8169 	beq.w	800605a <HAL_RCC_OscConfig+0x40a>
 8005d88:	4e6c      	ldr	r6, [pc, #432]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005d8a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8005d96:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f040 80d7 	bne.w	8005f56 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da8:	f7fe f8e8 	bl	8003f7c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dac:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005db0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005db2:	e005      	b.n	8005dc0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db4:	f7fe f8e2 	bl	8003f7c <HAL_GetTick>
 8005db8:	1bc0      	subs	r0, r0, r7
 8005dba:	4540      	cmp	r0, r8
 8005dbc:	f200 80b7 	bhi.w	8005f2e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dc0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005dc4:	079a      	lsls	r2, r3, #30
 8005dc6:	d4f5      	bmi.n	8005db4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dc8:	b125      	cbz	r5, 8005dd4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dca:	4a5c      	ldr	r2, [pc, #368]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005dcc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd4:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dd6:	069b      	lsls	r3, r3, #26
 8005dd8:	d518      	bpl.n	8005e0c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005dda:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ddc:	4d57      	ldr	r5, [pc, #348]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 80ca 	beq.w	8005f78 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8005de4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df0:	f7fe f8c4 	bl	8003f7c <HAL_GetTick>
 8005df4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005df6:	e005      	b.n	8005e04 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005df8:	f7fe f8c0 	bl	8003f7c <HAL_GetTick>
 8005dfc:	1b80      	subs	r0, r0, r6
 8005dfe:	2802      	cmp	r0, #2
 8005e00:	f200 8095 	bhi.w	8005f2e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e04:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005e08:	079f      	lsls	r7, r3, #30
 8005e0a:	d5f5      	bpl.n	8005df8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e0c:	69e0      	ldr	r0, [r4, #28]
 8005e0e:	b318      	cbz	r0, 8005e58 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e10:	4d4a      	ldr	r5, [pc, #296]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005e12:	68ab      	ldr	r3, [r5, #8]
 8005e14:	f003 030c 	and.w	r3, r3, #12
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	f000 812c 	beq.w	8006076 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e20:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e26:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e28:	f000 80da 	beq.w	8005fe0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e2c:	68eb      	ldr	r3, [r5, #12]
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e34:	68eb      	ldr	r3, [r5, #12]
 8005e36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fe f89c 	bl	8003f7c <HAL_GetTick>
 8005e44:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e46:	e004      	b.n	8005e52 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fe f898 	bl	8003f7c <HAL_GetTick>
 8005e4c:	1b00      	subs	r0, r0, r4
 8005e4e:	2802      	cmp	r0, #2
 8005e50:	d86d      	bhi.n	8005f2e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	d4f7      	bmi.n	8005e48 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8005e58:	2000      	movs	r0, #0
}
 8005e5a:	b002      	add	sp, #8
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005e60:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005e6c:	f7fe f886 	bl	8003f7c <HAL_GetTick>
 8005e70:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e72:	e004      	b.n	8005e7e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e74:	f7fe f882 	bl	8003f7c <HAL_GetTick>
 8005e78:	1b80      	subs	r0, r0, r6
 8005e7a:	2802      	cmp	r0, #2
 8005e7c:	d857      	bhi.n	8005f2e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e7e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005e82:	0798      	lsls	r0, r3, #30
 8005e84:	d4f6      	bmi.n	8005e74 <HAL_RCC_OscConfig+0x224>
 8005e86:	e761      	b.n	8005d4c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e88:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e8c:	2903      	cmp	r1, #3
 8005e8e:	f47f aef4 	bne.w	8005c7a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e92:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	0392      	lsls	r2, r2, #14
 8005e98:	f57f af12 	bpl.w	8005cc0 <HAL_RCC_OscConfig+0x70>
 8005e9c:	6862      	ldr	r2, [r4, #4]
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	f47f af0e 	bne.w	8005cc0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005ea4:	2001      	movs	r0, #1
}
 8005ea6:	b002      	add	sp, #8
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eac:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005eb0:	2a02      	cmp	r2, #2
 8005eb2:	f47f af12 	bne.w	8005cda <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eb6:	4b21      	ldr	r3, [pc, #132]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	055d      	lsls	r5, r3, #21
 8005ebc:	d502      	bpl.n	8005ec4 <HAL_RCC_OscConfig+0x274>
 8005ebe:	68e3      	ldr	r3, [r4, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ef      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec4:	4a1d      	ldr	r2, [pc, #116]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005ec6:	6920      	ldr	r0, [r4, #16]
 8005ec8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005eca:	491e      	ldr	r1, [pc, #120]	; (8005f44 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ecc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ed0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005ed4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ed6:	6808      	ldr	r0, [r1, #0]
 8005ed8:	f7fe f80e 	bl	8003ef8 <HAL_InitTick>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1e1      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x254>
 8005ee0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee2:	071a      	lsls	r2, r3, #28
 8005ee4:	f57f af33 	bpl.w	8005d4e <HAL_RCC_OscConfig+0xfe>
 8005ee8:	e717      	b.n	8005d1a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eea:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
 8005eec:	6813      	ldr	r3, [r2, #0]
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ef4:	f7fe f842 	bl	8003f7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ef8:	4e10      	ldr	r6, [pc, #64]	; (8005f3c <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8005efa:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efc:	e004      	b.n	8005f08 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005efe:	f7fe f83d 	bl	8003f7c <HAL_GetTick>
 8005f02:	1b40      	subs	r0, r0, r5
 8005f04:	2864      	cmp	r0, #100	; 0x64
 8005f06:	d812      	bhi.n	8005f2e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	039b      	lsls	r3, r3, #14
 8005f0c:	d5f7      	bpl.n	8005efe <HAL_RCC_OscConfig+0x2ae>
 8005f0e:	e6d6      	b.n	8005cbe <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f18:	f7fe f830 	bl	8003f7c <HAL_GetTick>
 8005f1c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	0559      	lsls	r1, r3, #21
 8005f22:	d5dd      	bpl.n	8005ee0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f24:	f7fe f82a 	bl	8003f7c <HAL_GetTick>
 8005f28:	1b80      	subs	r0, r0, r6
 8005f2a:	2802      	cmp	r0, #2
 8005f2c:	d9f7      	bls.n	8005f1e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8005f2e:	2003      	movs	r0, #3
}
 8005f30:	b002      	add	sp, #8
 8005f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005f36:	2500      	movs	r5, #0
 8005f38:	e71a      	b.n	8005d70 <HAL_RCC_OscConfig+0x120>
 8005f3a:	bf00      	nop
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	40007000 	.word	0x40007000
 8005f44:	20000540 	.word	0x20000540
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f48:	4a65      	ldr	r2, [pc, #404]	; (80060e0 <HAL_RCC_OscConfig+0x490>)
 8005f4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005f56:	f7fe f811 	bl	8003f7c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f5a:	4f61      	ldr	r7, [pc, #388]	; (80060e0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005f5c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f62:	e004      	b.n	8005f6e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fe f80a 	bl	8003f7c <HAL_GetTick>
 8005f68:	1b80      	subs	r0, r0, r6
 8005f6a:	4540      	cmp	r0, r8
 8005f6c:	d8df      	bhi.n	8005f2e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f72:	0799      	lsls	r1, r3, #30
 8005f74:	d5f6      	bpl.n	8005f64 <HAL_RCC_OscConfig+0x314>
 8005f76:	e727      	b.n	8005dc8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8005f78:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005f84:	f7fd fffa 	bl	8003f7c <HAL_GetTick>
 8005f88:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f8a:	e004      	b.n	8005f96 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f8c:	f7fd fff6 	bl	8003f7c <HAL_GetTick>
 8005f90:	1b80      	subs	r0, r0, r6
 8005f92:	2802      	cmp	r0, #2
 8005f94:	d8cb      	bhi.n	8005f2e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f96:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005f9a:	0798      	lsls	r0, r3, #30
 8005f9c:	d4f6      	bmi.n	8005f8c <HAL_RCC_OscConfig+0x33c>
 8005f9e:	e735      	b.n	8005e0c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa0:	6833      	ldr	r3, [r6, #0]
 8005fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005fa8:	f7fd ffe8 	bl	8003f7c <HAL_GetTick>
 8005fac:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fae:	6833      	ldr	r3, [r6, #0]
 8005fb0:	05d8      	lsls	r0, r3, #23
 8005fb2:	f53f aee2 	bmi.w	8005d7a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb6:	f7fd ffe1 	bl	8003f7c <HAL_GetTick>
 8005fba:	1bc0      	subs	r0, r0, r7
 8005fbc:	2802      	cmp	r0, #2
 8005fbe:	d9f6      	bls.n	8005fae <HAL_RCC_OscConfig+0x35e>
 8005fc0:	e7b5      	b.n	8005f2e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fc6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005fd8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fda:	e78b      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005fdc:	2001      	movs	r0, #1
}
 8005fde:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005fe0:	f7fd ffcc 	bl	8003f7c <HAL_GetTick>
 8005fe4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe6:	e004      	b.n	8005ff2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fd ffc8 	bl	8003f7c <HAL_GetTick>
 8005fec:	1b80      	subs	r0, r0, r6
 8005fee:	2802      	cmp	r0, #2
 8005ff0:	d89d      	bhi.n	8005f2e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	0199      	lsls	r1, r3, #6
 8005ff6:	d4f7      	bmi.n	8005fe8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ff8:	68e9      	ldr	r1, [r5, #12]
 8005ffa:	4b3a      	ldr	r3, [pc, #232]	; (80060e4 <HAL_RCC_OscConfig+0x494>)
 8005ffc:	6a22      	ldr	r2, [r4, #32]
 8005ffe:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006004:	400b      	ands	r3, r1
 8006006:	4313      	orrs	r3, r2
 8006008:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800600c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006010:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8006014:	3801      	subs	r0, #1
 8006016:	0849      	lsrs	r1, r1, #1
 8006018:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800601c:	3901      	subs	r1, #1
 800601e:	0852      	lsrs	r2, r2, #1
 8006020:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006024:	3a01      	subs	r2, #1
 8006026:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800602a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800602c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800602e:	4e2c      	ldr	r6, [pc, #176]	; (80060e0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8006030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006034:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006036:	68eb      	ldr	r3, [r5, #12]
 8006038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800603c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800603e:	f7fd ff9d 	bl	8003f7c <HAL_GetTick>
 8006042:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006044:	e005      	b.n	8006052 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006046:	f7fd ff99 	bl	8003f7c <HAL_GetTick>
 800604a:	1b00      	subs	r0, r0, r4
 800604c:	2802      	cmp	r0, #2
 800604e:	f63f af6e 	bhi.w	8005f2e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006052:	6833      	ldr	r3, [r6, #0]
 8006054:	019a      	lsls	r2, r3, #6
 8006056:	d5f6      	bpl.n	8006046 <HAL_RCC_OscConfig+0x3f6>
 8006058:	e6fe      	b.n	8005e58 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800605a:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <HAL_RCC_OscConfig+0x490>)
 800605c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006060:	f042 0204 	orr.w	r2, r2, #4
 8006064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006068:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800606c:	f042 0201 	orr.w	r2, r2, #1
 8006070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006074:	e76f      	b.n	8005f56 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006076:	2801      	cmp	r0, #1
 8006078:	f43f aeef 	beq.w	8005e5a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800607c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800607e:	6a22      	ldr	r2, [r4, #32]
 8006080:	f003 0103 	and.w	r1, r3, #3
 8006084:	4291      	cmp	r1, r2
 8006086:	f47f af0d 	bne.w	8005ea4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800608a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800608c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006090:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006092:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006096:	f47f af05 	bne.w	8005ea4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800609a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800609c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060a0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80060a4:	f47f aefe 	bne.w	8005ea4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ae:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80060b2:	f47f aef7 	bne.w	8005ea4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060b8:	0852      	lsrs	r2, r2, #1
 80060ba:	3a01      	subs	r2, #1
 80060bc:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060c0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80060c4:	f47f aeee 	bne.w	8005ea4 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80060ca:	0852      	lsrs	r2, r2, #1
 80060cc:	3a01      	subs	r2, #1
 80060ce:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060d2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80060d6:	bf14      	ite	ne
 80060d8:	2001      	movne	r0, #1
 80060da:	2000      	moveq	r0, #0
 80060dc:	e6bd      	b.n	8005e5a <HAL_RCC_OscConfig+0x20a>
 80060de:	bf00      	nop
 80060e0:	40021000 	.word	0x40021000
 80060e4:	019f800c 	.word	0x019f800c

080060e8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80060e8:	4b18      	ldr	r3, [pc, #96]	; (800614c <HAL_RCC_GetSysClockFreq+0x64>)
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	f002 020c 	and.w	r2, r2, #12
 80060f0:	2a04      	cmp	r2, #4
 80060f2:	d027      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	f002 020c 	and.w	r2, r2, #12
 80060fa:	2a08      	cmp	r2, #8
 80060fc:	d024      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	f002 020c 	and.w	r2, r2, #12
 8006104:	2a0c      	cmp	r2, #12
 8006106:	d001      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006108:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800610a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800610c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800610e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006110:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006112:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006116:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 800611a:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800611c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006120:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006124:	bf0c      	ite	eq
 8006126:	480a      	ldreq	r0, [pc, #40]	; (8006150 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006128:	480a      	ldrne	r0, [pc, #40]	; (8006154 <HAL_RCC_GetSysClockFreq+0x6c>)
 800612a:	fbb0 f0f2 	udiv	r0, r0, r2
 800612e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RCC_GetSysClockFreq+0x64>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800613a:	3301      	adds	r3, #1
 800613c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800613e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006142:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006144:	4803      	ldr	r0, [pc, #12]	; (8006154 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006146:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <HAL_RCC_GetSysClockFreq+0x68>)
 800614a:	4770      	bx	lr
 800614c:	40021000 	.word	0x40021000
 8006150:	016e3600 	.word	0x016e3600
 8006154:	00f42400 	.word	0x00f42400

08006158 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006158:	2800      	cmp	r0, #0
 800615a:	f000 80ef 	beq.w	800633c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800615e:	4a7f      	ldr	r2, [pc, #508]	; (800635c <HAL_RCC_ClockConfig+0x204>)
{
 8006160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	428b      	cmp	r3, r1
 800616c:	460d      	mov	r5, r1
 800616e:	4604      	mov	r4, r0
 8006170:	d20c      	bcs.n	800618c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	6813      	ldr	r3, [r2, #0]
 8006174:	f023 030f 	bic.w	r3, r3, #15
 8006178:	430b      	orrs	r3, r1
 800617a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617c:	6813      	ldr	r3, [r2, #0]
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	428b      	cmp	r3, r1
 8006184:	d002      	beq.n	800618c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006186:	2001      	movs	r0, #1
}
 8006188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07de      	lsls	r6, r3, #31
 8006190:	d563      	bpl.n	800625a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006192:	6862      	ldr	r2, [r4, #4]
 8006194:	2a03      	cmp	r2, #3
 8006196:	f000 809a 	beq.w	80062ce <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800619a:	4b71      	ldr	r3, [pc, #452]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800619c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800619e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a0:	f000 8091 	beq.w	80062c6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061a4:	055b      	lsls	r3, r3, #21
 80061a6:	d5ee      	bpl.n	8006186 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80061a8:	f7ff ff9e 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80061ac:	4b6d      	ldr	r3, [pc, #436]	; (8006364 <HAL_RCC_ClockConfig+0x20c>)
 80061ae:	4298      	cmp	r0, r3
 80061b0:	f200 80c6 	bhi.w	8006340 <HAL_RCC_ClockConfig+0x1e8>
 80061b4:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061b6:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061ba:	4e69      	ldr	r6, [pc, #420]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 80061bc:	68b3      	ldr	r3, [r6, #8]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	431a      	orrs	r2, r3
 80061c4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80061c6:	f7fd fed9 	bl	8003f7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80061ce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d0:	e004      	b.n	80061dc <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d2:	f7fd fed3 	bl	8003f7c <HAL_GetTick>
 80061d6:	1bc0      	subs	r0, r0, r7
 80061d8:	4540      	cmp	r0, r8
 80061da:	d871      	bhi.n	80062c0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061dc:	68b3      	ldr	r3, [r6, #8]
 80061de:	6862      	ldr	r2, [r4, #4]
 80061e0:	f003 030c 	and.w	r3, r3, #12
 80061e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80061e8:	d1f3      	bne.n	80061d2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	079f      	lsls	r7, r3, #30
 80061ee:	d436      	bmi.n	800625e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80061f0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80061f4:	d103      	bne.n	80061fe <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80061f6:	68b3      	ldr	r3, [r6, #8]
 80061f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061fe:	4e57      	ldr	r6, [pc, #348]	; (800635c <HAL_RCC_ClockConfig+0x204>)
 8006200:	6833      	ldr	r3, [r6, #0]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	42ab      	cmp	r3, r5
 8006208:	d846      	bhi.n	8006298 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	075a      	lsls	r2, r3, #29
 800620e:	d506      	bpl.n	800621e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006210:	4953      	ldr	r1, [pc, #332]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 8006212:	68e0      	ldr	r0, [r4, #12]
 8006214:	688a      	ldr	r2, [r1, #8]
 8006216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800621a:	4302      	orrs	r2, r0
 800621c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621e:	071b      	lsls	r3, r3, #28
 8006220:	d507      	bpl.n	8006232 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006222:	4a4f      	ldr	r2, [pc, #316]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 8006224:	6921      	ldr	r1, [r4, #16]
 8006226:	6893      	ldr	r3, [r2, #8]
 8006228:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800622c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006230:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006232:	f7ff ff59 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8006236:	4a4a      	ldr	r2, [pc, #296]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 8006238:	4c4b      	ldr	r4, [pc, #300]	; (8006368 <HAL_RCC_ClockConfig+0x210>)
 800623a:	6892      	ldr	r2, [r2, #8]
 800623c:	494b      	ldr	r1, [pc, #300]	; (800636c <HAL_RCC_ClockConfig+0x214>)
 800623e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006242:	4603      	mov	r3, r0
 8006244:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006246:	484a      	ldr	r0, [pc, #296]	; (8006370 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006248:	f002 021f 	and.w	r2, r2, #31
 800624c:	40d3      	lsrs	r3, r2
 800624e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006250:	6800      	ldr	r0, [r0, #0]
}
 8006252:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006256:	f7fd be4f 	b.w	8003ef8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800625a:	0798      	lsls	r0, r3, #30
 800625c:	d5cf      	bpl.n	80061fe <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625e:	0758      	lsls	r0, r3, #29
 8006260:	d504      	bpl.n	800626c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006262:	493f      	ldr	r1, [pc, #252]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 8006264:	688a      	ldr	r2, [r1, #8]
 8006266:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800626a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	0719      	lsls	r1, r3, #28
 800626e:	d506      	bpl.n	800627e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006270:	4a3b      	ldr	r2, [pc, #236]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 8006272:	6893      	ldr	r3, [r2, #8]
 8006274:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006278:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800627c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800627e:	4a38      	ldr	r2, [pc, #224]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 8006280:	68a1      	ldr	r1, [r4, #8]
 8006282:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006284:	4e35      	ldr	r6, [pc, #212]	; (800635c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628a:	430b      	orrs	r3, r1
 800628c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800628e:	6833      	ldr	r3, [r6, #0]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	42ab      	cmp	r3, r5
 8006296:	d9b8      	bls.n	800620a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006298:	6833      	ldr	r3, [r6, #0]
 800629a:	f023 030f 	bic.w	r3, r3, #15
 800629e:	432b      	orrs	r3, r5
 80062a0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80062a2:	f7fd fe6b 	bl	8003f7c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80062aa:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ac:	6833      	ldr	r3, [r6, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	42ab      	cmp	r3, r5
 80062b4:	d0a9      	beq.n	800620a <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b6:	f7fd fe61 	bl	8003f7c <HAL_GetTick>
 80062ba:	1bc0      	subs	r0, r0, r7
 80062bc:	4540      	cmp	r0, r8
 80062be:	d9f5      	bls.n	80062ac <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80062c0:	2003      	movs	r0, #3
}
 80062c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c6:	039a      	lsls	r2, r3, #14
 80062c8:	f53f af6e 	bmi.w	80061a8 <HAL_RCC_ClockConfig+0x50>
 80062cc:	e75b      	b.n	8006186 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ce:	4824      	ldr	r0, [pc, #144]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 80062d0:	6801      	ldr	r1, [r0, #0]
 80062d2:	0189      	lsls	r1, r1, #6
 80062d4:	f57f af57 	bpl.w	8006186 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062d8:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062da:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062dc:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062de:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062e2:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80062e6:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062e8:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062ec:	bf0c      	ite	eq
 80062ee:	4921      	ldreq	r1, [pc, #132]	; (8006374 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062f0:	4921      	ldrne	r1, [pc, #132]	; (8006378 <HAL_RCC_ClockConfig+0x220>)
 80062f2:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062f6:	4e1a      	ldr	r6, [pc, #104]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80062f8:	4f1a      	ldr	r7, [pc, #104]	; (8006364 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062fa:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80062fe:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006302:	68f0      	ldr	r0, [r6, #12]
 8006304:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8006308:	3001      	adds	r0, #1
 800630a:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 800630c:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8006310:	42b9      	cmp	r1, r7
 8006312:	d920      	bls.n	8006356 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006314:	68b1      	ldr	r1, [r6, #8]
 8006316:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800631a:	d005      	beq.n	8006328 <HAL_RCC_ClockConfig+0x1d0>
 800631c:	f013 0902 	ands.w	r9, r3, #2
 8006320:	f43f af4b 	beq.w	80061ba <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006324:	68a3      	ldr	r3, [r4, #8]
 8006326:	b9b3      	cbnz	r3, 8006356 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006328:	490d      	ldr	r1, [pc, #52]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 800632a:	688b      	ldr	r3, [r1, #8]
 800632c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006336:	f04f 0980 	mov.w	r9, #128	; 0x80
 800633a:	e73e      	b.n	80061ba <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800633c:	2001      	movs	r0, #1
}
 800633e:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006340:	4a07      	ldr	r2, [pc, #28]	; (8006360 <HAL_RCC_ClockConfig+0x208>)
 8006342:	6893      	ldr	r3, [r2, #8]
 8006344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006354:	e731      	b.n	80061ba <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006356:	f04f 0900 	mov.w	r9, #0
 800635a:	e72e      	b.n	80061ba <HAL_RCC_ClockConfig+0x62>
 800635c:	40022000 	.word	0x40022000
 8006360:	40021000 	.word	0x40021000
 8006364:	04c4b400 	.word	0x04c4b400
 8006368:	08009e30 	.word	0x08009e30
 800636c:	20000538 	.word	0x20000538
 8006370:	20000540 	.word	0x20000540
 8006374:	016e3600 	.word	0x016e3600
 8006378:	00f42400 	.word	0x00f42400

0800637c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000538 	.word	0x20000538

08006388 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800638a:	4a06      	ldr	r2, [pc, #24]	; (80063a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800638c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800638e:	4906      	ldr	r1, [pc, #24]	; (80063a8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006390:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006394:	6808      	ldr	r0, [r1, #0]
 8006396:	5cd3      	ldrb	r3, [r2, r3]
 8006398:	f003 031f 	and.w	r3, r3, #31
}
 800639c:	40d8      	lsrs	r0, r3
 800639e:	4770      	bx	lr
 80063a0:	40021000 	.word	0x40021000
 80063a4:	08009e40 	.word	0x08009e40
 80063a8:	20000538 	.word	0x20000538

080063ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80063ae:	4a06      	ldr	r2, [pc, #24]	; (80063c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80063b0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80063b2:	4906      	ldr	r1, [pc, #24]	; (80063cc <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063b4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80063b8:	6808      	ldr	r0, [r1, #0]
 80063ba:	5cd3      	ldrb	r3, [r2, r3]
 80063bc:	f003 031f 	and.w	r3, r3, #31
}
 80063c0:	40d8      	lsrs	r0, r3
 80063c2:	4770      	bx	lr
 80063c4:	40021000 	.word	0x40021000
 80063c8:	08009e40 	.word	0x08009e40
 80063cc:	20000538 	.word	0x20000538

080063d0 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80063d0:	4a02      	ldr	r2, [pc, #8]	; (80063dc <HAL_RCC_EnableCSS+0xc>)
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063d8:	6013      	str	r3, [r2, #0]
}
 80063da:	4770      	bx	lr
 80063dc:	40021000 	.word	0x40021000

080063e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063e4:	6803      	ldr	r3, [r0, #0]
{
 80063e6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063e8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80063ec:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063ee:	d056      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063f0:	4b9f      	ldr	r3, [pc, #636]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063f4:	00d5      	lsls	r5, r2, #3
 80063f6:	f140 810c 	bpl.w	8006612 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80063fa:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063fc:	4d9d      	ldr	r5, [pc, #628]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006404:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006406:	f7fd fdb9 	bl	8003f7c <HAL_GetTick>
 800640a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800640c:	e005      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800640e:	f7fd fdb5 	bl	8003f7c <HAL_GetTick>
 8006412:	1b83      	subs	r3, r0, r6
 8006414:	2b02      	cmp	r3, #2
 8006416:	f200 8107 	bhi.w	8006628 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	05d8      	lsls	r0, r3, #23
 800641e:	d5f6      	bpl.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006420:	4d93      	ldr	r5, [pc, #588]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006422:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006426:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800642a:	d027      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800642c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800642e:	429a      	cmp	r2, r3
 8006430:	d025      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006432:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006436:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800643a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006442:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006446:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800644a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800644e:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006450:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006454:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006458:	f140 8108 	bpl.w	800666c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fd fd8e 	bl	8003f7c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006460:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006464:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006466:	e005      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006468:	f7fd fd88 	bl	8003f7c <HAL_GetTick>
 800646c:	1b80      	subs	r0, r0, r6
 800646e:	4540      	cmp	r0, r8
 8006470:	f200 80da 	bhi.w	8006628 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006474:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006478:	079b      	lsls	r3, r3, #30
 800647a:	d5f5      	bpl.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800647c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800647e:	497c      	ldr	r1, [pc, #496]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006480:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006484:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800648e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006490:	b127      	cbz	r7, 800649c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006492:	4a77      	ldr	r2, [pc, #476]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006494:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800649a:	6593      	str	r3, [r2, #88]	; 0x58
 800649c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800649e:	07de      	lsls	r6, r3, #31
 80064a0:	d508      	bpl.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064a2:	4973      	ldr	r1, [pc, #460]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064a4:	6865      	ldr	r5, [r4, #4]
 80064a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064aa:	f022 0203 	bic.w	r2, r2, #3
 80064ae:	432a      	orrs	r2, r5
 80064b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064b4:	079d      	lsls	r5, r3, #30
 80064b6:	d508      	bpl.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064b8:	496d      	ldr	r1, [pc, #436]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064ba:	68a5      	ldr	r5, [r4, #8]
 80064bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064c0:	f022 020c 	bic.w	r2, r2, #12
 80064c4:	432a      	orrs	r2, r5
 80064c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ca:	0759      	lsls	r1, r3, #29
 80064cc:	d508      	bpl.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ce:	4968      	ldr	r1, [pc, #416]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064d0:	68e5      	ldr	r5, [r4, #12]
 80064d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80064da:	432a      	orrs	r2, r5
 80064dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e0:	071a      	lsls	r2, r3, #28
 80064e2:	d508      	bpl.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064e4:	4962      	ldr	r1, [pc, #392]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064e6:	6925      	ldr	r5, [r4, #16]
 80064e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80064ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064f0:	432a      	orrs	r2, r5
 80064f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064f6:	069f      	lsls	r7, r3, #26
 80064f8:	d508      	bpl.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064fa:	495d      	ldr	r1, [pc, #372]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064fc:	6965      	ldr	r5, [r4, #20]
 80064fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006502:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006506:	432a      	orrs	r2, r5
 8006508:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800650c:	065e      	lsls	r6, r3, #25
 800650e:	d508      	bpl.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006510:	4957      	ldr	r1, [pc, #348]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006512:	69a5      	ldr	r5, [r4, #24]
 8006514:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006518:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800651c:	432a      	orrs	r2, r5
 800651e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006522:	061d      	lsls	r5, r3, #24
 8006524:	d508      	bpl.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006526:	4952      	ldr	r1, [pc, #328]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006528:	69e5      	ldr	r5, [r4, #28]
 800652a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800652e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006532:	432a      	orrs	r2, r5
 8006534:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006538:	05d9      	lsls	r1, r3, #23
 800653a:	d508      	bpl.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800653c:	494c      	ldr	r1, [pc, #304]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800653e:	6a25      	ldr	r5, [r4, #32]
 8006540:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006544:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006548:	432a      	orrs	r2, r5
 800654a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800654e:	059a      	lsls	r2, r3, #22
 8006550:	d508      	bpl.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006552:	4947      	ldr	r1, [pc, #284]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006554:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006556:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800655a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800655e:	432a      	orrs	r2, r5
 8006560:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006564:	055f      	lsls	r7, r3, #21
 8006566:	d50b      	bpl.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006568:	4941      	ldr	r1, [pc, #260]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800656a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800656c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006570:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006574:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006576:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800657a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800657e:	d055      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006580:	051e      	lsls	r6, r3, #20
 8006582:	d50b      	bpl.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006584:	493a      	ldr	r1, [pc, #232]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006586:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006588:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800658c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006590:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006592:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006596:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800659a:	d04c      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800659c:	04dd      	lsls	r5, r3, #19
 800659e:	d50b      	bpl.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065a0:	4933      	ldr	r1, [pc, #204]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80065a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80065a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80065a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065ac:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065ae:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065b6:	d043      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065b8:	0499      	lsls	r1, r3, #18
 80065ba:	d50b      	bpl.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065bc:	492c      	ldr	r1, [pc, #176]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80065be:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80065c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80065c4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80065c8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065ca:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065d2:	d03a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065d4:	045a      	lsls	r2, r3, #17
 80065d6:	d50b      	bpl.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065d8:	4925      	ldr	r1, [pc, #148]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80065da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80065dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80065e0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80065e4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065e6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065ee:	d031      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	d50b      	bpl.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065f4:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80065f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80065f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80065fc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006600:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006602:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006606:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800660a:	d028      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 800660c:	b002      	add	sp, #8
 800660e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006612:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006614:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006618:	659a      	str	r2, [r3, #88]	; 0x58
 800661a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006624:	2701      	movs	r7, #1
 8006626:	e6e9      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8006628:	2003      	movs	r0, #3
 800662a:	e731      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800662c:	68ca      	ldr	r2, [r1, #12]
 800662e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006632:	60ca      	str	r2, [r1, #12]
 8006634:	e7a4      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006636:	68ca      	ldr	r2, [r1, #12]
 8006638:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800663c:	60ca      	str	r2, [r1, #12]
 800663e:	e7ad      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006640:	68ca      	ldr	r2, [r1, #12]
 8006642:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006646:	60ca      	str	r2, [r1, #12]
 8006648:	e7b6      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800664a:	68ca      	ldr	r2, [r1, #12]
 800664c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006650:	60ca      	str	r2, [r1, #12]
 8006652:	e7bf      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006654:	68ca      	ldr	r2, [r1, #12]
 8006656:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800665a:	60ca      	str	r2, [r1, #12]
 800665c:	e7c8      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800665e:	68d3      	ldr	r3, [r2, #12]
 8006660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006664:	60d3      	str	r3, [r2, #12]
}
 8006666:	b002      	add	sp, #8
 8006668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666c:	4613      	mov	r3, r2
 800666e:	e706      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006670:	40021000 	.word	0x40021000
 8006674:	40007000 	.word	0x40007000

08006678 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006678:	6a03      	ldr	r3, [r0, #32]
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6203      	str	r3, [r0, #32]
{
 8006680:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006684:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006686:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006688:	4f18      	ldr	r7, [pc, #96]	; (80066ec <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 800668a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800668c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800668e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8006692:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006696:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800669a:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 800669c:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 80066a0:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066a4:	d00e      	beq.n	80066c4 <TIM_OC1_SetConfig+0x4c>
 80066a6:	4c12      	ldr	r4, [pc, #72]	; (80066f0 <TIM_OC1_SetConfig+0x78>)
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d00b      	beq.n	80066c4 <TIM_OC1_SetConfig+0x4c>
 80066ac:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80066b0:	42a0      	cmp	r0, r4
 80066b2:	d007      	beq.n	80066c4 <TIM_OC1_SetConfig+0x4c>
 80066b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80066b8:	42a0      	cmp	r0, r4
 80066ba:	d003      	beq.n	80066c4 <TIM_OC1_SetConfig+0x4c>
 80066bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d10b      	bne.n	80066dc <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066c4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80066c6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80066ca:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066cc:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066d0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d4:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80066d6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80066da:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066dc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80066de:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80066e0:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80066e2:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80066e4:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80066e6:	6203      	str	r3, [r0, #32]
}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40012c00 	.word	0x40012c00
 80066f0:	40013400 	.word	0x40013400

080066f4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066f4:	6a03      	ldr	r3, [r0, #32]
 80066f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fa:	6203      	str	r3, [r0, #32]
{
 80066fc:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006702:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006704:	4f19      	ldr	r7, [pc, #100]	; (800676c <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006706:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8006708:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800670a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800670e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006712:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006716:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006718:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800671c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006720:	d00f      	beq.n	8006742 <TIM_OC3_SetConfig+0x4e>
 8006722:	4c13      	ldr	r4, [pc, #76]	; (8006770 <TIM_OC3_SetConfig+0x7c>)
 8006724:	42a0      	cmp	r0, r4
 8006726:	d00c      	beq.n	8006742 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006728:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800672c:	42a0      	cmp	r0, r4
 800672e:	d00f      	beq.n	8006750 <TIM_OC3_SetConfig+0x5c>
 8006730:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006734:	42a0      	cmp	r0, r4
 8006736:	d00b      	beq.n	8006750 <TIM_OC3_SetConfig+0x5c>
 8006738:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800673c:	42a0      	cmp	r0, r4
 800673e:	d10e      	bne.n	800675e <TIM_OC3_SetConfig+0x6a>
 8006740:	e006      	b.n	8006750 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006742:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006748:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800674c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006750:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006754:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006758:	432c      	orrs	r4, r5
 800675a:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800675e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006760:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006762:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006764:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8006766:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006768:	6203      	str	r3, [r0, #32]
}
 800676a:	4770      	bx	lr
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400

08006774 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006774:	6a03      	ldr	r3, [r0, #32]
 8006776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800677a:	6203      	str	r3, [r0, #32]
{
 800677c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006782:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006784:	4f19      	ldr	r7, [pc, #100]	; (80067ec <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006786:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006788:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800678a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800678e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006792:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006796:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006798:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800679c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067a0:	d00f      	beq.n	80067c2 <TIM_OC4_SetConfig+0x4e>
 80067a2:	4c13      	ldr	r4, [pc, #76]	; (80067f0 <TIM_OC4_SetConfig+0x7c>)
 80067a4:	42a0      	cmp	r0, r4
 80067a6:	d00c      	beq.n	80067c2 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80067ac:	42a0      	cmp	r0, r4
 80067ae:	d00f      	beq.n	80067d0 <TIM_OC4_SetConfig+0x5c>
 80067b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80067b4:	42a0      	cmp	r0, r4
 80067b6:	d00b      	beq.n	80067d0 <TIM_OC4_SetConfig+0x5c>
 80067b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80067bc:	42a0      	cmp	r0, r4
 80067be:	d10e      	bne.n	80067de <TIM_OC4_SetConfig+0x6a>
 80067c0:	e006      	b.n	80067d0 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067c2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80067c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067c8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80067cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067d0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067d4:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067d8:	432c      	orrs	r4, r5
 80067da:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067de:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80067e0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80067e2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80067e4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80067e6:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80067e8:	6203      	str	r3, [r0, #32]
}
 80067ea:	4770      	bx	lr
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40013400 	.word	0x40013400

080067f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d07d      	beq.n	80068f4 <HAL_TIM_Base_Init+0x100>
{
 80067f8:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80067fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067fe:	4604      	mov	r4, r0
 8006800:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006804:	2b00      	cmp	r3, #0
 8006806:	d06d      	beq.n	80068e4 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006808:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680a:	4a3b      	ldr	r2, [pc, #236]	; (80068f8 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	2302      	movs	r3, #2
 800680e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006812:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8006814:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006816:	d051      	beq.n	80068bc <HAL_TIM_Base_Init+0xc8>
 8006818:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800681c:	d021      	beq.n	8006862 <HAL_TIM_Base_Init+0x6e>
 800681e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006822:	4291      	cmp	r1, r2
 8006824:	d01d      	beq.n	8006862 <HAL_TIM_Base_Init+0x6e>
 8006826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800682a:	4291      	cmp	r1, r2
 800682c:	d019      	beq.n	8006862 <HAL_TIM_Base_Init+0x6e>
 800682e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006832:	4291      	cmp	r1, r2
 8006834:	d042      	beq.n	80068bc <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006836:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800683a:	4291      	cmp	r1, r2
 800683c:	d057      	beq.n	80068ee <HAL_TIM_Base_Init+0xfa>
 800683e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006842:	4291      	cmp	r1, r2
 8006844:	d053      	beq.n	80068ee <HAL_TIM_Base_Init+0xfa>
 8006846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800684a:	4291      	cmp	r1, r2
 800684c:	d04f      	beq.n	80068ee <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800684e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006852:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006858:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800685a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800685c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800685e:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006860:	e010      	b.n	8006884 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8006862:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006864:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006866:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800686c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800686e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006872:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006874:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800687c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800687e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006880:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006882:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006884:	2301      	movs	r3, #1
 8006886:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006888:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006890:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006894:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006898:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800689c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80068a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80068b0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80068b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80068b8:	2000      	movs	r0, #0
}
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80068bc:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068be:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c0:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80068c6:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80068c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068cc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80068d4:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80068da:	6863      	ldr	r3, [r4, #4]
 80068dc:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80068de:	6963      	ldr	r3, [r4, #20]
 80068e0:	630b      	str	r3, [r1, #48]	; 0x30
 80068e2:	e7cf      	b.n	8006884 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 80068e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80068e8:	f7fd f8ea 	bl	8003ac0 <HAL_TIM_Base_MspInit>
 80068ec:	e78c      	b.n	8006808 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ee:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f0:	69a2      	ldr	r2, [r4, #24]
 80068f2:	e7e9      	b.n	80068c8 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 80068f4:	2001      	movs	r0, #1
}
 80068f6:	4770      	bx	lr
 80068f8:	40012c00 	.word	0x40012c00

080068fc <HAL_TIM_PWM_MspInit>:
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006900:	2800      	cmp	r0, #0
 8006902:	d07d      	beq.n	8006a00 <HAL_TIM_PWM_Init+0x100>
{
 8006904:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006906:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800690a:	4604      	mov	r4, r0
 800690c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006910:	2b00      	cmp	r3, #0
 8006912:	d06d      	beq.n	80069f0 <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006914:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006916:	4a3b      	ldr	r2, [pc, #236]	; (8006a04 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	2302      	movs	r3, #2
 800691a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800691e:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8006920:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006922:	d051      	beq.n	80069c8 <HAL_TIM_PWM_Init+0xc8>
 8006924:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8006928:	d021      	beq.n	800696e <HAL_TIM_PWM_Init+0x6e>
 800692a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800692e:	4291      	cmp	r1, r2
 8006930:	d01d      	beq.n	800696e <HAL_TIM_PWM_Init+0x6e>
 8006932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006936:	4291      	cmp	r1, r2
 8006938:	d019      	beq.n	800696e <HAL_TIM_PWM_Init+0x6e>
 800693a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800693e:	4291      	cmp	r1, r2
 8006940:	d042      	beq.n	80069c8 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006942:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006946:	4291      	cmp	r1, r2
 8006948:	d057      	beq.n	80069fa <HAL_TIM_PWM_Init+0xfa>
 800694a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800694e:	4291      	cmp	r1, r2
 8006950:	d053      	beq.n	80069fa <HAL_TIM_PWM_Init+0xfa>
 8006952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006956:	4291      	cmp	r1, r2
 8006958:	d04f      	beq.n	80069fa <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800695a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800695c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800695e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006964:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006966:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006968:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800696a:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800696c:	e010      	b.n	8006990 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800696e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006970:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006972:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006978:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800697a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006980:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006986:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8006988:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800698a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800698c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800698e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006990:	2301      	movs	r3, #1
 8006992:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006994:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800699c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80069a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80069a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80069a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80069b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069b8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80069bc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80069c4:	2000      	movs	r0, #0
}
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80069c8:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ca:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069cc:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80069d2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80069d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80069e0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80069e6:	6863      	ldr	r3, [r4, #4]
 80069e8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80069ea:	6963      	ldr	r3, [r4, #20]
 80069ec:	630b      	str	r3, [r1, #48]	; 0x30
 80069ee:	e7cf      	b.n	8006990 <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 80069f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80069f4:	f7ff ff82 	bl	80068fc <HAL_TIM_PWM_MspInit>
 80069f8:	e78c      	b.n	8006914 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069fc:	69a2      	ldr	r2, [r4, #24]
 80069fe:	e7e9      	b.n	80069d4 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
}
 8006a02:	4770      	bx	lr
 8006a04:	40012c00 	.word	0x40012c00

08006a08 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f000 80ab 	beq.w	8006b64 <HAL_TIM_Encoder_Init+0x15c>
{
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006a12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006a16:	460d      	mov	r5, r1
 8006a18:	4604      	mov	r4, r0
 8006a1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8095 	beq.w	8006b4e <HAL_TIM_Encoder_Init+0x146>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a24:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a26:	4950      	ldr	r1, [pc, #320]	; (8006b68 <HAL_TIM_Encoder_Init+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8006a34:	f022 0207 	bic.w	r2, r2, #7
 8006a38:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a3a:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8006a3c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a3e:	d072      	beq.n	8006b26 <HAL_TIM_Encoder_Init+0x11e>
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a44:	d021      	beq.n	8006a8a <HAL_TIM_Encoder_Init+0x82>
 8006a46:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006a4a:	428b      	cmp	r3, r1
 8006a4c:	d01d      	beq.n	8006a8a <HAL_TIM_Encoder_Init+0x82>
 8006a4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a52:	428b      	cmp	r3, r1
 8006a54:	d019      	beq.n	8006a8a <HAL_TIM_Encoder_Init+0x82>
 8006a56:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006a5a:	428b      	cmp	r3, r1
 8006a5c:	d063      	beq.n	8006b26 <HAL_TIM_Encoder_Init+0x11e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a5e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006a62:	428b      	cmp	r3, r1
 8006a64:	d078      	beq.n	8006b58 <HAL_TIM_Encoder_Init+0x150>
 8006a66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a6a:	428b      	cmp	r3, r1
 8006a6c:	d074      	beq.n	8006b58 <HAL_TIM_Encoder_Init+0x150>
 8006a6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a72:	428b      	cmp	r3, r1
 8006a74:	d070      	beq.n	8006b58 <HAL_TIM_Encoder_Init+0x150>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a76:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a78:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a7e:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8006a80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006a82:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a84:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006a86:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a88:	e010      	b.n	8006aac <HAL_TIM_Encoder_Init+0xa4>
    tmpcr1 |= Structure->CounterMode;
 8006a8a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006a92:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a98:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa2:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8006aa4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006aa6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa8:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006aaa:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006aac:	2601      	movs	r6, #1
 8006aae:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8006ab0:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006ab4:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ab6:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ab8:	69af      	ldr	r7, [r5, #24]
 8006aba:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8006abc:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ac0:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ac4:	69e8      	ldr	r0, [r5, #28]
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006acc:	68e8      	ldr	r0, [r5, #12]
 8006ace:	4302      	orrs	r2, r0
 8006ad0:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ad2:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ad6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006ada:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 8006ade:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ae0:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ae4:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ae8:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006aea:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006aee:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006af2:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006af6:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006afa:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8006afc:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b00:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8006b02:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8006b04:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8006b06:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b08:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b0c:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b18:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006b1c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 8006b20:	2000      	movs	r0, #0
}
 8006b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8006b26:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b28:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b2e:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b34:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b36:	69a1      	ldr	r1, [r4, #24]
 8006b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b3c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006b3e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b40:	68e2      	ldr	r2, [r4, #12]
 8006b42:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b44:	6862      	ldr	r2, [r4, #4]
 8006b46:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006b48:	6962      	ldr	r2, [r4, #20]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b4c:	e7ae      	b.n	8006aac <HAL_TIM_Encoder_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 8006b4e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006b52:	f7fc ffcb 	bl	8003aec <HAL_TIM_Encoder_MspInit>
 8006b56:	e765      	b.n	8006a24 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b58:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b5a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b60:	4302      	orrs	r2, r0
 8006b62:	e7e9      	b.n	8006b38 <HAL_TIM_Encoder_Init+0x130>
    return HAL_ERROR;
 8006b64:	2001      	movs	r0, #1
}
 8006b66:	4770      	bx	lr
 8006b68:	40012c00 	.word	0x40012c00

08006b6c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006b6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d04d      	beq.n	8006c10 <HAL_TIM_SlaveConfigSynchro+0xa4>
 8006b74:	4602      	mov	r2, r0
{
 8006b76:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b78:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8006b7a:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006b7c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8006b7e:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006b82:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006b86:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006b88:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006b94:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9a:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006b9e:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006ba0:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006ba2:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8006ba4:	d051      	beq.n	8006c4a <HAL_TIM_SlaveConfigSynchro+0xde>
 8006ba6:	d825      	bhi.n	8006bf4 <HAL_TIM_SlaveConfigSynchro+0x88>
 8006ba8:	2c40      	cmp	r4, #64	; 0x40
 8006baa:	d033      	beq.n	8006c14 <HAL_TIM_SlaveConfigSynchro+0xa8>
 8006bac:	2c50      	cmp	r4, #80	; 0x50
 8006bae:	d110      	bne.n	8006bd2 <HAL_TIM_SlaveConfigSynchro+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb0:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb2:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb4:	688c      	ldr	r4, [r1, #8]
 8006bb6:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb8:	f026 0601 	bic.w	r6, r6, #1
 8006bbc:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbe:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bc0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006bc8:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bca:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006bd0:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006bd2:	68c3      	ldr	r3, [r0, #12]
 8006bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd8:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006bda:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8006bde:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be4:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006be6:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006bea:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8006bee:	4608      	mov	r0, r1
}
 8006bf0:	bcf0      	pop	{r4, r5, r6, r7}
 8006bf2:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006bf4:	2c70      	cmp	r4, #112	; 0x70
 8006bf6:	d1ec      	bne.n	8006bd2 <HAL_TIM_SlaveConfigSynchro+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bf8:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8006bfc:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8006bfe:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c00:	432b      	orrs	r3, r5
 8006c02:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c06:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c0a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c0c:	6083      	str	r3, [r0, #8]
 8006c0e:	e7e0      	b.n	8006bd2 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8006c10:	2002      	movs	r0, #2
}
 8006c12:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006c14:	2d05      	cmp	r5, #5
 8006c16:	d010      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0xce>
 8006c18:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8006c1c:	d00d      	beq.n	8006c3a <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 8006c1e:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006c20:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006c22:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006c24:	f024 0401 	bic.w	r4, r4, #1
 8006c28:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006c2a:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006c30:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8006c34:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8006c36:	6205      	str	r5, [r0, #32]
      break;
 8006c38:	e7cb      	b.n	8006bd2 <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8006c3a:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006c3c:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006c3e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006c42:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006c46:	bcf0      	pop	{r4, r5, r6, r7}
 8006c48:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4a:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c4c:	688d      	ldr	r5, [r1, #8]
 8006c4e:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c50:	f024 0410 	bic.w	r4, r4, #16
 8006c54:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c56:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8006c58:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c5a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c62:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c66:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6a:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8006c6c:	6203      	str	r3, [r0, #32]
 8006c6e:	e7b0      	b.n	8006bd2 <HAL_TIM_SlaveConfigSynchro+0x66>

08006c70 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c70:	6a03      	ldr	r3, [r0, #32]
 8006c72:	f023 0310 	bic.w	r3, r3, #16
 8006c76:	6203      	str	r3, [r0, #32]
{
 8006c78:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8006c7a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006c7c:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006c7e:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c80:	4f19      	ldr	r7, [pc, #100]	; (8006ce8 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c82:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c84:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c86:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8006c8a:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c8e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c92:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c98:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c9c:	d00f      	beq.n	8006cbe <TIM_OC2_SetConfig+0x4e>
 8006c9e:	4c13      	ldr	r4, [pc, #76]	; (8006cec <TIM_OC2_SetConfig+0x7c>)
 8006ca0:	42a0      	cmp	r0, r4
 8006ca2:	d00c      	beq.n	8006cbe <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	d00f      	beq.n	8006ccc <TIM_OC2_SetConfig+0x5c>
 8006cac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cb0:	42a0      	cmp	r0, r4
 8006cb2:	d00b      	beq.n	8006ccc <TIM_OC2_SetConfig+0x5c>
 8006cb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006cb8:	42a0      	cmp	r0, r4
 8006cba:	d10e      	bne.n	8006cda <TIM_OC2_SetConfig+0x6a>
 8006cbc:	e006      	b.n	8006ccc <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cbe:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cc4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ccc:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cd0:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cd4:	432c      	orrs	r4, r5
 8006cd6:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006cda:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006cdc:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006cde:	6182      	str	r2, [r0, #24]
}
 8006ce0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8006ce2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006ce4:	6203      	str	r3, [r0, #32]
}
 8006ce6:	4770      	bx	lr
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400

08006cf0 <HAL_TIM_PWM_ConfigChannel>:
{
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006cf2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	f000 80e4 	beq.w	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4604      	mov	r4, r0
 8006d00:	460d      	mov	r5, r1
 8006d02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006d06:	2a14      	cmp	r2, #20
 8006d08:	d844      	bhi.n	8006d94 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8006d0a:	e8df f002 	tbb	[pc, r2]
 8006d0e:	4347      	.short	0x4347
 8006d10:	435b4343 	.word	0x435b4343
 8006d14:	43704343 	.word	0x43704343
 8006d18:	43844343 	.word	0x43844343
 8006d1c:	43994343 	.word	0x43994343
 8006d20:	4343      	.short	0x4343
 8006d22:	0b          	.byte	0x0b
 8006d23:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d24:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d26:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d2a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d2c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2e:	4e6c      	ldr	r6, [pc, #432]	; (8006ee0 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d30:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8006d34:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8006d36:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006d38:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d3c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d40:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d44:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d48:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d4a:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d4e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	d008      	beq.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8006d54:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006d58:	42b3      	cmp	r3, r6
 8006d5a:	d004      	beq.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8006d5c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006d60:	42b3      	cmp	r3, r6
 8006d62:	f040 80b1 	bne.w	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d66:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d68:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d6c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8006d70:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8006d72:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006d74:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006d76:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006d78:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d7c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d7e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006d82:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d86:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006d8a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006d92:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006d94:	2000      	movs	r0, #0
 8006d96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f7ff fc6b 	bl	8006678 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006da2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006da4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006da6:	6999      	ldr	r1, [r3, #24]
 8006da8:	f041 0108 	orr.w	r1, r1, #8
 8006dac:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dae:	6999      	ldr	r1, [r3, #24]
 8006db0:	f021 0104 	bic.w	r1, r1, #4
 8006db4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006db6:	699a      	ldr	r2, [r3, #24]
 8006db8:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8006dba:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dbc:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006dbe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006dc2:	e7ea      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc4:	6800      	ldr	r0, [r0, #0]
 8006dc6:	f7ff ff53 	bl	8006c70 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dcc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dce:	6999      	ldr	r1, [r3, #24]
 8006dd0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006dd4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dd6:	6999      	ldr	r1, [r3, #24]
 8006dd8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006ddc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8006de4:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006de6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006de8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006dec:	e7d5      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dee:	6800      	ldr	r0, [r0, #0]
 8006df0:	f7ff fc80 	bl	80066f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006df4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006df6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006df8:	69d9      	ldr	r1, [r3, #28]
 8006dfa:	f041 0108 	orr.w	r1, r1, #8
 8006dfe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e00:	69d9      	ldr	r1, [r3, #28]
 8006e02:	f021 0104 	bic.w	r1, r1, #4
 8006e06:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e08:	69da      	ldr	r2, [r3, #28]
 8006e0a:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8006e0c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e0e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006e10:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006e14:	e7c1      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e16:	6800      	ldr	r0, [r0, #0]
 8006e18:	f7ff fcac 	bl	8006774 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e1c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e1e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e20:	69d9      	ldr	r1, [r3, #28]
 8006e22:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006e26:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e28:	69d9      	ldr	r1, [r3, #28]
 8006e2a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006e2e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8006e36:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e38:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006e3a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006e3e:	e7ac      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e40:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e42:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e46:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006e48:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4a:	4e25      	ldr	r6, [pc, #148]	; (8006ee0 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e4c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8006e50:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8006e52:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006e54:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8006e5c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e64:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e66:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8006e6a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6e:	d00f      	beq.n	8006e90 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006e70:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006e74:	42b3      	cmp	r3, r6
 8006e76:	d00b      	beq.n	8006e90 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006e78:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006e7c:	42b3      	cmp	r3, r6
 8006e7e:	d007      	beq.n	8006e90 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006e80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006e84:	42b3      	cmp	r3, r6
 8006e86:	d003      	beq.n	8006e90 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006e88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006e8c:	42b3      	cmp	r3, r6
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e90:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e92:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e96:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8006e9a:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8006e9c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006e9e:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006ea0:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006ea2:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ea4:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ea6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ea8:	f041 0108 	orr.w	r1, r1, #8
 8006eac:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006eae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006eb0:	f021 0104 	bic.w	r1, r1, #4
 8006eb4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eb8:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8006eba:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ebc:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006ebe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006ec2:	e76a      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8006ec4:	2002      	movs	r0, #2
}
 8006ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006ecc:	42b3      	cmp	r3, r6
 8006ece:	f43f af4a 	beq.w	8006d66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8006ed2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006ed6:	42b3      	cmp	r3, r6
 8006ed8:	f47f af4a 	bne.w	8006d70 <HAL_TIM_PWM_ConfigChannel+0x80>
 8006edc:	e743      	b.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00

08006ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d03c      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8006eec:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eee:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ef0:	4c1e      	ldr	r4, [pc, #120]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ef8:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8006efa:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006efc:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006efe:	d026      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8006f00:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006f04:	42a2      	cmp	r2, r4
 8006f06:	d022      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f08:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f12:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f14:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006f18:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f1a:	d00a      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8006f1c:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d007      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8006f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d003      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8006f2a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d104      	bne.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f32:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f34:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f38:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f3a:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006f3c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006f44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006f48:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006f4a:	4618      	mov	r0, r3
}
 8006f4c:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f4e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f56:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f58:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f60:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8006f62:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f64:	e7e5      	b.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8006f66:	2002      	movs	r0, #2
}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40000400 	.word	0x40000400

08006f74 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d044      	beq.n	8007006 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 8006f7c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f7e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8006f82:	4602      	mov	r2, r0
 8006f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f88:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f8c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f92:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f98:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f9c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fa8:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006faa:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fac:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb2:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006fb4:	4c15      	ldr	r4, [pc, #84]	; (800700c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006fb6:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fb8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006fbc:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fbe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006fc2:	d00a      	beq.n	8006fda <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006fc4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d006      	beq.n	8006fda <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006fcc:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006fce:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006fd0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006fd4:	4608      	mov	r0, r1
}
 8006fd6:	bc30      	pop	{r4, r5}
 8006fd8:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006fda:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fdc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fe4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fe8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fec:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ff4:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ff6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ffa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ffc:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ffe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007002:	430b      	orrs	r3, r1
 8007004:	e7e2      	b.n	8006fcc <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007006:	2002      	movs	r0, #2
}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00

08007010 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007010:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d048      	beq.n	80070aa <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	3b01      	subs	r3, #1
 800701c:	2b0f      	cmp	r3, #15
{
 800701e:	b4f0      	push	{r4, r5, r6, r7}
 8007020:	d826      	bhi.n	8007070 <HAL_TIMEx_ConfigBreakInput+0x60>
 8007022:	4e23      	ldr	r6, [pc, #140]	; (80070b0 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8007024:	4c23      	ldr	r4, [pc, #140]	; (80070b4 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8007026:	4f24      	ldr	r7, [pc, #144]	; (80070b8 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007028:	4d24      	ldr	r5, [pc, #144]	; (80070bc <HAL_TIMEx_ConfigBreakInput+0xac>)
 800702a:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 800702e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8007032:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8007036:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 800703a:	2901      	cmp	r1, #1
 800703c:	d01e      	beq.n	800707c <HAL_TIMEx_ConfigBreakInput+0x6c>
 800703e:	2902      	cmp	r1, #2
 8007040:	d110      	bne.n	8007064 <HAL_TIMEx_ConfigBreakInput+0x54>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8007042:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007044:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8007046:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800704a:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800704c:	40bb      	lsls	r3, r7
 800704e:	ea83 030c 	eor.w	r3, r3, ip
 8007052:	4033      	ands	r3, r6
 8007054:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007058:	fa02 f505 	lsl.w	r5, r2, r5
 800705c:	405d      	eors	r5, r3
 800705e:	402c      	ands	r4, r5
 8007060:	4063      	eors	r3, r4

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8007062:	664b      	str	r3, [r1, #100]	; 0x64
    }
    default:
      break;
  }

  __HAL_UNLOCK(htim);
 8007064:	2300      	movs	r3, #0
 8007066:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800706a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800706c:	4618      	mov	r0, r3
}
 800706e:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8007070:	2500      	movs	r5, #0
  switch (BreakInput)
 8007072:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8007074:	462f      	mov	r7, r5
 8007076:	462c      	mov	r4, r5
 8007078:	462e      	mov	r6, r5
  switch (BreakInput)
 800707a:	d1e0      	bne.n	800703e <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 800707c:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800707e:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8007080:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007084:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007086:	40bb      	lsls	r3, r7
 8007088:	ea83 030c 	eor.w	r3, r3, ip
 800708c:	4033      	ands	r3, r6
 800708e:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007092:	fa02 f505 	lsl.w	r5, r2, r5
 8007096:	405d      	eors	r5, r3
 8007098:	402c      	ands	r4, r5
 800709a:	4063      	eors	r3, r4
      htim->Instance->AF1 = tmporx;
 800709c:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800709e:	2300      	movs	r3, #0
 80070a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80070a4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80070a6:	4618      	mov	r0, r3
}
 80070a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80070aa:	2002      	movs	r0, #2
}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	08009e48 	.word	0x08009e48
 80070b4:	08009e88 	.word	0x08009e88
 80070b8:	08009ec8 	.word	0x08009ec8
 80070bc:	08009f08 	.word	0x08009f08

080070c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070c2:	07da      	lsls	r2, r3, #31
{
 80070c4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c6:	d506      	bpl.n	80070d6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070c8:	6801      	ldr	r1, [r0, #0]
 80070ca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80070cc:	684a      	ldr	r2, [r1, #4]
 80070ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80070d2:	4322      	orrs	r2, r4
 80070d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070d6:	079c      	lsls	r4, r3, #30
 80070d8:	d506      	bpl.n	80070e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070da:	6801      	ldr	r1, [r0, #0]
 80070dc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80070de:	684a      	ldr	r2, [r1, #4]
 80070e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070e4:	4322      	orrs	r2, r4
 80070e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070e8:	0759      	lsls	r1, r3, #29
 80070ea:	d506      	bpl.n	80070fa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070ec:	6801      	ldr	r1, [r0, #0]
 80070ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80070f0:	684a      	ldr	r2, [r1, #4]
 80070f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070f6:	4322      	orrs	r2, r4
 80070f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070fa:	071a      	lsls	r2, r3, #28
 80070fc:	d506      	bpl.n	800710c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070fe:	6801      	ldr	r1, [r0, #0]
 8007100:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007102:	684a      	ldr	r2, [r1, #4]
 8007104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007108:	4322      	orrs	r2, r4
 800710a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800710c:	06dc      	lsls	r4, r3, #27
 800710e:	d506      	bpl.n	800711e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007110:	6801      	ldr	r1, [r0, #0]
 8007112:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007114:	688a      	ldr	r2, [r1, #8]
 8007116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800711a:	4322      	orrs	r2, r4
 800711c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711e:	0699      	lsls	r1, r3, #26
 8007120:	d506      	bpl.n	8007130 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007122:	6801      	ldr	r1, [r0, #0]
 8007124:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007126:	688a      	ldr	r2, [r1, #8]
 8007128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800712c:	4322      	orrs	r2, r4
 800712e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007130:	065a      	lsls	r2, r3, #25
 8007132:	d509      	bpl.n	8007148 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007134:	6801      	ldr	r1, [r0, #0]
 8007136:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007138:	684a      	ldr	r2, [r1, #4]
 800713a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800713e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007140:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007144:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007146:	d00b      	beq.n	8007160 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007148:	061b      	lsls	r3, r3, #24
 800714a:	d506      	bpl.n	800715a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800714c:	6802      	ldr	r2, [r0, #0]
 800714e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007150:	6853      	ldr	r3, [r2, #4]
 8007152:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007156:	430b      	orrs	r3, r1
 8007158:	6053      	str	r3, [r2, #4]
  }
}
 800715a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800715e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007160:	684a      	ldr	r2, [r1, #4]
 8007162:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8007164:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007168:	4322      	orrs	r2, r4
 800716a:	604a      	str	r2, [r1, #4]
 800716c:	e7ec      	b.n	8007148 <UART_AdvFeatureConfig+0x88>
 800716e:	bf00      	nop

08007170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007170:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007172:	2300      	movs	r3, #0
{
 8007174:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007176:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800717a:	f7fc feff 	bl	8003f7c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8007184:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007186:	d40d      	bmi.n	80071a4 <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	0752      	lsls	r2, r2, #29
 800718c:	d431      	bmi.n	80071f2 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007190:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 8007192:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8007196:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 800719a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800719c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a4:	69da      	ldr	r2, [r3, #28]
 80071a6:	0292      	lsls	r2, r2, #10
 80071a8:	d4ee      	bmi.n	8007188 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fc fee7 	bl	8003f7c <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071ae:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b0:	1b40      	subs	r0, r0, r5
 80071b2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071b6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b8:	d22c      	bcs.n	8007214 <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ba:	0750      	lsls	r0, r2, #29
 80071bc:	d5f2      	bpl.n	80071a4 <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	0511      	lsls	r1, r2, #20
 80071c2:	d5ef      	bpl.n	80071a4 <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d2:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d4:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d6:	f021 0101 	bic.w	r1, r1, #1
 80071da:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80071dc:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80071de:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80071e2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80071e6:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80071e8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071ec:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 80071f0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	0258      	lsls	r0, r3, #9
 80071f6:	d4ca      	bmi.n	800718e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f8:	f7fc fec0 	bl	8003f7c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071fc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fe:	1b40      	subs	r0, r0, r5
 8007200:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007204:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007206:	d205      	bcs.n	8007214 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007208:	0751      	lsls	r1, r2, #29
 800720a:	d5f2      	bpl.n	80071f2 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	0512      	lsls	r2, r2, #20
 8007210:	d5ef      	bpl.n	80071f2 <UART_CheckIdleState+0x82>
 8007212:	e7d7      	b.n	80071c4 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007214:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007218:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 800721c:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721e:	f022 0201 	bic.w	r2, r2, #1
 8007222:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007224:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8007226:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800722a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800722e:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8007230:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8007234:	bd38      	pop	{r3, r4, r5, pc}
 8007236:	bf00      	nop

08007238 <HAL_UART_Init>:
  if (huart == NULL)
 8007238:	2800      	cmp	r0, #0
 800723a:	f000 817f 	beq.w	800753c <HAL_UART_Init+0x304>
  if (huart->gState == HAL_UART_STATE_RESET)
 800723e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8007242:	b570      	push	{r4, r5, r6, lr}
 8007244:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007246:	2b00      	cmp	r3, #0
 8007248:	d056      	beq.n	80072f8 <HAL_UART_Init+0xc0>
  __HAL_UART_DISABLE(huart);
 800724a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800724c:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800724e:	49c1      	ldr	r1, [pc, #772]	; (8007554 <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 8007250:	2224      	movs	r2, #36	; 0x24
 8007252:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007256:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007258:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800725a:	f020 0001 	bic.w	r0, r0, #1
 800725e:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007260:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007262:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007264:	4332      	orrs	r2, r6
 8007266:	4302      	orrs	r2, r0
 8007268:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800726a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800726c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800726e:	430a      	orrs	r2, r1
 8007270:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007276:	49b8      	ldr	r1, [pc, #736]	; (8007558 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007278:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800727c:	432a      	orrs	r2, r5
 800727e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007280:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007282:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007284:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007286:	d03c      	beq.n	8007302 <HAL_UART_Init+0xca>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007288:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800728c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007290:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8007294:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007296:	430a      	orrs	r2, r1
 8007298:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800729c:	49af      	ldr	r1, [pc, #700]	; (800755c <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800729e:	f022 020f 	bic.w	r2, r2, #15
 80072a2:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a4:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072a6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a8:	d012      	beq.n	80072d0 <HAL_UART_Init+0x98>
 80072aa:	4aad      	ldr	r2, [pc, #692]	; (8007560 <HAL_UART_Init+0x328>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d07b      	beq.n	80073a8 <HAL_UART_Init+0x170>
 80072b0:	4aac      	ldr	r2, [pc, #688]	; (8007564 <HAL_UART_Init+0x32c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	f000 8130 	beq.w	8007518 <HAL_UART_Init+0x2e0>
 80072b8:	4aab      	ldr	r2, [pc, #684]	; (8007568 <HAL_UART_Init+0x330>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	f000 80cf 	beq.w	800745e <HAL_UART_Init+0x226>
  huart->NbRxDataToProcess = 1;
 80072c0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 80072c4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80072c6:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80072ca:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80072cc:	2001      	movs	r0, #1
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072d0:	4ba6      	ldr	r3, [pc, #664]	; (800756c <HAL_UART_Init+0x334>)
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f240 80d7 	bls.w	8007490 <HAL_UART_Init+0x258>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80072e6:	f000 8131 	beq.w	800754c <HAL_UART_Init+0x314>
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ea:	f7ff f85f 	bl	80063ac <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f000 80d1 	beq.w	8007496 <HAL_UART_Init+0x25e>
 80072f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072f6:	e081      	b.n	80073fc <HAL_UART_Init+0x1c4>
    huart->Lock = HAL_UNLOCKED;
 80072f8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80072fc:	f7fc fc5e 	bl	8003bbc <HAL_UART_MspInit>
 8007300:	e7a3      	b.n	800724a <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007302:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007306:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800730a:	430a      	orrs	r2, r1
 800730c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007312:	4896      	ldr	r0, [pc, #600]	; (800756c <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007314:	f022 020f 	bic.w	r2, r2, #15
 8007318:	430a      	orrs	r2, r1
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800731c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007328:	f000 8134 	beq.w	8007594 <HAL_UART_Init+0x35c>
 800732c:	d80c      	bhi.n	8007348 <HAL_UART_Init+0x110>
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 812b 	beq.w	800758a <HAL_UART_Init+0x352>
 8007334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007338:	d1c2      	bne.n	80072c0 <HAL_UART_Init+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 800733a:	f7fe fed5 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800733e:	2800      	cmp	r0, #0
 8007340:	f000 80a9 	beq.w	8007496 <HAL_UART_Init+0x25e>
 8007344:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007346:	e004      	b.n	8007352 <HAL_UART_Init+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800734c:	d1b8      	bne.n	80072c0 <HAL_UART_Init+0x88>
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007352:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007354:	4b86      	ldr	r3, [pc, #536]	; (8007570 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007356:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800735a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800735e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007362:	42b3      	cmp	r3, r6
 8007364:	d3ac      	bcc.n	80072c0 <HAL_UART_Init+0x88>
 8007366:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800736a:	d8a9      	bhi.n	80072c0 <HAL_UART_Init+0x88>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800736c:	2600      	movs	r6, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4631      	mov	r1, r6
 8007372:	f7f8 ff51 	bl	8000218 <__aeabi_uldivmod>
 8007376:	020b      	lsls	r3, r1, #8
 8007378:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800737c:	0202      	lsls	r2, r0, #8
 800737e:	0868      	lsrs	r0, r5, #1
 8007380:	1810      	adds	r0, r2, r0
 8007382:	f143 0100 	adc.w	r1, r3, #0
 8007386:	462a      	mov	r2, r5
 8007388:	4633      	mov	r3, r6
 800738a:	f7f8 ff45 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800738e:	4b79      	ldr	r3, [pc, #484]	; (8007574 <HAL_UART_Init+0x33c>)
 8007390:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007394:	429a      	cmp	r2, r3
 8007396:	d893      	bhi.n	80072c0 <HAL_UART_Init+0x88>
          huart->Instance->BRR = usartdiv;
 8007398:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800739a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800739e:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80073a0:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80073a4:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 80073a6:	e043      	b.n	8007430 <HAL_UART_Init+0x1f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073a8:	4b70      	ldr	r3, [pc, #448]	; (800756c <HAL_UART_Init+0x334>)
 80073aa:	4a73      	ldr	r2, [pc, #460]	; (8007578 <HAL_UART_Init+0x340>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b0:	f003 030c 	and.w	r3, r3, #12
 80073b4:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80073ba:	d079      	beq.n	80074b0 <HAL_UART_Init+0x278>
    switch (clocksource)
 80073bc:	2b08      	cmp	r3, #8
 80073be:	f63f af7f 	bhi.w	80072c0 <HAL_UART_Init+0x88>
 80073c2:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <HAL_UART_Init+0x190>)
 80073c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c8:	0800748b 	.word	0x0800748b
 80073cc:	080072eb 	.word	0x080072eb
 80073d0:	0800745b 	.word	0x0800745b
 80073d4:	080072c1 	.word	0x080072c1
 80073d8:	0800747f 	.word	0x0800747f
 80073dc:	080072c1 	.word	0x080072c1
 80073e0:	080072c1 	.word	0x080072c1
 80073e4:	080072c1 	.word	0x080072c1
 80073e8:	080073f9 	.word	0x080073f9
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	f47f af67 	bne.w	80072c0 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80073f6:	d074      	beq.n	80074e2 <HAL_UART_Init+0x2aa>
 80073f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fc:	6862      	ldr	r2, [r4, #4]
 80073fe:	4b5c      	ldr	r3, [pc, #368]	; (8007570 <HAL_UART_Init+0x338>)
 8007400:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8007404:	fbb0 f3f3 	udiv	r3, r0, r3
 8007408:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800740c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007410:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007412:	f1a3 0110 	sub.w	r1, r3, #16
 8007416:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800741a:	4291      	cmp	r1, r2
 800741c:	f63f af50 	bhi.w	80072c0 <HAL_UART_Init+0x88>
        huart->Instance->BRR = usartdiv;
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8007424:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8007426:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800742a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800742e:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007432:	2b00      	cmp	r3, #0
 8007434:	d138      	bne.n	80074a8 <HAL_UART_Init+0x270>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800743e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007446:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800744e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007450:	601a      	str	r2, [r3, #0]
}
 8007452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 8007456:	f7ff be8b 	b.w	8007170 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 800745a:	4848      	ldr	r0, [pc, #288]	; (800757c <HAL_UART_Init+0x344>)
 800745c:	e7ce      	b.n	80073fc <HAL_UART_Init+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800745e:	4b43      	ldr	r3, [pc, #268]	; (800756c <HAL_UART_Init+0x334>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	f000 8095 	beq.w	8007598 <HAL_UART_Init+0x360>
 800746e:	d861      	bhi.n	8007534 <HAL_UART_Init+0x2fc>
 8007470:	b143      	cbz	r3, 8007484 <HAL_UART_Init+0x24c>
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	f47f af24 	bne.w	80072c0 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007478:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800747c:	d060      	beq.n	8007540 <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 800747e:	f7fe fe33 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
        break;
 8007482:	e734      	b.n	80072ee <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007484:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007488:	d07c      	beq.n	8007584 <HAL_UART_Init+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800748a:	f7fe ff7d 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
        break;
 800748e:	e72e      	b.n	80072ee <HAL_UART_Init+0xb6>
 8007490:	4a3b      	ldr	r2, [pc, #236]	; (8007580 <HAL_UART_Init+0x348>)
 8007492:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007494:	e78f      	b.n	80073b6 <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 8007496:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007498:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800749c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 800749e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80074a2:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0c6      	beq.n	8007436 <HAL_UART_Init+0x1fe>
    UART_AdvFeatureConfig(huart);
 80074a8:	4620      	mov	r0, r4
 80074aa:	f7ff fe09 	bl	80070c0 <UART_AdvFeatureConfig>
 80074ae:	e7c2      	b.n	8007436 <HAL_UART_Init+0x1fe>
    switch (clocksource)
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	f63f af05 	bhi.w	80072c0 <HAL_UART_Init+0x88>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <HAL_UART_Init+0x284>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	08007585 	.word	0x08007585
 80074c0:	0800754d 	.word	0x0800754d
 80074c4:	080074e1 	.word	0x080074e1
 80074c8:	080072c1 	.word	0x080072c1
 80074cc:	08007541 	.word	0x08007541
 80074d0:	080072c1 	.word	0x080072c1
 80074d4:	080072c1 	.word	0x080072c1
 80074d8:	080072c1 	.word	0x080072c1
 80074dc:	080074e3 	.word	0x080074e3
        pclk = (uint32_t) HSI_VALUE;
 80074e0:	4826      	ldr	r0, [pc, #152]	; (800757c <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	4922      	ldr	r1, [pc, #136]	; (8007570 <HAL_UART_Init+0x338>)
 80074e6:	0853      	lsrs	r3, r2, #1
 80074e8:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 80074ec:	fbb0 f0f1 	udiv	r0, r0, r1
 80074f0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80074f4:	fbb0 f0f2 	udiv	r0, r0, r2
 80074f8:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074fa:	f1a2 0110 	sub.w	r1, r2, #16
 80074fe:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007502:	4299      	cmp	r1, r3
 8007504:	f63f aedc 	bhi.w	80072c0 <HAL_UART_Init+0x88>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007508:	f020 030f 	bic.w	r3, r0, #15
 800750c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800750e:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8007512:	6820      	ldr	r0, [r4, #0]
 8007514:	4313      	orrs	r3, r2
 8007516:	e784      	b.n	8007422 <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007518:	4b14      	ldr	r3, [pc, #80]	; (800756c <HAL_UART_Init+0x334>)
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007522:	2b20      	cmp	r3, #32
 8007524:	d038      	beq.n	8007598 <HAL_UART_Init+0x360>
 8007526:	f63f af61 	bhi.w	80073ec <HAL_UART_Init+0x1b4>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0aa      	beq.n	8007484 <HAL_UART_Init+0x24c>
 800752e:	2b10      	cmp	r3, #16
 8007530:	d0a2      	beq.n	8007478 <HAL_UART_Init+0x240>
 8007532:	e6c5      	b.n	80072c0 <HAL_UART_Init+0x88>
 8007534:	2bc0      	cmp	r3, #192	; 0xc0
 8007536:	f43f af5c 	beq.w	80073f2 <HAL_UART_Init+0x1ba>
 800753a:	e6c1      	b.n	80072c0 <HAL_UART_Init+0x88>
}
 800753c:	2001      	movs	r0, #1
 800753e:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8007540:	f7fe fdd2 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007544:	2800      	cmp	r0, #0
 8007546:	d0a6      	beq.n	8007496 <HAL_UART_Init+0x25e>
 8007548:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800754a:	e7ca      	b.n	80074e2 <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK2Freq();
 800754c:	f7fe ff2e 	bl	80063ac <HAL_RCC_GetPCLK2Freq>
        break;
 8007550:	e7f8      	b.n	8007544 <HAL_UART_Init+0x30c>
 8007552:	bf00      	nop
 8007554:	cfff69f3 	.word	0xcfff69f3
 8007558:	40008000 	.word	0x40008000
 800755c:	40013800 	.word	0x40013800
 8007560:	40004400 	.word	0x40004400
 8007564:	40004800 	.word	0x40004800
 8007568:	40004c00 	.word	0x40004c00
 800756c:	40021000 	.word	0x40021000
 8007570:	08009f5c 	.word	0x08009f5c
 8007574:	000ffcff 	.word	0x000ffcff
 8007578:	08009f4c 	.word	0x08009f4c
 800757c:	00f42400 	.word	0x00f42400
 8007580:	08009f48 	.word	0x08009f48
        pclk = HAL_RCC_GetPCLK1Freq();
 8007584:	f7fe ff00 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
        break;
 8007588:	e7dc      	b.n	8007544 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800758a:	f7fe fefd 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800758e:	2800      	cmp	r0, #0
 8007590:	d081      	beq.n	8007496 <HAL_UART_Init+0x25e>
 8007592:	e6d7      	b.n	8007344 <HAL_UART_Init+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007594:	4803      	ldr	r0, [pc, #12]	; (80075a4 <HAL_UART_Init+0x36c>)
 8007596:	e6dc      	b.n	8007352 <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007598:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800759c:	4801      	ldr	r0, [pc, #4]	; (80075a4 <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800759e:	f47f af2d 	bne.w	80073fc <HAL_UART_Init+0x1c4>
 80075a2:	e79e      	b.n	80074e2 <HAL_UART_Init+0x2aa>
 80075a4:	00f42400 	.word	0x00f42400

080075a8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075a8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80075ac:	2a01      	cmp	r2, #1
 80075ae:	d017      	beq.n	80075e0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b0:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80075b2:	2124      	movs	r1, #36	; 0x24
{
 80075b4:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80075b6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 80075ba:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075bc:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075be:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075c0:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075c2:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80075c6:	f024 0401 	bic.w	r4, r4, #1
 80075ca:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80075cc:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075ce:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075d0:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075d2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 80075d6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80075d8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80075dc:	bc30      	pop	{r4, r5}
 80075de:	4770      	bx	lr
  __HAL_LOCK(huart);
 80075e0:	2002      	movs	r0, #2
}
 80075e2:	4770      	bx	lr

080075e4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80075e8:	2a01      	cmp	r2, #1
 80075ea:	d033      	beq.n	8007654 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 80075ec:	4603      	mov	r3, r0
 80075ee:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075f0:	681a      	ldr	r2, [r3, #0]
{
 80075f2:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80075f4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075f8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075fa:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075fc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80075fe:	f020 0001 	bic.w	r0, r0, #1
 8007602:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007604:	6890      	ldr	r0, [r2, #8]
 8007606:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800760a:	4301      	orrs	r1, r0
 800760c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800760e:	b1f5      	cbz	r5, 800764e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007610:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007612:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007614:	4810      	ldr	r0, [pc, #64]	; (8007658 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8007616:	4f11      	ldr	r7, [pc, #68]	; (800765c <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007618:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800761c:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800761e:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007620:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007622:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007624:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007626:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007628:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800762a:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800762e:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007632:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007636:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8007638:	2520      	movs	r5, #32
 800763a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800763e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007640:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8007644:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007646:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800764a:	bcf0      	pop	{r4, r5, r6, r7}
 800764c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800764e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007650:	4608      	mov	r0, r1
 8007652:	e7ee      	b.n	8007632 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8007654:	2002      	movs	r0, #2
}
 8007656:	4770      	bx	lr
 8007658:	08009f7c 	.word	0x08009f7c
 800765c:	08009f74 	.word	0x08009f74

08007660 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007660:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007664:	2a01      	cmp	r2, #1
 8007666:	d033      	beq.n	80076d0 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8007668:	4603      	mov	r3, r0
 800766a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800766c:	681a      	ldr	r2, [r3, #0]
{
 800766e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8007670:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007674:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007676:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007678:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800767a:	f020 0001 	bic.w	r0, r0, #1
 800767e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007680:	6890      	ldr	r0, [r2, #8]
 8007682:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8007686:	4301      	orrs	r1, r0
 8007688:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800768a:	b1f5      	cbz	r5, 80076ca <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800768c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800768e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007690:	4810      	ldr	r0, [pc, #64]	; (80076d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8007692:	4f11      	ldr	r7, [pc, #68]	; (80076d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007694:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007698:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800769a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800769c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800769e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80076a0:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076a2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076a4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076a6:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076aa:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ae:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80076b2:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80076b4:	2520      	movs	r5, #32
 80076b6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ba:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80076bc:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80076c0:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80076c2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80076c6:	bcf0      	pop	{r4, r5, r6, r7}
 80076c8:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80076ca:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80076cc:	4608      	mov	r0, r1
 80076ce:	e7ee      	b.n	80076ae <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80076d0:	2002      	movs	r0, #2
}
 80076d2:	4770      	bx	lr
 80076d4:	08009f7c 	.word	0x08009f7c
 80076d8:	08009f74 	.word	0x08009f74

080076dc <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80076dc:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80076de:	8840      	ldrh	r0, [r0, #2]
 80076e0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80076e4:	0c00      	lsrs	r0, r0, #16
 80076e6:	4770      	bx	lr

080076e8 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(CircleLimitation_Handle_t * pHandle, qd_t Vqd)
{
 80076e8:	b570      	push	{r4, r5, r6, lr}
  int32_t vd_square_limit;
  int32_t new_q;
  int32_t new_d;
  qd_t Local_Vqd=Vqd;

  MaxModule = pHandle->MaxModule;
 80076ea:	8803      	ldrh	r3, [r0, #0]
 80076ec:	140c      	asrs	r4, r1, #16
{
 80076ee:	b084      	sub	sp, #16
 80076f0:	b20d      	sxth	r5, r1

  square_q = (int32_t)(Vqd.q) * Vqd.q;
  square_d = (int32_t)(Vqd.d) * Vqd.d;
 80076f2:	fb04 f204 	mul.w	r2, r4, r4
{
 80076f6:	9101      	str	r1, [sp, #4]
  square_limit = MaxModule * MaxModule;
 80076f8:	fb03 f303 	mul.w	r3, r3, r3
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
  square_sum = square_q + square_d;
 80076fc:	fb05 2105 	mla	r1, r5, r5, r2

  if (square_sum > square_limit)
 8007700:	428b      	cmp	r3, r1
 8007702:	da10      	bge.n	8007726 <Circle_Limitation+0x3e>
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
 8007704:	8846      	ldrh	r6, [r0, #2]
 8007706:	fb06 f006 	mul.w	r0, r6, r6
  {
    if(square_d <= vd_square_limit)
 800770a:	4282      	cmp	r2, r0
 800770c:	dd14      	ble.n	8007738 <Circle_Limitation+0x50>
      new_d = Vqd.d;
    }
    else
    {
      new_d = pHandle->MaxVd;
      if(Vqd.d < 0)
 800770e:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
      square_temp = (square_limit - vd_square_limit)/1048576;
      new_q = SqrtTable[square_temp];
#else
      square_temp = square_limit - vd_square_limit;
      new_q = MCM_Sqrt(square_temp);
 8007710:	eba3 0000 	sub.w	r0, r3, r0
        new_d = -new_d;
 8007714:	bfb8      	it	lt
 8007716:	4276      	neglt	r6, r6
      new_q = MCM_Sqrt(square_temp);
 8007718:	f7f9 fe42 	bl	80013a0 <MCM_Sqrt>
#endif
      if(Vqd.q < 0)
 800771c:	2d00      	cmp	r5, #0
      {
        new_q = - new_q;
 800771e:	bfb8      	it	lt
 8007720:	4240      	neglt	r0, r0
 8007722:	b234      	sxth	r4, r6
      }
    }
    Local_Vqd.q = new_q;
 8007724:	b205      	sxth	r5, r0
    Local_Vqd.d = new_d;
  }
  return(Local_Vqd);
 8007726:	b2ad      	uxth	r5, r5
 8007728:	2000      	movs	r0, #0
 800772a:	b2a4      	uxth	r4, r4
 800772c:	f365 000f 	bfi	r0, r5, #0, #16
 8007730:	f364 401f 	bfi	r0, r4, #16, #16
}
 8007734:	b004      	add	sp, #16
 8007736:	bd70      	pop	{r4, r5, r6, pc}
      new_q = MCM_Sqrt(square_temp);
 8007738:	1a98      	subs	r0, r3, r2
 800773a:	f7f9 fe31 	bl	80013a0 <MCM_Sqrt>
      if(Vqd.q < 0)
 800773e:	2d00      	cmp	r5, #0
 8007740:	daf0      	bge.n	8007724 <Circle_Limitation+0x3c>
        new_q = -new_q;
 8007742:	4240      	negs	r0, r0
 8007744:	e7ee      	b.n	8007724 <Circle_Limitation+0x3c>
 8007746:	bf00      	nop

08007748 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 8007748:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 800774a:	2400      	movs	r4, #0
 800774c:	81c4      	strh	r4, [r0, #14]
  pHandle->pVSS = pVSS;
 800774e:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->EncRestart = false;
}
 8007752:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pENC = pENC;
 8007756:	6083      	str	r3, [r0, #8]
}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop

0800775c <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 800775c:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800775e:	2200      	movs	r2, #0
{
 8007760:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8007762:	4611      	mov	r1, r2
 8007764:	6840      	ldr	r0, [r0, #4]
 8007766:	f002 f95d 	bl	8009a24 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 800776a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800776e:	6860      	ldr	r0, [r4, #4]
 8007770:	f002 f950 	bl	8009a14 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	2100      	movs	r1, #0
 8007778:	f001 fd40 	bl	80091fc <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 800777c:	2200      	movs	r2, #0
 800777e:	4611      	mov	r1, r2
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	f001 fd3f 	bl	8009204 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 8007786:	8ae2      	ldrh	r2, [r4, #22]
 8007788:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800778c:	6820      	ldr	r0, [r4, #0]
 800778e:	f001 fd39 	bl	8009204 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8007792:	8ae1      	ldrh	r1, [r4, #22]
 8007794:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 8007796:	4a04      	ldr	r2, [pc, #16]	; (80077a8 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8007798:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 800779c:	fba2 2303 	umull	r2, r3, r2, r3
 80077a0:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 80077a2:	3301      	adds	r3, #1
 80077a4:	81a3      	strh	r3, [r4, #12]
}
 80077a6:	bd10      	pop	{r4, pc}
 80077a8:	10624dd3 	.word	0x10624dd3

080077ac <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 80077ac:	8983      	ldrh	r3, [r0, #12]
 80077ae:	b13b      	cbz	r3, 80077c0 <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29b      	uxth	r3, r3
{
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 80077b8:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 80077ba:	b11b      	cbz	r3, 80077c4 <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 80077bc:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 80077be:	bd10      	pop	{r4, pc}
  bool retVal = true;
 80077c0:	2001      	movs	r0, #1
}
 80077c2:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 80077c4:	7e03      	ldrb	r3, [r0, #24]
 80077c6:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 80077ca:	6880      	ldr	r0, [r0, #8]
 80077cc:	fb91 f1f3 	sdiv	r1, r1, r3
 80077d0:	f000 f948 	bl	8007a64 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 80077d4:	2001      	movs	r0, #1
 80077d6:	73a0      	strb	r0, [r4, #14]
}
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	bf00      	nop

080077dc <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 80077dc:	7b80      	ldrb	r0, [r0, #14]
 80077de:	4770      	bx	lr

080077e0 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 80077e0:	73c1      	strb	r1, [r0, #15]
}
 80077e2:	4770      	bx	lr

080077e4 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 80077e4:	7bc0      	ldrb	r0, [r0, #15]
 80077e6:	4770      	bx	lr

080077e8 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 80077e8:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80077ea:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 80077ee:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80077f0:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80077f2:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80077f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80077fa:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 80077fc:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80077fe:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8007802:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007804:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8007808:	6259      	str	r1, [r3, #36]	; 0x24
 800780a:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 800780e:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8007810:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007812:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007814:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8007818:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800781c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007820:	619a      	str	r2, [r3, #24]
 8007822:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8007824:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8007828:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800782c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007830:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007834:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007836:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	f042 0201 	orr.w	r2, r2, #1
 800783e:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8007848:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 800784c:	b13a      	cbz	r2, 800785e <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800784e:	3a01      	subs	r2, #1
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	3201      	adds	r2, #1
  }
}
 8007854:	bc70      	pop	{r4, r5, r6}
 8007856:	0092      	lsls	r2, r2, #2
 8007858:	3028      	adds	r0, #40	; 0x28
 800785a:	f002 b953 	b.w	8009b04 <memset>
 800785e:	bc70      	pop	{r4, r5, r6}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop

08007864 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 8007864:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8007866:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 800786a:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 800786c:	b13a      	cbz	r2, 800787e <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800786e:	3a01      	subs	r2, #1
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	3201      	adds	r2, #1
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	2100      	movs	r1, #0
 8007878:	3028      	adds	r0, #40	; 0x28
 800787a:	f002 f943 	bl	8009b04 <memset>
  }
  pHandle->SensorIsReliable = true;
 800787e:	2301      	movs	r3, #1
 8007880:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8007884:	bd10      	pop	{r4, pc}
 8007886:	bf00      	nop

08007888 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8007888:	6a01      	ldr	r1, [r0, #32]
 800788a:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 800788c:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 800788e:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8007890:	b289      	uxth	r1, r1
 8007892:	fb02 f201 	mul.w	r2, r2, r1
{
 8007896:	4603      	mov	r3, r0
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8007898:	2a00      	cmp	r2, #0
 800789a:	bfb8      	it	lt
 800789c:	f64f 70ff 	movwlt	r0, #65535	; 0xffff

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80078a0:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80078a4:	689c      	ldr	r4, [r3, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80078a6:	bfb8      	it	lt
 80078a8:	1812      	addlt	r2, r2, r0
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80078aa:	7858      	ldrb	r0, [r3, #1]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80078ac:	1412      	asrs	r2, r2, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80078ae:	fb00 f002 	mul.w	r0, r0, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 80078b2:	1a51      	subs	r1, r2, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 80078b4:	b200      	sxth	r0, r0
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80078b6:	fa04 f181 	sxtah	r1, r4, r1
  pHandle->_Super.hElAngle = elAngle;
 80078ba:	8098      	strh	r0, [r3, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 80078bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 80078c0:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 80078c2:	6099      	str	r1, [r3, #8]
}
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop

080078c8 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 80078c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80078ca:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 80078cc:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80078d0:	68dc      	ldr	r4, [r3, #12]
 80078d2:	f024 0401 	bic.w	r4, r4, #1
 80078d6:	60dc      	str	r4, [r3, #12]
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
  pHandle->TimerOverflowNb = 0;
 80078d8:	2600      	movs	r6, #0
  return (uint32_t)(READ_REG(TIMx->CNT));
 80078da:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  OverflowCntSample = pHandle->TimerOverflowNb;
 80078dc:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
 80078e0:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80078e4:	681e      	ldr	r6, [r3, #0]
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 80078e6:	0fef      	lsrs	r7, r5, #31
 80078e8:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80078ec:	bf1c      	itt	ne
 80078ee:	f06f 0601 	mvnne.w	r6, #1
 80078f2:	611e      	strne	r6, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80078f4:	68de      	ldr	r6, [r3, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 80078f6:	b2a4      	uxth	r4, r4
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 80078f8:	443c      	add	r4, r7
 80078fa:	f046 0601 	orr.w	r6, r6, #1
 80078fe:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8007902:	60de      	str	r6, [r3, #12]
  {
    pHandle->TimerOverflowError = true;
 8007904:	bf8a      	itet	hi
 8007906:	2601      	movhi	r6, #1
 8007908:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
 800790c:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8007910:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8007914:	f1bc 0f00 	cmp.w	ip, #0
 8007918:	f000 808d 	beq.w	8007a36 <ENC_CalcAvrgMecSpeedUnit+0x16e>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 800791c:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007920:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8007924:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8007928:	1aeb      	subs	r3, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800792a:	f10c 0c0a 	add.w	ip, ip, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 800792e:	fb07 3414 	mls	r4, r7, r4, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007932:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007936:	2a00      	cmp	r2, #0
 8007938:	f000 808d 	beq.w	8007a56 <ENC_CalcAvrgMecSpeedUnit+0x18e>
 800793c:	2a01      	cmp	r2, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800793e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007940:	d939      	bls.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007942:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007944:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007946:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007948:	d035      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800794a:	6b04      	ldr	r4, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800794c:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800794e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007950:	d031      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007952:	6b44      	ldr	r4, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007954:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007956:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007958:	d02d      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800795a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800795c:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800795e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007960:	d029      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007962:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007964:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007966:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007968:	d025      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800796a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800796c:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800796e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007970:	d021      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007972:	6c44      	ldr	r4, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007974:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007976:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007978:	d01d      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800797a:	6c84      	ldr	r4, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800797c:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800797e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007980:	d019      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007982:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007984:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007986:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007988:	d015      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800798a:	6d04      	ldr	r4, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800798c:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800798e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007990:	d011      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007992:	6d44      	ldr	r4, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007994:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8007996:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007998:	d00d      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800799a:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800799c:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800799e:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80079a0:	d009      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80079a2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80079a4:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80079a6:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80079a8:	d005      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80079aa:	6e04      	ldr	r4, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80079ac:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80079ae:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80079b0:	d001      	beq.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80079b2:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80079b4:	4423      	add	r3, r4
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 80079b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 80079b8:	fb07 f202 	mul.w	r2, r7, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 80079bc:	fb04 f303 	mul.w	r3, r4, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 80079c0:	fb93 f3f2 	sdiv	r3, r3, r2
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 80079c4:	b21f      	sxth	r7, r3
 80079c6:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80079c8:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 80079cc:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80079d0:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 80079d4:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 80079d8:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80079da:	340a      	adds	r4, #10
  pHandle->DeltaCapturesIndex++;
 80079dc:	3201      	adds	r2, #1
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80079de:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 80079e2:	69c4      	ldr	r4, [r0, #28]
  pHandle->PreviousCapture = CntCapture;
 80079e4:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80079ee:	eba3 020c 	sub.w	r2, r3, ip
 80079f2:	8242      	strh	r2, [r0, #18]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80079f4:	fb07 f30e 	mul.w	r3, r7, lr

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 80079f8:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 80079fc:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8007a00:	7845      	ldrb	r5, [r0, #1]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8007a02:	42ba      	cmp	r2, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8007a04:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8007a08:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 8007a0c:	fb93 f3f5 	sdiv	r3, r3, r5
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8007a10:	fb04 f403 	mul.w	r4, r4, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8007a14:	8b43      	ldrh	r3, [r0, #26]
 8007a16:	fb94 f4f3 	sdiv	r4, r4, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 8007a1a:	bf08      	it	eq
 8007a1c:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8007a1e:	81c4      	strh	r4, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8007a20:	bf08      	it	eq
 8007a22:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8007a26:	b1c6      	cbz	r6, 8007a5a <ENC_CalcAvrgMecSpeedUnit+0x192>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007a28:	78c2      	ldrb	r2, [r0, #3]
 8007a2a:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007a36:	f8b0 c072 	ldrh.w	ip, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007a3a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8007a3e:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007a42:	eba5 0c0c 	sub.w	ip, r5, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007a46:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8007a48:	fb07 c404 	mla	r4, r7, r4, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007a4c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	f47f af73 	bne.w	800793c <ENC_CalcAvrgMecSpeedUnit+0x74>
  int32_t wOverallAngleVariation = 0;
 8007a56:	4613      	mov	r3, r2
 8007a58:	e7ad      	b.n	80079b6 <ENC_CalcAvrgMecSpeedUnit+0xee>
}
 8007a5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8007a5e:	f001 bb67 	b.w	8009130 <SPD_IsMecSpeedReliable>
 8007a62:	bf00      	nop

08007a64 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007a64:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8007a66:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007a68:	fb03 f301 	mul.w	r3, r3, r1
 8007a6c:	8083      	strh	r3, [r0, #4]
  if ( hMecAngle < 0 )
 8007a6e:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8007a70:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007a72:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007a74:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8007a78:	4905      	ldr	r1, [pc, #20]	; (8007a90 <ENC_SetMecAngle+0x2c>)
 8007a7a:	bfbc      	itt	lt
 8007a7c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007a80:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8007a82:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8007a86:	fba1 1303 	umull	r1, r3, r1, r3
 8007a8a:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8007a8c:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8007a8e:	4770      	bx	lr
 8007a90:	80008001 	.word	0x80008001

08007a94 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8007a94:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8007a96:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8007a98:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <MCP_ReceivedPacket>:
  uint8_t motorID;
  uint8_t MCPResponse;
  uint8_t userCommand=0;
  int16_t txSyncFreeSpace;
  
  if (pHandle->rxLength != 0)
 8007aa8:	8982      	ldrh	r2, [r0, #12]
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	d060      	beq.n	8007b70 <MCP_ReceivedPacket+0xc8>
{
 8007aae:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    packetHeader = (uint16_t *) pHandle->rxBuffer;  
 8007ab0:	6846      	ldr	r6, [r0, #4]
    command = *packetHeader & CMD_MASK;
 8007ab2:	8833      	ldrh	r3, [r6, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007ab4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
    command = *packetHeader & CMD_MASK;
 8007ab8:	f023 0507 	bic.w	r5, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007abc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	4604      	mov	r4, r0
    command = *packetHeader & CMD_MASK;
 8007ac4:	b2ad      	uxth	r5, r5
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007ac6:	d06c      	beq.n	8007ba2 <MCP_ReceivedPacket+0xfa>
    MCI_Handle_t * pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007ac8:	6801      	ldr	r1, [r0, #0]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007aca:	4f60      	ldr	r7, [pc, #384]	; (8007c4c <MCP_ReceivedPacket+0x1a4>)
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007acc:	8989      	ldrh	r1, [r1, #12]
    motorID = (*packetHeader & MOTOR_MASK)-1;
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	3b01      	subs	r3, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007ad4:	3a02      	subs	r2, #2
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007ad6:	b2db      	uxtb	r3, r3
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007ad8:	b290      	uxth	r0, r2
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007ada:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007ade:	3602      	adds	r6, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007ae0:	3901      	subs	r1, #1
    /* Initialization of the tx length, command which send back data has to set the txLength (case of Read register)*/
    pHandle->txLength = 0;
 8007ae2:	2200      	movs	r2, #0
    
    switch (command) 
 8007ae4:	2d60      	cmp	r5, #96	; 0x60
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007ae6:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007ae8:	6066      	str	r6, [r4, #4]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007aea:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007aee:	b289      	uxth	r1, r1
    pHandle->txLength = 0;
 8007af0:	81e2      	strh	r2, [r4, #14]
    switch (command) 
 8007af2:	d83e      	bhi.n	8007b72 <MCP_ReceivedPacket+0xca>
 8007af4:	2d60      	cmp	r5, #96	; 0x60
 8007af6:	d832      	bhi.n	8007b5e <MCP_ReceivedPacket+0xb6>
 8007af8:	e8df f005 	tbb	[pc, r5]
 8007afc:	31313197 	.word	0x31313197
 8007b00:	31313131 	.word	0x31313131
 8007b04:	3131319f 	.word	0x3131319f
 8007b08:	31313131 	.word	0x31313131
 8007b0c:	31313175 	.word	0x31313175
 8007b10:	31313131 	.word	0x31313131
 8007b14:	3131314b 	.word	0x3131314b
 8007b18:	31313131 	.word	0x31313131
 8007b1c:	31313145 	.word	0x31313145
 8007b20:	31313131 	.word	0x31313131
 8007b24:	3131317a 	.word	0x3131317a
 8007b28:	31313131 	.word	0x31313131
 8007b2c:	31313141 	.word	0x31313141
 8007b30:	31313131 	.word	0x31313131
 8007b34:	31313185 	.word	0x31313185
 8007b38:	31313131 	.word	0x31313131
 8007b3c:	3131318b 	.word	0x3131318b
 8007b40:	31313131 	.word	0x31313131
 8007b44:	31313191 	.word	0x31313191
 8007b48:	31313131 	.word	0x31313131
 8007b4c:	313131a4 	.word	0x313131a4
 8007b50:	31313131 	.word	0x31313131
 8007b54:	313131a4 	.word	0x313131a4
 8007b58:	31313131 	.word	0x31313131
 8007b5c:	a4          	.byte	0xa4
 8007b5d:	00          	.byte	0x00
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2002      	movs	r0, #2
    	  }
        break;
      default :
        MCPResponse = MCP_CMD_UNKNOWN;
      }
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8007b62:	68a2      	ldr	r2, [r4, #8]
 8007b64:	54d0      	strb	r0, [r2, r3]
      pHandle->txLength++;
 8007b66:	89e3      	ldrh	r3, [r4, #14]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	81e3      	strh	r3, [r4, #14]
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
    /* Nothing to do, txBuffer and txLength have not been modified */
  } 
}
 8007b6c:	b003      	add	sp, #12
 8007b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b70:	4770      	bx	lr
    switch (command) 
 8007b72:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007b76:	d065      	beq.n	8007c44 <MCP_ReceivedPacket+0x19c>
 8007b78:	4613      	mov	r3, r2
 8007b7a:	2002      	movs	r0, #2
 8007b7c:	e7f1      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
          if (MCI_GetSTMState(pMCI) == IDLE)
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f7f9 fcee 	bl	8001560 <MCI_GetSTMState>
 8007b84:	b128      	cbz	r0, 8007b92 <MCP_ReceivedPacket+0xea>
            MCI_StopMotor(pMCI);
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7f9 fca2 	bl	80014d0 <MCI_StopMotor>
            MCPResponse = MCP_CMD_OK;
 8007b8c:	89e3      	ldrh	r3, [r4, #14]
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e7e7      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8007b92:	4638      	mov	r0, r7
 8007b94:	f7f9 fc92 	bl	80014bc <MCI_StartMotor>
 8007b98:	f080 0001 	eor.w	r0, r0, #1
 8007b9c:	89e3      	ldrh	r3, [r4, #14]
 8007b9e:	b2c0      	uxtb	r0, r0
 8007ba0:	e7df      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007ba2:	6801      	ldr	r1, [r0, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007ba4:	3a02      	subs	r2, #2
        userCommand = (command >> 3) & 0x1f;
 8007ba6:	f3c5 03c7 	ubfx	r3, r5, #3, #8
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007baa:	b290      	uxth	r0, r2
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007bac:	3602      	adds	r6, #2
    pHandle->txLength = 0;
 8007bae:	2200      	movs	r2, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007bb0:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007bb4:	8989      	ldrh	r1, [r1, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007bb6:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007bb8:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0;
 8007bba:	81e2      	strh	r2, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007bbc:	d002      	beq.n	8007bc4 <MCP_ReceivedPacket+0x11c>
        MCPResponse = MCP_CMD_OK;
 8007bbe:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8007bc0:	200d      	movs	r0, #13
 8007bc2:	e7ce      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007bc4:	3901      	subs	r1, #1
 8007bc6:	b20a      	sxth	r2, r1
        userCommand = (command >> 3) & 0x1f;
 8007bc8:	f003 031f 	and.w	r3, r3, #31
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007bcc:	4920      	ldr	r1, [pc, #128]	; (8007c50 <MCP_ReceivedPacket+0x1a8>)
 8007bce:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8007bd2:	2d00      	cmp	r5, #0
 8007bd4:	d0f3      	beq.n	8007bbe <MCP_ReceivedPacket+0x116>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4631      	mov	r1, r6
 8007bdc:	f104 030e 	add.w	r3, r4, #14
 8007be0:	47a8      	blx	r5
 8007be2:	89e3      	ldrh	r3, [r4, #14]
 8007be4:	e7bd      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
        MCPResponse = RI_GetRegCommandParser (pHandle,txSyncFreeSpace); 
 8007be6:	4620      	mov	r0, r4
 8007be8:	f7fa ff16 	bl	8002a18 <RI_GetRegCommandParser>
        break;
 8007bec:	89e3      	ldrh	r3, [r4, #14]
 8007bee:	e7b8      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
          if (MCI_GetSTMState(pMCI) == RUN)
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7f9 fcb5 	bl	8001560 <MCI_GetSTMState>
 8007bf6:	2806      	cmp	r0, #6
 8007bf8:	d1c8      	bne.n	8007b8c <MCP_ReceivedPacket+0xe4>
            MCI_StopRamp(pMCI);
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	f7f9 fccc 	bl	8001598 <MCI_StopRamp>
 8007c00:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007c02:	2000      	movs	r0, #0
 8007c04:	e7ad      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
          MCI_FaultAcknowledged(pMCI);
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7f9 fc66 	bl	80014d8 <MCI_FaultAcknowledged>
        break;
 8007c0c:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8007c0e:	2000      	movs	r0, #0
        break;
 8007c10:	e7a7      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
        MCI_EncoderAlign(pMCI);
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7f9 fc64 	bl	80014e0 <MCI_EncoderAlign>
        break;
 8007c18:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007c1a:	2000      	movs	r0, #0
        break;
 8007c1c:	e7a1      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
        MCI_Clear_Iqdref(pMCI);
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7f9 fd36 	bl	8001690 <MCI_Clear_Iqdref>
        break;
 8007c24:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007c26:	2000      	movs	r0, #0
        break;
 8007c28:	e79b      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8007c2a:	68a3      	ldr	r3, [r4, #8]
    	pHandle->txLength = 4;
 8007c2c:	2104      	movs	r1, #4
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8007c2e:	2201      	movs	r2, #1
    	pHandle->txLength = 4;
 8007c30:	81e1      	strh	r1, [r4, #14]
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8007c32:	701a      	strb	r2, [r3, #0]
      break;
 8007c34:	89e3      	ldrh	r3, [r4, #14]
    	MCPResponse = MCP_CMD_OK;
 8007c36:	2000      	movs	r0, #0
      break;
 8007c38:	e793      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
        MCPResponse = RI_SetRegCommandParser (pHandle,txSyncFreeSpace); 
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7fa fbd2 	bl	80023e4 <RI_SetRegCommandParser>
      break;
 8007c40:	89e3      	ldrh	r3, [r4, #14]
 8007c42:	e78e      	b.n	8007b62 <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007c44:	b20a      	sxth	r2, r1
  uint8_t userCommand=0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e7c0      	b.n	8007bcc <MCP_ReceivedPacket+0x124>
 8007c4a:	bf00      	nop
 8007c4c:	200009a0 	.word	0x200009a0
 8007c50:	20000a3c 	.word	0x20000a3c

08007c54 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog (MCPA_Handle_t *pHandle)
{
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007c56:	7fc3      	ldrb	r3, [r0, #31]
 8007c58:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8007c5c:	429a      	cmp	r2, r3
{
 8007c5e:	4604      	mov	r4, r0
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007c60:	d002      	beq.n	8007c68 <MCPA_dataLog+0x14>
    }     
  }
  else 
  {
    /* nothing to log just waiting next call to MCPA_datalog*/
    pHandle->HFIndex++;
 8007c62:	3301      	adds	r3, #1
 8007c64:	77c3      	strb	r3, [r0, #31]
  }
}  
 8007c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pHandle->bufferIndex == 0)
 8007c68:	8b05      	ldrh	r5, [r0, #24]
    pHandle->HFIndex = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	77c3      	strb	r3, [r0, #31]
    if (pHandle->bufferIndex == 0)
 8007c6e:	b1a5      	cbz	r5, 8007c9a <MCPA_dataLog+0x46>
 8007c70:	6961      	ldr	r1, [r4, #20]
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8007c72:	8ba0      	ldrh	r0, [r4, #28]
 8007c74:	42a8      	cmp	r0, r5
 8007c76:	d24d      	bcs.n	8007d14 <MCPA_dataLog+0xc0>
 8007c78:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
      if (pHandle->MFRateBuff == 254) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007c7c:	2afe      	cmp	r2, #254	; 0xfe
 8007c7e:	d068      	beq.n	8007d52 <MCPA_dataLog+0xfe>
       *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007c80:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007c84:	534b      	strh	r3, [r1, r5]
       pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8007c86:	8b22      	ldrh	r2, [r4, #24]
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	3202      	adds	r2, #2
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	6845      	ldr	r5, [r0, #4]
 8007c90:	b292      	uxth	r2, r2
 8007c92:	47a8      	blx	r5
       pHandle->bufferIndex = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	8323      	strh	r3, [r4, #24]
}  
 8007c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer, (void **) &pHandle->currentBuffer, MCTL_ASYNC))
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	2209      	movs	r2, #9
 8007c9e:	f851 0b14 	ldr.w	r0, [r1], #20
 8007ca2:	6803      	ldr	r3, [r0, #0]
 8007ca4:	4798      	blx	r3
 8007ca6:	b388      	cbz	r0, 8007d0c <MCPA_dataLog+0xb8>
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007ca8:	4b4b      	ldr	r3, [pc, #300]	; (8007dd8 <MCPA_dataLog+0x184>)
        logValue = (uint32_t *) pHandle->currentBuffer;
 8007caa:	6961      	ldr	r1, [r4, #20]
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	600b      	str	r3, [r1, #0]
        if (pHandle->Mark != pHandle->MarkBuff)
 8007cb0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8007cb4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
        pHandle->MFIndex = 0; /* Restart the motif from scratch at each buffer*/
 8007cb8:	f884 5020 	strb.w	r5, [r4, #32]
        if (pHandle->Mark != pHandle->MarkBuff)
 8007cbc:	429a      	cmp	r2, r3
        pHandle->bufferIndex = 4; 
 8007cbe:	f04f 0504 	mov.w	r5, #4
 8007cc2:	8325      	strh	r5, [r4, #24]
        if (pHandle->Mark != pHandle->MarkBuff)
 8007cc4:	d0d5      	beq.n	8007c72 <MCPA_dataLog+0x1e>
          pHandle->HFNumBuff = pHandle->HFNum;
 8007cc6:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
          pHandle->MFNumBuff = pHandle->MFNum;
 8007cca:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
          pHandle->HFRateBuff = pHandle->HFRate;
 8007cce:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
          pHandle->MFRateBuff = pHandle->MFRate;
 8007cd2:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
          pHandle->MarkBuff = pHandle->Mark;
 8007cd6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8007cda:	1842      	adds	r2, r0, r1
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007cdc:	8b63      	ldrh	r3, [r4, #26]
          pHandle->HFNumBuff = pHandle->HFNum;
 8007cde:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
          pHandle->MFNumBuff = pHandle->MFNum;
 8007ce2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8007ce6:	0092      	lsls	r2, r2, #2
 8007ce8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007cec:	83a3      	strh	r3, [r4, #28]
          pHandle->HFRateBuff = pHandle->HFRate;
 8007cee:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
          pHandle->MFRateBuff = pHandle->MFRate;
 8007cf2:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8007cf6:	f001 fef7 	bl	8009ae8 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8007cfa:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8007cfe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8007d02:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8007d06:	441a      	add	r2, r3
 8007d08:	f001 feee 	bl	8009ae8 <memcpy>
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8007d0c:	8b25      	ldrh	r5, [r4, #24]
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	d1ae      	bne.n	8007c70 <MCPA_dataLog+0x1c>
}  
 8007d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007d14:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8007d18:	194e      	adds	r6, r1, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d055      	beq.n	8007dca <MCPA_dataLog+0x176>
        *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]);
 8007d1e:	2200      	movs	r2, #0
 8007d20:	68a7      	ldr	r7, [r4, #8]
 8007d22:	4610      	mov	r0, r2
 8007d24:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	f826 3b02 	strh.w	r3, [r6], #2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007d2e:	8b25      	ldrh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007d30:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007d34:	3201      	adds	r2, #1
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007d36:	3502      	adds	r5, #2
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007d38:	b2d0      	uxtb	r0, r2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007d3a:	b2ad      	uxth	r5, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007d3c:	4283      	cmp	r3, r0
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007d3e:	8325      	strh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007d40:	d8f0      	bhi.n	8007d24 <MCPA_dataLog+0xd0>
      if (pHandle->MFRateBuff < 254) 
 8007d42:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8007d46:	2afd      	cmp	r2, #253	; 0xfd
 8007d48:	d919      	bls.n	8007d7e <MCPA_dataLog+0x12a>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007d4a:	8ba3      	ldrh	r3, [r4, #28]
 8007d4c:	42ab      	cmp	r3, r5
 8007d4e:	d395      	bcc.n	8007c7c <MCPA_dataLog+0x28>
}  
 8007d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007d52:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007d56:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8007d5a:	4418      	add	r0, r3
 8007d5c:	4298      	cmp	r0, r3
 8007d5e:	dd8f      	ble.n	8007c80 <MCPA_dataLog+0x2c>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007d60:	68a7      	ldr	r7, [r4, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007d62:	6926      	ldr	r6, [r4, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007d64:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007d6c:	5cf2      	ldrb	r2, [r6, r3]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007d6e:	3301      	adds	r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007d70:	4415      	add	r5, r2
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007d72:	b2db      	uxtb	r3, r3
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007d74:	b2ad      	uxth	r5, r5
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007d76:	4283      	cmp	r3, r0
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007d78:	8325      	strh	r5, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007d7a:	dbf3      	blt.n	8007d64 <MCPA_dataLog+0x110>
 8007d7c:	e780      	b.n	8007c80 <MCPA_dataLog+0x2c>
 8007d7e:	8ba0      	ldrh	r0, [r4, #28]
        if (pHandle->MFIndex == pHandle->MFRateBuff)  
 8007d80:	f894 5020 	ldrb.w	r5, [r4, #32]
 8007d84:	4295      	cmp	r5, r2
 8007d86:	d007      	beq.n	8007d98 <MCPA_dataLog+0x144>
          pHandle->MFIndex ++;
 8007d88:	3501      	adds	r5, #1
 8007d8a:	f884 5020 	strb.w	r5, [r4, #32]
 8007d8e:	8b25      	ldrh	r5, [r4, #24]
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007d90:	42a8      	cmp	r0, r5
 8007d92:	f4ff af75 	bcc.w	8007c80 <MCPA_dataLog+0x2c>
}  
 8007d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007d98:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 8007d9c:	441e      	add	r6, r3
          pHandle->MFIndex = 0;
 8007d9e:	2200      	movs	r2, #0
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007da0:	429e      	cmp	r6, r3
          pHandle->MFIndex = 0;
 8007da2:	f884 2020 	strb.w	r2, [r4, #32]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007da6:	dd15      	ble.n	8007dd4 <MCPA_dataLog+0x180>
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007da8:	f8d4 c008 	ldr.w	ip, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007dac:	6927      	ldr	r7, [r4, #16]
 8007dae:	8b25      	ldrh	r5, [r4, #24]
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007db0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	514a      	str	r2, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007db8:	5cfa      	ldrb	r2, [r7, r3]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007dba:	3301      	adds	r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007dbc:	4415      	add	r5, r2
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007dbe:	b2db      	uxtb	r3, r3
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007dc0:	b2ad      	uxth	r5, r5
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007dc2:	42b3      	cmp	r3, r6
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007dc4:	8325      	strh	r5, [r4, #24]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007dc6:	dbf3      	blt.n	8007db0 <MCPA_dataLog+0x15c>
 8007dc8:	e7e2      	b.n	8007d90 <MCPA_dataLog+0x13c>
      if (pHandle->MFRateBuff < 254) 
 8007dca:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8007dce:	2afd      	cmp	r2, #253	; 0xfd
 8007dd0:	d9d6      	bls.n	8007d80 <MCPA_dataLog+0x12c>
}  
 8007dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd4:	8b25      	ldrh	r5, [r4, #24]
 8007dd6:	e7db      	b.n	8007d90 <MCPA_dataLog+0x13c>
 8007dd8:	20000578 	.word	0x20000578

08007ddc <MCPA_flushDataLog>:

void MCPA_flushDataLog (MCPA_Handle_t *pHandle)
{
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8007dde:	8b03      	ldrh	r3, [r0, #24]
 8007de0:	b18b      	cbz	r3, 8007e06 <MCPA_flushDataLog+0x2a>
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8007de2:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8007de6:	2afe      	cmp	r2, #254	; 0xfe
 8007de8:	4604      	mov	r4, r0
 8007dea:	d00d      	beq.n	8007e08 <MCPA_flushDataLog+0x2c>
 8007dec:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007dee:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8007df2:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8007df4:	8b22      	ldrh	r2, [r4, #24]
 8007df6:	6820      	ldr	r0, [r4, #0]
 8007df8:	3202      	adds	r2, #2
 8007dfa:	2309      	movs	r3, #9
 8007dfc:	6845      	ldr	r5, [r0, #4]
 8007dfe:	b292      	uxth	r2, r2
 8007e00:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	8323      	strh	r3, [r4, #24]
  }   
}
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007e08:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8007e0c:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8007e10:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007e12:	4415      	add	r5, r2
 8007e14:	42aa      	cmp	r2, r5
 8007e16:	daea      	bge.n	8007dee <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007e18:	6887      	ldr	r7, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007e1a:	6906      	ldr	r6, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007e1c:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8007e20:	6800      	ldr	r0, [r0, #0]
 8007e22:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007e24:	5cb0      	ldrb	r0, [r6, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007e26:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007e28:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007e2a:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007e2c:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007e2e:	42aa      	cmp	r2, r5
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007e30:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007e32:	dbf3      	blt.n	8007e1c <MCPA_flushDataLog+0x40>
 8007e34:	e7db      	b.n	8007dee <MCPA_flushDataLog+0x12>
 8007e36:	bf00      	nop

08007e38 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}
  
uint8_t MCPA_cfgLog (MCPA_Handle_t *pHandle, uint8_t * cfgdata)
{
 8007e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t newID, buffSize;
  uint8_t i;
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
  uint8_t result = MCP_CMD_OK;
  
  buffSize = *((uint16_t *) cfgdata);
 8007e3c:	880e      	ldrh	r6, [r1, #0]
{
 8007e3e:	4604      	mov	r4, r0
  if (buffSize == 0)
 8007e40:	2e00      	cmp	r6, #0
 8007e42:	d041      	beq.n	8007ec8 <MCPA_cfgLog+0x90>
  { 
    /* Switch Off condition */
    MCPA_stopDataLog(pHandle);
  }
  else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8007e44:	6803      	ldr	r3, [r0, #0]
 8007e46:	89db      	ldrh	r3, [r3, #14]
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	d33a      	bcc.n	8007ec2 <MCPA_cfgLog+0x8a>
  {
    result = MCP_ERROR_NO_TXASYNC_SPACE;
  }  
  else
  {
     pHandle->HFRate = *((uint8_t *) &cfgdata[2]);
 8007e4c:	788b      	ldrb	r3, [r1, #2]
 8007e4e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     pHandle->HFNum  = *((uint8_t *) &cfgdata[3]);
 8007e52:	78cf      	ldrb	r7, [r1, #3]
 8007e54:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
     pHandle->MFRate = *((uint8_t *) &cfgdata[4]);
 8007e58:	790b      	ldrb	r3, [r1, #4]
 8007e5a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8007e5e:	794a      	ldrb	r2, [r1, #5]
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8007e60:	7f83      	ldrb	r3, [r0, #30]
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8007e62:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8007e66:	4417      	add	r7, r2
 8007e68:	429f      	cmp	r7, r3
 8007e6a:	dc4f      	bgt.n	8007f0c <MCPA_cfgLog+0xd4>
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
 8007e6c:	3106      	adds	r1, #6
     {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007e6e:	2f00      	cmp	r7, #0
 8007e70:	d053      	beq.n	8007f1a <MCPA_cfgLog+0xe2>
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
 8007e72:	2700      	movs	r7, #0
 8007e74:	4688      	mov	r8, r1
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007e76:	463d      	mov	r5, r7
 8007e78:	e010      	b.n	8007e9c <MCPA_cfgLog+0x64>
       {
         newID = *((uint16_t *) cfgdata);
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	68e3      	ldr	r3, [r4, #12]
 8007e7e:	5558      	strb	r0, [r3, r5]
         logSize = logSize+pHandle->dataSizeTable[i];
 8007e80:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007e82:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8007e86:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
         logSize = logSize+pHandle->dataSizeTable[i];
 8007e8a:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	440b      	add	r3, r1
 8007e90:	b2ed      	uxtb	r5, r5
         logSize = logSize+pHandle->dataSizeTable[i];
 8007e92:	443a      	add	r2, r7
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007e94:	429d      	cmp	r5, r3
         logSize = logSize+pHandle->dataSizeTable[i];
 8007e96:	b2d7      	uxtb	r7, r2
         cfgdata = cfgdata+2; /* Point to the next UID */
 8007e98:	4641      	mov	r1, r8
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007e9a:	da0f      	bge.n	8007ebc <MCPA_cfgLog+0x84>
         newID = *((uint16_t *) cfgdata);
 8007e9c:	f838 9b02 	ldrh.w	r9, [r8], #2
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8007ea0:	6861      	ldr	r1, [r4, #4]
 8007ea2:	4648      	mov	r0, r9
 8007ea4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007ea8:	f7fb f952 	bl	8003150 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8007eac:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	d8e2      	bhi.n	8007e7a <MCPA_cfgLog+0x42>
 8007eb4:	4648      	mov	r0, r9
 8007eb6:	f7fb f93f 	bl	8003138 <RI_GetIDSize>
 8007eba:	e7df      	b.n	8007e7c <MCPA_cfgLog+0x44>
 8007ebc:	1d7b      	adds	r3, r7, #5
       }
       if (buffSize < (logSize+2+4) ) /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
 8007ebe:	429e      	cmp	r6, r3
 8007ec0:	dc1a      	bgt.n	8007ef8 <MCPA_cfgLog+0xc0>
    result = MCP_ERROR_NO_TXASYNC_SPACE;
 8007ec2:	2009      	movs	r0, #9
     {
       result = MCP_ERROR_BAD_RAW_FORMAT;
     }
  }
  return result;
}
 8007ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007ec8:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8007eca:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007ece:	b153      	cbz	r3, 8007ee6 <MCPA_cfgLog+0xae>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8007ed0:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007ed2:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8007ed6:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8007ed8:	8b22      	ldrh	r2, [r4, #24]
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	3202      	adds	r2, #2
 8007ede:	6845      	ldr	r5, [r0, #4]
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	2309      	movs	r3, #9
 8007ee4:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8007ee6:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8007ee8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8007eec:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8007eee:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8007ef2:	8320      	strh	r0, [r4, #24]
}
 8007ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
         pHandle->bufferTxTrigger = buffSize-logSize-2; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8007ef8:	1eb2      	subs	r2, r6, #2
 8007efa:	1bd2      	subs	r2, r2, r7
 8007efc:	8362      	strh	r2, [r4, #26]
         pHandle->Mark =   *((uint8_t *) cfgdata);
 8007efe:	780b      	ldrb	r3, [r1, #0]
 8007f00:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
         if (pHandle->Mark == 0)
 8007f04:	b12b      	cbz	r3, 8007f12 <MCPA_cfgLog+0xda>
  uint8_t result = MCP_CMD_OK;
 8007f06:	2000      	movs	r0, #0
}
 8007f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8007f0c:	200a      	movs	r0, #10
}
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007f12:	8b23      	ldrh	r3, [r4, #24]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0e6      	beq.n	8007ee6 <MCPA_cfgLog+0xae>
 8007f18:	e7da      	b.n	8007ed0 <MCPA_cfgLog+0x98>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007f1a:	2305      	movs	r3, #5
 8007f1c:	e7cf      	b.n	8007ebe <MCPA_cfgLog+0x86>
 8007f1e:	bf00      	nop

08007f20 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8007f20:	b510      	push	{r4, lr}
 8007f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f26:	4604      	mov	r4, r0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	f001 fdeb 	bl	8009b04 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8007f34:	bd10      	pop	{r4, pc}
 8007f36:	bf00      	nop

08007f38 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007f38:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8007f3c:	1c53      	adds	r3, r2, #1
 8007f3e:	b29b      	uxth	r3, r3
{
 8007f40:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8007f42:	2b7f      	cmp	r3, #127	; 0x7f
{
 8007f44:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8007f46:	bf88      	it	hi
 8007f48:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007f4a:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8007f4e:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8007f50:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8007f54:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007f58:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8007f5c:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8007f5e:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007f60:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007f64:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007f66:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007f68:	d1fa      	bne.n	8007f60 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	bfb8      	it	lt
 8007f6e:	327f      	addlt	r2, #127	; 0x7f
 8007f70:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8007f72:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8007f76:	bc70      	pop	{r4, r5, r6}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8007f7c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop

08007f84 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8007f84:	8a03      	ldrh	r3, [r0, #16]
 8007f86:	8b42      	ldrh	r2, [r0, #26]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d306      	bcc.n	8007f9a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8007f8c:	8b82      	ldrh	r2, [r0, #28]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d901      	bls.n	8007f96 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8007f92:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8007f94:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8007f96:	8ac0      	ldrh	r0, [r0, #22]
 8007f98:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8007f9a:	2008      	movs	r0, #8
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop

08007fa0 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	8203      	strh	r3, [r0, #16]
}
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop

08007fa8 <NTC_Init>:
{
 8007fa8:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007faa:	7803      	ldrb	r3, [r0, #0]
{
 8007fac:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007fae:	b123      	cbz	r3, 8007fba <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007fb0:	8a43      	ldrh	r3, [r0, #18]
 8007fb2:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	82c2      	strh	r2, [r0, #22]
}
 8007fb8:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8007fba:	3004      	adds	r0, #4
 8007fbc:	f7fb f992 	bl	80032e4 <RCM_RegisterRegConv>
 8007fc0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7ff ffeb 	bl	8007fa0 <NTC_Clear>
}
 8007fca:	bd10      	pop	{r4, pc}

08007fcc <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8007fcc:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007fce:	7803      	ldrb	r3, [r0, #0]
{
 8007fd0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007fd2:	b113      	cbz	r3, 8007fda <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8007fd8:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007fda:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007fde:	f7fb fa55 	bl	800348c <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8007fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	d007      	beq.n	8007ffa <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007fea:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8007fec:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007fee:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8007ff0:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007ff4:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8007ff8:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f7ff ffc2 	bl	8007f84 <NTC_SetFaultState>
 8008000:	82e0      	strh	r0, [r4, #22]
}
 8008002:	bd10      	pop	{r4, pc}

08008004 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008004:	7803      	ldrb	r3, [r0, #0]
 8008006:	b983      	cbnz	r3, 800802a <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8008008:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800800a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 800800c:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008010:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008012:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8008014:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008018:	2b00      	cmp	r3, #0
 800801a:	bfbc      	itt	lt
 800801c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8008020:	33ff      	addlt	r3, #255	; 0xff
 8008022:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8008026:	b200      	sxth	r0, r0
 8008028:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800802a:	8a80      	ldrh	r0, [r0, #20]
}
 800802c:	b200      	sxth	r0, r0
 800802e:	4770      	bx	lr

08008030 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8008030:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008032:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008034:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008036:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008038:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800803a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800803c:	6283      	str	r3, [r0, #40]	; 0x28
}
 800803e:	4770      	bx	lr

08008040 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8008040:	8081      	strh	r1, [r0, #4]
}
 8008042:	4770      	bx	lr

08008044 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8008044:	80c1      	strh	r1, [r0, #6]
}
 8008046:	4770      	bx	lr

08008048 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8008048:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop

08008050 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8008050:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop

08008058 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8008058:	6081      	str	r1, [r0, #8]

  return;
}
 800805a:	4770      	bx	lr

0800805c <PID_GetKPDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKpDivisorPOW2: Kp divisor expressed as power of 2
 */
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
 800805c:	b100      	cbz	r0, 8008060 <PID_GetKPDivisorPOW2+0x4>
 800805e:	8b80      	ldrh	r0, [r0, #28]
}
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop

08008064 <PID_SetKPDivisorPOW2>:
 * @retval None
 */
__weak void PID_SetKPDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKpDivisorPOW2 )
{
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8008064:	2301      	movs	r3, #1
 8008066:	408b      	lsls	r3, r1
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8008068:	8381      	strh	r1, [r0, #28]
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 800806a:	8303      	strh	r3, [r0, #24]
}
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop

08008070 <PID_GetKIDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKiDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
 8008070:	b100      	cbz	r0, 8008074 <PID_GetKIDivisorPOW2+0x4>
 8008072:	8bc0      	ldrh	r0, [r0, #30]
}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop

08008078 <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 8008078:	6101      	str	r1, [r0, #16]
}
 800807a:	4770      	bx	lr

0800807c <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 800807c:	60c1      	str	r1, [r0, #12]
}
 800807e:	4770      	bx	lr

08008080 <PID_SetKIDivisorPOW2>:
{
 8008080:	b538      	push	{r3, r4, r5, lr}
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8008082:	2301      	movs	r3, #1
{
 8008084:	460c      	mov	r4, r1
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8008086:	408b      	lsls	r3, r1
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8008088:	f647 71ff 	movw	r1, #32767	; 0x7fff
  pHandle->hKiDivisor = ( uint16_t )( wKiDiv );
 800808c:	8343      	strh	r3, [r0, #26]
  pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 800808e:	83c4      	strh	r4, [r0, #30]
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8008090:	40a1      	lsls	r1, r4
{
 8008092:	4605      	mov	r5, r0
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8008094:	f7ff fff2 	bl	800807c <PID_SetUpperIntegralTermLimit>
  PID_SetLowerIntegralTermLimit( pHandle, ( int32_t ) - INT16_MAX * wKiDiv );
 8008098:	4902      	ldr	r1, [pc, #8]	; (80080a4 <PID_SetKIDivisorPOW2+0x24>)
 800809a:	4628      	mov	r0, r5
 800809c:	40a1      	lsls	r1, r4
 800809e:	f7ff ffeb 	bl	8008078 <PID_SetLowerIntegralTermLimit>
}
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	ffff8001 	.word	0xffff8001

080080a8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 80080a8:	8441      	strh	r1, [r0, #34]	; 0x22
}
 80080aa:	4770      	bx	lr

080080ac <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80080ac:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <PID_GetKDDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKdDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
 80080b4:	b100      	cbz	r0, 80080b8 <PID_GetKDDivisorPOW2+0x4>
 80080b6:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <PID_SetKDDivisorPOW2>:
 * @param hKdDivisorPOW2
 */
__weak void PID_SetKDDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKdDivisorPOW2 )
{
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 80080bc:	2301      	movs	r3, #1
 80080be:	408b      	lsls	r3, r1
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 80080c0:	84c1      	strh	r1, [r0, #38]	; 0x26
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 80080c2:	8483      	strh	r3, [r0, #36]	; 0x24
}
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop

080080c8 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80080c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80080cc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 80080d0:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80080d2:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80080d6:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80080da:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 80080de:	b162      	cbz	r2, 80080fa <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80080e0:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80080e2:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 80080e6:	1872      	adds	r2, r6, r1
 80080e8:	d420      	bmi.n	800812c <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	db29      	blt.n	8008142 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80080ee:	68c1      	ldr	r1, [r0, #12]
 80080f0:	4291      	cmp	r1, r2
 80080f2:	db03      	blt.n	80080fc <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80080f4:	6901      	ldr	r1, [r0, #16]
 80080f6:	4291      	cmp	r1, r2
 80080f8:	dc00      	bgt.n	80080fc <PI_Controller+0x34>
 80080fa:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80080fc:	8b86      	ldrh	r6, [r0, #28]
 80080fe:	8bc2      	ldrh	r2, [r0, #30]
 8008100:	4133      	asrs	r3, r6
 8008102:	fa41 f202 	asr.w	r2, r1, r2
 8008106:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8008108:	429c      	cmp	r4, r3
 800810a:	da05      	bge.n	8008118 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800810c:	1ae3      	subs	r3, r4, r3
 800810e:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8008110:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8008112:	4620      	mov	r0, r4
 8008114:	bc70      	pop	{r4, r5, r6}
 8008116:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8008118:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 800811a:	bfc9      	itett	gt
 800811c:	1aeb      	subgt	r3, r5, r3
 800811e:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8008120:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8008122:	18c9      	addgt	r1, r1, r3
 8008124:	6081      	str	r1, [r0, #8]
}
 8008126:	4620      	mov	r0, r4
 8008128:	bc70      	pop	{r4, r5, r6}
 800812a:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 800812c:	2e00      	cmp	r6, #0
 800812e:	ddde      	ble.n	80080ee <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8008130:	2900      	cmp	r1, #0
 8008132:	dddc      	ble.n	80080ee <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008134:	68c1      	ldr	r1, [r0, #12]
 8008136:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800813a:	4291      	cmp	r1, r2
 800813c:	d1de      	bne.n	80080fc <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 800813e:	460a      	mov	r2, r1
 8008140:	e7db      	b.n	80080fa <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8008142:	4e03      	ldr	r6, [pc, #12]	; (8008150 <PI_Controller+0x88>)
 8008144:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8008148:	bf28      	it	cs
 800814a:	4632      	movcs	r2, r6
 800814c:	e7cf      	b.n	80080ee <PI_Controller+0x26>
 800814e:	bf00      	nop
 8008150:	80000001 	.word	0x80000001

08008154 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8008154:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008156:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800815a:	8b11      	ldrh	r1, [r2, #24]
 800815c:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800815e:	8995      	ldrh	r5, [r2, #12]
 8008160:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8008162:	fb13 f301 	smulbb	r3, r3, r1
{
 8008166:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008168:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800816c:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008170:	f7ff fab4 	bl	80076dc <VBS_GetAvBusVoltage_V>
 8008174:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8008178:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800817a:	480e      	ldr	r0, [pc, #56]	; (80081b4 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 800817c:	490e      	ldr	r1, [pc, #56]	; (80081b8 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 800817e:	bfb8      	it	lt
 8008180:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008184:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8008188:	bfb8      	it	lt
 800818a:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800818c:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 800818e:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008190:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8008194:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8008198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800819c:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800819e:	fb81 2103 	smull	r2, r1, r1, r3
 80081a2:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80081a4:	4630      	mov	r0, r6
 80081a6:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 80081aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80081ae:	f7ff bec3 	b.w	8007f38 <MPM_CalcElMotorPower>
 80081b2:	bf00      	nop
 80081b4:	1b4e81b5 	.word	0x1b4e81b5
 80081b8:	66666667 	.word	0x66666667

080081bc <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 80081bc:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80081be:	4b18      	ldr	r3, [pc, #96]	; (8008220 <startTimers+0x64>)
 80081c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081c2:	07d2      	lsls	r2, r2, #31
 80081c4:	b082      	sub	sp, #8
 80081c6:	d415      	bmi.n	80081f4 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80081c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80081d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80081d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80081d6:	f002 0201 	and.w	r2, r2, #1
 80081da:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80081dc:	9a01      	ldr	r2, [sp, #4]
 80081de:	694a      	ldr	r2, [r1, #20]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80081e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081e8:	f022 0201 	bic.w	r2, r2, #1
 80081ec:	659a      	str	r2, [r3, #88]	; 0x58
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
#endif
}
 80081ee:	b002      	add	sp, #8
 80081f0:	bc30      	pop	{r4, r5}
 80081f2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80081f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80081f8:	4c0a      	ldr	r4, [pc, #40]	; (8008224 <startTimers+0x68>)
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	6859      	ldr	r1, [r3, #4]
 80081fe:	4d0a      	ldr	r5, [pc, #40]	; (8008228 <startTimers+0x6c>)
 8008200:	4021      	ands	r1, r4
 8008202:	f041 0120 	orr.w	r1, r1, #32
 8008206:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008208:	6958      	ldr	r0, [r3, #20]
 800820a:	f040 0001 	orr.w	r0, r0, #1
 800820e:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008210:	6859      	ldr	r1, [r3, #4]
 8008212:	402a      	ands	r2, r5
 8008214:	4021      	ands	r1, r4
 8008216:	430a      	orrs	r2, r1
 8008218:	605a      	str	r2, [r3, #4]
}
 800821a:	b002      	add	sp, #8
 800821c:	bc30      	pop	{r4, r5}
 800821e:	4770      	bx	lr
 8008220:	40021000 	.word	0x40021000
 8008224:	fdffff8f 	.word	0xfdffff8f
 8008228:	02000070 	.word	0x02000070

0800822c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 800822c:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800822e:	1c56      	adds	r6, r2, #1
 8008230:	0876      	lsrs	r6, r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008232:	f06f 0702 	mvn.w	r7, #2
 8008236:	0176      	lsls	r6, r6, #5
 8008238:	6107      	str	r7, [r0, #16]

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800823a:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 800823c:	781c      	ldrb	r4, [r3, #0]
 800823e:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8008240:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8008244:	d80b      	bhi.n	800825e <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8008246:	6904      	ldr	r4, [r0, #16]
 8008248:	07a4      	lsls	r4, r4, #30
 800824a:	d5f7      	bpl.n	800823c <waitForPolarizationEnd+0x10>
      hCalibrationPeriodCounter++;
 800824c:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800824e:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008250:	6107      	str	r7, [r0, #16]
 8008252:	d8f3      	bhi.n	800823c <waitForPolarizationEnd+0x10>
      {
        if (*cnt < NB_CONVERSIONS)
 8008254:	781c      	ldrb	r4, [r3, #0]
 8008256:	2c0f      	cmp	r4, #15
 8008258:	d8f0      	bhi.n	800823c <waitForPolarizationEnd+0x10>
        {
          *SWerror = 1u;
 800825a:	2301      	movs	r3, #1
 800825c:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 800825e:	bcf0      	pop	{r4, r5, r6, r7}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop

08008264 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008264:	6883      	ldr	r3, [r0, #8]
 8008266:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800826a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800826e:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008270:	6883      	ldr	r3, [r0, #8]
 8008272:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8008274:	b082      	sub	sp, #8
 8008276:	d418      	bmi.n	80082aa <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8008278:	4b24      	ldr	r3, [pc, #144]	; (800830c <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 800827a:	6882      	ldr	r2, [r0, #8]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4924      	ldr	r1, [pc, #144]	; (8008310 <R3_2_ADCxInit+0xac>)
 8008280:	099b      	lsrs	r3, r3, #6
 8008282:	fba1 1303 	umull	r1, r3, r1, r3
 8008286:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800828a:	099b      	lsrs	r3, r3, #6
 800828c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008296:	6082      	str	r2, [r0, #8]
 8008298:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	b12b      	cbz	r3, 80082aa <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1f9      	bne.n	800829e <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 80082aa:	6883      	ldr	r3, [r0, #8]
 80082ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80082b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80082b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80082ba:	6883      	ldr	r3, [r0, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dbfc      	blt.n	80082ba <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80082c0:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 80082c2:	07da      	lsls	r2, r3, #31
 80082c4:	d408      	bmi.n	80082d8 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 80082c6:	4a13      	ldr	r2, [pc, #76]	; (8008314 <R3_2_ADCxInit+0xb0>)
 80082c8:	6883      	ldr	r3, [r0, #8]
 80082ca:	4013      	ands	r3, r2
 80082cc:	f043 0301 	orr.w	r3, r3, #1
 80082d0:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80082d2:	6803      	ldr	r3, [r0, #0]
 80082d4:	07db      	lsls	r3, r3, #31
 80082d6:	d5f7      	bpl.n	80082c8 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 80082d8:	6882      	ldr	r2, [r0, #8]
 80082da:	490e      	ldr	r1, [pc, #56]	; (8008314 <R3_2_ADCxInit+0xb0>)
 80082dc:	400a      	ands	r2, r1
 80082de:	f042 0208 	orr.w	r2, r2, #8
 80082e2:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80082e4:	6882      	ldr	r2, [r0, #8]
 80082e6:	400a      	ands	r2, r1
 80082e8:	f042 0220 	orr.w	r2, r2, #32
 80082ec:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80082ee:	68c3      	ldr	r3, [r0, #12]
 80082f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082fc:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 80082fe:	6883      	ldr	r3, [r0, #8]
 8008300:	400b      	ands	r3, r1
 8008302:	f043 0304 	orr.w	r3, r3, #4
 8008306:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8008308:	b002      	add	sp, #8
 800830a:	4770      	bx	lr
 800830c:	20000538 	.word	0x20000538
 8008310:	053e2d63 	.word	0x053e2d63
 8008314:	7fffffc0 	.word	0x7fffffc0

08008318 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008318:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800831c:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
{
 8008320:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008322:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8008324:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008328:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800832a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800832c:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800832e:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833a:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 800833c:	2a05      	cmp	r2, #5
 800833e:	f200 8099 	bhi.w	8008474 <R3_2_GetPhaseCurrents+0x15c>
 8008342:	e8df f002 	tbb	[pc, r2]
 8008346:	1e38      	.short	0x1e38
 8008348:	3803031e 	.word	0x3803031e
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800834c:	6f04      	ldr	r4, [r0, #112]	; 0x70

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800834e:	4b4d      	ldr	r3, [pc, #308]	; (8008484 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8008350:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8008352:	429c      	cmp	r4, r3
 8008354:	da55      	bge.n	8008402 <R3_2_GetPhaseCurrents+0xea>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8008356:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8008358:	6f42      	ldr	r2, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800835a:	4f4a      	ldr	r7, [pc, #296]	; (8008484 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800835c:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 800835e:	42ba      	cmp	r2, r7
 8008360:	da55      	bge.n	800840e <R3_2_GetPhaseCurrents+0xf6>
      {
        Iab->b = -INT16_MAX;
 8008362:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008366:	804f      	strh	r7, [r1, #2]
 8008368:	b2ab      	uxth	r3, r5
 800836a:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800836e:	4413      	add	r3, r2
 8008370:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 8008372:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = Iab->b;
 8008376:	f8a0 704e 	strh.w	r7, [r0, #78]	; 0x4e
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800837a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800837e:	bcf0      	pop	{r4, r5, r6, r7}
 8008380:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8008382:	6f04      	ldr	r4, [r0, #112]	; 0x70
      if ( Aux < -INT16_MAX )
 8008384:	4b3f      	ldr	r3, [pc, #252]	; (8008484 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8008386:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8008388:	429c      	cmp	r4, r3
 800838a:	db34      	blt.n	80083f6 <R3_2_GetPhaseCurrents+0xde>
      else  if ( Aux > INT16_MAX )
 800838c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008390:	db68      	blt.n	8008464 <R3_2_GetPhaseCurrents+0x14c>
        Iab->a = INT16_MAX;
 8008392:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008396:	4613      	mov	r3, r2
 8008398:	800a      	strh	r2, [r1, #0]
 800839a:	4614      	mov	r4, r2
 800839c:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800839e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80083a0:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 80083a2:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 80083a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80083a8:	db44      	blt.n	8008434 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 80083aa:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80083ae:	4622      	mov	r2, r4
 80083b0:	804c      	strh	r4, [r1, #2]
 80083b2:	4627      	mov	r7, r4
 80083b4:	e7db      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80083b6:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( Aux < -INT16_MAX )
 80083b8:	4b32      	ldr	r3, [pc, #200]	; (8008484 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 80083ba:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80083bc:	429c      	cmp	r4, r3
 80083be:	db14      	blt.n	80083ea <R3_2_GetPhaseCurrents+0xd2>
      else  if ( Aux > INT16_MAX )
 80083c0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80083c4:	db43      	blt.n	800844e <R3_2_GetPhaseCurrents+0x136>
        Iab->b = INT16_MAX;
 80083c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80083ca:	461a      	mov	r2, r3
 80083cc:	804b      	strh	r3, [r1, #2]
 80083ce:	461c      	mov	r4, r3
 80083d0:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80083d2:	6f85      	ldr	r5, [r0, #120]	; 0x78
 80083d4:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 80083d6:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 80083d8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80083dc:	db23      	blt.n	8008426 <R3_2_GetPhaseCurrents+0x10e>
        Iab->a = INT16_MAX;
 80083de:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80083e2:	4623      	mov	r3, r4
 80083e4:	800c      	strh	r4, [r1, #0]
 80083e6:	4625      	mov	r5, r4
 80083e8:	e7c1      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 80083ea:	461c      	mov	r4, r3
 80083ec:	804b      	strh	r3, [r1, #2]
 80083ee:	461f      	mov	r7, r3
 80083f0:	f248 0201 	movw	r2, #32769	; 0x8001
 80083f4:	e7ed      	b.n	80083d2 <R3_2_GetPhaseCurrents+0xba>
        Iab->a = -INT16_MAX;
 80083f6:	461c      	mov	r4, r3
 80083f8:	800b      	strh	r3, [r1, #0]
 80083fa:	461d      	mov	r5, r3
 80083fc:	f248 0301 	movw	r3, #32769	; 0x8001
 8008400:	e7cd      	b.n	800839e <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 8008402:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008406:	db1c      	blt.n	8008442 <R3_2_GetPhaseCurrents+0x12a>
        Iab->a = INT16_MAX;
 8008408:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800840c:	e7a3      	b.n	8008356 <R3_2_GetPhaseCurrents+0x3e>
      else  if ( Aux > INT16_MAX )
 800840e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008412:	db20      	blt.n	8008456 <R3_2_GetPhaseCurrents+0x13e>
        Iab->b = INT16_MAX;
 8008414:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008418:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800841c:	804b      	strh	r3, [r1, #2]
 800841e:	461a      	mov	r2, r3
 8008420:	461f      	mov	r7, r3
 8008422:	b2ab      	uxth	r3, r5
 8008424:	e7a3      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8008426:	4d17      	ldr	r5, [pc, #92]	; (8008484 <R3_2_GetPhaseCurrents+0x16c>)
 8008428:	42ac      	cmp	r4, r5
 800842a:	da1f      	bge.n	800846c <R3_2_GetPhaseCurrents+0x154>
        Iab->a = -INT16_MAX;
 800842c:	800d      	strh	r5, [r1, #0]
 800842e:	f248 0301 	movw	r3, #32769	; 0x8001
 8008432:	e79c      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8008434:	4f13      	ldr	r7, [pc, #76]	; (8008484 <R3_2_GetPhaseCurrents+0x16c>)
 8008436:	42ba      	cmp	r2, r7
 8008438:	da05      	bge.n	8008446 <R3_2_GetPhaseCurrents+0x12e>
        Iab->b = -INT16_MAX;
 800843a:	804f      	strh	r7, [r1, #2]
 800843c:	f248 0201 	movw	r2, #32769	; 0x8001
 8008440:	e795      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8008442:	800c      	strh	r4, [r1, #0]
 8008444:	e788      	b.n	8008358 <R3_2_GetPhaseCurrents+0x40>
        Iab->b = ( int16_t )Aux;
 8008446:	b217      	sxth	r7, r2
 8008448:	804f      	strh	r7, [r1, #2]
 800844a:	b292      	uxth	r2, r2
 800844c:	e78f      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 800844e:	b227      	sxth	r7, r4
 8008450:	804f      	strh	r7, [r1, #2]
 8008452:	b2a2      	uxth	r2, r4
 8008454:	e7bd      	b.n	80083d2 <R3_2_GetPhaseCurrents+0xba>
        Iab->b = ( int16_t )Aux;
 8008456:	f9b1 5000 	ldrsh.w	r5, [r1]
 800845a:	b217      	sxth	r7, r2
 800845c:	b2ab      	uxth	r3, r5
 800845e:	804f      	strh	r7, [r1, #2]
 8008460:	b292      	uxth	r2, r2
 8008462:	e784      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8008464:	b225      	sxth	r5, r4
 8008466:	800d      	strh	r5, [r1, #0]
 8008468:	b2a3      	uxth	r3, r4
 800846a:	e798      	b.n	800839e <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 800846c:	b225      	sxth	r5, r4
 800846e:	800d      	strh	r5, [r1, #0]
 8008470:	b2a3      	uxth	r3, r4
 8008472:	e77c      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
 8008474:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008478:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800847c:	880b      	ldrh	r3, [r1, #0]
 800847e:	884a      	ldrh	r2, [r1, #2]
 8008480:	e775      	b.n	800836e <R3_2_GetPhaseCurrents+0x56>
 8008482:	bf00      	nop
 8008484:	ffff8001 	.word	0xffff8001

08008488 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8008488:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800848a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800848e:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8008492:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008496:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800849a:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800849c:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 800849e:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80084a0:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 80084a2:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 80084a4:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR2, CompareValue);
 80084a6:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 80084a8:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80084aa:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80084ae:	4904      	ldr	r1, [pc, #16]	; (80084c0 <R3_2_SetADCSampPointPolarization+0x38>)
 80084b0:	685b      	ldr	r3, [r3, #4]
}
 80084b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80084b6:	420b      	tst	r3, r1
}
 80084b8:	bf14      	ite	ne
 80084ba:	2001      	movne	r0, #1
 80084bc:	2000      	moveq	r0, #0
 80084be:	4770      	bx	lr
 80084c0:	02000070 	.word	0x02000070

080084c4 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80084c4:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80084c6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80084ca:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 80084ce:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80084d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084d4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80084d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80084d8:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80084da:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80084dc:	6853      	ldr	r3, [r2, #4]
 80084de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80084e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e6:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80084e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80084ec:	2b0f      	cmp	r3, #15
 80084ee:	d80b      	bhi.n	8008508 <R3_2_HFCurrentsPolarizationAB+0x44>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 80084f0:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 80084f4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseAOffset += ADCDataReg1;
 80084f8:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 80084fa:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80084fc:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 80084fe:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8008508:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800850a:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 800850c:	600b      	str	r3, [r1, #0]
}
 800850e:	4770      	bx	lr

08008510 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008510:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8008514:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008516:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800851a:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800851c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008522:	681c      	ldr	r4, [r3, #0]
 8008524:	6853      	ldr	r3, [r2, #4]
 8008526:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800852a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852e:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8008530:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008534:	2b0f      	cmp	r3, #15
 8008536:	d808      	bhi.n	800854a <R3_2_HFCurrentsPolarizationC+0x3a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8008538:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800853c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800853e:	3301      	adds	r3, #1
 8008540:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8008542:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8008544:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8008548:	6782      	str	r2, [r0, #120]	; 0x78
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800854a:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800854c:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8008550:	600b      	str	r3, [r1, #0]
}
 8008552:	4770      	bx	lr

08008554 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008554:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8008558:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800855a:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800855c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008560:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008562:	f06f 0001 	mvn.w	r0, #1
 8008566:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008568:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800856a:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800856c:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800856e:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8008570:	07db      	lsls	r3, r3, #31
 8008572:	d5fc      	bpl.n	800856e <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008574:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800857a:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800857c:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008580:	2b02      	cmp	r3, #2
 8008582:	d000      	beq.n	8008586 <R3_2_TurnOnLowSides+0x32>
 8008584:	4770      	bx	lr
{
 8008586:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008588:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800858c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800858e:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008592:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008596:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800859a:	61ae      	str	r6, [r5, #24]
 800859c:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800859e:	bc70      	pop	{r4, r5, r6}
 80085a0:	619a      	str	r2, [r3, #24]
 80085a2:	4770      	bx	lr

080085a4 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80085a4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80085a8:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80085ac:	688b      	ldr	r3, [r1, #8]
{
 80085ae:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 80085b0:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 80085b2:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 80085b4:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 80085b8:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80085bc:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80085c0:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 80085c4:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80085c6:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80085c8:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80085ca:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80085ce:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80085d0:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80085d2:	07d2      	lsls	r2, r2, #31
 80085d4:	d5fc      	bpl.n	80085d0 <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80085d6:	f06f 0201 	mvn.w	r2, #1
 80085da:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80085dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085e2:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80085e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085ea:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80085ec:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 80085f0:	2a02      	cmp	r2, #2
 80085f2:	d008      	beq.n	8008606 <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80085f4:	f06f 0201 	mvn.w	r2, #1
 80085f8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8008600:	bc30      	pop	{r4, r5}
 8008602:	60da      	str	r2, [r3, #12]
 8008604:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008606:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008608:	6a0c      	ldr	r4, [r1, #32]
 800860a:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800860e:	f240 5255 	movw	r2, #1365	; 0x555
 8008612:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008614:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008618:	d007      	beq.n	800862a <R3_2_SwitchOnPWM+0x86>
 800861a:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800861c:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008620:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008624:	6184      	str	r4, [r0, #24]
 8008626:	6191      	str	r1, [r2, #24]
}
 8008628:	e7e4      	b.n	80085f4 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800862a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800862c:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008630:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008634:	6284      	str	r4, [r0, #40]	; 0x28
 8008636:	6291      	str	r1, [r2, #40]	; 0x28
}
 8008638:	e7dc      	b.n	80085f4 <R3_2_SwitchOnPWM+0x50>
 800863a:	bf00      	nop

0800863c <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800863c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8008640:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008642:	68d3      	ldr	r3, [r2, #12]
 8008644:	f023 0301 	bic.w	r3, r3, #1
{
 8008648:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 800864a:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
 800864e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008650:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008652:	2500      	movs	r5, #0
 8008654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008658:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
 800865c:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 800865e:	b91c      	cbnz	r4, 8008668 <R3_2_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008660:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008664:	2b02      	cmp	r3, #2
 8008666:	d00d      	beq.n	8008684 <R3_2_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008668:	f06f 0301 	mvn.w	r3, #1
 800866c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800866e:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8008670:	07db      	lsls	r3, r3, #31
 8008672:	d5fc      	bpl.n	800866e <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008674:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8008678:	2300      	movs	r3, #0
 800867a:	6111      	str	r1, [r2, #16]
}
 800867c:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 800867e:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 8008682:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008684:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008688:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800868c:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800868e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008690:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008694:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008698:	62a5      	str	r5, [r4, #40]	; 0x28
 800869a:	6299      	str	r1, [r3, #40]	; 0x28
}
 800869c:	e7e4      	b.n	8008668 <R3_2_SwitchOffPWM+0x2c>
 800869e:	bf00      	nop

080086a0 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 80086a0:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80086a2:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80086a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80086a8:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80086aa:	686a      	ldr	r2, [r5, #4]
 80086ac:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80086b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086b4:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80086b6:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 80086ba:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80086bc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80086c0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80086c2:	6800      	ldr	r0, [r0, #0]
 80086c4:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 80086c6:	4293      	cmp	r3, r2
 80086c8:	db05      	blt.n	80086d6 <R3_2_RLGetPhaseCurrents+0x36>
  {
    if ( wAux < INT16_MAX )
 80086ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80086ce:	4293      	cmp	r3, r2
 80086d0:	dc0a      	bgt.n	80086e8 <R3_2_RLGetPhaseCurrents+0x48>
 80086d2:	b21b      	sxth	r3, r3
 80086d4:	e000      	b.n	80086d8 <R3_2_RLGetPhaseCurrents+0x38>
 80086d6:	4b07      	ldr	r3, [pc, #28]	; (80086f4 <R3_2_RLGetPhaseCurrents+0x54>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80086d8:	2200      	movs	r2, #0
 80086da:	f363 020f 	bfi	r2, r3, #0, #16
 80086de:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 80086e2:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 80086e4:	600a      	str	r2, [r1, #0]
}
 80086e6:	4770      	bx	lr
 80086e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80086ec:	e7f4      	b.n	80086d8 <R3_2_RLGetPhaseCurrents+0x38>
 80086ee:	bf00      	nop
 80086f0:	ffff8002 	.word	0xffff8002
 80086f4:	ffff8001 	.word	0xffff8001

080086f8 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80086f8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked=true;
 80086fc:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80086fe:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 8008700:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008704:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008706:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800870a:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800870c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800870e:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8008710:	07db      	lsls	r3, r3, #31
 8008712:	d5fc      	bpl.n	800870e <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008714:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800871a:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800871c:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008720:	2b02      	cmp	r3, #2
 8008722:	d000      	beq.n	8008726 <R3_2_RLTurnOnLowSides+0x2e>
 8008724:	4770      	bx	lr
{
 8008726:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008728:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800872c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800872e:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008732:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008736:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 800873a:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800873c:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 800873e:	bc70      	pop	{r4, r5, r6}
 8008740:	629a      	str	r2, [r3, #40]	; 0x28
 8008742:	4770      	bx	lr

08008744 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008744:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 8008748:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800874a:	688b      	ldr	r3, [r1, #8]
{
 800874c:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800874e:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8008752:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008756:	f06f 0201 	mvn.w	r2, #1
 800875a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800875c:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800875e:	07d6      	lsls	r6, r2, #31
 8008760:	d5fc      	bpl.n	800875c <R3_2_RLSwitchOnPWM+0x18>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8008762:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008766:	f06f 0701 	mvn.w	r7, #1
 800876a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800876c:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800876e:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008770:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008772:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008774:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8008776:	07d2      	lsls	r2, r2, #31
 8008778:	d5fc      	bpl.n	8008774 <R3_2_RLSwitchOnPWM+0x30>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008788:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800878a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800878c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008790:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008792:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8008796:	2a02      	cmp	r2, #2
 8008798:	d00f      	beq.n	80087ba <R3_2_RLSwitchOnPWM+0x76>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800879a:	2303      	movs	r3, #3
 800879c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  MODIFY_REG(ADCx->CR,
 80087a0:	68aa      	ldr	r2, [r5, #8]
 80087a2:	4913      	ldr	r1, [pc, #76]	; (80087f0 <R3_2_RLSwitchOnPWM+0xac>)
 80087a4:	400a      	ands	r2, r1
 80087a6:	f042 0208 	orr.w	r2, r2, #8
 80087aa:	60aa      	str	r2, [r5, #8]
 80087ac:	68a3      	ldr	r3, [r4, #8]
 80087ae:	400b      	ands	r3, r1
 80087b0:	f043 0308 	orr.w	r3, r3, #8
 80087b4:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 80087b6:	bcf0      	pop	{r4, r5, r6, r7}
 80087b8:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80087ba:	6a1a      	ldr	r2, [r3, #32]
 80087bc:	f240 5355 	movw	r3, #1365	; 0x555
 80087c0:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80087c2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80087c6:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80087ca:	d008      	beq.n	80087de <R3_2_RLSwitchOnPWM+0x9a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80087cc:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80087ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80087d0:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80087d4:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80087d8:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80087da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80087dc:	e7dd      	b.n	800879a <R3_2_RLSwitchOnPWM+0x56>
  WRITE_REG(GPIOx->BRR, PinMask);
 80087de:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80087e0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80087e2:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80087e6:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80087ea:	62b7      	str	r7, [r6, #40]	; 0x28
 80087ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80087ee:	e7d4      	b.n	800879a <R3_2_RLSwitchOnPWM+0x56>
 80087f0:	7fffffc0 	.word	0x7fffffc0

080087f4 <R3_2_SetAOReferenceVoltage>:
{
 80087f4:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80087f6:	0c84      	lsrs	r4, r0, #18
 80087f8:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 80087fc:	f101 0508 	add.w	r5, r1, #8
 8008800:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008802:	5963      	ldr	r3, [r4, r5]
 8008804:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800880c:	431a      	orrs	r2, r3
 800880e:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 8008810:	684a      	ldr	r2, [r1, #4]
 8008812:	f000 0303 	and.w	r3, r0, #3
 8008816:	4313      	orrs	r3, r2
 8008818:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800881a:	680a      	ldr	r2, [r1, #0]
 800881c:	2301      	movs	r3, #1
 800881e:	f000 0010 	and.w	r0, r0, #16
 8008822:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008826:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800882a:	4b15      	ldr	r3, [pc, #84]	; (8008880 <R3_2_SetAOReferenceVoltage+0x8c>)
 800882c:	d014      	beq.n	8008858 <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4c14      	ldr	r4, [pc, #80]	; (8008884 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 8008832:	680a      	ldr	r2, [r1, #0]
 8008834:	fba4 4303 	umull	r4, r3, r4, r3
 8008838:	0cdb      	lsrs	r3, r3, #19
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	4310      	orrs	r0, r2
 800883e:	6008      	str	r0, [r1, #0]
 8008840:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8008842:	9b00      	ldr	r3, [sp, #0]
 8008844:	b12b      	cbz	r3, 8008852 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8008846:	9b00      	ldr	r3, [sp, #0]
 8008848:	3b01      	subs	r3, #1
 800884a:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800884c:	9b00      	ldr	r3, [sp, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1f9      	bne.n	8008846 <R3_2_SetAOReferenceVoltage+0x52>
}
 8008852:	b002      	add	sp, #8
 8008854:	bc30      	pop	{r4, r5}
 8008856:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008858:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <R3_2_SetAOReferenceVoltage+0x90>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	fba2 2303 	umull	r2, r3, r2, r3
 8008860:	0cdb      	lsrs	r3, r3, #19
 8008862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008866:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0f1      	beq.n	8008852 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800886e:	9b01      	ldr	r3, [sp, #4]
 8008870:	3b01      	subs	r3, #1
 8008872:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f9      	bne.n	800886e <R3_2_SetAOReferenceVoltage+0x7a>
}
 800887a:	b002      	add	sp, #8
 800887c:	bc30      	pop	{r4, r5}
 800887e:	4770      	bx	lr
 8008880:	20000538 	.word	0x20000538
 8008884:	431bde83 	.word	0x431bde83

08008888 <R3_2_Init>:
{
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	4607      	mov	r7, r0
 800888e:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    if ( TIMx == TIM1 )
 8008894:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8008b24 <R3_2_Init+0x29c>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8008898:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 800889a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800889c:	686a      	ldr	r2, [r5, #4]
 800889e:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80088a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80088a2:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80088a4:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80088a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80088a8:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80088ac:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80088ae:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80088b2:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80088b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80088b8:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80088ba:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80088be:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 80088c2:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80088c4:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80088c6:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80088c8:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80088ca:	f022 0220 	bic.w	r2, r2, #32
 80088ce:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80088d0:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80088d2:	6872      	ldr	r2, [r6, #4]
 80088d4:	f022 0204 	bic.w	r2, r2, #4
 80088d8:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80088da:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80088dc:	6872      	ldr	r2, [r6, #4]
 80088de:	f022 0220 	bic.w	r2, r2, #32
 80088e2:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80088e4:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80088e6:	498e      	ldr	r1, [pc, #568]	; (8008b20 <R3_2_Init+0x298>)
 80088e8:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 80088ea:	4574      	cmp	r4, lr
 80088ec:	bf0c      	ite	eq
 80088ee:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 80088f2:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 80088f6:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 80088f8:	f1bc 0f00 	cmp.w	ip, #0
 80088fc:	d014      	beq.n	8008928 <R3_2_Init+0xa0>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 80088fe:	f8dc 2000 	ldr.w	r2, [ip]
 8008902:	b11a      	cbz	r2, 800890c <R3_2_Init+0x84>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008904:	6811      	ldr	r1, [r2, #0]
 8008906:	f041 0101 	orr.w	r1, r1, #1
 800890a:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800890c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008910:	b11a      	cbz	r2, 800891a <R3_2_Init+0x92>
 8008912:	6811      	ldr	r1, [r2, #0]
 8008914:	f041 0101 	orr.w	r1, r1, #1
 8008918:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800891a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800891e:	b11a      	cbz	r2, 8008928 <R3_2_Init+0xa0>
 8008920:	6811      	ldr	r1, [r2, #0]
 8008922:	f041 0101 	orr.w	r1, r1, #1
 8008926:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8008928:	f1bb 0f00 	cmp.w	fp, #0
 800892c:	d017      	beq.n	800895e <R3_2_Init+0xd6>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 800892e:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 8008932:	2a01      	cmp	r2, #1
 8008934:	d007      	beq.n	8008946 <R3_2_Init+0xbe>
 8008936:	9a00      	ldr	r2, [sp, #0]
 8008938:	b12a      	cbz	r2, 8008946 <R3_2_Init+0xbe>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800893a:	4611      	mov	r1, r2
 800893c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800893e:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8008942:	f7ff ff57 	bl	80087f4 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008946:	f8db 3000 	ldr.w	r3, [fp]
 800894a:	f043 0301 	orr.w	r3, r3, #1
 800894e:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008952:	f8db 3000 	ldr.w	r3, [fp]
 8008956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800895a:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 800895e:	f1ba 0f00 	cmp.w	sl, #0
 8008962:	d019      	beq.n	8008998 <R3_2_Init+0x110>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8008964:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008968:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 800896c:	2a01      	cmp	r2, #1
 800896e:	d007      	beq.n	8008980 <R3_2_Init+0xf8>
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	b12a      	cbz	r2, 8008980 <R3_2_Init+0xf8>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8008974:	4611      	mov	r1, r2
 8008976:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008978:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 800897c:	f7ff ff3a 	bl	80087f4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008980:	f8da 3000 	ldr.w	r3, [sl]
 8008984:	f043 0301 	orr.w	r3, r3, #1
 8008988:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800898c:	f8da 3000 	ldr.w	r3, [sl]
 8008990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008994:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 8008998:	f1b9 0f00 	cmp.w	r9, #0
 800899c:	d019      	beq.n	80089d2 <R3_2_Init+0x14a>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 800899e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a2:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80089a6:	2a01      	cmp	r2, #1
 80089a8:	d007      	beq.n	80089ba <R3_2_Init+0x132>
 80089aa:	9a02      	ldr	r2, [sp, #8]
 80089ac:	b12a      	cbz	r2, 80089ba <R3_2_Init+0x132>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80089ae:	4611      	mov	r1, r2
 80089b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80089b2:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80089b6:	f7ff ff1d 	bl	80087f4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80089ba:	f8d9 3000 	ldr.w	r3, [r9]
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80089c6:	f8d9 3000 	ldr.w	r3, [r9]
 80089ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ce:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	d019      	beq.n	8008a0c <R3_2_Init+0x184>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 80089d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089dc:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 80089e0:	2a01      	cmp	r2, #1
 80089e2:	d007      	beq.n	80089f4 <R3_2_Init+0x16c>
 80089e4:	9a03      	ldr	r2, [sp, #12]
 80089e6:	b12a      	cbz	r2, 80089f4 <R3_2_Init+0x16c>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 80089e8:	4611      	mov	r1, r2
 80089ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80089ec:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 80089f0:	f7ff ff00 	bl	80087f4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80089f4:	f8d8 3000 	ldr.w	r3, [r8]
 80089f8:	f043 0301 	orr.w	r3, r3, #1
 80089fc:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008a00:	f8d8 3000 	ldr.w	r3, [r8]
 8008a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a08:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a0c:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 8008a0e:	07d8      	lsls	r0, r3, #31
 8008a10:	d56d      	bpl.n	8008aee <R3_2_Init+0x266>
 8008a12:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8008a14:	07d9      	lsls	r1, r3, #31
 8008a16:	d576      	bpl.n	8008b06 <R3_2_Init+0x27e>
  volatile uint32_t Brk2Timeout = 1000;
 8008a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a1c:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008a1e:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8008a20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a34:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008a36:	69a3      	ldr	r3, [r4, #24]
 8008a38:	f043 0308 	orr.w	r3, r3, #8
 8008a3c:	61a3      	str	r3, [r4, #24]
 8008a3e:	69a3      	ldr	r3, [r4, #24]
 8008a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a44:	61a3      	str	r3, [r4, #24]
 8008a46:	69e3      	ldr	r3, [r4, #28]
 8008a48:	f043 0308 	orr.w	r3, r3, #8
 8008a4c:	61e3      	str	r3, [r4, #28]
 8008a4e:	69e3      	ldr	r3, [r4, #28]
 8008a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a54:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008a56:	6963      	ldr	r3, [r4, #20]
 8008a58:	f043 0301 	orr.w	r3, r3, #1
 8008a5c:	6163      	str	r3, [r4, #20]
 8008a5e:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d029      	beq.n	8008aba <R3_2_Init+0x232>
    if ( pHandle->_Super.Motor == M1 )
 8008a66:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008a6a:	b92b      	cbnz	r3, 8008a78 <R3_2_Init+0x1f0>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8008a6c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d030      	beq.n	8008ad6 <R3_2_Init+0x24e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d04a      	beq.n	8008b0e <R3_2_Init+0x286>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008a78:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008a7c:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8008a7e:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8008a82:	b16b      	cbz	r3, 8008aa0 <R3_2_Init+0x218>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	05da      	lsls	r2, r3, #23
 8008a88:	d50a      	bpl.n	8008aa0 <R3_2_Init+0x218>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8008a8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8008a8e:	9b05      	ldr	r3, [sp, #20]
 8008a90:	b133      	cbz	r3, 8008aa0 <R3_2_Init+0x218>
 8008a92:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	05db      	lsls	r3, r3, #23
 8008a9e:	d4f6      	bmi.n	8008a8e <R3_2_Init+0x206>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008aa0:	68e3      	ldr	r3, [r4, #12]
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa6:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8008aa8:	6a23      	ldr	r3, [r4, #32]
 8008aaa:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008aae:	f043 0305 	orr.w	r3, r3, #5
 8008ab2:	6223      	str	r3, [r4, #32]
}
 8008ab4:	b007      	add	sp, #28
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8008aba:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d109      	bne.n	8008ad6 <R3_2_Init+0x24e>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008ac2:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 8008ac6:	2903      	cmp	r1, #3
 8008ac8:	d105      	bne.n	8008ad6 <R3_2_Init+0x24e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008aca:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008acc:	6963      	ldr	r3, [r4, #20]
 8008ace:	f043 0301 	orr.w	r3, r3, #1
 8008ad2:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008ad4:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8008ad6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8008ada:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008adc:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008ade:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008ae2:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8008ae4:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1cb      	bne.n	8008a84 <R3_2_Init+0x1fc>
 8008aec:	e7d8      	b.n	8008aa0 <R3_2_Init+0x218>
      R3_2_ADCxInit (ADCx_1);
 8008aee:	4628      	mov	r0, r5
 8008af0:	f7ff fbb8 	bl	8008264 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008af4:	2340      	movs	r3, #64	; 0x40
 8008af6:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008af8:	686b      	ldr	r3, [r5, #4]
 8008afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afe:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b00:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8008b02:	07d9      	lsls	r1, r3, #31
 8008b04:	d488      	bmi.n	8008a18 <R3_2_Init+0x190>
      R3_2_ADCxInit (ADCx_2);
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7ff fbac 	bl	8008264 <R3_2_ADCxInit>
 8008b0c:	e784      	b.n	8008a18 <R3_2_Init+0x190>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008b0e:	2101      	movs	r1, #1
 8008b10:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008b12:	6961      	ldr	r1, [r4, #20]
 8008b14:	f041 0101 	orr.w	r1, r1, #1
 8008b18:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008b1a:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008b1c:	e7ac      	b.n	8008a78 <R3_2_Init+0x1f0>
 8008b1e:	bf00      	nop
 8008b20:	e0042000 	.word	0xe0042000
 8008b24:	40012c00 	.word	0x40012c00

08008b28 <R3_2_CurrentReadingPolarization>:
{
 8008b28:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b2a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008b2e:	6846      	ldr	r6, [r0, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b30:	689d      	ldr	r5, [r3, #8]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008b32:	6981      	ldr	r1, [r0, #24]
{
 8008b34:	b085      	sub	sp, #20
  pHandle->PhaseAOffset = 0u;
 8008b36:	2200      	movs	r2, #0
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8008b38:	9602      	str	r6, [sp, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008b3a:	e9d3 7600 	ldrd	r7, r6, [r3]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8008b3e:	9103      	str	r1, [sp, #12]
  pHandle->PolarizationCounter = 0u;
 8008b40:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 8008b44:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8008b46:	6702      	str	r2, [r0, #112]	; 0x70
 8008b48:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8008b4c:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8008b50:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
 8008b54:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008b56:	4a3f      	ldr	r2, [pc, #252]	; (8008c54 <R3_2_CurrentReadingPolarization+0x12c>)
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008b58:	4b3f      	ldr	r3, [pc, #252]	; (8008c58 <R3_2_CurrentReadingPolarization+0x130>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8008b5a:	6042      	str	r2, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8008b5c:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008b5e:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8008b60:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008b62:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->PolarizationSector=SECTOR_5;
 8008b66:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 8008b6a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
{
 8008b6e:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008b70:	f7ff fd18 	bl	80085a4 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8008b74:	4a39      	ldr	r2, [pc, #228]	; (8008c5c <R3_2_CurrentReadingPolarization+0x134>)
 8008b76:	686b      	ldr	r3, [r5, #4]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	2b70      	cmp	r3, #112	; 0x70
 8008b7c:	d1fb      	bne.n	8008b76 <R3_2_CurrentReadingPolarization+0x4e>
  MODIFY_REG(ADCx->CR,
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4937      	ldr	r1, [pc, #220]	; (8008c60 <R3_2_CurrentReadingPolarization+0x138>)
  waitForPolarizationEnd( TIMx,
 8008b82:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008b86:	400a      	ands	r2, r1
 8008b88:	f042 0208 	orr.w	r2, r2, #8
 8008b8c:	60ba      	str	r2, [r7, #8]
 8008b8e:	68b3      	ldr	r3, [r6, #8]
 8008b90:	400b      	ands	r3, r1
 8008b92:	f043 0308 	orr.w	r3, r3, #8
 8008b96:	60b3      	str	r3, [r6, #8]
 8008b98:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8008b9c:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8008ba0:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	e9cd 3100 	strd	r3, r1, [sp]
 8008baa:	f7ff fb3f 	bl	800822c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f7ff fd44 	bl	800863c <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8008bb4:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008bb6:	4a2b      	ldr	r2, [pc, #172]	; (8008c64 <R3_2_CurrentReadingPolarization+0x13c>)
 8008bb8:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008bba:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8008bbc:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 8008bc0:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 8008bc4:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008bc8:	f7ff fcec 	bl	80085a4 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8008bcc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8008bd0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008bd4:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f7ff fb27 	bl	800822c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff fd2c 	bl	800863c <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008be4:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008be8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008bea:	9f02      	ldr	r7, [sp, #8]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008bec:	9803      	ldr	r0, [sp, #12]
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008bee:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008bf0:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008bf2:	0912      	lsrs	r2, r2, #4
 8008bf4:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008bf8:	091b      	lsrs	r3, r3, #4
 8008bfa:	67a3      	str	r3, [r4, #120]	; 0x78
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008bfc:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8008bfe:	61a0      	str	r0, [r4, #24]
 8008c00:	f023 0308 	bic.w	r3, r3, #8
 8008c04:	61ab      	str	r3, [r5, #24]
 8008c06:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8008c08:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8008c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c10:	61aa      	str	r2, [r5, #24]
 8008c12:	69ea      	ldr	r2, [r5, #28]
 8008c14:	f022 0208 	bic.w	r2, r2, #8
 8008c18:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c1a:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008c1c:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008c1e:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008c20:	69ab      	ldr	r3, [r5, #24]
 8008c22:	f043 0308 	orr.w	r3, r3, #8
 8008c26:	61ab      	str	r3, [r5, #24]
 8008c28:	69ab      	ldr	r3, [r5, #24]
 8008c2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c2e:	61ab      	str	r3, [r5, #24]
 8008c30:	69eb      	ldr	r3, [r5, #28]
 8008c32:	f043 0308 	orr.w	r3, r3, #8
 8008c36:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008c38:	6a2b      	ldr	r3, [r5, #32]
 8008c3a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8008c3e:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8008c42:	2204      	movs	r2, #4
 8008c44:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8008c46:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
  pHandle->_Super.Sector=SECTOR_5;
 8008c4a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
}
 8008c4e:	b005      	add	sp, #20
 8008c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c52:	bf00      	nop
 8008c54:	080084c5 	.word	0x080084c5
 8008c58:	08008489 	.word	0x08008489
 8008c5c:	02000070 	.word	0x02000070
 8008c60:	7fffffc0 	.word	0x7fffffc0
 8008c64:	08008511 	.word	0x08008511

08008c68 <R3_2_SetADCSampPointSectX>:
{
 8008c68:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8008c6a:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 8008c6e:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8008c72:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8008c76:	1aca      	subs	r2, r1, r3
 8008c78:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8008c7c:	b292      	uxth	r2, r2
 8008c7e:	42b2      	cmp	r2, r6
 8008c80:	d914      	bls.n	8008cac <R3_2_SetADCSampPointSectX+0x44>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8008c82:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8008c84:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8008c86:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8008c88:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008c8c:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8008c8e:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8008c90:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8008c92:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c94:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008c96:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008c98:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008c9a:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008c9c:	6852      	ldr	r2, [r2, #4]
 8008c9e:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <R3_2_SetADCSampPointSectX+0x78>)
 8008ca0:	421a      	tst	r2, r3
}
 8008ca2:	bf14      	ite	ne
 8008ca4:	2001      	movne	r0, #1
 8008ca6:	2000      	moveq	r0, #0
 8008ca8:	bc70      	pop	{r4, r5, r6}
 8008caa:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8008cac:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8008cb0:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8008cb2:	b2ad      	uxth	r5, r5
 8008cb4:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8008cb8:	d904      	bls.n	8008cc4 <R3_2_SetADCSampPointSectX+0x5c>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8008cba:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	e7e3      	b.n	8008c8c <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8008cc4:	4433      	add	r3, r6
 8008cc6:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8008cc8:	4299      	cmp	r1, r3
 8008cca:	d8df      	bhi.n	8008c8c <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8008cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008cd6:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8008cd8:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008cdc:	e7d6      	b.n	8008c8c <R3_2_SetADCSampPointSectX+0x24>
 8008cde:	bf00      	nop
 8008ce0:	02000070 	.word	0x02000070

08008ce4 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ce4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008cee:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008cf2:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d033      	beq.n	8008d62 <R3_2_TIMx_UP_IRQHandler+0x7e>
    while (ADCx_1->JSQR != 0x0u)
 8008cfa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1fc      	bne.n	8008cfa <R3_2_TIMx_UP_IRQHandler+0x16>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008d00:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8008d04:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8008d08:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 8008d0a:	b12f      	cbz	r7, 8008d18 <R3_2_TIMx_UP_IRQHandler+0x34>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008d0c:	6838      	ldr	r0, [r7, #0]
 8008d0e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8008d10:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8008d14:	4330      	orrs	r0, r6
 8008d16:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8008d18:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8008d1a:	b13f      	cbz	r7, 8008d2c <R3_2_TIMx_UP_IRQHandler+0x48>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008d1c:	6838      	ldr	r0, [r7, #0]
 8008d1e:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8008d22:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8008d26:	ea43 030e 	orr.w	r3, r3, lr
 8008d2a:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d2c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8008d30:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8008d34:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d36:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d3a:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d3c:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d3e:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008d40:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d44:	686b      	ldr	r3, [r5, #4]
 8008d46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008d52:	2280      	movs	r2, #128	; 0x80
 8008d54:	606b      	str	r3, [r5, #4]
}
 8008d56:	f104 0066 	add.w	r0, r4, #102	; 0x66
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008d5a:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
}
 8008d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d62:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8008d66:	e7e1      	b.n	8008d2c <R3_2_TIMx_UP_IRQHandler+0x48>

08008d68 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8008d68:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008d6c:	b92b      	cbnz	r3, 8008d7a <R3_2_BRK2_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008d6e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008d72:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8008d76:	2a02      	cmp	r2, #2
 8008d78:	d004      	beq.n	8008d84 <R3_2_BRK2_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8008d80:	3066      	adds	r0, #102	; 0x66
 8008d82:	4770      	bx	lr
{
 8008d84:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008d86:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008d8a:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8008d90:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008d92:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008d96:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008d9a:	628c      	str	r4, [r1, #40]	; 0x28
 8008d9c:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8008da4:	bc30      	pop	{r4, r5}
 8008da6:	3066      	adds	r0, #102	; 0x66
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop

08008dac <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008dac:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8008db0:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008db2:	6890      	ldr	r0, [r2, #8]
 8008db4:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8008db6:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dbc:	6442      	str	r2, [r0, #68]	; 0x44
}
 8008dbe:	f103 0066 	add.w	r0, r3, #102	; 0x66
  pHandle->OverVoltageFlag = true;
 8008dc2:	f883 1083 	strb.w	r1, [r3, #131]	; 0x83
  pHandle->BrakeActionLock = true;
 8008dc6:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8008dca:	4770      	bx	lr

08008dcc <R3_2_IsOverCurrentOccurred>:
{
 8008dcc:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8008dce:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 8008dd2:	b160      	cbz	r0, 8008dee <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8008dda:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8008ddc:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8008dde:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8008de2:	b11a      	cbz	r2, 8008dec <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8008de4:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8008de6:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8008de8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8008dec:	4770      	bx	lr
 8008dee:	2140      	movs	r1, #64	; 0x40
 8008df0:	e7f5      	b.n	8008dde <R3_2_IsOverCurrentOccurred+0x12>
 8008df2:	bf00      	nop

08008df4 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8008df4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
{
 8008df8:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	d13d      	bne.n	8008e7a <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008dfe:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8008e02:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e0a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008e0e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008e12:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008e14:	6a1a      	ldr	r2, [r3, #32]
 8008e16:	f042 0201 	orr.w	r2, r2, #1
 8008e1a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008e1c:	6a1a      	ldr	r2, [r3, #32]
 8008e1e:	f022 0204 	bic.w	r2, r2, #4
 8008e22:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008e24:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008e26:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008e2a:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008e2c:	f103 0118 	add.w	r1, r3, #24
 8008e30:	d031      	beq.n	8008e96 <R3_2_RLDetectionModeEnable+0xa2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008e32:	2a02      	cmp	r2, #2
 8008e34:	d10f      	bne.n	8008e56 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008e36:	699a      	ldr	r2, [r3, #24]
 8008e38:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008e3c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e44:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008e46:	6a1a      	ldr	r2, [r3, #32]
 8008e48:	f042 0210 	orr.w	r2, r2, #16
 8008e4c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008e4e:	6a1a      	ldr	r2, [r3, #32]
 8008e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e54:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008e56:	684a      	ldr	r2, [r1, #4]
 8008e58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e5c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008e60:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8008e64:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008e66:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008e68:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e6e:	621a      	str	r2, [r3, #32]
 8008e70:	6a1a      	ldr	r2, [r3, #32]
 8008e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e76:	621a      	str	r2, [r3, #32]
 8008e78:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8008e7c:	490f      	ldr	r1, [pc, #60]	; (8008ebc <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008e7e:	4a10      	ldr	r2, [pc, #64]	; (8008ec0 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008e80:	4c10      	ldr	r4, [pc, #64]	; (8008ec4 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008e82:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8008e84:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008e86:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008e88:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8008e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8008e90:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8008e94:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008e9c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008ea0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ea4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008ea6:	6a1a      	ldr	r2, [r3, #32]
 8008ea8:	f022 0210 	bic.w	r2, r2, #16
 8008eac:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008eae:	6a1a      	ldr	r2, [r3, #32]
 8008eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb4:	621a      	str	r2, [r3, #32]
}
 8008eb6:	e7ce      	b.n	8008e56 <R3_2_RLDetectionModeEnable+0x62>
 8008eb8:	080086a1 	.word	0x080086a1
 8008ebc:	08008745 	.word	0x08008745
 8008ec0:	0800863d 	.word	0x0800863d
 8008ec4:	080086f9 	.word	0x080086f9

08008ec8 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8008ec8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d05a      	beq.n	8008f86 <R3_2_RLDetectionModeDisable+0xbe>
{
 8008ed0:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ed2:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8008ed6:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ede:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008ee2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008ee6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008ee8:	6a1a      	ldr	r2, [r3, #32]
 8008eea:	f042 0201 	orr.w	r2, r2, #1
 8008eee:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008ef0:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008ef4:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008ef6:	f103 0518 	add.w	r5, r3, #24
 8008efa:	d045      	beq.n	8008f88 <R3_2_RLDetectionModeDisable+0xc0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008efc:	2a02      	cmp	r2, #2
 8008efe:	d103      	bne.n	8008f08 <R3_2_RLDetectionModeDisable+0x40>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008f00:	6a1a      	ldr	r2, [r3, #32]
 8008f02:	f022 0204 	bic.w	r2, r2, #4
 8008f06:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8008f08:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 8008f0c:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008f0e:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008f16:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008f1a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008f1e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008f20:	6a1a      	ldr	r2, [r3, #32]
 8008f22:	f042 0210 	orr.w	r2, r2, #16
 8008f26:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008f28:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008f2c:	2a01      	cmp	r2, #1
 8008f2e:	d035      	beq.n	8008f9c <R3_2_RLDetectionModeDisable+0xd4>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008f30:	2a02      	cmp	r2, #2
 8008f32:	d103      	bne.n	8008f3c <R3_2_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008f34:	6a1a      	ldr	r2, [r3, #32]
 8008f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f3a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008f3c:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008f3e:	686a      	ldr	r2, [r5, #4]
 8008f40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f44:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008f48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008f4c:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 8008f4e:	6a1a      	ldr	r2, [r3, #32]
 8008f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f54:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008f56:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008f5a:	2a01      	cmp	r2, #1
 8008f5c:	d019      	beq.n	8008f92 <R3_2_RLDetectionModeDisable+0xca>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008f5e:	2a02      	cmp	r2, #2
 8008f60:	d103      	bne.n	8008f6a <R3_2_RLDetectionModeDisable+0xa2>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008f62:	6a1a      	ldr	r2, [r3, #32]
 8008f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f68:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8008f6a:	4c0f      	ldr	r4, [pc, #60]	; (8008fa8 <R3_2_RLDetectionModeDisable+0xe0>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008f6c:	4a0f      	ldr	r2, [pc, #60]	; (8008fac <R3_2_RLDetectionModeDisable+0xe4>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008f6e:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008f70:	4e0f      	ldr	r6, [pc, #60]	; (8008fb0 <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008f72:	4d10      	ldr	r5, [pc, #64]	; (8008fb4 <R3_2_RLDetectionModeDisable+0xec>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008f74:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8008f76:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008f78:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008f7c:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8008f7e:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8008f82:	bc70      	pop	{r4, r5, r6}
 8008f84:	4770      	bx	lr
 8008f86:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008f88:	6a1a      	ldr	r2, [r3, #32]
 8008f8a:	f042 0204 	orr.w	r2, r2, #4
 8008f8e:	621a      	str	r2, [r3, #32]
}
 8008f90:	e7ba      	b.n	8008f08 <R3_2_RLDetectionModeDisable+0x40>
  SET_BIT(TIMx->CCER, Channels);
 8008f92:	6a1a      	ldr	r2, [r3, #32]
 8008f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	e7e6      	b.n	8008f6a <R3_2_RLDetectionModeDisable+0xa2>
  SET_BIT(TIMx->CCER, Channels);
 8008f9c:	6a1a      	ldr	r2, [r3, #32]
 8008f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fa2:	621a      	str	r2, [r3, #32]
}
 8008fa4:	e7ca      	b.n	8008f3c <R3_2_RLDetectionModeDisable+0x74>
 8008fa6:	bf00      	nop
 8008fa8:	080085a5 	.word	0x080085a5
 8008fac:	0800863d 	.word	0x0800863d
 8008fb0:	08008319 	.word	0x08008319
 8008fb4:	08008555 	.word	0x08008555

08008fb8 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008fb8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008fbc:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008fbe:	69da      	ldr	r2, [r3, #28]
{
 8008fc0:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008fc2:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8008fc6:	f8b0 6062 	ldrh.w	r6, [r0, #98]	; 0x62
 8008fca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008fce:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 8008fd2:	2501      	movs	r5, #1
 8008fd4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008fd8:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008fdc:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8008fde:	f8b0 5064 	ldrh.w	r5, [r0, #100]	; 0x64
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8008fe2:	8741      	strh	r1, [r0, #58]	; 0x3a
 8008fe4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8008fe8:	1ba4      	subs	r4, r4, r6
 8008fea:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008fec:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008fee:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008ff0:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008ff2:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8008ff4:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
 8008ff8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008ffc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009000:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8009004:	2403      	movs	r4, #3
 8009006:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8009008:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 800900a:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800900e:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8009010:	d007      	beq.n	8009022 <R3_2_RLDetectionModeSetDuty+0x6a>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009012:	4a07      	ldr	r2, [pc, #28]	; (8009030 <R3_2_RLDetectionModeSetDuty+0x78>)
 8009014:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8009016:	bf14      	ite	ne
 8009018:	2101      	movne	r1, #1
 800901a:	2100      	moveq	r1, #0
}
 800901c:	4608      	mov	r0, r1
 800901e:	bc70      	pop	{r4, r5, r6}
 8009020:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8009022:	2300      	movs	r3, #0
 8009024:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8009028:	bc70      	pop	{r4, r5, r6}
 800902a:	4608      	mov	r0, r1
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	02000070 	.word	0x02000070

08009034 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8009034:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009036:	8b82      	ldrh	r2, [r0, #28]
 8009038:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800903a:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800903c:	4414      	add	r4, r2
 800903e:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8009040:	b14b      	cbz	r3, 8009056 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8009042:	6a05      	ldr	r5, [r0, #32]
 8009044:	2300      	movs	r3, #0
 8009046:	b29a      	uxth	r2, r3
 8009048:	3301      	adds	r3, #1
 800904a:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800904e:	8b01      	ldrh	r1, [r0, #24]
 8009050:	b29a      	uxth	r2, r3
 8009052:	4291      	cmp	r1, r2
 8009054:	d8f7      	bhi.n	8009046 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8009056:	2300      	movs	r3, #0
 8009058:	f364 030f 	bfi	r3, r4, #0, #16
 800905c:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8009060:	2200      	movs	r2, #0
}
 8009062:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8009064:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8009066:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800906a:	4770      	bx	lr

0800906c <RVBS_Init>:
{
 800906c:	b510      	push	{r4, lr}
 800906e:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8009070:	300c      	adds	r0, #12
 8009072:	f7fa f937 	bl	80032e4 <RCM_RegisterRegConv>
 8009076:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800907a:	4620      	mov	r0, r4
 800907c:	f7ff ffda 	bl	8009034 <RVBS_Clear>
}
 8009080:	bd10      	pop	{r4, pc}
 8009082:	bf00      	nop

08009084 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8009084:	88c3      	ldrh	r3, [r0, #6]
 8009086:	8b42      	ldrh	r2, [r0, #26]
 8009088:	429a      	cmp	r2, r3
 800908a:	d305      	bcc.n	8009098 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800908c:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800908e:	4298      	cmp	r0, r3
 8009090:	bf8c      	ite	hi
 8009092:	2004      	movhi	r0, #4
 8009094:	2000      	movls	r0, #0
 8009096:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8009098:	2002      	movs	r0, #2
  }
  return fault;
}
 800909a:	4770      	bx	lr

0800909c <RVBS_CalcAvVbus>:
{
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80090a0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80090a4:	f7fa f9f2 	bl	800348c <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80090a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090ac:	4298      	cmp	r0, r3
 80090ae:	d01c      	beq.n	80090ea <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 80090b0:	6a2f      	ldr	r7, [r5, #32]
 80090b2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80090b6:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80090ba:	8b2e      	ldrh	r6, [r5, #24]
 80090bc:	b1d6      	cbz	r6, 80090f4 <RVBS_CalcAvVbus+0x58>
 80090be:	2300      	movs	r3, #0
    wtemp = 0;
 80090c0:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80090c2:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80090c6:	3301      	adds	r3, #1
 80090c8:	b2d9      	uxtb	r1, r3
 80090ca:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 80090cc:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80090ce:	460b      	mov	r3, r1
 80090d0:	d3f7      	bcc.n	80090c2 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80090d2:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80090d6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80090da:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80090dc:	3e01      	subs	r6, #1
 80090de:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 80090e0:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80090e2:	da09      	bge.n	80090f8 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 80090e4:	3301      	adds	r3, #1
 80090e6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7ff ffca 	bl	8009084 <RVBS_CheckFaultState>
 80090f0:	8128      	strh	r0, [r5, #8]
}
 80090f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 80090f4:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 80090f6:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 80090fe:	4628      	mov	r0, r5
 8009100:	f7ff ffc0 	bl	8009084 <RVBS_CheckFaultState>
 8009104:	8128      	strh	r0, [r5, #8]
}
 8009106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009108 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8009108:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800910a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 800910c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8009110:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8009114:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8009116:	4770      	bx	lr

08009118 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8009118:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop

08009120 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8009120:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop

08009128 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8009128:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop

08009130 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8009130:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8009134:	8a81      	ldrh	r1, [r0, #20]
{
 8009136:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8009138:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800913a:	bfb8      	it	lt
 800913c:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800913e:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009140:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009142:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8009144:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8009146:	429d      	cmp	r5, r3
 8009148:	d817      	bhi.n	800917a <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800914a:	4299      	cmp	r1, r3
 800914c:	bf2c      	ite	cs
 800914e:	2300      	movcs	r3, #0
 8009150:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8009152:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8009156:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8009158:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800915a:	bfb8      	it	lt
 800915c:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800915e:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8009160:	428d      	cmp	r5, r1
 8009162:	d300      	bcc.n	8009166 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8009164:	b15b      	cbz	r3, 800917e <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8009166:	4294      	cmp	r4, r2
 8009168:	d901      	bls.n	800916e <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 800916a:	3201      	adds	r2, #1
 800916c:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800916e:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8009170:	1b10      	subs	r0, r2, r4
 8009172:	bf18      	it	ne
 8009174:	2001      	movne	r0, #1
 8009176:	bc30      	pop	{r4, r5}
 8009178:	4770      	bx	lr
    SpeedError = true;
 800917a:	2301      	movs	r3, #1
 800917c:	e7e9      	b.n	8009152 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800917e:	4294      	cmp	r4, r2
 8009180:	bf88      	it	hi
 8009182:	2200      	movhi	r2, #0
 8009184:	e7f3      	b.n	800916e <SPD_IsMecSpeedReliable+0x3e>
 8009186:	bf00      	nop

08009188 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8009188:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800918c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8009190:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009194:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8009198:	b200      	sxth	r0, r0
 800919a:	4770      	bx	lr

0800919c <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800919c:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800919e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80091a2:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 80091a6:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 80091aa:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80091ac:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80091ae:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 80091b0:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80091b2:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80091b6:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 80091b8:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80091ba:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 80091bc:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80091be:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80091c0:	6183      	str	r3, [r0, #24]
}
 80091c2:	4770      	bx	lr

080091c4 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 80091c4:	6141      	str	r1, [r0, #20]
}
 80091c6:	4770      	bx	lr

080091c8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80091c8:	6940      	ldr	r0, [r0, #20]
 80091ca:	4770      	bx	lr

080091cc <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80091cc:	7803      	ldrb	r3, [r0, #0]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d000      	beq.n	80091d4 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80091d2:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80091d4:	6900      	ldr	r0, [r0, #16]
 80091d6:	2100      	movs	r1, #0
 80091d8:	f7fe bf3e 	b.w	8008058 <PID_SetIntegralTerm>

080091dc <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80091dc:	6840      	ldr	r0, [r0, #4]
 80091de:	2800      	cmp	r0, #0
 80091e0:	bfbc      	itt	lt
 80091e2:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80091e6:	30ff      	addlt	r0, #255	; 0xff
}
 80091e8:	1400      	asrs	r0, r0, #16
 80091ea:	4770      	bx	lr

080091ec <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80091ec:	6880      	ldr	r0, [r0, #8]
 80091ee:	2800      	cmp	r0, #0
 80091f0:	bfbc      	itt	lt
 80091f2:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80091f6:	30ff      	addlt	r0, #255	; 0xff
}
 80091f8:	1400      	asrs	r0, r0, #16
 80091fa:	4770      	bx	lr

080091fc <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80091fc:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80091fe:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009200:	60c3      	str	r3, [r0, #12]
}
 8009202:	4770      	bx	lr

08009204 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009206:	7806      	ldrb	r6, [r0, #0]
{
 8009208:	4604      	mov	r4, r0
 800920a:	460d      	mov	r5, r1
 800920c:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800920e:	b326      	cbz	r6, 800925a <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009210:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009212:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009214:	2800      	cmp	r0, #0
 8009216:	bfbc      	itt	lt
 8009218:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800921c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800921e:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009220:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009224:	dd01      	ble.n	800922a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8009226:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8009228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800922a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800922e:	42a9      	cmp	r1, r5
 8009230:	dcf9      	bgt.n	8009226 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8009232:	8c23      	ldrh	r3, [r4, #32]
 8009234:	429d      	cmp	r5, r3
 8009236:	da03      	bge.n	8009240 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8009238:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800923c:	42ab      	cmp	r3, r5
 800923e:	dbf2      	blt.n	8009226 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8009240:	b9af      	cbnz	r7, 800926e <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8009242:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8009244:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8009246:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8009248:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800924c:	bf0c      	ite	eq
 800924e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8009250:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8009252:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8009254:	61a3      	str	r3, [r4, #24]
 8009256:	2001      	movs	r0, #1
}
 8009258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800925a:	f7ff ffc7 	bl	80091ec <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800925e:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8009260:	42b5      	cmp	r5, r6
 8009262:	dce0      	bgt.n	8009226 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8009264:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8009268:	42ab      	cmp	r3, r5
 800926a:	dcdc      	bgt.n	8009226 <STC_ExecRamp+0x22>
 800926c:	e7e8      	b.n	8009240 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800926e:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8009270:	4a07      	ldr	r2, [pc, #28]	; (8009290 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8009272:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8009274:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800927e:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8009280:	1a2d      	subs	r5, r5, r0
 8009282:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8009284:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8009286:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800928a:	2001      	movs	r0, #1
 800928c:	61a5      	str	r5, [r4, #24]
}
 800928e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009290:	10624dd3 	.word	0x10624dd3

08009294 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8009294:	2300      	movs	r3, #0
 8009296:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009298:	6183      	str	r3, [r0, #24]
}
 800929a:	4770      	bx	lr

0800929c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800929c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800929e:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80092a2:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80092a4:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 80092a6:	2a00      	cmp	r2, #0
 80092a8:	bf08      	it	eq
 80092aa:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 80092ac:	2b01      	cmp	r3, #1
{
 80092ae:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 80092b0:	d90c      	bls.n	80092cc <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80092b2:	6981      	ldr	r1, [r0, #24]
 80092b4:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80092b6:	3b01      	subs	r3, #1
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	60c3      	str	r3, [r0, #12]
 80092bc:	4630      	mov	r0, r6
 80092be:	db09      	blt.n	80092d4 <STC_CalcTorqueReference+0x38>
 80092c0:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 80092c2:	2a01      	cmp	r2, #1
 80092c4:	d00a      	beq.n	80092dc <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80092c6:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80092c8:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80092cc:	d012      	beq.n	80092f4 <STC_CalcTorqueReference+0x58>
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	4630      	mov	r0, r6
 80092d2:	daf5      	bge.n	80092c0 <STC_CalcTorqueReference+0x24>
 80092d4:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 80092d8:	30ff      	adds	r0, #255	; 0xff
 80092da:	e7f1      	b.n	80092c0 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80092dc:	6960      	ldr	r0, [r4, #20]
 80092de:	f7ff ff1f 	bl	8009120 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80092e2:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80092e4:	b201      	sxth	r1, r0
 80092e6:	6920      	ldr	r0, [r4, #16]
 80092e8:	f7fe feee 	bl	80080c8 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80092ec:	0403      	lsls	r3, r0, #16
 80092ee:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80092f4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 80092f8:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 80092fa:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 80092fc:	60c3      	str	r3, [r0, #12]
 80092fe:	e7e0      	b.n	80092c2 <STC_CalcTorqueReference+0x26>

08009300 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8009300:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop

08009308 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009308:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800930c:	2200      	movs	r2, #0
 800930e:	b299      	uxth	r1, r3
 8009310:	f361 020f 	bfi	r2, r1, #0, #16
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	f363 421f 	bfi	r2, r3, #16, #16
{
 800931a:	b082      	sub	sp, #8
}
 800931c:	4610      	mov	r0, r2
 800931e:	b002      	add	sp, #8
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop

08009324 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009324:	b510      	push	{r4, lr}
 8009326:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8009328:	6940      	ldr	r0, [r0, #20]
 800932a:	f7ff fef9 	bl	8009120 <SPD_GetAvrgMecSpeedUnit>
 800932e:	0400      	lsls	r0, r0, #16
 8009330:	6060      	str	r0, [r4, #4]
}
 8009332:	bd10      	pop	{r4, pc}

08009334 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8009334:	2300      	movs	r3, #0
 8009336:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8009338:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop

08009340 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8009340:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009342:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8009344:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8009346:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009348:	430b      	orrs	r3, r1
 800934a:	ea23 0202 	bic.w	r2, r3, r2
 800934e:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8009350:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8009352:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009354:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8009356:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8009358:	d008      	beq.n	800936c <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800935a:	b912      	cbnz	r2, 8009362 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800935c:	4620      	mov	r0, r4
 800935e:	bc30      	pop	{r4, r5}
 8009360:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8009362:	240a      	movs	r4, #10
 8009364:	7004      	strb	r4, [r0, #0]
}
 8009366:	4620      	mov	r0, r4
 8009368:	bc30      	pop	{r4, r5}
 800936a:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800936c:	2a00      	cmp	r2, #0
 800936e:	d1f5      	bne.n	800935c <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8009370:	240b      	movs	r4, #11
 8009372:	7004      	strb	r4, [r0, #0]
}
 8009374:	4620      	mov	r0, r4
 8009376:	bc30      	pop	{r4, r5}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop

0800937c <STM_NextState>:
{
 800937c:	b508      	push	{r3, lr}
 800937e:	7803      	ldrb	r3, [r0, #0]
 8009380:	2b14      	cmp	r3, #20
 8009382:	d810      	bhi.n	80093a6 <STM_NextState+0x2a>
 8009384:	e8df f003 	tbb	[pc, r3]
 8009388:	240d545e 	.word	0x240d545e
 800938c:	390d352e 	.word	0x390d352e
 8009390:	0f0f3f3c 	.word	0x0f0f3f3c
 8009394:	47650b44 	.word	0x47650b44
 8009398:	504d1b4a 	.word	0x504d1b4a
 800939c:	5b          	.byte	0x5b
 800939d:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800939e:	290e      	cmp	r1, #14
 80093a0:	d013      	beq.n	80093ca <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 80093a2:	2907      	cmp	r1, #7
 80093a4:	d011      	beq.n	80093ca <STM_NextState+0x4e>
 80093a6:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d018      	beq.n	80093e0 <STM_NextState+0x64>
 80093ae:	2907      	cmp	r1, #7
 80093b0:	d016      	beq.n	80093e0 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80093b2:	2200      	movs	r2, #0
 80093b4:	2180      	movs	r1, #128	; 0x80
 80093b6:	f7ff ffc3 	bl	8009340 <STM_FaultProcessing>
 80093ba:	2000      	movs	r0, #0
}
 80093bc:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80093be:	2914      	cmp	r1, #20
 80093c0:	d8f1      	bhi.n	80093a6 <STM_NextState+0x2a>
 80093c2:	4b26      	ldr	r3, [pc, #152]	; (800945c <STM_NextState+0xe0>)
 80093c4:	40cb      	lsrs	r3, r1
 80093c6:	07db      	lsls	r3, r3, #31
 80093c8:	d5ed      	bpl.n	80093a6 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 80093ca:	7001      	strb	r1, [r0, #0]
 80093cc:	2001      	movs	r0, #1
}
 80093ce:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80093d0:	2911      	cmp	r1, #17
 80093d2:	d8ee      	bhi.n	80093b2 <STM_NextState+0x36>
 80093d4:	4b22      	ldr	r3, [pc, #136]	; (8009460 <STM_NextState+0xe4>)
 80093d6:	40cb      	lsrs	r3, r1
 80093d8:	07da      	lsls	r2, r3, #31
 80093da:	d4f6      	bmi.n	80093ca <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80093dc:	2903      	cmp	r1, #3
 80093de:	d1e8      	bne.n	80093b2 <STM_NextState+0x36>
 80093e0:	2000      	movs	r0, #0
}
 80093e2:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80093e4:	2913      	cmp	r1, #19
 80093e6:	d0f0      	beq.n	80093ca <STM_NextState+0x4e>
 80093e8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	d1dc      	bne.n	80093aa <STM_NextState+0x2e>
 80093f0:	e7eb      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80093f2:	1f8b      	subs	r3, r1, #6
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d8d6      	bhi.n	80093a6 <STM_NextState+0x2a>
 80093f8:	e7e7      	b.n	80093ca <STM_NextState+0x4e>
      if ( bState == STOP )
 80093fa:	2908      	cmp	r1, #8
 80093fc:	d1d3      	bne.n	80093a6 <STM_NextState+0x2a>
 80093fe:	e7e4      	b.n	80093ca <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8009400:	2909      	cmp	r1, #9
 8009402:	d1d0      	bne.n	80093a6 <STM_NextState+0x2a>
 8009404:	e7e1      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8009406:	2900      	cmp	r1, #0
 8009408:	d0df      	beq.n	80093ca <STM_NextState+0x4e>
 800940a:	290c      	cmp	r1, #12
 800940c:	d1cb      	bne.n	80093a6 <STM_NextState+0x2a>
 800940e:	e7dc      	b.n	80093ca <STM_NextState+0x4e>
      if ( bState == IDLE )
 8009410:	2900      	cmp	r1, #0
 8009412:	d0da      	beq.n	80093ca <STM_NextState+0x4e>
 8009414:	e7c7      	b.n	80093a6 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8009416:	2902      	cmp	r1, #2
 8009418:	d1c3      	bne.n	80093a2 <STM_NextState+0x26>
 800941a:	e7d6      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800941c:	2911      	cmp	r1, #17
 800941e:	d1c0      	bne.n	80093a2 <STM_NextState+0x26>
 8009420:	e7d3      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8009422:	2904      	cmp	r1, #4
 8009424:	d1bd      	bne.n	80093a2 <STM_NextState+0x26>
 8009426:	e7d0      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009428:	1f0b      	subs	r3, r1, #4
 800942a:	2b01      	cmp	r3, #1
 800942c:	d8b9      	bhi.n	80093a2 <STM_NextState+0x26>
 800942e:	e7cc      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8009430:	2907      	cmp	r1, #7
 8009432:	d0ca      	beq.n	80093ca <STM_NextState+0x4e>
 8009434:	f1a1 030d 	sub.w	r3, r1, #13
 8009438:	2b01      	cmp	r3, #1
 800943a:	d8b4      	bhi.n	80093a6 <STM_NextState+0x2a>
 800943c:	e7c5      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800943e:	2912      	cmp	r1, #18
 8009440:	d1af      	bne.n	80093a2 <STM_NextState+0x26>
 8009442:	e7c2      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009444:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8009448:	2b01      	cmp	r3, #1
 800944a:	d0be      	beq.n	80093ca <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 800944c:	290c      	cmp	r1, #12
 800944e:	d1ae      	bne.n	80093ae <STM_NextState+0x32>
 8009450:	e7bb      	b.n	80093ca <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8009452:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8009456:	2b07      	cmp	r3, #7
 8009458:	d1a5      	bne.n	80093a6 <STM_NextState+0x2a>
 800945a:	e7b6      	b.n	80093ca <STM_NextState+0x4e>
 800945c:	00140080 	.word	0x00140080
 8009460:	00030092 	.word	0x00030092

08009464 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8009464:	7800      	ldrb	r0, [r0, #0]
 8009466:	4770      	bx	lr

08009468 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8009468:	7803      	ldrb	r3, [r0, #0]
 800946a:	2b0b      	cmp	r3, #11
 800946c:	d001      	beq.n	8009472 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800946e:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8009470:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8009472:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8009474:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8009476:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8009478:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800947a:	2001      	movs	r0, #1
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop

08009480 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8009480:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8009482:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8009484:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop

0800948c <STSPIN32G4_init>:
extern I2C_HandleTypeDef hi2c3;

void SystemClock_Config(void);

HAL_StatusTypeDef STSPIN32G4_init(STSPIN32G4_HandleTypeDef* hdl)
{
 800948c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800948e:	b089      	sub	sp, #36	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009490:	2400      	movs	r4, #0
 8009492:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8009496:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800949a:	9406      	str	r4, [sp, #24]
  
  if(hdl == NULL)
 800949c:	2800      	cmp	r0, #0
 800949e:	d034      	beq.n	800950a <STSPIN32G4_init+0x7e>
    return HAL_ERROR;
  
  hdl->i2cHdl = &hi2c3;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 80094a0:	4b1b      	ldr	r3, [pc, #108]	; (8009510 <STSPIN32G4_init+0x84>)
  hdl->i2cHdl = &hi2c3;
 80094a2:	491c      	ldr	r1, [pc, #112]	; (8009514 <STSPIN32G4_init+0x88>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80094a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdl->i2cHdl = &hi2c3;
 80094a6:	6001      	str	r1, [r0, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80094a8:	f042 0210 	orr.w	r2, r2, #16
 80094ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80094ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 80094b0:	4819      	ldr	r0, [pc, #100]	; (8009518 <STSPIN32G4_init+0x8c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80094b2:	f003 0310 	and.w	r3, r3, #16
 80094b6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 80094b8:	2201      	movs	r2, #1
 80094ba:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80094bc:	9b01      	ldr	r3, [sp, #4]

  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 80094be:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 80094c0:	f7fb ff00 	bl	80052c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 80094c4:	2701      	movs	r7, #1
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 80094ca:	a902      	add	r1, sp, #8
 80094cc:	4812      	ldr	r0, [pc, #72]	; (8009518 <STSPIN32G4_init+0x8c>)
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 80094ce:	e9cd 2304 	strd	r2, r3, [sp, #16]

  GPIO_InitStruct.Pin = GD_NFAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094d2:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 80094d4:	e9cd 6702 	strd	r6, r7, [sp, #8]
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 80094d8:	f7fb fe00 	bl	80050dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GD_NFAULT_Pin;
 80094dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80094e0:	2300      	movs	r3, #0
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 80094e2:	a902      	add	r1, sp, #8
 80094e4:	480c      	ldr	r0, [pc, #48]	; (8009518 <STSPIN32G4_init+0x8c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094e6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pin = GD_NFAULT_Pin;
 80094e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 80094ec:	f7fb fdf6 	bl	80050dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GD_READY_Pin;
 80094f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80094f4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 80094f6:	4808      	ldr	r0, [pc, #32]	; (8009518 <STSPIN32G4_init+0x8c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094f8:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 80094fa:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GD_READY_Pin;
 80094fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 8009500:	f7fb fdec 	bl	80050dc <HAL_GPIO_Init>

  if(status != HAL_OK)
    return status;
  
  return status;
 8009504:	4620      	mov	r0, r4
}
 8009506:	b009      	add	sp, #36	; 0x24
 8009508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800950a:	2001      	movs	r0, #1
}
 800950c:	b009      	add	sp, #36	; 0x24
 800950e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009510:	40021000 	.word	0x40021000
 8009514:	200005b8 	.word	0x200005b8
 8009518:	48001000 	.word	0x48001000

0800951c <STSPIN32G4_setVCC>:
  
  return status;
}

HAL_StatusTypeDef STSPIN32G4_setVCC(STSPIN32G4_HandleTypeDef* hdl, STSPIN32G4_confVCC vcc)
{
 800951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	b088      	sub	sp, #32
  HAL_StatusTypeDef status;
  uint8_t i2cReg = 0;
 8009522:	2300      	movs	r3, #0
{
 8009524:	9105      	str	r1, [sp, #20]
  uint8_t i2cReg = 0;
 8009526:	f88d 301b 	strb.w	r3, [sp, #27]
  
  if(hdl == NULL)
 800952a:	2800      	cmp	r0, #0
 800952c:	d04d      	beq.n	80095ca <STSPIN32G4_setVCC+0xae>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800952e:	2501      	movs	r5, #1
 8009530:	f04f 0864 	mov.w	r8, #100	; 0x64
 8009534:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009538:	f10d 071b 	add.w	r7, sp, #27
 800953c:	9700      	str	r7, [sp, #0]
 800953e:	4604      	mov	r4, r0
 8009540:	462b      	mov	r3, r5
 8009542:	6800      	ldr	r0, [r0, #0]
 8009544:	462a      	mov	r2, r5
 8009546:	218e      	movs	r1, #142	; 0x8e
 8009548:	f7fc f8ee 	bl	8005728 <HAL_I2C_Mem_Read>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800954c:	ae07      	add	r6, sp, #28
    return HAL_ERROR;
  
  status = STSPIN32G4_readReg(hdl, STSPIN32G4_I2C_POWMNG, &i2cReg);
  
  if(status == HAL_OK)
 800954e:	b1a8      	cbz	r0, 800957c <STSPIN32G4_setVCC+0x60>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009550:	2701      	movs	r7, #1
 8009552:	f04f 0864 	mov.w	r8, #100	; 0x64
 8009556:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 800955a:	25dd      	movs	r5, #221	; 0xdd
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	f88d 501c 	strb.w	r5, [sp, #28]
 8009562:	463b      	mov	r3, r7
 8009564:	220b      	movs	r2, #11
 8009566:	218e      	movs	r1, #142	; 0x8e
 8009568:	f7fb ffb0 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 800956c:	4605      	mov	r5, r0
 800956e:	2800      	cmp	r0, #0
 8009570:	f000 80d3 	beq.w	800971a <STSPIN32G4_setVCC+0x1fe>
  }
  else
  {
    return STSPIN32G4_lockReg(hdl);
  }
}
 8009574:	4628      	mov	r0, r5
 8009576:	b008      	add	sp, #32
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800957c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009580:	9600      	str	r6, [sp, #0]
 8009582:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	f88d c01c 	strb.w	ip, [sp, #28]
 800958c:	462b      	mov	r3, r5
 800958e:	220b      	movs	r2, #11
 8009590:	218e      	movs	r1, #142	; 0x8e
 8009592:	f7fb ff9b 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009596:	2800      	cmp	r0, #0
 8009598:	d1da      	bne.n	8009550 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800959a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800959e:	9600      	str	r6, [sp, #0]
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	462b      	mov	r3, r5
 80095a4:	2280      	movs	r2, #128	; 0x80
 80095a6:	218e      	movs	r1, #142	; 0x8e
 80095a8:	f7fc f8be 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1cf      	bne.n	8009550 <STSPIN32G4_setVCC+0x34>
    if(statusReg.lock == 1)
 80095b0:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dbcb      	blt.n	8009550 <STSPIN32G4_setVCC+0x34>
    switch(vcc.voltage)
 80095b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d8c7      	bhi.n	8009550 <STSPIN32G4_setVCC+0x34>
 80095c0:	e8df f003 	tbb	[pc, r3]
 80095c4:	8b949da4 	.word	0x8b949da4
 80095c8:	08          	.byte	0x08
 80095c9:	00          	.byte	0x00
    return HAL_ERROR;
 80095ca:	2501      	movs	r5, #1
}
 80095cc:	4628      	mov	r0, r5
 80095ce:	b008      	add	sp, #32
 80095d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~STSPIN32G4_I2C_VCC_DIS;
 80095d4:	f89d 501b 	ldrb.w	r5, [sp, #27]
 80095d8:	f025 0520 	bic.w	r5, r5, #32
      i2cReg |= STSPIN32G4_I2C_VCC_VAL_3;
 80095dc:	f045 0503 	orr.w	r5, r5, #3
 80095e0:	f88d 501b 	strb.w	r5, [sp, #27]
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80095e4:	2301      	movs	r3, #1
 80095e6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80095ea:	e9cd 3801 	strd	r3, r8, [sp, #4]
 80095ee:	9600      	str	r6, [sp, #0]
 80095f0:	6820      	ldr	r0, [r4, #0]
 80095f2:	f88d 501c 	strb.w	r5, [sp, #28]
 80095f6:	461a      	mov	r2, r3
 80095f8:	218e      	movs	r1, #142	; 0x8e
 80095fa:	f7fb ff67 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80095fe:	2800      	cmp	r0, #0
 8009600:	d1a6      	bne.n	8009550 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009602:	2301      	movs	r3, #1
 8009604:	e9cd 7300 	strd	r7, r3, [sp]
 8009608:	f8cd 8008 	str.w	r8, [sp, #8]
 800960c:	6820      	ldr	r0, [r4, #0]
 800960e:	2208      	movs	r2, #8
 8009610:	218e      	movs	r1, #142	; 0x8e
 8009612:	f7fc f889 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK) // configuration of nFAULT pin
 8009616:	2800      	cmp	r0, #0
 8009618:	d19a      	bne.n	8009550 <STSPIN32G4_setVCC+0x34>
    if(vcc.useNFAULT)
 800961a:	f89d 3015 	ldrb.w	r3, [sp, #21]
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_FLT;
 800961e:	f89d c01b 	ldrb.w	ip, [sp, #27]
    if(vcc.useNFAULT)
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 8092 	beq.w	800974c <STSPIN32G4_setVCC+0x230>
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_FLT;
 8009628:	f04c 0c01 	orr.w	ip, ip, #1
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800962c:	2501      	movs	r5, #1
 800962e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8009632:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009636:	9600      	str	r6, [sp, #0]
 8009638:	6820      	ldr	r0, [r4, #0]
 800963a:	f88d c01b 	strb.w	ip, [sp, #27]
 800963e:	462b      	mov	r3, r5
 8009640:	2208      	movs	r2, #8
 8009642:	218e      	movs	r1, #142	; 0x8e
 8009644:	f88d c01c 	strb.w	ip, [sp, #28]
 8009648:	f7fb ff40 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 800964c:	2800      	cmp	r0, #0
 800964e:	f47f af7f 	bne.w	8009550 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009652:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009656:	9700      	str	r7, [sp, #0]
 8009658:	6820      	ldr	r0, [r4, #0]
 800965a:	462b      	mov	r3, r5
 800965c:	2207      	movs	r2, #7
 800965e:	218e      	movs	r1, #142	; 0x8e
 8009660:	f7fc f862 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK) // configuration of READY pin
 8009664:	2800      	cmp	r0, #0
 8009666:	f47f af73 	bne.w	8009550 <STSPIN32G4_setVCC+0x34>
    if(vcc.useREADY)
 800966a:	f89d 3016 	ldrb.w	r3, [sp, #22]
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_RDY;
 800966e:	f89d 501b 	ldrb.w	r5, [sp, #27]
    if(vcc.useREADY)
 8009672:	2b00      	cmp	r3, #0
 8009674:	d067      	beq.n	8009746 <STSPIN32G4_setVCC+0x22a>
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_RDY;
 8009676:	f045 0501 	orr.w	r5, r5, #1
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800967a:	2701      	movs	r7, #1
 800967c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8009680:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 8009684:	463b      	mov	r3, r7
 8009686:	6820      	ldr	r0, [r4, #0]
 8009688:	f88d 501b 	strb.w	r5, [sp, #27]
 800968c:	2207      	movs	r2, #7
 800968e:	218e      	movs	r1, #142	; 0x8e
 8009690:	f88d 501c 	strb.w	r5, [sp, #28]
 8009694:	f7fb ff1a 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009698:	4605      	mov	r5, r0
 800969a:	2800      	cmp	r0, #0
 800969c:	f47f af58 	bne.w	8009550 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80096a0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80096a4:	9600      	str	r6, [sp, #0]
 80096a6:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
 80096aa:	6820      	ldr	r0, [r4, #0]
 80096ac:	f88d c01c 	strb.w	ip, [sp, #28]
 80096b0:	463b      	mov	r3, r7
 80096b2:	220b      	movs	r2, #11
 80096b4:	218e      	movs	r1, #142	; 0x8e
 80096b6:	f7fb ff09 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80096ba:	2800      	cmp	r0, #0
 80096bc:	f47f af5a 	bne.w	8009574 <STSPIN32G4_setVCC+0x58>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80096c0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80096c4:	9600      	str	r6, [sp, #0]
 80096c6:	6820      	ldr	r0, [r4, #0]
 80096c8:	463b      	mov	r3, r7
 80096ca:	2280      	movs	r2, #128	; 0x80
 80096cc:	218e      	movs	r1, #142	; 0x8e
 80096ce:	f7fc f82b 	bl	8005728 <HAL_I2C_Mem_Read>
}
 80096d2:	4628      	mov	r0, r5
 80096d4:	b008      	add	sp, #32
 80096d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS|STSPIN32G4_I2C_VCC_VAL_3);
 80096da:	f89d 501b 	ldrb.w	r5, [sp, #27]
 80096de:	f025 0523 	bic.w	r5, r5, #35	; 0x23
      i2cReg |= STSPIN32G4_I2C_VCC_VAL_2;
 80096e2:	f045 0502 	orr.w	r5, r5, #2
 80096e6:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 80096ea:	e77b      	b.n	80095e4 <STSPIN32G4_setVCC+0xc8>
      i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS|STSPIN32G4_I2C_VCC_VAL_3);
 80096ec:	f89d 501b 	ldrb.w	r5, [sp, #27]
 80096f0:	f025 0523 	bic.w	r5, r5, #35	; 0x23
      i2cReg |= STSPIN32G4_I2C_VCC_VAL_1;
 80096f4:	f045 0501 	orr.w	r5, r5, #1
 80096f8:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 80096fc:	e772      	b.n	80095e4 <STSPIN32G4_setVCC+0xc8>
      i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS|STSPIN32G4_I2C_VCC_VAL_3);
 80096fe:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8009702:	f005 05dc 	and.w	r5, r5, #220	; 0xdc
 8009706:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 800970a:	e76b      	b.n	80095e4 <STSPIN32G4_setVCC+0xc8>
      i2cReg |= STSPIN32G4_I2C_VCC_DIS;
 800970c:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8009710:	f045 0520 	orr.w	r5, r5, #32
 8009714:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 8009718:	e764      	b.n	80095e4 <STSPIN32G4_setVCC+0xc8>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800971a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800971e:	9600      	str	r6, [sp, #0]
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	463b      	mov	r3, r7
 8009724:	2280      	movs	r2, #128	; 0x80
 8009726:	218e      	movs	r1, #142	; 0x8e
 8009728:	f7fb fffe 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 800972c:	4605      	mov	r5, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	f47f af20 	bne.w	8009574 <STSPIN32G4_setVCC+0x58>
    if(statusReg.lock != 1)
 8009734:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8009738:	43ed      	mvns	r5, r5
      status = HAL_ERROR;
 800973a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
}
 800973e:	4628      	mov	r0, r5
 8009740:	b008      	add	sp, #32
 8009742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~STSPIN32G4_I2C_VCC_UVLO_RDY;
 8009746:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800974a:	e796      	b.n	800967a <STSPIN32G4_setVCC+0x15e>
      i2cReg &= ~STSPIN32G4_I2C_VCC_UVLO_FLT;
 800974c:	f00c 0cfe 	and.w	ip, ip, #254	; 0xfe
 8009750:	e76c      	b.n	800962c <STSPIN32G4_setVCC+0x110>
 8009752:	bf00      	nop

08009754 <STSPIN32G4_setVDSP>:
  
  return status;
}

HAL_StatusTypeDef STSPIN32G4_setVDSP(STSPIN32G4_HandleTypeDef* hdl, STSPIN32G4_confVDSP vdsp)
{
 8009754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009758:	b088      	sub	sp, #32
  HAL_StatusTypeDef status;
  uint8_t i2cReg = 0;
 800975a:	2300      	movs	r3, #0
{
 800975c:	f8ad 1014 	strh.w	r1, [sp, #20]
  uint8_t i2cReg = 0;
 8009760:	f88d 301b 	strb.w	r3, [sp, #27]
  
  if(hdl == NULL)
 8009764:	2800      	cmp	r0, #0
 8009766:	d051      	beq.n	800980c <STSPIN32G4_setVDSP+0xb8>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009768:	2501      	movs	r5, #1
 800976a:	2764      	movs	r7, #100	; 0x64
 800976c:	e9cd 5701 	strd	r5, r7, [sp, #4]
 8009770:	f10d 021b 	add.w	r2, sp, #27
 8009774:	9200      	str	r2, [sp, #0]
 8009776:	4604      	mov	r4, r0
 8009778:	462b      	mov	r3, r5
 800977a:	6800      	ldr	r0, [r0, #0]
 800977c:	2202      	movs	r2, #2
 800977e:	218e      	movs	r1, #142	; 0x8e
 8009780:	f7fb ffd2 	bl	8005728 <HAL_I2C_Mem_Read>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009784:	ae07      	add	r6, sp, #28
    return HAL_ERROR;	
  
  status = STSPIN32G4_readReg(hdl, STSPIN32G4_I2C_LOGIC, &i2cReg);
  
  if(status == HAL_OK)
 8009786:	b1a8      	cbz	r0, 80097b4 <STSPIN32G4_setVDSP+0x60>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009788:	2701      	movs	r7, #1
 800978a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800978e:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 8009792:	25dd      	movs	r5, #221	; 0xdd
 8009794:	6820      	ldr	r0, [r4, #0]
 8009796:	f88d 501c 	strb.w	r5, [sp, #28]
 800979a:	463b      	mov	r3, r7
 800979c:	220b      	movs	r2, #11
 800979e:	218e      	movs	r1, #142	; 0x8e
 80097a0:	f7fb fe94 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80097a4:	4605      	mov	r5, r0
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f000 8096 	beq.w	80098d8 <STSPIN32G4_setVDSP+0x184>
  }
  else
  {
    return STSPIN32G4_lockReg(hdl);
  }
}
 80097ac:	4628      	mov	r0, r5
 80097ae:	b008      	add	sp, #32
 80097b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80097b4:	e9cd 5701 	strd	r5, r7, [sp, #4]
 80097b8:	9600      	str	r6, [sp, #0]
 80097ba:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	f88d c01c 	strb.w	ip, [sp, #28]
 80097c4:	462b      	mov	r3, r5
 80097c6:	220b      	movs	r2, #11
 80097c8:	218e      	movs	r1, #142	; 0x8e
 80097ca:	f7fb fe7f 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d1da      	bne.n	8009788 <STSPIN32G4_setVDSP+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80097d2:	e9cd 5701 	strd	r5, r7, [sp, #4]
 80097d6:	9600      	str	r6, [sp, #0]
 80097d8:	6820      	ldr	r0, [r4, #0]
 80097da:	462b      	mov	r3, r5
 80097dc:	2280      	movs	r2, #128	; 0x80
 80097de:	218e      	movs	r1, #142	; 0x8e
 80097e0:	f7fb ffa2 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d1cf      	bne.n	8009788 <STSPIN32G4_setVDSP+0x34>
    if(statusReg.lock == 1)
 80097e8:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dbcb      	blt.n	8009788 <STSPIN32G4_setVDSP+0x34>
    i2cReg &= ~STSPIN32G4_I2C_VDS_P_DEG_3;
 80097f0:	f89d 501b 	ldrb.w	r5, [sp, #27]
 80097f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80097f8:	f005 05f3 	and.w	r5, r5, #243	; 0xf3
 80097fc:	f88d 501b 	strb.w	r5, [sp, #27]
    switch(vdsp.deglitchTime)
 8009800:	2b03      	cmp	r3, #3
 8009802:	d8c1      	bhi.n	8009788 <STSPIN32G4_setVDSP+0x34>
 8009804:	e8df f003 	tbb	[pc, r3]
 8009808:	075e630b 	.word	0x075e630b
    return HAL_ERROR;	
 800980c:	2501      	movs	r5, #1
}
 800980e:	4628      	mov	r0, r5
 8009810:	b008      	add	sp, #32
 8009812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_3;
 8009816:	f045 050c 	orr.w	r5, r5, #12
 800981a:	f88d 501b 	strb.w	r5, [sp, #27]
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800981e:	2701      	movs	r7, #1
 8009820:	f04f 0864 	mov.w	r8, #100	; 0x64
 8009824:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 8009828:	463b      	mov	r3, r7
 800982a:	6820      	ldr	r0, [r4, #0]
 800982c:	f88d 501c 	strb.w	r5, [sp, #28]
 8009830:	2202      	movs	r2, #2
 8009832:	218e      	movs	r1, #142	; 0x8e
 8009834:	f7fb fe4a 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009838:	2800      	cmp	r0, #0
 800983a:	d1a5      	bne.n	8009788 <STSPIN32G4_setVDSP+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800983c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009840:	f10d 031b 	add.w	r3, sp, #27
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	463b      	mov	r3, r7
 800984a:	2208      	movs	r2, #8
 800984c:	218e      	movs	r1, #142	; 0x8e
 800984e:	f7fb ff6b 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK) // configure nFault signaling
 8009852:	2800      	cmp	r0, #0
 8009854:	d198      	bne.n	8009788 <STSPIN32G4_setVDSP+0x34>
    if(vdsp.useNFAULT)
 8009856:	f89d 3015 	ldrb.w	r3, [sp, #21]
      i2cReg |= STSPIN32G4_I2C_VDS_P_FLT;
 800985a:	f89d 501b 	ldrb.w	r5, [sp, #27]
    if(vdsp.useNFAULT)
 800985e:	2b00      	cmp	r3, #0
 8009860:	d050      	beq.n	8009904 <STSPIN32G4_setVDSP+0x1b0>
      i2cReg |= STSPIN32G4_I2C_VDS_P_FLT;
 8009862:	f045 0504 	orr.w	r5, r5, #4
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009866:	2701      	movs	r7, #1
 8009868:	f04f 0864 	mov.w	r8, #100	; 0x64
 800986c:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 8009870:	463b      	mov	r3, r7
 8009872:	6820      	ldr	r0, [r4, #0]
 8009874:	f88d 501b 	strb.w	r5, [sp, #27]
 8009878:	2208      	movs	r2, #8
 800987a:	218e      	movs	r1, #142	; 0x8e
 800987c:	f88d 501c 	strb.w	r5, [sp, #28]
 8009880:	f7fb fe24 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009884:	4605      	mov	r5, r0
 8009886:	2800      	cmp	r0, #0
 8009888:	f47f af7e 	bne.w	8009788 <STSPIN32G4_setVDSP+0x34>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800988c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009890:	9600      	str	r6, [sp, #0]
 8009892:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
 8009896:	6820      	ldr	r0, [r4, #0]
 8009898:	f88d c01c 	strb.w	ip, [sp, #28]
 800989c:	463b      	mov	r3, r7
 800989e:	220b      	movs	r2, #11
 80098a0:	218e      	movs	r1, #142	; 0x8e
 80098a2:	f7fb fe13 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d180      	bne.n	80097ac <STSPIN32G4_setVDSP+0x58>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80098aa:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80098ae:	9600      	str	r6, [sp, #0]
 80098b0:	6820      	ldr	r0, [r4, #0]
 80098b2:	463b      	mov	r3, r7
 80098b4:	2280      	movs	r2, #128	; 0x80
 80098b6:	218e      	movs	r1, #142	; 0x8e
 80098b8:	f7fb ff36 	bl	8005728 <HAL_I2C_Mem_Read>
}
 80098bc:	4628      	mov	r0, r5
 80098be:	b008      	add	sp, #32
 80098c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_2;
 80098c4:	f045 0508 	orr.w	r5, r5, #8
 80098c8:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 80098cc:	e7a7      	b.n	800981e <STSPIN32G4_setVDSP+0xca>
      i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_1;
 80098ce:	f045 0504 	orr.w	r5, r5, #4
 80098d2:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 80098d6:	e7a2      	b.n	800981e <STSPIN32G4_setVDSP+0xca>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80098d8:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80098dc:	9600      	str	r6, [sp, #0]
 80098de:	6820      	ldr	r0, [r4, #0]
 80098e0:	463b      	mov	r3, r7
 80098e2:	2280      	movs	r2, #128	; 0x80
 80098e4:	218e      	movs	r1, #142	; 0x8e
 80098e6:	f7fb ff1f 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80098ea:	4605      	mov	r5, r0
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f47f af5d 	bne.w	80097ac <STSPIN32G4_setVDSP+0x58>
    if(statusReg.lock != 1)
 80098f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80098f6:	43ed      	mvns	r5, r5
      status = HAL_ERROR;
 80098f8:	f3c5 15c0 	ubfx	r5, r5, #7, #1
}
 80098fc:	4628      	mov	r0, r5
 80098fe:	b008      	add	sp, #32
 8009900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~STSPIN32G4_I2C_VDS_P_FLT;
 8009904:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8009908:	e7ad      	b.n	8009866 <STSPIN32G4_setVDSP+0x112>
 800990a:	bf00      	nop

0800990c <STSPIN32G4_clearFaults>:

HAL_StatusTypeDef STSPIN32G4_clearFaults(STSPIN32G4_HandleTypeDef* hdl)
{
  uint8_t i2cReg = 0xff;	
  
  if(hdl == NULL)
 800990c:	b190      	cbz	r0, 8009934 <STSPIN32G4_clearFaults+0x28>
{
 800990e:	b510      	push	{r4, lr}
 8009910:	b086      	sub	sp, #24
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009912:	2301      	movs	r3, #1
 8009914:	f10d 0217 	add.w	r2, sp, #23
 8009918:	2164      	movs	r1, #100	; 0x64
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	9200      	str	r2, [sp, #0]
 800991e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009922:	24ff      	movs	r4, #255	; 0xff
 8009924:	2209      	movs	r2, #9
 8009926:	218e      	movs	r1, #142	; 0x8e
 8009928:	f88d 4017 	strb.w	r4, [sp, #23]
 800992c:	f7fb fdce 	bl	80054cc <HAL_I2C_Mem_Write>
    return HAL_ERROR;
  
  return STSPIN32G4_writeReg(hdl, STSPIN32G4_I2C_CLEAR, i2cReg);
}
 8009930:	b006      	add	sp, #24
 8009932:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009934:	2001      	movs	r0, #1
}
 8009936:	4770      	bx	lr

08009938 <STSPIN32G4_reset>:

HAL_StatusTypeDef STSPIN32G4_reset(STSPIN32G4_HandleTypeDef* hdl)
{
 8009938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993c:	b086      	sub	sp, #24
  HAL_StatusTypeDef status;
  uint8_t i2cReg = 0xff;
  
  if(hdl == NULL)
 800993e:	2800      	cmp	r0, #0
 8009940:	d051      	beq.n	80099e6 <STSPIN32G4_reset+0xae>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009942:	2701      	movs	r7, #1
 8009944:	f04f 0864 	mov.w	r8, #100	; 0x64
 8009948:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800994c:	ad05      	add	r5, sp, #20
 800994e:	9500      	str	r5, [sp, #0]
 8009950:	242d      	movs	r4, #45	; 0x2d
 8009952:	4606      	mov	r6, r0
 8009954:	463b      	mov	r3, r7
 8009956:	6800      	ldr	r0, [r0, #0]
 8009958:	f88d 4014 	strb.w	r4, [sp, #20]
 800995c:	220b      	movs	r2, #11
 800995e:	218e      	movs	r1, #142	; 0x8e
 8009960:	f7fb fdb4 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009964:	4604      	mov	r4, r0
 8009966:	b118      	cbz	r0, 8009970 <STSPIN32G4_reset+0x38>
  
  if(status == HAL_OK)
    STSPIN32G4_lockReg(hdl);
  
  return status;
}
 8009968:	4620      	mov	r0, r4
 800996a:	b006      	add	sp, #24
 800996c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009970:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009974:	9500      	str	r5, [sp, #0]
 8009976:	6830      	ldr	r0, [r6, #0]
 8009978:	463b      	mov	r3, r7
 800997a:	2280      	movs	r2, #128	; 0x80
 800997c:	218e      	movs	r1, #142	; 0x8e
 800997e:	f7fb fed3 	bl	8005728 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 8009982:	4604      	mov	r4, r0
 8009984:	2800      	cmp	r0, #0
 8009986:	d1ef      	bne.n	8009968 <STSPIN32G4_reset+0x30>
    if(statusReg.lock == 1)
 8009988:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	db2a      	blt.n	80099e6 <STSPIN32G4_reset+0xae>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009990:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009994:	9500      	str	r5, [sp, #0]
 8009996:	24ff      	movs	r4, #255	; 0xff
 8009998:	6830      	ldr	r0, [r6, #0]
 800999a:	f88d 4014 	strb.w	r4, [sp, #20]
 800999e:	463b      	mov	r3, r7
 80099a0:	220c      	movs	r2, #12
 80099a2:	218e      	movs	r1, #142	; 0x8e
 80099a4:	f7fb fd92 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80099a8:	4604      	mov	r4, r0
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d1dc      	bne.n	8009968 <STSPIN32G4_reset+0x30>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80099ae:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80099b2:	9500      	str	r5, [sp, #0]
 80099b4:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
 80099b8:	6830      	ldr	r0, [r6, #0]
 80099ba:	f88d c014 	strb.w	ip, [sp, #20]
 80099be:	463b      	mov	r3, r7
 80099c0:	220b      	movs	r2, #11
 80099c2:	218e      	movs	r1, #142	; 0x8e
 80099c4:	f7fb fd82 	bl	80054cc <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d1cd      	bne.n	8009968 <STSPIN32G4_reset+0x30>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80099cc:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80099d0:	9500      	str	r5, [sp, #0]
 80099d2:	6830      	ldr	r0, [r6, #0]
 80099d4:	463b      	mov	r3, r7
 80099d6:	2280      	movs	r2, #128	; 0x80
 80099d8:	218e      	movs	r1, #142	; 0x8e
 80099da:	f7fb fea5 	bl	8005728 <HAL_I2C_Mem_Read>
}
 80099de:	4620      	mov	r0, r4
 80099e0:	b006      	add	sp, #24
 80099e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80099e6:	2401      	movs	r4, #1
}
 80099e8:	4620      	mov	r0, r4
 80099ea:	b006      	add	sp, #24
 80099ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080099f0 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 80099f0:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80099f2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 80099f4:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 80099f6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 80099fa:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 80099fc:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 80099fe:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8009a00:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8009a02:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8009a04:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8009a06:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop

08009a0c <VSS_Init>:
{
 8009a0c:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8009a0e:	f7ff ffef 	bl	80099f0 <VSS_Clear>
}
 8009a12:	bd08      	pop	{r3, pc}

08009a14 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8009a14:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8009a16:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8009a18:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8009a1a:	fb91 f1f3 	sdiv	r1, r1, r3
 8009a1e:	80c1      	strh	r1, [r0, #6]
}
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop

08009a24 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8009a24:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8009a26:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8009a2a:	b984      	cbnz	r4, 8009a4e <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 8009a2c:	b98a      	cbnz	r2, 8009a52 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009a2e:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8009a30:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009a32:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8009a34:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009a36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a3a:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8009a3c:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009a40:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009a44:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 8009a48:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009a4a:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009a4c:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8009a4e:	bc70      	pop	{r4, r5, r6}
 8009a50:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8009a52:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8009a54:	4d11      	ldr	r5, [pc, #68]	; (8009a9c <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009a56:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8009a58:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009a5c:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009a5e:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8009a62:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009a66:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8009a68:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009a6a:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009a6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009a72:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009a74:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8009a78:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8009a7a:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009a7e:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009a82:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8009a84:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009a86:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009a88:	0412      	lsls	r2, r2, #16
 8009a8a:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8009a8e:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009a92:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8009a96:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8009a98:	bc70      	pop	{r4, r5, r6}
 8009a9a:	4770      	bx	lr
 8009a9c:	10624dd3 	.word	0x10624dd3

08009aa0 <__libc_init_array>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	4d0d      	ldr	r5, [pc, #52]	; (8009ad8 <__libc_init_array+0x38>)
 8009aa4:	4c0d      	ldr	r4, [pc, #52]	; (8009adc <__libc_init_array+0x3c>)
 8009aa6:	1b64      	subs	r4, r4, r5
 8009aa8:	10a4      	asrs	r4, r4, #2
 8009aaa:	2600      	movs	r6, #0
 8009aac:	42a6      	cmp	r6, r4
 8009aae:	d109      	bne.n	8009ac4 <__libc_init_array+0x24>
 8009ab0:	4d0b      	ldr	r5, [pc, #44]	; (8009ae0 <__libc_init_array+0x40>)
 8009ab2:	4c0c      	ldr	r4, [pc, #48]	; (8009ae4 <__libc_init_array+0x44>)
 8009ab4:	f000 f82e 	bl	8009b14 <_init>
 8009ab8:	1b64      	subs	r4, r4, r5
 8009aba:	10a4      	asrs	r4, r4, #2
 8009abc:	2600      	movs	r6, #0
 8009abe:	42a6      	cmp	r6, r4
 8009ac0:	d105      	bne.n	8009ace <__libc_init_array+0x2e>
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac8:	4798      	blx	r3
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7ee      	b.n	8009aac <__libc_init_array+0xc>
 8009ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad2:	4798      	blx	r3
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	e7f2      	b.n	8009abe <__libc_init_array+0x1e>
 8009ad8:	08009f8c 	.word	0x08009f8c
 8009adc:	08009f8c 	.word	0x08009f8c
 8009ae0:	08009f8c 	.word	0x08009f8c
 8009ae4:	08009f90 	.word	0x08009f90

08009ae8 <memcpy>:
 8009ae8:	440a      	add	r2, r1
 8009aea:	4291      	cmp	r1, r2
 8009aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8009af0:	d100      	bne.n	8009af4 <memcpy+0xc>
 8009af2:	4770      	bx	lr
 8009af4:	b510      	push	{r4, lr}
 8009af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009afe:	4291      	cmp	r1, r2
 8009b00:	d1f9      	bne.n	8009af6 <memcpy+0xe>
 8009b02:	bd10      	pop	{r4, pc}

08009b04 <memset>:
 8009b04:	4402      	add	r2, r0
 8009b06:	4603      	mov	r3, r0
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d100      	bne.n	8009b0e <memset+0xa>
 8009b0c:	4770      	bx	lr
 8009b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b12:	e7f9      	b.n	8009b08 <memset+0x4>

08009b14 <_init>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	bf00      	nop
 8009b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	4770      	bx	lr

08009b20 <_fini>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	bf00      	nop
 8009b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b26:	bc08      	pop	{r3}
 8009b28:	469e      	mov	lr, r3
 8009b2a:	4770      	bx	lr
